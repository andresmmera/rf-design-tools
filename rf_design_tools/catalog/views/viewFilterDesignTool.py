# Copyright 2020-2021 Andrés Martínez Mera - andresmartinezmera@gmail.com
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.http import HttpResponse
from django.template import loader

from catalog.models import Tool
from catalog.forms import FILTER_STRUCTURES, RESPONSE_TYPE, MASK_TYPE, ELLIPTIC_TYPE, DC_TYPE, FilterDesignForm

# Bokeh
from django.shortcuts import render
from bokeh.plotting import figure, output_file, show 
from bokeh.embed import components
from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.models import Legend, LegendItem
from bokeh.models import Arrow, NormalHead
from bokeh.models import ColumnDataSource, LabelSet
from bokeh.models import LinearAxis, Range1d


from django.views.decorators.csrf import csrf_exempt

from .FilterDesign.FilterDesigner import *
from .SPAR.LadderAnalysis import *

from django.http import JsonResponse

import numpy as np

import matplotlib
matplotlib.use('Agg') # Set the backend here

# Import modules for file download
import mimetypes
import os
from django.http.response import HttpResponse

schematic_drawing = None # Global variable storing the schematic. By doing this, the schematic file is generated just when the user clicks download
design_global = None

def FilterDesignDocs(request):
    return render(request, 'FilterDesign/docs/FilterDesignTool.html')


@csrf_exempt
def FilterDesignToolView(request):
    context = {} 
    if request.method == "POST":
        form_filter_design = FilterDesignForm(request.POST)
        print(form_filter_design.errors)
        if form_filter_design.is_valid():
            #Catch the input data
            index = request.POST.get('Structure', None)
            Structure = FILTER_STRUCTURES[int(index)-1][1]
            print("Structure:", Structure)
            
            index = request.POST.get('DC_Type', None)
            DC_Type = DC_TYPE[int(index)-1][1]
            print("DC_Type:", DC_Type)

            index = request.POST.get('FirstElement', None)
            FirstElement = index
            print("FirstElement:", FirstElement)
            
            index = request.POST.get('Response', None)
            Response = RESPONSE_TYPE[int(index)-1][1]
            print("Response Type:", Response)
            
            index = request.POST.get('EllipticType', None)
            EllipticType = ELLIPTIC_TYPE[int(index)-1][1]
            print("Elliptic Type:", EllipticType)
            
            Ripple = request.POST.get('Ripple', None)
            print("Ripple: ", Ripple, " dB")
            
            a_s = request.POST.get('a_s', None)
            print("a_s: ", a_s, " dB")
            
            PhaseError = request.POST.get('PhaseError', None)
            print("PhaseError: ", PhaseError, " deg")
            
            index = request.POST.get('Mask', None)
            Mask = MASK_TYPE[int(index)-1][1]
            print("Mask: ", Mask)
            
            N = request.POST.get('Order', None)
            print("Order: ", N)
            
            Cutoff = request.POST.get('Cutoff', None)
            print("Cutoff: ", Cutoff, " MHz")
            
            f1 = request.POST.get('f1', None)
            print("f1: ", f1, " MHz")
            
            f2 = request.POST.get('f2', None)
            print("f2: ", f2, " MHz")
            
            ZS = request.POST.get('ZS', None)
            print("ZS = ", ZS)
            
            ZL = request.POST.get('ZL', None)
            print("ZL = ", ZL)
            
            f_start = request.POST.get('f_start', None)
            print(f_start)
            
            f_stop = request.POST.get('f_stop', None)
            print(f_stop)
            
            n_points = request.POST.get('n_points', None)
            print(n_points)

            Xres = request.POST.getlist('Xres[]')
            print(Xres)

            # Filter Design
            designer = Filter()
            designer.Structure = Structure
            designer.DC_Type = DC_Type
            designer.FirstElement = int(FirstElement)
            designer.Response = Response
            designer.EllipticType = EllipticType
            designer.Ripple = float(Ripple)
            designer.a_s = float(a_s)
            designer.PhaseError = float(PhaseError)
            designer.Mask = Mask
            designer.N = int(N)
            designer.fc = float(Cutoff)
            designer.f1 = float(f1)
            designer.f2 = float(f2)
            designer.ZS = float(ZS)
            designer.ZL = float(ZL)
            designer.f_start = float(f_start)
            designer.f_stop = float(f_stop)
            designer.n_points = int(n_points)
            designer.Xres = Xres
            
            Schematic, Network_Type, comp_val = designer.synthesize()
            svgcode = Schematic.get_imagedata('svg')
            
            # The schematic drawing is stored in a global variable so that the file is generated when the user clicks the download button
            global schematic_drawing
            schematic_drawing = Schematic

            # The design object is stored as a local variable so that the Qucs schematic is generated just when the user clicks the download button
            global design_global
            design_global = designer


            # Calculate S-parameters
            [S11, S21] = NetworkResponse(Network_Type, comp_val)
            freq = Network_Type['freq']
            phase = (180/np.pi)*np.angle(S21)
            gd = -(1e9)*np.diff(np.angle(S21))/(2*np.pi*freq[:-1]); # Group delay [ns]

            S11 = 20*np.log10(np.abs(S11))
            S21 = 20*np.log10(np.abs(S21))


            
            # Response
            title = Response + " " + Mask + " Filter, N = "+ str(N) + ", Ripple = " + str(Ripple) + " dB" 

            # Get warnings
            warning = designer.warning

            response_data = {}
            
            # Prepare objects for the html 
            response_data['freq'] =(freq*1e-6).tolist()
            response_data['S11'] = S11.tolist()
            response_data['S21'] = S21.tolist()
            response_data['title'] = title

            response_data['warning'] = warning
            response_data['svg'] = svgcode.decode('utf-8')
            context['form_filter_design'] = form_filter_design
            return JsonResponse(response_data)

    else:
        # Generate default data
        form_filter_design = FilterDesignForm()
        # Filter Design
        Response = "Chebyshev"
        Mask = "Lowpass"
        fc = 500
        designer = Filter()
        designer.Structure = "Conventional LC"
        designer.DC_Type = "C-coupled shunt resonators"
        designer.Response = Response
        designer.FirstElement = 2 # First series
        designer.Ripple = 0.01
        designer.Mask = Mask
        designer.N = 5
        designer.fc = fc
        designer.ZS = 50
        designer.ZL = 50
        designer.f_start = 50
        designer.f_stop = 1000
        designer.n_points = 201
        designer.Xres = []

        # Calculate the lowpass prototype coefficients
        designer.getLowpassCoefficients()
        
        # Filter response
        Schematic, Network_Type, comp_val = designer.synthesize()

        # Drawing
        svgcode = Schematic.get_imagedata('svg')
        schematic_drawing = Schematic # The schematic drawing is stored in a global variable so that the file is generated when the user clicks the download button
        design_global = designer # The design object is stored as a local variable so that the Qucs schematic is generated just when the user clicks the download button


        # Calculate S-parameters
        [S11, S21] = NetworkResponse(Network_Type, comp_val)
        freq = Network_Type['freq']
        phase = np.angle(S21) # rad/s
        gd = -(1e9)*np.diff(np.angle(S21))/(2*np.pi*freq[:-1]); # Group delay [ns]
        S11 = 20*np.log10(np.abs(S11))
        S21 = 20*np.log10(np.abs(S21))

        context['freq'] = freq
        context['S11'] = S11
        context['S21'] = S21
        
        # Response
        title = Response + " Bandpass Filter, N = "+ str(designer.N) + ", Ripple = " + str(designer.Ripple) + " dB" 
        ResponsePlot = figure(plot_width=800, plot_height=400, title=title, y_range=[-50, 0])
        ResponsePlot.line(freq, S11, line_width=2, color="navy", legend_label="S11")
        ResponsePlot.line(freq, S21, line_width=2, color="red", legend_label="S21")
        ResponsePlot.xaxis.axis_label = 'Frequency (MHz)';
        ResponsePlot.yaxis.axis_label = 'Response (dB)';
        ResponsePlot.legend.location = 'bottom_right';

        # Group delay
        title = "Group Delay " + Response + " Bandpass Filter, N = "+ str(designer.N) + ", Ripple = " + str(designer.Ripple) + " dB" 
        GroupDelayPlot = figure(plot_width=800, plot_height=400, title=title, y_range=[0, max(gd)+10])
        GroupDelayPlot.line(freq, gd, line_width=2, color="navy", legend_label="Group Delay")
        GroupDelayPlot.xaxis.axis_label = 'Frequency (MHz)';
        GroupDelayPlot.yaxis.axis_label = 'Group Delay (ns)';
        GroupDelayPlot.legend.location = 'bottom_right';

        GroupDelayPlot.extra_y_ranges = {"phase": Range1d(start=-180, end=180)}
        GroupDelayPlot.add_layout(LinearAxis(y_range_name="phase", axis_label="Phase (deg)"), 'right')
        GroupDelayPlot.line(x=freq[:-1], y=phase[:-1], legend_label='Phase', 
        y_range_name="phase", color="green")




        # Prepare objets for the html 
        scriptResponse, divResponse = components(ResponsePlot)
        context['scriptResponse'] = scriptResponse
        context['divResponse'] = divResponse

        scriptGroupDelay, divGroupDelay = components(GroupDelayPlot)
        context['scriptGroupDelay'] = scriptGroupDelay
        context['divGroupDelay'] = divGroupDelay

        context['svg'] = svgcode # Schematic

    context['form_filter_design']= form_filter_design


    return render(request, 'FilterDesign/tool/FilterDesignTool.html', context)

# Source: https://linuxhint.com/download-the-file-in-django/
@csrf_exempt
def QucsFilterDownload(request):
    # Create the Qucs schematic from the designer specs
    global design_global
    QucsSchematic = design_global.getQucsSchematic()

    # Save schematic to file
    filename = "QucsSchematic-export.sch"
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    filepath = BASE_DIR + '/templates/download/' + filename
    schematic_name = filepath
    schematic_file = open(schematic_name, "w")
    n = schematic_file.write(QucsSchematic)
    schematic_file.close()

    # Open the file for reading content
    path = open(filepath, 'r')
    # Set the mime type
    mime_type, _ = mimetypes.guess_type(filepath)
    # Set the return value of the HttpResponse
    response = HttpResponse(path, content_type=mime_type)
    # Set the HTTP header for sending to browser
    response['Content-Disposition'] = "attachment; filename=%s" % filename
    # Return the response value
    return response

# Source: https://linuxhint.com/download-the-file-in-django/
@csrf_exempt
def SchematicSVGDownload(request):
    global schematic_drawing # Take the schematic from the global button
    # Generate the SVG file
    filename = 'schematic.svg'
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    filepath = BASE_DIR + '/templates/download/' + filename
    schematic_drawing.save(filepath)

    # Prepare to download
    ########################################################
    # Define Django project base directory
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    # Define text file name
    print("Location of the schematic:", BASE_DIR)
    filename = 'schematic.svg'
    # Define the full file path
    filepath = BASE_DIR + '/templates/download/' + filename
    # Open the file for reading content
    path = open(filepath, 'r')
    # Set the mime type
    mime_type, _ = mimetypes.guess_type(filepath)
    # Set the return value of the HttpResponse
    response = HttpResponse(path, content_type=mime_type)
    # Set the HTTP header for sending to browser
    response['Content-Disposition'] = "attachment; filename=%s" % filename
    # Return the response value
    return response
    

def NetworkResponse(network_type, comp_val):
    I = 1j
    pi = np.pi
    ZS = comp_val['ZS']
    ZL = comp_val['ZL']
    freq = network_type['freq'];

    if(network_type['Network'] == 'Canonical'):
        if(network_type['Mask'] == 'Lowpass'):
            if (network_type['First_Element'] == 'Series'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    S11 = (2*I*pi*L1*freq + ZL - ZS)/(2*I*pi*L1*freq + ZL + ZS)
                    S21 = 2*np.sqrt(ZL*ZS)/(2*I*pi*L1*freq + ZL + ZS)
                elif(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    S11 = (4*pi**2*C1*L1*ZL*freq**2 + (2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL + ZS)/(4*pi**2*C1*L1*ZL*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)
                    S21 = -2*ZL*ZS/((4*pi**2*C1*L1*ZL*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
                elif(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    S11 = (8*I*pi**3*C1*L1*L2*freq**3 + 4*(pi**2*C1*L1*ZL - pi**2*C1*L2*ZS)*freq**2 + (2*I*pi*C1*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2)*freq - ZL + ZS)/(8*I*pi**3*C1*L1*L2*freq**3 + 4*(pi**2*C1*L1*ZL + pi**2*C1*L2*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2)*freq - ZL - ZS)
                    S21 = -2*ZL*ZS/((8*I*pi**3*C1*L1*L2*freq**3 + 4*(pi**2*C1*L1*ZL + pi**2*C1*L2*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 4):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    S11 = (16*pi**4*C1*C2*L1*L2*ZL*freq**4 + (8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 + 4*(pi**2*C1*L2*ZS - (pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL - ZS)/(16*pi**4*C1*C2*L1*L2*ZL*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 - 4*(pi**2*C1*L2*ZS + (pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((16*pi**4*C1*C2*L1*L2*ZL*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 - 4*(pi**2*C1*L2*ZS + (pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 5):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    
                    S11 = (32*I*pi**5*C1*C2*L1*L2*L3*freq**5 + 16*(pi**4*C1*C2*L1*L2*ZL - pi**4*C1*C2*L2*L3*ZS)*freq**4 + (8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2 + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3)*freq**3 - 4*((pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL - (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3)*freq + ZL - ZS)/(32*I*pi**5*C1*C2*L1*L2*L3*freq**5 + 16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L2*L3*ZS)*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2 + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3)*freq**3 - 4*((pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((32*I*pi**5*C1*C2*L1*L2*L3*freq**5 + 16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L2*L3*ZS)*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2 + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3)*freq**3 - 4*((pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 6):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    
                    S11 = (64*pi**6*C1*C2*C3*L1*L2*L3*ZL*freq**6 + (32*I*pi**5*C1*C2*C3*L2*L3*ZL*ZS - 32*I*pi**5*C1*C2*L1*L2*L3)*freq**5 + 16*(pi**4*C1*C2*L2*L3*ZS - ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3)*freq**3 + 4*((pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL - (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL + ZS)/(64*pi**6*C1*C2*C3*L1*L2*L3*ZL*freq**6 + (-32*I*pi**5*C1*C2*C3*L2*L3*ZL*ZS - 32*I*pi**5*C1*C2*L1*L2*L3)*freq**5 - 16*(pi**4*C1*C2*L2*L3*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3)*freq**3 + 4*((pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((64*pi**6*C1*C2*C3*L1*L2*L3*ZL*freq**6 + (-32*I*pi**5*C1*C2*C3*L2*L3*ZL*ZS - 32*I*pi**5*C1*C2*L1*L2*L3)*freq**5 - 16*(pi**4*C1*C2*L2*L3*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3)*freq**3 + 4*((pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 7):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    S11 = (128*I*pi**7*C1*C2*C3*L1*L2*L3*L4*freq**7 + 64*(pi**6*C1*C2*C3*L1*L2*L3*ZL - pi**6*C1*C2*C3*L2*L3*L4*ZS)*freq**6 + (32*I*pi**5*C1*C2*C3*L2*L3*ZL*ZS - 32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + (-32*I*pi**5*C2*C3*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L3)*L4)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL - (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3 + (8*I*pi**3*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L4)*freq**3 + 4*((pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL - (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4)*freq - ZL + ZS)/(128*I*pi**7*C1*C2*C3*L1*L2*L3*L4*freq**7 + 64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L2*L3*L4*ZS)*freq**6 + (-32*I*pi**5*C1*C2*C3*L2*L3*ZL*ZS - 32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + (-32*I*pi**5*C2*C3*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L3)*L4)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3 + (8*I*pi**3*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L4)*freq**3 + 4*((pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((128*I*pi**7*C1*C2*C3*L1*L2*L3*L4*freq**7 + 64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L2*L3*L4*ZS)*freq**6 + (-32*I*pi**5*C1*C2*C3*L2*L3*ZL*ZS - 32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + (-32*I*pi**5*C2*C3*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L3)*L4)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3 + (8*I*pi**3*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L4)*freq**3 + 4*((pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 8):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']

                    S11 = (256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*freq**8 + (128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4)*freq**7 + 64*(pi**6*C1*C2*C3*L2*L3*L4*ZS - ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL)*freq**6 + (32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L2*L3 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C2*C3*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL - (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4*L4 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3 + (-8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4)*freq**3 - 4*((pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL - (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL - ZS)/(256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4)*freq**7 - 64*(pi**6*C1*C2*C3*L2*L3*L4*ZS + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL)*freq**6 + (32*I*pi**5*C1*C2*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L2*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C2*C3*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3 + (-8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4)*freq**3 - 4*((pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4)*freq**7 - 64*(pi**6*C1*C2*C3*L2*L3*L4*ZS + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL)*freq**6 + (32*I*pi**5*C1*C2*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L2*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C2*C3*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3 + (-8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4)*freq**3 - 4*((pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 9):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    
                    S11 = (512*I*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*freq**9 + 256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL - pi**8*C1*C2*C3*C4*L2*L3*L4*L5*ZS)*freq**8 + (128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*L1*L2*L3 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*L1*L2 + (-128*I*pi**7*C2*C3*C4*L2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*L1)*L3)*L4)*L5)*freq**7 - 64*(((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL - (pi**6*C1*C2*C3*L2*L3*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L2*L3 + ((pi**6*C1 + pi**6*C2)*C3*C4*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L2)*L4)*L5)*ZS)*freq**6 + (32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L2*L3 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C2*C3*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L1)*L3)*L4 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L2)*L3 + (32*I*pi**5*C3*C4*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L2)*L4)*L5)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL - (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L2 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L3)*L5)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4*L4 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3 + (-8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4 + (-8*I*pi**3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L3)*L5)*freq**3 - 4*((pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL - (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4 + 2*I*pi*L5)*freq + ZL - ZS)/(512*I*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*freq**9 + 256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L2*L3*L4*L5*ZS)*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*L1*L2*L3 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*L1*L2 + (-128*I*pi**7*C2*C3*C4*L2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*L1)*L3)*L4)*L5)*freq**7 - 64*(((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L2*L3*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L2*L3 + ((pi**6*C1 + pi**6*C2)*C3*C4*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L2)*L4)*L5)*ZS)*freq**6 + (32*I*pi**5*C1*C2*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L2*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C2*C3*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L1)*L3)*L4 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L2)*L3 + (32*I*pi**5*C3*C4*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L2)*L4)*L5)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L2 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L3)*L5)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3 + (-8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4 + (-8*I*pi**3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L3)*L5)*freq**3 - 4*((pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L5)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4 + 2*I*pi*L5)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((512*I*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*freq**9 + 256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L2*L3*L4*L5*ZS)*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*L1*L2*L3 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*L1*L2 + (-128*I*pi**7*C2*C3*C4*L2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*L1)*L3)*L4)*L5)*freq**7 - 64*(((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L2*L3*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L2*L3 + ((pi**6*C1 + pi**6*C2)*C3*C4*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L2)*L4)*L5)*ZS)*freq**6 + (32*I*pi**5*C1*C2*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L2*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C2*C3*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L1)*L3)*L4 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L2)*L3 + (32*I*pi**5*C3*C4*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L2)*L4)*L5)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L2 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L3)*L5)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L3 + (-8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4 + (-8*I*pi**3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L3)*L5)*freq**3 - 4*((pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L5)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4 + 2*I*pi*L5)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 10):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    
                    S11 = (1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*freq**10 + (512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5*ZL*ZS - 512*I*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5)*freq**9 + 256*(pi**8*C1*C2*C3*C4*L2*L3*L4*L5*ZS - ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2*L3 + ((pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL)*freq**8 + (128*I*pi**7*C1*C2*C3*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*C5*L2*L3 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*L1*L2*L3 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*L1*L2 + (128*I*pi**7*C2*C3*C4*L2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*L1)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2*L3 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C5*L1 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL - (pi**6*C1*C2*C3*L2*L3*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L2*L3 + ((pi**6*C1 + pi**6*C2)*C3*C4*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L2)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C1*C2*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C5)*L2*L3 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C5)*L3)*L4 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C5*L4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L2 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5*L3)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + (-32*I*pi**5*C2*C3*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L3)*L4 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L2)*L3 + (-32*I*pi**5*C3*C4*L3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L1 + (pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L2)*L3 + (((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL - (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L2 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L3)*L5)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5*L5 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L3 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C5)*L4)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3 + (8*I*pi**3*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L4 + (8*I*pi**3*C4*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L2 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L3)*L5)*freq**3 + 4*((pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L3 + (pi**2*C4 + pi**2*C5)*L4)*ZL - (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L5)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4 + 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4 - 2*I*pi*L5)*freq - ZL + ZS)/(1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*freq**10 + (-512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5*ZL*ZS - 512*I*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5)*freq**9 - 256*(pi**8*C1*C2*C3*C4*L2*L3*L4*L5*ZS + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2*L3 + ((pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL)*freq**8 + (128*I*pi**7*C1*C2*C3*L1*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L2*L3 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*L1*L2*L3 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*L1*L2 + (128*I*pi**7*C2*C3*C4*L2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*L1)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2*L3 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C5*L1 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL + (pi**6*C1*C2*C3*L2*L3*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L2*L3 + ((pi**6*C1 + pi**6*C2)*C3*C4*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L2)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L2*L3 + (((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L3)*L4 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L3)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + (-32*I*pi**5*C2*C3*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L3)*L4 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L2)*L3 + (-32*I*pi**5*C3*C4*L3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L1 + (pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L2)*L3 + (((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L2 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L3)*L5)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C5)*L4)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3 + (8*I*pi**3*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L4 + (8*I*pi**3*C4*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L2 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L3)*L5)*freq**3 + 4*((pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L3 + (pi**2*C4 + pi**2*C5)*L4)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4 - 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4 - 2*I*pi*L5)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*freq**10 + (-512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5*ZL*ZS - 512*I*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5)*freq**9 - 256*(pi**8*C1*C2*C3*C4*L2*L3*L4*L5*ZS + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2*L3 + ((pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL)*freq**8 + (128*I*pi**7*C1*C2*C3*L1*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L2*L3 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*L1*L2*L3 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*L1*L2 + (128*I*pi**7*C2*C3*C4*L2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*L1)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2*L3 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C5*L1 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL + (pi**6*C1*C2*C3*L2*L3*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L2*L3 + ((pi**6*C1 + pi**6*C2)*C3*C4*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L2)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C1*C2*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L2*L3 + (((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L3)*L4 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L3)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + (-32*I*pi**5*C2*C3*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L3)*L4 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L2)*L3 + (-32*I*pi**5*C3*C4*L3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L1 + (pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L2)*L3 + (((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL + (pi**4*C1*C2*L2*L3 + ((pi**4*C1 + pi**4*C2)*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L2 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L3)*L5)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C5)*L4)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L3 + (8*I*pi**3*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L4 + (8*I*pi**3*C4*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L2 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L3)*L5)*freq**3 + 4*((pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L3 + (pi**2*C4 + pi**2*C5)*L4)*ZL + (pi**2*C1*L2 + (pi**2*C1 + pi**2*C2)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4 - 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4 - 2*I*pi*L5)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
            elif (network_type['First_Element'] == 'Shunt'):
                if(network_type['N'] == 1):
                    C1 = comp_val['C1']
                    S11 = (-2*I*pi*C1*ZL*ZS*freq + ZL - ZS)/(2*I*pi*C1*ZL*ZS*freq + ZL + ZS)
                    S21 = 2*np.sqrt(ZL*ZS)/(2*I*pi*C1*ZL*ZS*freq + ZL + ZS)

                elif(network_type['N'] == 2):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    S11 = -(4*pi**2*C1*L1*ZS*freq**2 + (-2*I*pi*C1*ZL*ZS + 2*I*pi*L1)*freq + ZL - ZS)/(4*pi**2*C1*L1*ZS*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((4*pi**2*C1*L1*ZS*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
                    
                elif(network_type['N'] == 3):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    S11 = (-8*I*pi**3*C1*C2*L1*ZL*ZS*freq**3 + 4*(pi**2*C2*L1*ZL - pi**2*C1*L1*ZS)*freq**2 - ((-2*I*pi*C1 - 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1)*freq - ZL + ZS)/(8*I*pi**3*C1*C2*L1*ZL*ZS*freq**3 + 4*(pi**2*C2*L1*ZL + pi**2*C1*L1*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2)*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((8*I*pi**3*C1*C2*L1*ZL*ZS*freq**3 + 4*(pi**2*C2*L1*ZL + pi**2*C1*L1*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2)*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
                elif(network_type['N'] == 4):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    S11 = -(16*pi**4*C1*C2*L1*L2*ZS*freq**4 + (-8*I*pi**3*C1*C2*L1*ZL*ZS + 8*I*pi**3*C2*L1*L2)*freq**3 + 4*(pi**2*C2*L1*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2)*freq - ZL + ZS)/(16*pi**4*C1*C2*L1*L2*ZS*freq**4 + (-8*I*pi**3*C1*C2*L1*ZL*ZS - 8*I*pi**3*C2*L1*L2)*freq**3 - 4*(pi**2*C2*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((16*pi**4*C1*C2*L1*L2*ZS*freq**4 + (-8*I*pi**3*C1*C2*L1*ZL*ZS - 8*I*pi**3*C2*L1*L2)*freq**3 - 4*(pi**2*C2*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)*np.sqrt(ZL*ZS))
                elif(network_type['N'] == 5):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    S11 = (-32*I*pi**5*C1*C2*C3*L1*L2*ZL*ZS*freq**5 + 16*(pi**4*C2*C3*L1*L2*ZL - pi**4*C1*C2*L1*L2*ZS)*freq**4 - (8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L2 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L1)*ZL*ZS)*freq**3 - 4*((pi**2*C3*L2 + (pi**2*C2 + pi**2*C3)*L1)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 - ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2)*freq + ZL - ZS)/(32*I*pi**5*C1*C2*C3*L1*L2*ZL*ZS*freq**5 + 16*(pi**4*C2*C3*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L2 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L1)*ZL*ZS)*freq**3 - 4*((pi**2*C3*L2 + (pi**2*C2 + pi**2*C3)*L1)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((32*I*pi**5*C1*C2*C3*L1*L2*ZL*ZS*freq**5 + 16*(pi**4*C2*C3*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L2 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L1)*ZL*ZS)*freq**3 - 4*((pi**2*C3*L2 + (pi**2*C2 + pi**2*C3)*L1)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 6):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    S11 = -(64*pi**6*C1*C2*C3*L1*L2*L3*ZS*freq**6 + (-32*I*pi**5*C1*C2*C3*L1*L2*ZL*ZS + 32*I*pi**5*C2*C3*L1*L2*L3)*freq**5 + 16*(pi**4*C2*C3*L1*L2*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L2 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L1)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3)*freq**3 - 4*((pi**2*C3*L2 + (pi**2*C2 + pi**2*C3)*L1)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3)*freq + ZL - ZS)/(64*pi**6*C1*C2*C3*L1*L2*L3*ZS*freq**6 + (-32*I*pi**5*C1*C2*C3*L1*L2*ZL*ZS - 32*I*pi**5*C2*C3*L1*L2*L3)*freq**5 - 16*(pi**4*C2*C3*L1*L2*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L2 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L1)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C3*L2 + (pi**2*C2 + pi**2*C3)*L1)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((64*pi**6*C1*C2*C3*L1*L2*L3*ZS*freq**6 + (-32*I*pi**5*C1*C2*C3*L1*L2*ZL*ZS - 32*I*pi**5*C2*C3*L1*L2*L3)*freq**5 - 16*(pi**4*C2*C3*L1*L2*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L2 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L1)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C3*L2 + (pi**2*C2 + pi**2*C3)*L1)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 7):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    S11 = (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS*freq**7 + 64*(pi**6*C2*C3*C4*L1*L2*L3*ZL - pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 - (32*I*pi**5*C2*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L1*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4*L2 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4*L1)*L3)*ZL*ZS)*freq**5 - 16*(((pi**4*C2*C3 + pi**4*C2*C4)*L1*L2 + (pi**4*C3*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L1)*L3)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 - (-8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4)*L2)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C4*L3 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L2)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 - ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3)*freq - ZL + ZS)/(128*I*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS*freq**7 + 64*(pi**6*C2*C3*C4*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + (-32*I*pi**5*C2*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L1*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4*L2 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4*L1)*L3)*ZL*ZS)*freq**5 - 16*(((pi**4*C2*C3 + pi**4*C2*C4)*L1*L2 + (pi**4*C3*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L1)*L3)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4)*L2)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C4*L3 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L2)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((128*I*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS*freq**7 + 64*(pi**6*C2*C3*C4*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + (-32*I*pi**5*C2*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L1*L2 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4*L2 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4*L1)*L3)*ZL*ZS)*freq**5 - 16*(((pi**4*C2*C3 + pi**4*C2*C4)*L1*L2 + (pi**4*C3*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L1)*L3)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4)*L2)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C4*L3 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L2)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 8):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    L4 = comp_val['L4']
                    S11 = -(256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS + 128*I*pi**7*C2*C3*C4*L1*L2*L3*L4)*freq**7 + 64*(pi**6*C2*C3*C4*L1*L2*L3*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + (-32*I*pi**5*C2*C3*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L1*L2 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L2 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L1)*L3)*ZL*ZS + ((-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L1*L2 + (-32*I*pi**5*C3*C4*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 - 16*(((pi**4*C2*C3 + pi**4*C2*C4)*L1*L2 + (pi**4*C3*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L1)*L3)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L2)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4)*freq**3 + 4*((pi**2*C4*L3 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L2)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4)*freq - ZL + ZS)/(256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS - 128*I*pi**7*C2*C3*C4*L1*L2*L3*L4)*freq**7 - 64*(pi**6*C2*C3*C4*L1*L2*L3*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + (32*I*pi**5*C2*C3*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L1*L2 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L2 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L1)*L3)*ZL*ZS + ((32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2 + (32*I*pi**5*C3*C4*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C2*C3 + pi**4*C2*C4)*L1*L2 + (pi**4*C3*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L1)*L3)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L2)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C4*L3 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L2)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS - 128*I*pi**7*C2*C3*C4*L1*L2*L3*L4)*freq**7 - 64*(pi**6*C2*C3*C4*L1*L2*L3*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + (32*I*pi**5*C2*C3*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L1*L2 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L2 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L1)*L3)*ZL*ZS + ((32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2 + (32*I*pi**5*C3*C4*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C2*C3 + pi**4*C2*C4)*L1*L2 + (pi**4*C3*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L1)*L3)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4)*L2)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C4*L3 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L2)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 9):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    L4 = comp_val['L4']
                    C5 = comp_val['C5']
                    
                    S11 = (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS*freq**9 + 256*(pi**8*C2*C3*C4*C5*L1*L2*L3*L4*ZL - pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 - (128*I*pi**7*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*C5*L2 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C5*L1)*L3)*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L1*L2*L3 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5*L1*L2 + (pi**6*C3*C4*C5*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1)*L3)*L4)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 - (-32*I*pi**5*C2*C3*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C5)*L1*L2 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5*L2)*L4)*ZL*ZS + ((-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L1*L2 + (-32*I*pi**5*C3*C4*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L1*L2 + (((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L1 + (pi**4*C3*C4 + pi**4*C3*C5)*L2)*L3 + (pi**4*C4*C5*L3 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L2)*L4)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4)*ZS)*freq**4 - (8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C5)*L3)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C5*L4 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L3)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 - ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4 + 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4)*freq + ZL - ZS)/(512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS*freq**9 + 256*(pi**8*C2*C3*C4*C5*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + (-128*I*pi**7*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*C5*L2 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C5*L1)*L3)*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L1*L2*L3 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5*L1*L2 + (pi**6*C3*C4*C5*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + (32*I*pi**5*C2*C3*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C5)*L1*L2 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5*L2)*L4)*ZL*ZS + ((32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2 + (32*I*pi**5*C3*C4*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L1*L2 + (((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L1 + (pi**4*C3*C4 + pi**4*C3*C5)*L2)*L3 + (pi**4*C4*C5*L3 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L2)*L4)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C5)*L3)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C5*L4 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L3)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4 + 2*I*pi*C5)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL + ZS)

                    S21 = 2*ZL*ZS/((512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS*freq**9 + 256*(pi**8*C2*C3*C4*C5*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + (-128*I*pi**7*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4*C5*L2 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C5*L1)*L3)*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L1*L2*L3 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5*L1*L2 + (pi**6*C3*C4*C5*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + (32*I*pi**5*C2*C3*L1*L2*L3 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C5)*L1*L2 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5*L2)*L4)*ZL*ZS + ((32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2 + (32*I*pi**5*C3*C4*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L1*L2 + (((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L1 + (pi**4*C3*C4 + pi**4*C3*C5)*L2)*L3 + (pi**4*C4*C5*L3 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L2)*L4)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*C5)*L3)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C5*L4 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L3)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3 + 2*I*pi*C4 + 2*I*pi*C5)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 10):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    L4 = comp_val['L4']
                    C5 = comp_val['C5']
                    L5 = comp_val['L5']
                    
                    S11 = -(1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS*freq**10 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS + 512*I*pi**9*C2*C3*C4*C5*L1*L2*L3*L4*L5)*freq**9 + 256*(pi**8*C2*C3*C4*C5*L1*L2*L3*L4*ZL - (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5*L2 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1)*L3)*L4)*L5)*ZS)*freq**8 + (-128*I*pi**7*C2*C3*C4*L1*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L2 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L1)*L3)*L4)*ZL*ZS + ((-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C3*C5)*L1*L2*L3 + ((-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C5*L1*L2 + (-128*I*pi**7*C3*C4*C5*L2 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5*L1)*L3)*L4)*L5)*freq**7 - 64*(((pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L1*L2*L3 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5*L1*L2 + (pi**6*C3*C4*C5*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1)*L3)*L4)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L2)*L4)*L5)*ZS)*freq**6 + (32*I*pi**5*C2*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L1*L2 + (((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L2)*L4)*ZL*ZS + ((32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2 + (32*I*pi**5*C3*C4*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L1*L2 + (((32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L1 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L2)*L3 + (32*I*pi**5*C4*C5*L3 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L1 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L2)*L4)*L5)*freq**5 + 16*(((pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L1*L2 + (((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L1 + (pi**4*C3*C4 + pi**4*C3*C5)*L2)*L3 + (pi**4*C4*C5*L3 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L2)*L4)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L2 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L3)*L5)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L4 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C5)*L3)*ZL*ZS + (-8*I*pi**3*C3*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4 + (-8*I*pi**3*C5*L4 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L2 + (-8*I*pi**3*C4 - 8*I*pi**3*C5)*L3)*L5)*freq**3 - 4*((pi**2*C5*L4 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L3)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4 - 2*I*pi*C5)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3 + 2*I*pi*L4 + 2*I*pi*L5)*freq + ZL - ZS)/(1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS*freq**10 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS - 512*I*pi**9*C2*C3*C4*C5*L1*L2*L3*L4*L5)*freq**9 - 256*(pi**8*C2*C3*C4*C5*L1*L2*L3*L4*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5*L2 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1)*L3)*L4)*L5)*ZS)*freq**8 + (128*I*pi**7*C2*C3*C4*L1*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L2 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L1)*L3)*L4)*ZL*ZS + ((128*I*pi**7*C2*C3*C4 + 128*I*pi**7*C2*C3*C5)*L1*L2*L3 + ((128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C5*L1*L2 + (128*I*pi**7*C3*C4*C5*L2 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C5*L1)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L1*L2*L3 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5*L1*L2 + (pi**6*C3*C4*C5*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L2)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C2*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L1*L2 + (((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L2)*L4)*ZL*ZS + ((-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L1*L2 + (-32*I*pi**5*C3*C4*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L1*L2 + (((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1 + (-32*I*pi**5*C3*C4 - 32*I*pi**5*C3*C5)*L2)*L3 + (-32*I*pi**5*C4*C5*L3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5*L1 + (-32*I*pi**5*C3 - 32*I*pi**5*C4)*C5*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L1*L2 + (((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L1 + (pi**4*C3*C4 + pi**4*C3*C5)*L2)*L3 + (pi**4*C4*C5*L3 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L2)*L4)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L2 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L3)*L5)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L4 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C5)*L3)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4 + (8*I*pi**3*C5*L4 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L2 + (8*I*pi**3*C4 + 8*I*pi**3*C5)*L3)*L5)*freq**3 + 4*((pi**2*C5*L4 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L3)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4 - 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4 - 2*I*pi*L5)*freq - ZL - ZS)

                    S21 = -2*ZL*ZS/((1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS*freq**10 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS - 512*I*pi**9*C2*C3*C4*C5*L1*L2*L3*L4*L5)*freq**9 - 256*(pi**8*C2*C3*C4*C5*L1*L2*L3*L4*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5*L2 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1)*L3)*L4)*L5)*ZS)*freq**8 + (128*I*pi**7*C2*C3*C4*L1*L2*L3*L4 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L2 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L1)*L3)*L4)*ZL*ZS + ((128*I*pi**7*C2*C3*C4 + 128*I*pi**7*C2*C3*C5)*L1*L2*L3 + ((128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C5*L1*L2 + (128*I*pi**7*C3*C4*C5*L2 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C5*L1)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L1*L2*L3 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5*L1*L2 + (pi**6*C3*C4*C5*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1 + pi**6*C2)*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L2)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C2*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L1*L2 + (((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L2)*L4)*ZL*ZS + ((-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L1*L2 + (-32*I*pi**5*C3*C4*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L1*L2 + (((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1 + (-32*I*pi**5*C3*C4 - 32*I*pi**5*C3*C5)*L2)*L3 + (-32*I*pi**5*C4*C5*L3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5*L1 + (-32*I*pi**5*C3 - 32*I*pi**5*C4)*C5*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C5)*L1*L2 + (((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L1 + (pi**4*C3*C4 + pi**4*C3*C5)*L2)*L3 + (pi**4*C4*C5*L3 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L2)*L4)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4*L3 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2)*L4 + ((pi**4*C1 + pi**4*C2 + pi**4*C3 + pi**4*C4)*C5*L4 + (pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L2 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L3)*L5)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L4 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*C5)*L3)*ZL*ZS + (8*I*pi**3*C3*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4 + (8*I*pi**3*C5*L4 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L2 + (8*I*pi**3*C4 + 8*I*pi**3*C5)*L3)*L5)*freq**3 + 4*((pi**2*C5*L4 + (pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L3)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4)*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C3 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3 - 2*I*pi*C4 - 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3 - 2*I*pi*L4 - 2*I*pi*L5)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

        elif(network_type['Mask'] == 'Highpass'):
            if (network_type['First_Element'] == 'Series'):
                if(network_type['N'] == 1):
                    C1 = comp_val['C1']
                    S11 = (2*(pi*C1*ZL - pi*C1*ZS)*freq - I)/(2*(pi*C1*ZL + pi*C1*ZS)*freq - I)
                    S21 = 4*pi*np.sqrt(ZL*ZS)*C1*freq/(2*(pi*C1*ZL + pi*C1*ZS)*freq - I)
                if(network_type['N'] == 2):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    S11 = (4*(pi**2*C1*L1*ZL - pi**2*C1*L1*ZS)*freq**2 - (-2*I*pi*C1*ZL*ZS + 2*I*pi*L1)*freq - ZL)/(4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL)
                    S21 = 8*pi**2*C1*L1*ZL*ZS*freq**2/((4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZL)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 3):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    S11 = (8*(pi**3*C1*C2*L1*ZL - pi**3*C1*C2*L1*ZS)*freq**3 - (-4*I*pi**2*C1*C2*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1)*freq**2 - 2*(pi*C2*ZL - pi*C1*ZS)*freq + I)/(8*(pi**3*C1*C2*L1*ZL + pi**3*C1*C2*L1*ZS)*freq**3 + (-4*I*pi**2*C1*C2*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1)*freq**2 - 2*(pi*C2*ZL + pi*C1*ZS)*freq + I)
                    S21 = 16*pi**3*C1*C2*L1*ZL*ZS*freq**3/((8*(pi**3*C1*C2*L1*ZL + pi**3*C1*C2*L1*ZS)*freq**3 + (-4*I*pi**2*C1*C2*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1)*freq**2 - 2*(pi*C2*ZL + pi*C1*ZS)*freq + I)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 4):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    S11 = (16*(pi**4*C1*C2*L1*L2*ZL - pi**4*C1*C2*L1*L2*ZS)*freq**4 - ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C2*L2)*ZL*ZS)*freq**3 + 4*(pi**2*C1*L2*ZS - (pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL)*freq**2 - (2*I*pi*C1*ZL*ZS - 2*I*pi*L2)*freq + ZL)/(16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C2*L2)*ZL*ZS)*freq**3 - 4*(pi**2*C1*L2*ZS + (pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L2)*freq + ZL)

                    S21 = 32*pi**4*C1*C2*L1*L2*ZL*ZS*freq**4/((16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C2*L2)*ZL*ZS)*freq**3 - 4*(pi**2*C1*L2*ZS + (pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L2)*freq + ZL)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 5):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    
                    S11 = (32*(pi**5*C1*C2*C3*L1*L2*ZL - pi**5*C1*C2*C3*L1*L2*ZS)*freq**5 - ((16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L1*L2 + (-16*I*pi**4*C1*C2*C3*L1 - 16*I*pi**4*C1*C2*C3*L2)*ZL*ZS)*freq**4 - 8*((pi**3*C2*C3*L2 + (pi**3*C1 + pi**3*C2)*C3*L1)*ZL - (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2)*ZS)*freq**3 - (4*I*pi**2*C1*C3*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2)*freq**2 + 2*(pi*C3*ZL - pi*C1*ZS)*freq - I)/(32*(pi**5*C1*C2*C3*L1*L2*ZL + pi**5*C1*C2*C3*L1*L2*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L1*L2 + (-16*I*pi**4*C1*C2*C3*L1 - 16*I*pi**4*C1*C2*C3*L2)*ZL*ZS)*freq**4 - 8*((pi**3*C2*C3*L2 + (pi**3*C1 + pi**3*C2)*C3*L1)*ZL + (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C3*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L2)*freq**2 + 2*(pi*C3*ZL + pi*C1*ZS)*freq - I)

                    S21 = 64*pi**5*C1*C2*C3*L1*L2*ZL*ZS*freq**5/((32*(pi**5*C1*C2*C3*L1*L2*ZL + pi**5*C1*C2*C3*L1*L2*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L1*L2 + (-16*I*pi**4*C1*C2*C3*L1 - 16*I*pi**4*C1*C2*C3*L2)*ZL*ZS)*freq**4 - 8*((pi**3*C2*C3*L2 + (pi**3*C1 + pi**3*C2)*C3*L1)*ZL + (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C3*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L2)*freq**2 + 2*(pi*C3*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 6):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    S11 = (64*(pi**6*C1*C2*C3*L1*L2*L3*ZL - pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 - ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 + (-32*I*pi**5*C1*C2*C3*L1 - 32*I*pi**5*C1*C2*C3*L2)*L3)*ZL*ZS)*freq**5 + 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L3*ZS - ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL)*freq**4 - ((8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L3)*freq**3 - 4*(pi**2*C1*L3*ZS - (pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL)*freq**2 - (-2*I*pi*C1*ZL*ZS + 2*I*pi*L3)*freq - ZL)/(64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 + (-32*I*pi**5*C1*C2*C3*L1 - 32*I*pi**5*C1*C2*C3*L2)*L3)*ZL*ZS)*freq**5 - 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L3*ZS + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL)*freq**4 + ((8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L3)*freq**3 + 4*(pi**2*C1*L3*ZS + (pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L3)*freq - ZL)

                    S21 = 128*pi**6*C1*C2*C3*L1*L2*L3*ZL*ZS*freq**6/((64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 + (-32*I*pi**5*C1*C2*C3*L1 - 32*I*pi**5*C1*C2*C3*L2)*L3)*ZL*ZS)*freq**5 - 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L3*ZS + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL)*freq**4 + ((8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2)*ZL*ZS + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2)*L3)*freq**3 + 4*(pi**2*C1*L3*ZS + (pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L3)*freq - ZL)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 7):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    
                    S11 = (128*(pi**7*C1*C2*C3*C4*L1*L2*L3*ZL - pi**7*C1*C2*C3*C4*L1*L2*L3*ZS)*freq**7 - ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4)*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C4*L1*L2 + (-64*I*pi**6*C1*C2*C3*C4*L1 - 64*I*pi**6*C1*C2*C3*C4*L2)*L3)*ZL*ZS)*freq**6 - 32*(((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*C4*L1*L2 + (pi**5*C2*C3*C4*L2 + (pi**5*C1 + pi**5*C2)*C3*C4*L1)*L3)*ZL - (pi**5*C1*C2*C3*L1*L2 + ((pi**5*C1*C2*C3 + pi**5*C1*C2*C4)*L1 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4)*L2)*L3)*ZS)*freq**5 - ((-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L1*L2 + (16*I*pi**4*C1*C2*C4*L1 + 16*I*pi**4*C1*C3*C4*L3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4*L2)*ZL*ZS + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L1 + (-16*I*pi**4*C2*C3 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4)*L2)*L3)*freq**4 + 8*((pi**3*C3*C4*L3 + (pi**3*C1 + pi**3*C2)*C4*L1 + (pi**3*C2 + pi**3*C3)*C4*L2)*ZL - (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4)*L3)*ZS)*freq**3 - (-4*I*pi**2*C1*C4*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L3)*freq**2 - 2*(pi*C4*ZL - pi*C1*ZS)*freq + I)/(128*(pi**7*C1*C2*C3*C4*L1*L2*L3*ZL + pi**7*C1*C2*C3*C4*L1*L2*L3*ZS)*freq**7 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*C4)*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C4*L1*L2 + (-64*I*pi**6*C1*C2*C3*C4*L1 - 64*I*pi**6*C1*C2*C3*C4*L2)*L3)*ZL*ZS)*freq**6 - 32*(((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*C4*L1*L2 + (pi**5*C2*C3*C4*L2 + (pi**5*C1 + pi**5*C2)*C3*C4*L1)*L3)*ZL + (pi**5*C1*C2*C3*L1*L2 + ((pi**5*C1*C2*C3 + pi**5*C1*C2*C4)*L1 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4)*L2)*L3)*ZS)*freq**5 + ((16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L1*L2 + (16*I*pi**4*C1*C2*C4*L1 + 16*I*pi**4*C1*C3*C4*L3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4*L2)*ZL*ZS + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C4)*L1 + (16*I*pi**4*C2*C3 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*C4)*L2)*L3)*freq**4 + 8*((pi**3*C3*C4*L3 + (pi**3*C1 + pi**3*C2)*C4*L1 + (pi**3*C2 + pi**3*C3)*C4*L2)*ZL + (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4)*L3)*ZS)*freq**3 + (-4*I*pi**2*C1*C4*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C3 - 4*I*pi**2*C4)*L3)*freq**2 - 2*(pi*C4*ZL + pi*C1*ZS)*freq + I)

                    S21 = 256*pi**7*C1*C2*C3*C4*L1*L2*L3*ZL*ZS*freq**7/((128*(pi**7*C1*C2*C3*C4*L1*L2*L3*ZL + pi**7*C1*C2*C3*C4*L1*L2*L3*ZS)*freq**7 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*C4)*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C4*L1*L2 + (-64*I*pi**6*C1*C2*C3*C4*L1 - 64*I*pi**6*C1*C2*C3*C4*L2)*L3)*ZL*ZS)*freq**6 - 32*(((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*C4*L1*L2 + (pi**5*C2*C3*C4*L2 + (pi**5*C1 + pi**5*C2)*C3*C4*L1)*L3)*ZL + (pi**5*C1*C2*C3*L1*L2 + ((pi**5*C1*C2*C3 + pi**5*C1*C2*C4)*L1 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4)*L2)*L3)*ZS)*freq**5 + ((16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L1*L2 + (16*I*pi**4*C1*C2*C4*L1 + 16*I*pi**4*C1*C3*C4*L3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4*L2)*ZL*ZS + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C4)*L1 + (16*I*pi**4*C2*C3 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*C4)*L2)*L3)*freq**4 + 8*((pi**3*C3*C4*L3 + (pi**3*C1 + pi**3*C2)*C4*L1 + (pi**3*C2 + pi**3*C3)*C4*L2)*ZL + (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4)*L3)*ZS)*freq**3 + (-4*I*pi**2*C1*C4*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C3 - 4*I*pi**2*C4)*L3)*freq**2 - 2*(pi*C4*ZL + pi*C1*ZS)*freq + I)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 8):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    L4 = comp_val['L4']
                    
                    S11 = (256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL - pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 - ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 + (-128*I*pi**7*C1*C2*C3*C4*L1 - 128*I*pi**7*C1*C2*C3*C4*L2)*L3)*L4)*ZL*ZS)*freq**7 + 64*((pi**6*C1*C2*C3*L1*L2 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L2)*L3)*L4*ZS - ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L1*L2*L3 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL)*freq**6 - ((32*I*pi**5*C1*C2*C3*L1*L2 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L1 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L2)*L3 + (32*I*pi**5*C1*C2*C4*L1 + 32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*L2)*L3)*L4)*freq**5 - 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4)*L3)*L4*ZS - ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL)*freq**4 - ((-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L3)*ZL*ZS + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L3)*L4)*freq**3 + 4*(pi**2*C1*L4*ZS - (pi**2*C4*L4 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL)*freq**2 - (2*I*pi*C1*ZL*ZS - 2*I*pi*L4)*freq + ZL)/(256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 + (-128*I*pi**7*C1*C2*C3*C4*L1 - 128*I*pi**7*C1*C2*C3*C4*L2)*L3)*L4)*ZL*ZS)*freq**7 - 64*((pi**6*C1*C2*C3*L1*L2 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L2)*L3)*L4*ZS + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L1*L2*L3 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L1*L2 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L1 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L2)*L3 + (32*I*pi**5*C1*C2*C4*L1 + 32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*L2)*L3)*L4)*freq**5 + 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4)*L3)*L4*ZS + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL)*freq**4 + ((-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L3)*ZL*ZS + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L3)*L4)*freq**3 - 4*(pi**2*C1*L4*ZS + (pi**2*C4*L4 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L4)*freq + ZL)

                    S21 = 512*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*ZS*freq**8/((256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 + (-128*I*pi**7*C1*C2*C3*C4*L1 - 128*I*pi**7*C1*C2*C3*C4*L2)*L3)*L4)*ZL*ZS)*freq**7 - 64*((pi**6*C1*C2*C3*L1*L2 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L2)*L3)*L4*ZS + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L1*L2*L3 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L1*L2 + ((32*I*pi**5*C1*C2*C3 + 32*I*pi**5*C1*C2*C4)*L1 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L2)*L3 + (32*I*pi**5*C1*C2*C4*L1 + 32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*L2)*L3)*L4)*freq**5 + 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4)*L3)*L4*ZS + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL)*freq**4 + ((-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L3)*ZL*ZS + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L3)*L4)*freq**3 - 4*(pi**2*C1*L4*ZS + (pi**2*C4*L4 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L3)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L4)*freq + ZL)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 9):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    L4 = comp_val['L4']
                    C5 = comp_val['C5']

                    S11 = (512*(pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL - pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZS)*freq**9 - ((256*I*pi**8*C1*C2*C3*C4 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + (256*I*pi**8*C1 + 256*I*pi**8*C2)*C3)*C4)*C5)*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1*L2*L3 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1*L2 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1 - 256*I*pi**8*C1*C2*C3*C4*C5*L2)*L3)*L4)*ZL*ZS)*freq**8 - 128*(((pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*C5*L1*L2*L3 + ((pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4*C5*L1*L2 + (pi**7*C2*C3*C4*C5*L2 + (pi**7*C1 + pi**7*C2)*C3*C4*C5*L1)*L3)*L4)*ZL - (pi**7*C1*C2*C3*C4*L1*L2*L3 + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L1*L2 + ((pi**7*C1*C2*C3*C4 + (pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*C5)*L1 + (pi**7*C1*C2*C3*C4 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5)*L2)*L3)*L4)*ZS)*freq**7 - ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*C4)*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C5*L1*L2 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*C5*L1 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L2)*L3 + (64*I*pi**6*C1*C2*C4*C5*L1 + 64*I*pi**6*C1*C3*C4*C5*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*C5*L2)*L4)*ZL*ZS + (((-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*C4 + (-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*C5)*L1*L2 + (((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3*C4 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C4)*C5)*L1 + (-64*I*pi**6*C2*C3*C4 + (-64*I*pi**6*C2*C3 + (-64*I*pi**6*C2 - 64*I*pi**6*C3)*C4)*C5)*L2)*L3)*L4)*freq**6 + 32*(((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*C5*L1*L2 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*C5*L1 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*C5*L2)*L3 + (pi**5*C3*C4*C5*L3 + (pi**5*C1 + pi**5*C2)*C4*C5*L1 + (pi**5*C2 + pi**5*C3)*C4*C5*L2)*L4)*ZL - (pi**5*C1*C2*C3*L1*L2 + ((pi**5*C1*C2*C3 + pi**5*C1*C2*C4)*L1 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4)*L2)*L3 + ((pi**5*C1*C2*C4 + pi**5*C1*C2*C5)*L1 + ((pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + (pi**5*C1*C3 + pi**5*C1*C4)*C5)*L3)*L4)*ZS)*freq**5 - ((16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L1*L2 + (-16*I*pi**4*C1*C2*C5*L1 - 16*I*pi**4*C1*C4*C5*L4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L3)*ZL*ZS + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C4)*L1 + (16*I*pi**4*C2*C3 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*C4)*L2)*L3 + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C5)*L1 + ((16*I*pi**4*C2 + 16*I*pi**4*C3)*C4 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*C5)*L2 + (16*I*pi**4*C3*C4 + (16*I*pi**4*C3 + 16*I*pi**4*C4)*C5)*L3)*L4)*freq**4 - 8*((pi**3*C4*C5*L4 + (pi**3*C1 + pi**3*C2)*C5*L1 + (pi**3*C2 + pi**3*C3)*C5*L2 + (pi**3*C3 + pi**3*C4)*C5*L3)*ZL - (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4)*L3 + (pi**3*C1*C4 + pi**3*C1*C5)*L4)*ZS)*freq**3 - (4*I*pi**2*C1*C5*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C3 - 4*I*pi**2*C4)*L3 + (-4*I*pi**2*C4 - 4*I*pi**2*C5)*L4)*freq**2 + 2*(pi*C5*ZL - pi*C1*ZS)*freq - I)/(512*(pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL + pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3)*C4)*C5)*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1*L2*L3 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1*L2 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1 - 256*I*pi**8*C1*C2*C3*C4*C5*L2)*L3)*L4)*ZL*ZS)*freq**8 - 128*(((pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*C5*L1*L2*L3 + ((pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4*C5*L1*L2 + (pi**7*C2*C3*C4*C5*L2 + (pi**7*C1 + pi**7*C2)*C3*C4*C5*L1)*L3)*L4)*ZL + (pi**7*C1*C2*C3*C4*L1*L2*L3 + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L1*L2 + ((pi**7*C1*C2*C3*C4 + (pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*C5)*L1 + (pi**7*C1*C2*C3*C4 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5)*L2)*L3)*L4)*ZS)*freq**7 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4)*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C5*L1*L2 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*C5*L1 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L2)*L3 + (64*I*pi**6*C1*C2*C4*C5*L1 + 64*I*pi**6*C1*C3*C4*C5*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*C5*L2)*L4)*ZL*ZS + (((64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C5)*L1*L2 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*C5)*L1 + (64*I*pi**6*C2*C3*C4 + (64*I*pi**6*C2*C3 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5)*L2)*L3)*L4)*freq**6 + 32*(((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*C5*L1*L2 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*C5*L1 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*C5*L2)*L3 + (pi**5*C3*C4*C5*L3 + (pi**5*C1 + pi**5*C2)*C4*C5*L1 + (pi**5*C2 + pi**5*C3)*C4*C5*L2)*L4)*ZL + (pi**5*C1*C2*C3*L1*L2 + ((pi**5*C1*C2*C3 + pi**5*C1*C2*C4)*L1 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4)*L2)*L3 + ((pi**5*C1*C2*C4 + pi**5*C1*C2*C5)*L1 + ((pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + (pi**5*C1*C3 + pi**5*C1*C4)*C5)*L3)*L4)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L1*L2 + (-16*I*pi**4*C1*C2*C5*L1 - 16*I*pi**4*C1*C4*C5*L4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L3)*ZL*ZS + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L1 + (-16*I*pi**4*C2*C3 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4)*L2)*L3 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C5)*L1 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5)*L3)*L4)*freq**4 - 8*((pi**3*C4*C5*L4 + (pi**3*C1 + pi**3*C2)*C5*L1 + (pi**3*C2 + pi**3*C3)*C5*L2 + (pi**3*C3 + pi**3*C4)*C5*L3)*ZL + (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4)*L3 + (pi**3*C1*C4 + pi**3*C1*C5)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L3 + (4*I*pi**2*C4 + 4*I*pi**2*C5)*L4)*freq**2 + 2*(pi*C5*ZL + pi*C1*ZS)*freq - I)

                    S21 = 1024*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL*ZS*freq**9/((512*(pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL + pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3)*C4)*C5)*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1*L2*L3 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1*L2 + (-256*I*pi**8*C1*C2*C3*C4*C5*L1 - 256*I*pi**8*C1*C2*C3*C4*C5*L2)*L3)*L4)*ZL*ZS)*freq**8 - 128*(((pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*C5*L1*L2*L3 + ((pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4*C5*L1*L2 + (pi**7*C2*C3*C4*C5*L2 + (pi**7*C1 + pi**7*C2)*C3*C4*C5*L1)*L3)*L4)*ZL + (pi**7*C1*C2*C3*C4*L1*L2*L3 + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L1*L2 + ((pi**7*C1*C2*C3*C4 + (pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*C5)*L1 + (pi**7*C1*C2*C3*C4 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5)*L2)*L3)*L4)*ZS)*freq**7 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4)*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C5*L1*L2 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*C5*L1 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L2)*L3 + (64*I*pi**6*C1*C2*C4*C5*L1 + 64*I*pi**6*C1*C3*C4*C5*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*C5*L2)*L4)*ZL*ZS + (((64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C5)*L1*L2 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*C5)*L1 + (64*I*pi**6*C2*C3*C4 + (64*I*pi**6*C2*C3 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5)*L2)*L3)*L4)*freq**6 + 32*(((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*C5*L1*L2 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*C5*L1 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*C5*L2)*L3 + (pi**5*C3*C4*C5*L3 + (pi**5*C1 + pi**5*C2)*C4*C5*L1 + (pi**5*C2 + pi**5*C3)*C4*C5*L2)*L4)*ZL + (pi**5*C1*C2*C3*L1*L2 + ((pi**5*C1*C2*C3 + pi**5*C1*C2*C4)*L1 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4)*L2)*L3 + ((pi**5*C1*C2*C4 + pi**5*C1*C2*C5)*L1 + ((pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + (pi**5*C1*C3 + pi**5*C1*C4)*C5)*L3)*L4)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L1*L2 + (-16*I*pi**4*C1*C2*C5*L1 - 16*I*pi**4*C1*C4*C5*L4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L3)*ZL*ZS + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L1 + (-16*I*pi**4*C2*C3 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4)*L2)*L3 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C5)*L1 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5)*L3)*L4)*freq**4 - 8*((pi**3*C4*C5*L4 + (pi**3*C1 + pi**3*C2)*C5*L1 + (pi**3*C2 + pi**3*C3)*C5*L2 + (pi**3*C3 + pi**3*C4)*C5*L3)*ZL + (pi**3*C1*C2*L1 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4)*L3 + (pi**3*C1*C4 + pi**3*C1*C5)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L3 + (4*I*pi**2*C4 + 4*I*pi**2*C5)*L4)*freq**2 + 2*(pi*C5*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))
                    
                if(network_type['N'] == 10):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    L2 = comp_val['L2']
                    C3 = comp_val['C3']
                    L3 = comp_val['L3']
                    C4 = comp_val['C4']
                    L4 = comp_val['L4']
                    C5 = comp_val['C5']
                    L5 = comp_val['L5']

                    S11 = (1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL - pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 - ((512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3)*C4)*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1 - 512*I*pi**9*C1*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS)*freq**9 + 256*((pi**8*C1*C2*C3*C4*L1*L2*L3 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5)*L1 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5)*L2)*L3)*L4)*L5*ZS - ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5)*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5*L1*L2*L3 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL)*freq**8 - ((128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L1*L2 + ((128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5)*L1 + (128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5)*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L2)*L3 + (128*I*pi**7*C1*C2*C4*C5*L1 + 128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3 + (((-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C5)*L1*L2 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C4)*C5)*L1 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2*C3 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5)*L2)*L3)*L4)*L5)*freq**7 - 64*((pi**6*C1*C2*C3*L1*L2 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L2)*L3 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + (pi**6*C1*C3 + pi**6*C1*C4)*C5)*L3)*L4)*L5*ZS - ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L1*L2*L3 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2)*C4*C5*L1 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL)*freq**6 - ((-32*I*pi**5*C1*C2*C3*L1*L2 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L1 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L2)*L3 + ((-32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L1 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5)*L3)*L4 + (-32*I*pi**5*C1*C2*C5*L1 - 32*I*pi**5*C1*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L3)*L5)*ZL*ZS + ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*L2)*L3 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C5)*L1 + ((32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5)*L3)*L4)*L5)*freq**5 + 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4)*L3 + (pi**4*C1*C4 + pi**4*C1*C5)*L4)*L5*ZS - ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L2)*L3 + (((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + (pi**4*C3 + pi**4*C4)*C5)*L3)*L4 + (pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2)*C5*L1 + (pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL)*freq**4 - ((8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C1*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L3 + (8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L4)*ZL*ZS + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L3 + (-8*I*pi**3*C4 - 8*I*pi**3*C5)*L4)*L5)*freq**3 - 4*(pi**2*C1*L5*ZS - (pi**2*C5*L5 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L3 + (pi**2*C4 + pi**2*C5)*L4)*ZL)*freq**2 - (-2*I*pi*C1*ZL*ZS + 2*I*pi*L5)*freq - ZL)/(1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 + (-512*I*pi**9*C1 - 512*I*pi**9*C2)*C3)*C4)*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1 - 512*I*pi**9*C1*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS)*freq**9 - 256*((pi**8*C1*C2*C3*C4*L1*L2*L3 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5)*L1 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5)*L2)*L3)*L4)*L5*ZS + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5)*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5*L1*L2*L3 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL)*freq**8 + ((128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L1*L2 + ((128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5)*L1 + (128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5)*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L2)*L3 + (128*I*pi**7*C1*C2*C4*C5*L1 + 128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3 + (((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C5)*L1*L2 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*L1 + (128*I*pi**7*C2*C3*C4 + (128*I*pi**7*C2*C3 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4)*C5)*L2)*L3)*L4)*L5)*freq**7 + 64*((pi**6*C1*C2*C3*L1*L2 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L2)*L3 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + (pi**6*C1*C3 + pi**6*C1*C4)*C5)*L3)*L4)*L5*ZS + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L1*L2*L3 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2)*C4*C5*L1 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL)*freq**6 + ((-32*I*pi**5*C1*C2*C3*L1*L2 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L1 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L2)*L3 + ((-32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L1 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5)*L3)*L4 + (-32*I*pi**5*C1*C2*C5*L1 - 32*I*pi**5*C1*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L3)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*L2)*L3 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*L1 + ((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L2 + (-32*I*pi**5*C3*C4 + (-32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*L3)*L4)*L5)*freq**5 - 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4)*L3 + (pi**4*C1*C4 + pi**4*C1*C5)*L4)*L5*ZS + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L2)*L3 + (((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + (pi**4*C3 + pi**4*C4)*C5)*L3)*L4 + (pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2)*C5*L1 + (pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL)*freq**4 + ((8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C1*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L3 + (8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L4)*ZL*ZS + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L3 + (8*I*pi**3*C4 + 8*I*pi**3*C5)*L4)*L5)*freq**3 + 4*(pi**2*C1*L5*ZS + (pi**2*C5*L5 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L3 + (pi**2*C4 + pi**2*C5)*L4)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L5)*freq - ZL)

                    S21 = 2048*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*freq**10/((1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 + (-512*I*pi**9*C1 - 512*I*pi**9*C2)*C3)*C4)*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1 - 512*I*pi**9*C1*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS)*freq**9 - 256*((pi**8*C1*C2*C3*C4*L1*L2*L3 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5)*L1 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5)*L2)*L3)*L4)*L5*ZS + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5)*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5*L1*L2*L3 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL)*freq**8 + ((128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L1*L2 + ((128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5)*L1 + (128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5)*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L2)*L3 + (128*I*pi**7*C1*C2*C4*C5*L1 + 128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3 + (((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C5)*L1*L2 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*L1 + (128*I*pi**7*C2*C3*C4 + (128*I*pi**7*C2*C3 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4)*C5)*L2)*L3)*L4)*L5)*freq**7 + 64*((pi**6*C1*C2*C3*L1*L2 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L2)*L3 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + (pi**6*C1*C3 + pi**6*C1*C4)*C5)*L3)*L4)*L5*ZS + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L1*L2*L3 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2)*C4*C5*L1 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL)*freq**6 + ((-32*I*pi**5*C1*C2*C3*L1*L2 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C4)*L1 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L2)*L3 + ((-32*I*pi**5*C1*C2*C4 - 32*I*pi**5*C1*C2*C5)*L1 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5)*L3)*L4 + (-32*I*pi**5*C1*C2*C5*L1 - 32*I*pi**5*C1*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L3)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*L2)*L3 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*L1 + ((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L2 + (-32*I*pi**5*C3*C4 + (-32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*L3)*L4)*L5)*freq**5 - 16*((pi**4*C1*C2*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4)*L3 + (pi**4*C1*C4 + pi**4*C1*C5)*L4)*L5*ZS + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L2)*L3 + (((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + (pi**4*C3 + pi**4*C4)*C5)*L3)*L4 + (pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2)*C5*L1 + (pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL)*freq**4 + ((8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C1*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L3 + (8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L4)*ZL*ZS + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L2 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L3 + (8*I*pi**3*C4 + 8*I*pi**3*C5)*L4)*L5)*freq**3 + 4*(pi**2*C1*L5*ZS + (pi**2*C5*L5 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L3 + (pi**2*C4 + pi**2*C5)*L4)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L5)*freq - ZL)*np.sqrt(ZL*ZS))
                    
            if (network_type['First_Element'] == 'Shunt'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    S11 = (I*ZL*ZS + 2*(pi*L1*ZL - pi*L1*ZS)*freq)/(-I*ZL*ZS + 2*(pi*L1*ZL + pi*L1*ZS)*freq)
                    S21 = 4*pi*np.sqrt(ZL*ZS)*L1*freq/(-I*ZL*ZS + 2*(pi*L1*ZL + pi*L1*ZS)*freq)
                if(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    S11 = (4*(pi**2*C1*L1*ZL - pi**2*C1*L1*ZS)*freq**2 - (-2*I*pi*C1*ZL*ZS + 2*I*pi*L1)*freq + ZS)/(4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZS)

                    S21 = 8*pi**2*C1*L1*ZL*ZS*freq**2/((4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1)*freq - ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    S11 = (8*(pi**3*C1*L1*L2*ZL - pi**3*C1*L1*L2*ZS)*freq**3 - (4*I*pi**2*L1*L2 + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C1*L2)*ZL*ZS)*freq**2 - I*ZL*ZS - 2*(pi*L1*ZL - pi*L2*ZS)*freq)/(8*(pi**3*C1*L1*L2*ZL + pi**3*C1*L1*L2*ZS)*freq**3 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C1*L2)*ZL*ZS)*freq**2 + I*ZL*ZS - 2*(pi*L1*ZL + pi*L2*ZS)*freq)

                    S21 = 16*pi**3*C1*L1*L2*ZL*ZS*freq**3/((8*(pi**3*C1*L1*L2*ZL + pi**3*C1*L1*L2*ZS)*freq**3 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C1*L2)*ZL*ZS)*freq**2 + I*ZL*ZS - 2*(pi*L1*ZL + pi*L2*ZS)*freq)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 4):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    S11 = (16*(pi**4*C1*C2*L1*L2*ZL - pi**4*C1*C2*L1*L2*ZS)*freq**4 - ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C2*L2)*ZL*ZS)*freq**3 - 4*(pi**2*C2*L1*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 - (2*I*pi*C2*ZL*ZS - 2*I*pi*L1)*freq - ZS)/(16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C2*L2)*ZL*ZS)*freq**3 - 4*(pi**2*C2*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + (2*I*pi*C2*ZL*ZS + 2*I*pi*L1)*freq + ZS)

                    S21 = 32*pi**4*C1*C2*L1*L2*ZL*ZS*freq**4/((16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C1*C2*L1 - 8*I*pi**3*C1*C2*L2)*ZL*ZS)*freq**3 - 4*(pi**2*C2*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + (2*I*pi*C2*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 5):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    S11 = (32*(pi**5*C1*C2*L1*L2*L3*ZL - pi**5*C1*C2*L1*L2*L3*ZS)*freq**5 - ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2*L3 + (-16*I*pi**4*C1*C2*L1*L2 + (-16*I*pi**4*C1*C2*L1 - 16*I*pi**4*C1*C2*L2)*L3)*ZL*ZS)*freq**4 + 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3*ZS - (pi**3*C2*L1*L3 + (pi**3*C1 + pi**3*C2)*L1*L2)*ZL)*freq**3 - (-4*I*pi**2*L1*L3 + (4*I*pi**2*C1*L1 + 4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*ZL*ZS)*freq**2 + I*ZL*ZS + 2*(pi*L1*ZL - pi*L3*ZS)*freq)/(32*(pi**5*C1*C2*L1*L2*L3*ZL + pi**5*C1*C2*L1*L2*L3*ZS)*freq**5 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2*L3 + (-16*I*pi**4*C1*C2*L1*L2 + (-16*I*pi**4*C1*C2*L1 - 16*I*pi**4*C1*C2*L2)*L3)*ZL*ZS)*freq**4 - 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3*ZS + (pi**3*C2*L1*L3 + (pi**3*C1 + pi**3*C2)*L1*L2)*ZL)*freq**3 + (4*I*pi**2*L1*L3 + (4*I*pi**2*C1*L1 + 4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*ZL*ZS)*freq**2 - I*ZL*ZS + 2*(pi*L1*ZL + pi*L3*ZS)*freq)

                    S21 = 64*pi**5*C1*C2*L1*L2*L3*ZL*ZS*freq**5/((32*(pi**5*C1*C2*L1*L2*L3*ZL + pi**5*C1*C2*L1*L2*L3*ZS)*freq**5 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2*L3 + (-16*I*pi**4*C1*C2*L1*L2 + (-16*I*pi**4*C1*C2*L1 - 16*I*pi**4*C1*C2*L2)*L3)*ZL*ZS)*freq**4 - 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3*ZS + (pi**3*C2*L1*L3 + (pi**3*C1 + pi**3*C2)*L1*L2)*ZL)*freq**3 + (4*I*pi**2*L1*L3 + (4*I*pi**2*C1*L1 + 4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*ZL*ZS)*freq**2 - I*ZL*ZS + 2*(pi*L1*ZL + pi*L3*ZS)*freq)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 6):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    
                    S11 = (64*(pi**6*C1*C2*C3*L1*L2*L3*ZL - pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 - ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 + (-32*I*pi**5*C1*C2*C3*L1 - 32*I*pi**5*C1*C2*C3*L2)*L3)*ZL*ZS)*freq**5 - 16*((pi**4*C2*C3*L1*L3 + (pi**4*C1 + pi**4*C2)*C3*L1*L2)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3)*ZS)*freq**4 - ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1*L3 + (8*I*pi**3*C1*C3*L1 + 8*I*pi**3*C2*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L2)*ZL*ZS)*freq**3 + 4*(pi**2*C3*L1*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 - (-2*I*pi*C3*ZL*ZS + 2*I*pi*L1)*freq + ZS)/(64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 + (-32*I*pi**5*C1*C2*C3*L1 - 32*I*pi**5*C1*C2*C3*L2)*L3)*ZL*ZS)*freq**5 - 16*((pi**4*C2*C3*L1*L3 + (pi**4*C1 + pi**4*C2)*C3*L1*L2)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3)*ZS)*freq**4 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1*L3 + (8*I*pi**3*C1*C3*L1 + 8*I*pi**3*C2*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L2)*ZL*ZS)*freq**3 + 4*(pi**2*C3*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + (-2*I*pi*C3*ZL*ZS - 2*I*pi*L1)*freq - ZS)

                    S21 = 128*pi**6*C1*C2*C3*L1*L2*L3*ZL*ZS*freq**6/((64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 + (-32*I*pi**5*C1*C2*C3*L1 - 32*I*pi**5*C1*C2*C3*L2)*L3)*ZL*ZS)*freq**5 - 16*((pi**4*C2*C3*L1*L3 + (pi**4*C1 + pi**4*C2)*C3*L1*L2)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3)*ZS)*freq**4 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1*L3 + (8*I*pi**3*C1*C3*L1 + 8*I*pi**3*C2*C3*L3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L2)*ZL*ZS)*freq**3 + 4*(pi**2*C3*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + (-2*I*pi*C3*ZL*ZS - 2*I*pi*L1)*freq - ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 7):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    
                    S11 = (128*(pi**7*C1*C2*C3*L1*L2*L3*L4*ZL - pi**7*C1*C2*C3*L1*L2*L3*L4*ZS)*freq**7 - ((64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*L1*L2*L3*L4 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*L1*L2 + (-64*I*pi**6*C1*C2*C3*L1 - 64*I*pi**6*C1*C2*C3*L2)*L3)*L4)*ZL*ZS)*freq**6 + 32*((pi**5*C1*C2*L1*L2 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3)*L4*ZS - ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3 + (pi**5*C2*C3*L1*L3 + (pi**5*C1 + pi**5*C2)*C3*L1*L2)*L4)*ZL)*freq**5 - ((16*I*pi**4*C1*C2*L1*L2 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L1 + (16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L2)*L3 + (16*I*pi**4*C1*C3*L1 + 16*I*pi**4*C2*C3*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L4)*ZL*ZS + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L3)*L4)*freq**4 - 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4*ZS - (pi**3*C3*L1*L4 + (pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3)*ZL)*freq**3 - (4*I*pi**2*L1*L4 + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C3*L4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*ZL*ZS)*freq**2 - I*ZL*ZS - 2*(pi*L1*ZL - pi*L4*ZS)*freq)/(128*(pi**7*C1*C2*C3*L1*L2*L3*L4*ZL + pi**7*C1*C2*C3*L1*L2*L3*L4*ZS)*freq**7 + ((-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*L1*L2*L3*L4 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*L1*L2 + (-64*I*pi**6*C1*C2*C3*L1 - 64*I*pi**6*C1*C2*C3*L2)*L3)*L4)*ZL*ZS)*freq**6 - 32*((pi**5*C1*C2*L1*L2 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3)*L4*ZS + ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3 + (pi**5*C2*C3*L1*L3 + (pi**5*C1 + pi**5*C2)*C3*L1*L2)*L4)*ZL)*freq**5 + ((16*I*pi**4*C1*C2*L1*L2 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L1 + (16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L2)*L3 + (16*I*pi**4*C1*C3*L1 + 16*I*pi**4*C2*C3*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L4)*ZL*ZS + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L3)*L4)*freq**4 + 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4*ZS + (pi**3*C3*L1*L4 + (pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3)*ZL)*freq**3 + (-4*I*pi**2*L1*L4 + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C3*L4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*ZL*ZS)*freq**2 + I*ZL*ZS - 2*(pi*L1*ZL + pi*L4*ZS)*freq)

                    S21 = 256*pi**7*C1*C2*C3*L1*L2*L3*L4*ZL*ZS*freq**7/((128*(pi**7*C1*C2*C3*L1*L2*L3*L4*ZL + pi**7*C1*C2*C3*L1*L2*L3*L4*ZS)*freq**7 + ((-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*L1*L2*L3*L4 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*L1*L2 + (-64*I*pi**6*C1*C2*C3*L1 - 64*I*pi**6*C1*C2*C3*L2)*L3)*L4)*ZL*ZS)*freq**6 - 32*((pi**5*C1*C2*L1*L2 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3)*L4*ZS + ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3 + (pi**5*C2*C3*L1*L3 + (pi**5*C1 + pi**5*C2)*C3*L1*L2)*L4)*ZL)*freq**5 + ((16*I*pi**4*C1*C2*L1*L2 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L1 + (16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L2)*L3 + (16*I*pi**4*C1*C3*L1 + 16*I*pi**4*C2*C3*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L4)*ZL*ZS + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L3)*L4)*freq**4 + 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4*ZS + (pi**3*C3*L1*L4 + (pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3)*ZL)*freq**3 + (-4*I*pi**2*L1*L4 + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C3*L4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*ZL*ZS)*freq**2 + I*ZL*ZS - 2*(pi*L1*ZL + pi*L4*ZS)*freq)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 8):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']

                    S11 = (256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL - pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 - ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 + (-128*I*pi**7*C1*C2*C3*C4*L1 - 128*I*pi**7*C1*C2*C3*C4*L2)*L3)*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1*L2*L3 + (pi**6*C2*C3*C4*L1*L3 + (pi**6*C1 + pi**6*C2)*C3*C4*L1*L2)*L4)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L2)*L3)*L4)*ZS)*freq**6 - ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (32*I*pi**5*C1*C2*C4*L1*L2 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L1 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4*L2)*L3 + (32*I*pi**5*C1*C3*C4*L1 + 32*I*pi**5*C2*C3*C4*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L2)*L4)*ZL*ZS + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1*L2 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*L1*L3)*L4)*freq**5 + 16*((pi**4*C3*C4*L1*L4 + (pi**4*C1 + pi**4*C2)*C4*L1*L2 + (pi**4*C2 + pi**4*C3)*C4*L1*L3)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L3)*L4)*ZS)*freq**4 - ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1*L3 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L4 + (-8*I*pi**3*C1*C4*L1 - 8*I*pi**3*C3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L3)*ZL*ZS)*freq**3 - 4*(pi**2*C4*L1*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 - (2*I*pi*C4*ZL*ZS - 2*I*pi*L1)*freq - ZS)/(256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 + (-128*I*pi**7*C1*C2*C3*C4*L1 - 128*I*pi**7*C1*C2*C3*C4*L2)*L3)*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1*L2*L3 + (pi**6*C2*C3*C4*L1*L3 + (pi**6*C1 + pi**6*C2)*C3*C4*L1*L2)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L2)*L3)*L4)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2*L3 + (32*I*pi**5*C1*C2*C4*L1*L2 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L1 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4*L2)*L3 + (32*I*pi**5*C1*C3*C4*L1 + 32*I*pi**5*C2*C3*C4*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L2)*L4)*ZL*ZS + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1*L2 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*L1*L3)*L4)*freq**5 + 16*((pi**4*C3*C4*L1*L4 + (pi**4*C1 + pi**4*C2)*C4*L1*L2 + (pi**4*C2 + pi**4*C3)*C4*L1*L3)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L3)*L4)*ZS)*freq**4 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1*L3 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L4 + (-8*I*pi**3*C1*C4*L1 - 8*I*pi**3*C3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L3)*ZL*ZS)*freq**3 - 4*(pi**2*C4*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + (2*I*pi*C4*ZL*ZS + 2*I*pi*L1)*freq + ZS)

                    S21 = 512*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*ZS*freq**8/((256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 + (-128*I*pi**7*C1*C2*C3*C4*L1 - 128*I*pi**7*C1*C2*C3*C4*L2)*L3)*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1*L2*L3 + (pi**6*C2*C3*C4*L1*L3 + (pi**6*C1 + pi**6*C2)*C3*C4*L1*L2)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L2)*L3)*L4)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2*L3 + (32*I*pi**5*C1*C2*C4*L1*L2 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4*L1 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4*L2)*L3 + (32*I*pi**5*C1*C3*C4*L1 + 32*I*pi**5*C2*C3*C4*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*C4*L2)*L4)*ZL*ZS + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1*L2 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*L1*L3)*L4)*freq**5 + 16*((pi**4*C3*C4*L1*L4 + (pi**4*C1 + pi**4*C2)*C4*L1*L2 + (pi**4*C2 + pi**4*C3)*C4*L1*L3)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L3)*L4)*ZS)*freq**4 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1*L3 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L4 + (-8*I*pi**3*C1*C4*L1 - 8*I*pi**3*C3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C4*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4*L3)*ZL*ZS)*freq**3 - 4*(pi**2*C4*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + (2*I*pi*C4*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))
                    
                if(network_type['N'] == 9):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    
                    S11 = (512*(pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZL - pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZS)*freq**9 - ((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + (256*I*pi**8*C1 + 256*I*pi**8*C2)*C3)*C4)*L1*L2*L3*L4*L5 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2*L3 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2 + (-256*I*pi**8*C1*C2*C3*C4*L1 - 256*I*pi**8*C1*C2*C3*C4*L2)*L3)*L4)*L5)*ZL*ZS)*freq**8 + 128*((pi**7*C1*C2*C3*L1*L2*L3 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L1*L2 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*L1 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*L2)*L3)*L4)*L5*ZS - ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + ((pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4*L1*L2*L3 + (pi**7*C2*C3*C4*L1*L3 + (pi**7*C1 + pi**7*C2)*C3*C4*L1*L2)*L4)*L5)*ZL)*freq**7 - ((64*I*pi**6*C1*C2*C3*L1*L2*L3 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*L1*L2 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*L1 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4)*L2)*L3)*L4 + (64*I*pi**6*C1*C2*C4*L1*L2 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*L1 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4*L2)*L3 + (64*I*pi**6*C1*C3*C4*L1 + 64*I*pi**6*C2*C3*C4*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4*L2)*L4)*L5)*ZL*ZS + ((-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*L1*L2*L3 + (((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C4)*L1*L2 + (-64*I*pi**6*C2*C3 + (-64*I*pi**6*C2 - 64*I*pi**6*C3)*C4)*L1*L3)*L4)*L5)*freq**6 - 32*((pi**5*C1*C2*L1*L2 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L2 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*L3)*L4)*L5*ZS - ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L1*L2 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*L1*L3)*L4 + (pi**5*C3*C4*L1*L4 + (pi**5*C1 + pi**5*C2)*C4*L1*L2 + (pi**5*C2 + pi**5*C3)*C4*L1*L3)*L5)*ZL)*freq**5 - ((-16*I*pi**4*C1*C2*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1 + (-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L2 + (-16*I*pi**4*C2*C3 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4)*L3)*L4 + (-16*I*pi**4*C1*C4*L1 - 16*I*pi**4*C3*C4*L4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L3)*L5)*ZL*ZS + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L3 + (16*I*pi**4*C3 + 16*I*pi**4*C4)*L1*L4)*L5)*freq**4 + 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2 + (pi**3*C2 + pi**3*C3)*L3 + (pi**3*C3 + pi**3*C4)*L4)*L5*ZS - (pi**3*C4*L1*L5 + (pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3 + (pi**3*C3 + pi**3*C4)*L1*L4)*ZL)*freq**3 - (-4*I*pi**2*L1*L5 + (4*I*pi**2*C1*L1 + 4*I*pi**2*C4*L5 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L4)*ZL*ZS)*freq**2 + I*ZL*ZS + 2*(pi*L1*ZL - pi*L5*ZS)*freq)/(512*(pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZL + pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3)*C4)*L1*L2*L3*L4*L5 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2*L3 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2 + (-256*I*pi**8*C1*C2*C3*C4*L1 - 256*I*pi**8*C1*C2*C3*C4*L2)*L3)*L4)*L5)*ZL*ZS)*freq**8 - 128*((pi**7*C1*C2*C3*L1*L2*L3 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L1*L2 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*L1 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*L2)*L3)*L4)*L5*ZS + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + ((pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4*L1*L2*L3 + (pi**7*C2*C3*C4*L1*L3 + (pi**7*C1 + pi**7*C2)*C3*C4*L1*L2)*L4)*L5)*ZL)*freq**7 + ((64*I*pi**6*C1*C2*C3*L1*L2*L3 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*L1*L2 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*L1 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4)*L2)*L3)*L4 + (64*I*pi**6*C1*C2*C4*L1*L2 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*L1 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4*L2)*L3 + (64*I*pi**6*C1*C3*C4*L1 + 64*I*pi**6*C2*C3*C4*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4*L2)*L4)*L5)*ZL*ZS + ((64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*L1*L2*L3 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*L1*L2 + (64*I*pi**6*C2*C3 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*L1*L3)*L4)*L5)*freq**6 + 32*((pi**5*C1*C2*L1*L2 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L2 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*L3)*L4)*L5*ZS + ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L1*L2 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*L1*L3)*L4 + (pi**5*C3*C4*L1*L4 + (pi**5*C1 + pi**5*C2)*C4*L1*L2 + (pi**5*C2 + pi**5*C3)*C4*L1*L3)*L5)*ZL)*freq**5 + ((-16*I*pi**4*C1*C2*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1 + (-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L2 + (-16*I*pi**4*C2*C3 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4)*L3)*L4 + (-16*I*pi**4*C1*C4*L1 - 16*I*pi**4*C3*C4*L4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L3)*L5)*ZL*ZS + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L3 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L4)*L5)*freq**4 - 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2 + (pi**3*C2 + pi**3*C3)*L3 + (pi**3*C3 + pi**3*C4)*L4)*L5*ZS + (pi**3*C4*L1*L5 + (pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3 + (pi**3*C3 + pi**3*C4)*L1*L4)*ZL)*freq**3 + (4*I*pi**2*L1*L5 + (4*I*pi**2*C1*L1 + 4*I*pi**2*C4*L5 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L4)*ZL*ZS)*freq**2 - I*ZL*ZS + 2*(pi*L1*ZL + pi*L5*ZS)*freq)

                    S21 = 1024*pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZL*ZS*freq**9/((512*(pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZL + pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3)*C4)*L1*L2*L3*L4*L5 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2*L3 + (-256*I*pi**8*C1*C2*C3*C4*L1*L2 + (-256*I*pi**8*C1*C2*C3*C4*L1 - 256*I*pi**8*C1*C2*C3*C4*L2)*L3)*L4)*L5)*ZL*ZS)*freq**8 - 128*((pi**7*C1*C2*C3*L1*L2*L3 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L1*L2 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*L1 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*L2)*L3)*L4)*L5*ZS + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + ((pi**7*C1*C2 + (pi**7*C1 + pi**7*C2)*C3)*C4*L1*L2*L3 + (pi**7*C2*C3*C4*L1*L3 + (pi**7*C1 + pi**7*C2)*C3*C4*L1*L2)*L4)*L5)*ZL)*freq**7 + ((64*I*pi**6*C1*C2*C3*L1*L2*L3 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*L1*L2 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*L1 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4)*L2)*L3)*L4 + (64*I*pi**6*C1*C2*C4*L1*L2 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*L1 + (64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*C4*L2)*L3 + (64*I*pi**6*C1*C3*C4*L1 + 64*I*pi**6*C2*C3*C4*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4*L2)*L4)*L5)*ZL*ZS + ((64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*L1*L2*L3 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*L1*L2 + (64*I*pi**6*C2*C3 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*L1*L3)*L4)*L5)*freq**6 + 32*((pi**5*C1*C2*L1*L2 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L2 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*L3)*L4)*L5*ZS + ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L1*L2 + (pi**5*C2*C3 + (pi**5*C2 + pi**5*C3)*C4)*L1*L3)*L4 + (pi**5*C3*C4*L1*L4 + (pi**5*C1 + pi**5*C2)*C4*L1*L2 + (pi**5*C2 + pi**5*C3)*C4*L1*L3)*L5)*ZL)*freq**5 + ((-16*I*pi**4*C1*C2*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1 + (-16*I*pi**4*C1*C2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3)*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L2 + (-16*I*pi**4*C2*C3 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4)*L3)*L4 + (-16*I*pi**4*C1*C4*L1 - 16*I*pi**4*C3*C4*L4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L3)*L5)*ZL*ZS + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L3 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L4)*L5)*freq**4 - 8*((pi**3*C1*L1 + (pi**3*C1 + pi**3*C2)*L2 + (pi**3*C2 + pi**3*C3)*L3 + (pi**3*C3 + pi**3*C4)*L4)*L5*ZS + (pi**3*C4*L1*L5 + (pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3 + (pi**3*C3 + pi**3*C4)*L1*L4)*ZL)*freq**3 + (4*I*pi**2*L1*L5 + (4*I*pi**2*C1*L1 + 4*I*pi**2*C4*L5 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L4)*ZL*ZS)*freq**2 - I*ZL*ZS + 2*(pi*L1*ZL + pi*L5*ZS)*freq)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 10):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']

                    S11 = (1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL - pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 - ((512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3)*C4)*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1 - 512*I*pi**9*C1*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS)*freq**9 - 256*(((pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5*L1*L2*L3*L4 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5*L1*L2*L3 + (pi**8*C2*C3*C4*C5*L1*L3 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1*L2)*L4)*L5)*ZL - (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5)*L1*L2 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5)*L1 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5)*L2)*L3)*L4)*L5)*ZS)*freq**8 - ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L1 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*C5*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C4*C5*L1*L2 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L1 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4*C5*L2)*L3 + (128*I*pi**7*C1*C3*C4*C5*L1 + 128*I*pi**7*C2*C3*C4*C5*L3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L2)*L4)*L5)*ZL*ZS + (((-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C4 + (-128*I*pi**7*C1*C2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3)*C5)*L1*L2*L3 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C4)*C5)*L1*L2 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2*C3 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5)*L1*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5*L1*L2*L3 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1*L2 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5*L1*L3)*L4 + (pi**6*C3*C4*C5*L1*L4 + (pi**6*C1 + pi**6*C2)*C4*C5*L1*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1*L3)*L5)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L2)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5)*L2)*L3 + ((pi**6*C1*C3*C4 + (pi**6*C1*C3 + pi**6*C1*C4)*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5)*L2 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5)*L3)*L4)*L5)*ZS)*freq**6 - ((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C5*L1*L2 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L1 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C5*L2)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L2 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*C5*L3)*L4 + (-32*I*pi**5*C1*C4*C5*L1 - 32*I*pi**5*C3*C4*C5*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4*C5*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L3)*L5)*ZL*ZS + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1*L2 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*L1*L3)*L4 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C5)*L1*L2 + ((32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L1*L3 + (32*I*pi**5*C3*C4 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5)*L1*L4)*L5)*freq**5 - 16*((pi**4*C4*C5*L1*L5 + (pi**4*C1 + pi**4*C2)*C5*L1*L2 + (pi**4*C2 + pi**4*C3)*C5*L1*L3 + (pi**4*C3 + pi**4*C4)*C5*L1*L4)*ZL - (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L3)*L4 + ((pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L2 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C3*C4 + (pi**4*C3 + pi**4*C4)*C5)*L4)*L5)*ZS)*freq**4 - ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1*L2 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*L1*L3 + (-8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L4 + (-8*I*pi**3*C4 - 8*I*pi**3*C5)*L1*L5 + (8*I*pi**3*C1*C5*L1 + 8*I*pi**3*C4*C5*L5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*C5*L3 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L4)*ZL*ZS)*freq**3 + 4*(pi**2*C5*L1*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C3 + pi**2*C4)*L4 + (pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 - (-2*I*pi*C5*ZL*ZS + 2*I*pi*L1)*freq + ZS)/(1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 + (-512*I*pi**9*C1 - 512*I*pi**9*C2)*C3)*C4)*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1 - 512*I*pi**9*C1*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS)*freq**9 - 256*(((pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5*L1*L2*L3*L4 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5*L1*L2*L3 + (pi**8*C2*C3*C4*C5*L1*L3 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1*L2)*L4)*L5)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5)*L1*L2 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5)*L1 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5)*L2)*L3)*L4)*L5)*ZS)*freq**8 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L1 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*C5*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C4*C5*L1*L2 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L1 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4*C5*L2)*L3 + (128*I*pi**7*C1*C3*C4*C5*L1 + 128*I*pi**7*C2*C3*C4*C5*L3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L2)*L4)*L5)*ZL*ZS + (((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C5)*L1*L2*L3 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*L1*L2 + (128*I*pi**7*C2*C3*C4 + (128*I*pi**7*C2*C3 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4)*C5)*L1*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5*L1*L2*L3 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1*L2 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5*L1*L3)*L4 + (pi**6*C3*C4*C5*L1*L4 + (pi**6*C1 + pi**6*C2)*C4*C5*L1*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1*L3)*L5)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L2)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5)*L2)*L3 + ((pi**6*C1*C3*C4 + (pi**6*C1*C3 + pi**6*C1*C4)*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5)*L2 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5)*L3)*L4)*L5)*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C5*L1*L2 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L1 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C5*L2)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L2 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*C5*L3)*L4 + (-32*I*pi**5*C1*C4*C5*L1 - 32*I*pi**5*C3*C4*C5*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4*C5*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L3)*L5)*ZL*ZS + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1*L2 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*L1*L3)*L4 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*L1*L2 + ((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1*L3 + (-32*I*pi**5*C3*C4 + (-32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*L1*L4)*L5)*freq**5 - 16*((pi**4*C4*C5*L1*L5 + (pi**4*C1 + pi**4*C2)*C5*L1*L2 + (pi**4*C2 + pi**4*C3)*C5*L1*L3 + (pi**4*C3 + pi**4*C4)*C5*L1*L4)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L3)*L4 + ((pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L2 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C3*C4 + (pi**4*C3 + pi**4*C4)*C5)*L4)*L5)*ZS)*freq**4 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1*L3 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L4 + (8*I*pi**3*C4 + 8*I*pi**3*C5)*L1*L5 + (8*I*pi**3*C1*C5*L1 + 8*I*pi**3*C4*C5*L5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*C5*L3 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L4)*ZL*ZS)*freq**3 + 4*(pi**2*C5*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C3 + pi**2*C4)*L4 + (pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + (-2*I*pi*C5*ZL*ZS - 2*I*pi*L1)*freq - ZS)

                    S21 = 2048*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*freq**10/((1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 + (-512*I*pi**9*C1 - 512*I*pi**9*C2)*C3)*C4)*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1 - 512*I*pi**9*C1*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS)*freq**9 - 256*(((pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5*L1*L2*L3*L4 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5*L1*L2*L3 + (pi**8*C2*C3*C4*C5*L1*L3 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1*L2)*L4)*L5)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5)*L1*L2 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5)*L1 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4)*C5)*L2)*L3)*L4)*L5)*ZS)*freq**8 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5*L1*L2 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L1 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4)*C5*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C4*C5*L1*L2 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4*C5*L1 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4*C5*L2)*L3 + (128*I*pi**7*C1*C3*C4*C5*L1 + 128*I*pi**7*C2*C3*C4*C5*L3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4*C5*L2)*L4)*L5)*ZL*ZS + (((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C5)*L1*L2*L3 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + ((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*L1*L2 + (128*I*pi**7*C2*C3*C4 + (128*I*pi**7*C2*C3 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4)*C5)*L1*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5*L1*L2*L3 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L1*L2 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5*L1*L3)*L4 + (pi**6*C3*C4*C5*L1*L4 + (pi**6*C1 + pi**6*C2)*C4*C5*L1*L2 + (pi**6*C2 + pi**6*C3)*C4*C5*L1*L3)*L5)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1 + (pi**6*C1*C2*C3 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4)*L2)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C5)*L2)*L3 + ((pi**6*C1*C3*C4 + (pi**6*C1*C3 + pi**6*C1*C4)*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5)*L2 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4)*C5)*L3)*L4)*L5)*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C5*L1*L2 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L1 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C5*L2)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L1 + ((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5*L2 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*C5*L3)*L4 + (-32*I*pi**5*C1*C4*C5*L1 - 32*I*pi**5*C3*C4*C5*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4*C5*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*C5*L3)*L5)*ZL*ZS + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1*L2 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*L1*L3)*L4 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*L1*L2 + ((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1*L3 + (-32*I*pi**5*C3*C4 + (-32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*L1*L4)*L5)*freq**5 - 16*((pi**4*C4*C5*L1*L5 + (pi**4*C1 + pi**4*C2)*C5*L1*L2 + (pi**4*C2 + pi**4*C3)*C5*L1*L3 + (pi**4*C3 + pi**4*C4)*C5*L1*L4)*ZL + (pi**4*C1*C2*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3)*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4)*L3)*L4 + ((pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5)*L2 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C3*C4 + (pi**4*C3 + pi**4*C4)*C5)*L4)*L5)*ZS)*freq**4 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*L1*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L1*L3 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L4 + (8*I*pi**3*C4 + 8*I*pi**3*C5)*L1*L5 + (8*I*pi**3*C1*C5*L1 + 8*I*pi**3*C4*C5*L5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5*L2 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*C5*L3 + (8*I*pi**3*C3 + 8*I*pi**3*C4)*C5*L4)*ZL*ZS)*freq**3 + 4*(pi**2*C5*L1*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C3 + pi**2*C4)*L4 + (pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + (-2*I*pi*C5*ZL*ZS - 2*I*pi*L1)*freq - ZS)*np.sqrt(ZL*ZS))
                    
        elif(network_type['Mask'] == 'Bandpass'):
            if (network_type['First_Element'] == 'Shunt'):
                    if(network_type['N'] == 1):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        S11 = (-4*I*np.power(pi, 2)*C1*L1*ZL*ZS*np.power(freq, 2) + I*ZL*ZS + 2*(pi*L1*ZL - pi*L1*ZS)*freq)/(4*I*np.power(pi, 2)*C1*L1*ZL*ZS*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L1*ZS)*freq)
                        S21 = 4*pi*np.sqrt(ZL*ZS)*L1*freq/(4*I*np.power(pi, 2)*C1*L1*ZL*ZS*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L1*ZS)*freq)
                    elif(network_type['N'] == 2):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        S11 = -(16*np.power(pi, 4)*C1*C2*L1*L2*ZS*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C1*C2*L1*ZL*ZS + 8*I*np.power(pi, 3)*C2*L1*L2)*np.power(freq, 3) + 4*(np.power(pi, 2)*C2*L1*ZL - (np.power(pi, 2)*C2*L2 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1)*ZS)*np.power(freq, 2) + (2*I*pi*C2*ZL*ZS - 2*I*pi*L1)*freq + ZS)/(16*np.power(pi, 4)*C1*C2*L1*L2*ZS*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C1*C2*L1*ZL*ZS - 8*I*np.power(pi, 3)*C2*L1*L2)*np.power(freq, 3) - 4*(np.power(pi, 2)*C2*L1*ZL + (np.power(pi, 2)*C2*L2 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1)*ZS)*np.power(freq, 2) + (2*I*pi*C2*ZL*ZS + 2*I*pi*L1)*freq + ZS)
                        S21 = -8*np.power(pi, 2)*C2*L1*ZL*ZS*np.power(freq, 2)/((16*np.power(pi, 4)*C1*C2*L1*L2*ZS*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C1*C2*L1*ZL*ZS - 8*I*np.power(pi, 3)*C2*L1*L2)*np.power(freq, 3) - 4*(np.power(pi, 2)*C2*L1*ZL + (np.power(pi, 2)*C2*L2 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1)*ZS)*np.power(freq, 2) + (2*I*pi*C2*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 3):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        S11 = (-64*I*np.power(pi, 6)*C1*C2*C3*L1*L2*L3*ZL*ZS*np.power(freq, 6) + 32*(np.power(pi, 5)*C2*C3*L1*L2*L3*ZL - np.power(pi, 5)*C1*C2*L1*L2*L3*ZS)*np.power(freq, 5) - (16*I*np.power(pi, 4)*C2*L1*L2*L3 + (-16*I*np.power(pi, 4)*C1*C2*L1*L2 + (-16*I*np.power(pi, 4)*C2*C3*L2 + (-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3)*L1)*L3)*ZL*ZS)*np.power(freq, 4) + 8*((np.power(pi, 3)*C2*L2 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1)*L3*ZS - (np.power(pi, 3)*C2*L1*L2 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3)*L1*L3)*ZL)*np.power(freq, 3) - (-4*I*np.power(pi, 2)*L1*L3 + (4*I*np.power(pi, 2)*C2*L2 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3)*L3)*ZL*ZS)*np.power(freq, 2) + I*ZL*ZS + 2*(pi*L1*ZL - pi*L3*ZS)*freq)/(64*I*np.power(pi, 6)*C1*C2*C3*L1*L2*L3*ZL*ZS*np.power(freq, 6) + 32*(np.power(pi, 5)*C2*C3*L1*L2*L3*ZL + np.power(pi, 5)*C1*C2*L1*L2*L3*ZS)*np.power(freq, 5) + (-16*I*np.power(pi, 4)*C2*L1*L2*L3 + (-16*I*np.power(pi, 4)*C1*C2*L1*L2 + (-16*I*np.power(pi, 4)*C2*C3*L2 + (-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3)*L1)*L3)*ZL*ZS)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1)*L3*ZS + (np.power(pi, 3)*C2*L1*L2 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3)*L1*L3)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L3 + (4*I*np.power(pi, 2)*C2*L2 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3)*L3)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L3*ZS)*freq)
                        S21 = -16*np.power(pi, 3)*C2*L1*L3*ZL*ZS*np.power(freq, 3)/((64*I*np.power(pi, 6)*C1*C2*C3*L1*L2*L3*ZL*ZS*np.power(freq, 6) + 32*(np.power(pi, 5)*C2*C3*L1*L2*L3*ZL + np.power(pi, 5)*C1*C2*L1*L2*L3*ZS)*np.power(freq, 5) + (-16*I*np.power(pi, 4)*C2*L1*L2*L3 + (-16*I*np.power(pi, 4)*C1*C2*L1*L2 + (-16*I*np.power(pi, 4)*C2*C3*L2 + (-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3)*L1)*L3)*ZL*ZS)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1)*L3*ZS + (np.power(pi, 3)*C2*L1*L2 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3)*L1*L3)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L3 + (4*I*np.power(pi, 2)*C2*L2 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3)*L3)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L3*ZS)*freq)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 4):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        S11 = -(256*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4*ZS*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C1*C2*C3*C4*L1*L2*L3*ZL*ZS + 128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4)*np.power(freq, 7) + 64*(np.power(pi, 6)*C2*C3*C4*L1*L2*L3*ZL - ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4)*ZS)*np.power(freq, 6) + ((-32*I*np.power(pi, 5)*C2*C3 - 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2*C3*C4*L2 + (32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3)*C4*L1)*L3)*ZL*ZS + (-32*I*np.power(pi, 5)*C2*C4*L1*L2 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4)*np.power(freq, 5) - 16*((np.power(pi, 4)*C2*C4*L1*L2 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L1*L3)*ZL - (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4)*ZS)*np.power(freq, 4) + (8*I*np.power(pi, 3)*C2*L1*L2 + 8*I*np.power(pi, 3)*C4*L1*L4 + (8*I*np.power(pi, 3)*C2 + 8*I*np.power(pi, 3)*C3 + 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C2*C4*L2 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C4*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3)*C4*L3)*ZL*ZS)*np.power(freq, 3) + 4*(np.power(pi, 2)*C4*L1*ZL - (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3)*ZS)*np.power(freq, 2) + (2*I*pi*C4*ZL*ZS - 2*I*pi*L1)*freq + ZS)/(256*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4*ZS*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C1*C2*C3*C4*L1*L2*L3*ZL*ZS - 128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4)*np.power(freq, 7) - 64*(np.power(pi, 6)*C2*C3*C4*L1*L2*L3*ZL + ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4)*ZS)*np.power(freq, 6) + ((32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2*C3*C4*L2 + (32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3)*C4*L1)*L3)*ZL*ZS + (32*I*np.power(pi, 5)*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4)*np.power(freq, 5) + 16*((np.power(pi, 4)*C2*C4*L1*L2 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L1*L3)*ZL + (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4)*ZS)*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C2*L1*L2 - 8*I*np.power(pi, 3)*C4*L1*L4 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C2*C4*L2 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C4*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3)*C4*L3)*ZL*ZS)*np.power(freq, 3) - 4*(np.power(pi, 2)*C4*L1*ZL + (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3)*ZS)*np.power(freq, 2) + (2*I*pi*C4*ZL*ZS + 2*I*pi*L1)*freq + ZS)
                        S21 = 32*np.power(pi, 4)*C2*C4*L1*L3*ZL*ZS*np.power(freq, 4)/((256*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4*ZS*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C1*C2*C3*C4*L1*L2*L3*ZL*ZS - 128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4)*np.power(freq, 7) - 64*(np.power(pi, 6)*C2*C3*C4*L1*L2*L3*ZL + ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4)*ZS)*np.power(freq, 6) + ((32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2*C3*C4*L2 + (32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3)*C4*L1)*L3)*ZL*ZS + (32*I*np.power(pi, 5)*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4)*np.power(freq, 5) + 16*((np.power(pi, 4)*C2*C4*L1*L2 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L1*L3)*ZL + (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4)*ZS)*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C2*L1*L2 - 8*I*np.power(pi, 3)*C4*L1*L4 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C2*C4*L2 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C4*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3)*C4*L3)*ZL*ZS)*np.power(freq, 3) - 4*(np.power(pi, 2)*C4*L1*ZL + (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3)*ZS)*np.power(freq, 2) + (2*I*pi*C4*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 5):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        L5 = comp_val['L5']
                        C5 = comp_val['C5']
                        S11 = (-1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*np.power(freq, 10) + 512*(np.power(pi, 9)*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL - np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZS)*np.power(freq, 9) - (256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4*L5 + (-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5)*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C5*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5*L1)*L3)*L4)*L5)*ZL*ZS)*np.power(freq, 8) + 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4)*L5*ZS - (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5)*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C5*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5*L1*L3)*L4)*L5)*ZL)*np.power(freq, 7) - (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5)*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C5*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5*L3)*L4)*L5)*ZL*ZS + ((-64*I*np.power(pi, 6)*C2*C3 - 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (-64*I*np.power(pi, 6)*C2*C4*L1*L2 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4)*L5)*np.power(freq, 6) - 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4)*L5*ZS - ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + (np.power(pi, 5)*C4*C5*L1*L4 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5)*L1*L3)*L5)*ZL)*np.power(freq, 5) - ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (-16*I*np.power(pi, 4)*C4*C5*L4 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5)*L3)*L5)*ZL*ZS + (16*I*np.power(pi, 4)*C2*L1*L2 + 16*I*np.power(pi, 4)*C4*L1*L4 + (16*I*np.power(pi, 4)*C2 + 16*I*np.power(pi, 4)*C3 + 16*I*np.power(pi, 4)*C4)*L1*L3)*L5)*np.power(freq, 4) + 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3)*L5*ZS - (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5)*L1*L5)*ZL)*np.power(freq, 3) - (-4*I*np.power(pi, 2)*L1*L5 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5)*L5)*ZL*ZS)*np.power(freq, 2) + I*ZL*ZS + 2*(pi*L1*ZL - pi*L5*ZS)*freq)/(1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*np.power(freq, 10) + 512*(np.power(pi, 9)*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZS)*np.power(freq, 9) + (-256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4*L5 + (-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5)*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C5*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5*L1)*L3)*L4)*L5)*ZL*ZS)*np.power(freq, 8) - 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4)*L5*ZS + (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5)*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C5*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5*L1*L3)*L4)*L5)*ZL)*np.power(freq, 7) + (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5)*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C5*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5*L3)*L4)*L5)*ZL*ZS + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4)*L5)*np.power(freq, 6) + 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4)*L5*ZS + ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + (np.power(pi, 5)*C4*C5*L1*L4 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5)*L1*L3)*L5)*ZL)*np.power(freq, 5) + ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (-16*I*np.power(pi, 4)*C4*C5*L4 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5)*L3)*L5)*ZL*ZS + (-16*I*np.power(pi, 4)*C2*L1*L2 - 16*I*np.power(pi, 4)*C4*L1*L4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*L1*L3)*L5)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3)*L5*ZS + (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5)*L1*L5)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L5 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5)*L5)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L5*ZS)*freq)
                        S21 = 64*np.power(pi, 5)*C2*C4*L1*L3*L5*ZL*ZS*np.power(freq, 5)/((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*np.power(freq, 10) + 512*(np.power(pi, 9)*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4*L5*ZS)*np.power(freq, 9) + (-256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4*L5 + (-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5)*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C5*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5*L1)*L3)*L4)*L5)*ZL*ZS)*np.power(freq, 8) - 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4)*L5*ZS + (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5)*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C5*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5*L1*L3)*L4)*L5)*ZL)*np.power(freq, 7) + (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5)*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C5*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5*L3)*L4)*L5)*ZL*ZS + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4)*L5)*np.power(freq, 6) + 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4)*L5*ZS + ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + (np.power(pi, 5)*C4*C5*L1*L4 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5)*L1*L3)*L5)*ZL)*np.power(freq, 5) + ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (-16*I*np.power(pi, 4)*C4*C5*L4 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5)*L3)*L5)*ZL*ZS + (-16*I*np.power(pi, 4)*C2*L1*L2 - 16*I*np.power(pi, 4)*C4*L1*L4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*L1*L3)*L5)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3)*L5*ZS + (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5)*L1*L5)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L5 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5)*L5)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L5*ZS)*freq)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 6):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        L5 = comp_val['L5']
                        C5 = comp_val['C5']
                        L6 = comp_val['L6']
                        C6 = comp_val['C6']
                        S11 = -(4096*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZS*np.power(freq, 12) + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*ZL*ZS + 2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6)*np.power(freq, 11) + 1024*(np.power(pi, 10)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*ZL - ((np.power(pi, 10)*C1*C2*C3*C4*C5 + np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*ZS)*np.power(freq, 10) + ((-512*I*np.power(pi, 9)*C2*C3*C4*C5 - 512*I*np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (512*I*np.power(pi, 9)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C1*C2*C3*C4 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C1*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2*C3*C4*C5*C6*L2 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*ZL*ZS + (-512*I*np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((-512*I*np.power(pi, 9)*C2*C3*C4 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (-512*I*np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6)*np.power(freq, 9) - 256*((np.power(pi, 8)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*ZL - (np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 8)*C1*C2*C3*C4 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C5 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C5 + np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 8)*C2*C3*C4*C5 + np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C6*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6)*ZS)*np.power(freq, 8) + (128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C3 - 128*I*np.power(pi, 7)*C1*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C1*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2*C3*C4*C6*L2 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C4 - 128*I*np.power(pi, 7)*C1*C2*C5)*C6*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C5)*C6*L1 + (-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5)*C6*L2)*L3 + (-128*I*np.power(pi, 7)*C2*C4*C5*C6*L2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C5*C6*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5*C6*L3)*L4)*L5)*ZL*ZS + ((128*I*np.power(pi, 7)*C2*C3*C4 + (128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C5 + (128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((128*I*np.power(pi, 7)*C2*C4*C5 + 128*I*np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C5 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (128*I*np.power(pi, 7)*C2*C4*C6*L1*L2 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (128*I*np.power(pi, 7)*C4*C5*C6*L1*L4 + (128*I*np.power(pi, 7)*C2*C4 + 128*I*np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6)*np.power(freq, 7) + 64*(((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 6)*C2*C4*C6*L1*L2 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L1*L4 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L1*L3)*L5)*ZL - ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 6)*C1*C2*C4 + np.power(pi, 6)*C1*C2*C5 + np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C5 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6)*L1 + (np.power(pi, 6)*C2*C3*C4 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C5 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6)*L1 + (np.power(pi, 6)*C2*C4*C5 + np.power(pi, 6)*C2*C4*C6)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 6)*C1*C2*C6*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (np.power(pi, 6)*C2*C4*C6*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L4 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6)*ZS)*np.power(freq, 6) + ((-32*I*np.power(pi, 5)*C2*C3 - 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C6*L1*L2 + ((32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4)*C6*L1 + (32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*C6*L2)*L3 + (32*I*np.power(pi, 5)*C2*C4*C6*L2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4*C6*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*C6*L3)*L4 + (32*I*np.power(pi, 5)*C4*C5*C6*L4 + ((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C5)*C6*L1 + (32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5)*C6*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5)*C6*L3)*L5)*ZL*ZS + (-32*I*np.power(pi, 5)*C2*C4*L1*L2 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((-32*I*np.power(pi, 5)*C2*C4 - 32*I*np.power(pi, 5)*C2*C5 - 32*I*np.power(pi, 5)*C2*C6)*L1*L2 + ((-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3)*C4 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C5 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C6)*L1*L3 + (-32*I*np.power(pi, 5)*C4*C5 - 32*I*np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (-32*I*np.power(pi, 5)*C2*C6*L1*L2 - 32*I*np.power(pi, 5)*C4*C6*L1*L4 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C6*L1*L3 + (-32*I*np.power(pi, 5)*C4 - 32*I*np.power(pi, 5)*C5)*C6*L1*L5)*L6)*np.power(freq, 5) - 16*((np.power(pi, 4)*C2*C6*L1*L2 + np.power(pi, 4)*C4*C6*L1*L4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L1*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L1*L5)*ZL - (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C5 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6)*L1 + (np.power(pi, 4)*C2*C4 + np.power(pi, 4)*C2*C5 + np.power(pi, 4)*C2*C6)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C5 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6)*L3 + (np.power(pi, 4)*C4*C5 + np.power(pi, 4)*C4*C6)*L4)*L5 + (np.power(pi, 4)*C2*C6*L2 + np.power(pi, 4)*C4*C6*L4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L5)*L6)*ZS)*np.power(freq, 4) + (8*I*np.power(pi, 3)*C2*L1*L2 + 8*I*np.power(pi, 3)*C4*L1*L4 + 8*I*np.power(pi, 3)*C6*L1*L6 + (8*I*np.power(pi, 3)*C2 + 8*I*np.power(pi, 3)*C3 + 8*I*np.power(pi, 3)*C4)*L1*L3 + (8*I*np.power(pi, 3)*C4 + 8*I*np.power(pi, 3)*C5 + 8*I*np.power(pi, 3)*C6)*L1*L5 + (-8*I*np.power(pi, 3)*C2*C6*L2 - 8*I*np.power(pi, 3)*C4*C6*L4 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C6*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*C6*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5)*C6*L5)*ZL*ZS)*np.power(freq, 3) + 4*(np.power(pi, 2)*C6*L1*ZL - (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + np.power(pi, 2)*C6*L6 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3 + (np.power(pi, 2)*C4 + np.power(pi, 2)*C5 + np.power(pi, 2)*C6)*L5)*ZS)*np.power(freq, 2) + (2*I*pi*C6*ZL*ZS - 2*I*pi*L1)*freq + ZS)/(4096*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZS*np.power(freq, 12) + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*ZL*ZS - 2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6)*np.power(freq, 11) - 1024*(np.power(pi, 10)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*ZL + ((np.power(pi, 10)*C1*C2*C3*C4*C5 + np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*ZS)*np.power(freq, 10) + ((512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (512*I*np.power(pi, 9)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C1*C2*C3*C4 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C1*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2*C3*C4*C5*C6*L2 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*ZL*ZS + (512*I*np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6)*np.power(freq, 9) + 256*((np.power(pi, 8)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*ZL + (np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 8)*C1*C2*C3*C4 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C5 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C5 + np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 8)*C2*C3*C4*C5 + np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C6*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6)*ZS)*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C3 - 128*I*np.power(pi, 7)*C1*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C1*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2*C3*C4*C6*L2 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C4 - 128*I*np.power(pi, 7)*C1*C2*C5)*C6*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C5)*C6*L1 + (-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5)*C6*L2)*L3 + (-128*I*np.power(pi, 7)*C2*C4*C5*C6*L2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C5*C6*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5*C6*L3)*L4)*L5)*ZL*ZS + ((-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*L1*L4 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6)*np.power(freq, 7) - 64*(((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 6)*C2*C4*C6*L1*L2 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L1*L4 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L1*L3)*L5)*ZL + ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 6)*C1*C2*C4 + np.power(pi, 6)*C1*C2*C5 + np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C5 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6)*L1 + (np.power(pi, 6)*C2*C3*C4 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C5 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6)*L1 + (np.power(pi, 6)*C2*C4*C5 + np.power(pi, 6)*C2*C4*C6)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 6)*C1*C2*C6*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (np.power(pi, 6)*C2*C4*C6*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L4 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6)*ZS)*np.power(freq, 6) + ((32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C6*L1*L2 + ((32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4)*C6*L1 + (32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*C6*L2)*L3 + (32*I*np.power(pi, 5)*C2*C4*C6*L2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4*C6*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*C6*L3)*L4 + (32*I*np.power(pi, 5)*C4*C5*C6*L4 + ((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C5)*C6*L1 + (32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5)*C6*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5)*C6*L3)*L5)*ZL*ZS + (32*I*np.power(pi, 5)*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*L1*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*L1*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*L1*L2 + 32*I*np.power(pi, 5)*C4*C6*L1*L4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*L1*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*L1*L5)*L6)*np.power(freq, 5) + 16*((np.power(pi, 4)*C2*C6*L1*L2 + np.power(pi, 4)*C4*C6*L1*L4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L1*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L1*L5)*ZL + (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C5 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6)*L1 + (np.power(pi, 4)*C2*C4 + np.power(pi, 4)*C2*C5 + np.power(pi, 4)*C2*C6)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C5 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6)*L3 + (np.power(pi, 4)*C4*C5 + np.power(pi, 4)*C4*C6)*L4)*L5 + (np.power(pi, 4)*C2*C6*L2 + np.power(pi, 4)*C4*C6*L4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L5)*L6)*ZS)*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C2*L1*L2 - 8*I*np.power(pi, 3)*C4*L1*L4 - 8*I*np.power(pi, 3)*C6*L1*L6 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*L1*L5 + (-8*I*np.power(pi, 3)*C2*C6*L2 - 8*I*np.power(pi, 3)*C4*C6*L4 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C6*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*C6*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5)*C6*L5)*ZL*ZS)*np.power(freq, 3) - 4*(np.power(pi, 2)*C6*L1*ZL + (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + np.power(pi, 2)*C6*L6 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3 + (np.power(pi, 2)*C4 + np.power(pi, 2)*C5 + np.power(pi, 2)*C6)*L5)*ZS)*np.power(freq, 2) + (2*I*pi*C6*ZL*ZS + 2*I*pi*L1)*freq + ZS)
                        S21 = -128*np.power(pi, 6)*C2*C4*C6*L1*L3*L5*ZL*ZS*np.power(freq, 6)/((4096*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZS*np.power(freq, 12) + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*ZL*ZS - 2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6)*np.power(freq, 11) - 1024*(np.power(pi, 10)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*ZL + ((np.power(pi, 10)*C1*C2*C3*C4*C5 + np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*ZS)*np.power(freq, 10) + ((512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (512*I*np.power(pi, 9)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C1*C2*C3*C4 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C1*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2*C3*C4*C5*C6*L2 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*ZL*ZS + (512*I*np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6)*np.power(freq, 9) + 256*((np.power(pi, 8)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*ZL + (np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 8)*C1*C2*C3*C4 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C5 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C5 + np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 8)*C2*C3*C4*C5 + np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C6*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6)*ZS)*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C3 - 128*I*np.power(pi, 7)*C1*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C1*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2*C3*C4*C6*L2 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C4 - 128*I*np.power(pi, 7)*C1*C2*C5)*C6*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C5)*C6*L1 + (-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5)*C6*L2)*L3 + (-128*I*np.power(pi, 7)*C2*C4*C5*C6*L2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C5*C6*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5*C6*L3)*L4)*L5)*ZL*ZS + ((-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*L1*L4 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6)*np.power(freq, 7) - 64*(((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 6)*C2*C4*C6*L1*L2 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L1*L4 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L1*L3)*L5)*ZL + ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 6)*C1*C2*C4 + np.power(pi, 6)*C1*C2*C5 + np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C5 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6)*L1 + (np.power(pi, 6)*C2*C3*C4 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C5 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6)*L1 + (np.power(pi, 6)*C2*C4*C5 + np.power(pi, 6)*C2*C4*C6)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 6)*C1*C2*C6*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (np.power(pi, 6)*C2*C4*C6*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L4 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6)*ZS)*np.power(freq, 6) + ((32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C6*L1*L2 + ((32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4)*C6*L1 + (32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*C6*L2)*L3 + (32*I*np.power(pi, 5)*C2*C4*C6*L2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4*C6*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*C6*L3)*L4 + (32*I*np.power(pi, 5)*C4*C5*C6*L4 + ((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C5)*C6*L1 + (32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5)*C6*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5)*C6*L3)*L5)*ZL*ZS + (32*I*np.power(pi, 5)*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*L1*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*L1*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*L1*L2 + 32*I*np.power(pi, 5)*C4*C6*L1*L4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*L1*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*L1*L5)*L6)*np.power(freq, 5) + 16*((np.power(pi, 4)*C2*C6*L1*L2 + np.power(pi, 4)*C4*C6*L1*L4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L1*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L1*L5)*ZL + (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C5 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6)*L1 + (np.power(pi, 4)*C2*C4 + np.power(pi, 4)*C2*C5 + np.power(pi, 4)*C2*C6)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C5 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6)*L3 + (np.power(pi, 4)*C4*C5 + np.power(pi, 4)*C4*C6)*L4)*L5 + (np.power(pi, 4)*C2*C6*L2 + np.power(pi, 4)*C4*C6*L4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L5)*L6)*ZS)*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C2*L1*L2 - 8*I*np.power(pi, 3)*C4*L1*L4 - 8*I*np.power(pi, 3)*C6*L1*L6 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*L1*L5 + (-8*I*np.power(pi, 3)*C2*C6*L2 - 8*I*np.power(pi, 3)*C4*C6*L4 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C6*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*C6*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5)*C6*L5)*ZL*ZS)*np.power(freq, 3) - 4*(np.power(pi, 2)*C6*L1*ZL + (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + np.power(pi, 2)*C6*L6 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3 + (np.power(pi, 2)*C4 + np.power(pi, 2)*C5 + np.power(pi, 2)*C6)*L5)*ZS)*np.power(freq, 2) + (2*I*pi*C6*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 7):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        L5 = comp_val['L5']
                        C5 = comp_val['C5']
                        L6 = comp_val['L6']
                        C6 = comp_val['C6']
                        L7 = comp_val['L7']
                        C7 = comp_val['C7']
                        S11 = (-16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*ZL*ZS*np.power(freq, 14) + 8192*(np.power(pi, 13)*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*ZL - np.power(pi, 13)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*L7*ZS)*np.power(freq, 13) - (4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*L7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C7)*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C7*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C7*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C7*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7*L1)*L3)*L4)*L5)*L6)*L7)*ZL*ZS)*np.power(freq, 12) + 2048*(((np.power(pi, 11)*C1*C2*C3*C4*C5 + np.power(pi, 11)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*L7*ZS - (np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C2*C3*C4*C6*C7*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C7*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7*L1*L3)*L4)*L5)*L6)*L7)*ZL)*np.power(freq, 11) - (((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C7)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C7)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C7)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C7)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C7)*L2)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C7*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6*C7*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C7*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C7*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C7*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C7*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C7*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C7*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C7*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C7*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((-1024*I*np.power(pi, 10)*C2*C3*C4*C5 - 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (-1024*I*np.power(pi, 10)*C2*C3*C4*C6*L1*L2*L3*L4 + ((-1024*I*np.power(pi, 10)*C2*C3*C4 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*L1*L2*L3 + (-1024*I*np.power(pi, 10)*C2*C4*C5*C6*L1*L2 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6)*L7)*np.power(freq, 10) - 512*((np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 9)*C1*C2*C3*C4 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C5 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C5 + np.power(pi, 9)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C6*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L3)*L4)*L5)*L6)*L7*ZS - ((np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7)*L1*L3)*L4)*L5 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C6*C7*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7*L1*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C7*L1*L4 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7*L1*L3)*L5)*L6)*L7)*ZL)*np.power(freq, 9) - ((-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C5 - 256*I*np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5 - 256*I*np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C7)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C6 - 256*I*np.power(pi, 8)*C1*C2*C4*C7)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C7)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6 - 256*I*np.power(pi, 8)*C2*C3*C4*C7)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C7)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C7)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C7)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C7)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C7)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C7)*L3)*L4)*L5 + (-256*I*np.power(pi, 8)*C1*C2*C6*C7*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C7*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*C7*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C7*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*C7*L4 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C7*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C7*L3)*L5)*L6)*L7)*ZL*ZS + (256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4 + ((256*I*np.power(pi, 8)*C2*C3*C4 + (256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C5 + (256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C6)*L1*L2*L3 + ((256*I*np.power(pi, 8)*C2*C4*C5 + 256*I*np.power(pi, 8)*C2*C4*C6)*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C5 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C6*L1*L2*L3 + (256*I*np.power(pi, 8)*C2*C4*C6*L1*L2 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C6*L1*L3)*L4 + (256*I*np.power(pi, 8)*C4*C5*C6*L1*L4 + (256*I*np.power(pi, 8)*C2*C4 + 256*I*np.power(pi, 8)*C2*C5)*C6*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C5)*C6*L1*L3)*L5)*L6)*L7)*np.power(freq, 8) + 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 7)*C1*C2*C4 + np.power(pi, 7)*C1*C2*C5 + np.power(pi, 7)*C1*C2*C6)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C5 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6)*L1 + (np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6)*L1 + (np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 7)*C1*C2*C6*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L2)*L3 + (np.power(pi, 7)*C2*C4*C6*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L4 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L3)*L5)*L6)*L7*ZS - (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C6*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L1*L4 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7)*L1*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7)*L1*L4)*L5 + (np.power(pi, 7)*C2*C6*C7*L1*L2 + np.power(pi, 7)*C4*C6*C7*L1*L4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7*L1*L5)*L6)*L7)*ZL)*np.power(freq, 7) - (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5 + 64*I*np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6)*L1 + (64*I*np.power(pi, 6)*C2*C4*C5 + 64*I*np.power(pi, 6)*C2*C4*C6)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (64*I*np.power(pi, 6)*C1*C2*C6*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C6*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (64*I*np.power(pi, 6)*C4*C5*C6*L4 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((64*I*np.power(pi, 6)*C1*C2*C6 + 64*I*np.power(pi, 6)*C1*C2*C7)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C7)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C7)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C7)*L1 + (64*I*np.power(pi, 6)*C2*C4*C6 + 64*I*np.power(pi, 6)*C2*C4*C7)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C7)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C7)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C7)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C7)*L3 + (64*I*np.power(pi, 6)*C4*C5*C6 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C7)*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*C7*L2 + 64*I*np.power(pi, 6)*C4*C6*C7*L4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C7*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C7*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C7*L5)*L6)*L7)*ZL*ZS + ((-64*I*np.power(pi, 6)*C2*C3 - 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (-64*I*np.power(pi, 6)*C2*C4*L1*L2 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4 + ((-64*I*np.power(pi, 6)*C2*C4 - 64*I*np.power(pi, 6)*C2*C5 - 64*I*np.power(pi, 6)*C2*C6)*L1*L2 + ((-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3)*C4 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C5 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C6)*L1*L3 + (-64*I*np.power(pi, 6)*C4*C5 - 64*I*np.power(pi, 6)*C4*C6)*L1*L4)*L5 + (-64*I*np.power(pi, 6)*C2*C6*L1*L2 - 64*I*np.power(pi, 6)*C4*C6*L1*L4 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C6*L1*L3 + (-64*I*np.power(pi, 6)*C4 - 64*I*np.power(pi, 6)*C5)*C6*L1*L5)*L6)*L7)*np.power(freq, 6) - 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C5 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6)*L1 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L4)*L5 + (np.power(pi, 5)*C2*C6*L2 + np.power(pi, 5)*C4*C6*L4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L5)*L6)*L7*ZS - ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L1*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (np.power(pi, 5)*C2*C6*L1*L2 + np.power(pi, 5)*C4*C6*L1*L4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L1*L5)*L6 + (np.power(pi, 5)*C6*C7*L1*L6 + (np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7)*L1*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7)*L1*L5)*L7)*ZL)*np.power(freq, 5) - ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5 - 16*I*np.power(pi, 4)*C2*C6)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6)*L3 + (-16*I*np.power(pi, 4)*C4*C5 - 16*I*np.power(pi, 4)*C4*C6)*L4)*L5 + (-16*I*np.power(pi, 4)*C2*C6*L2 - 16*I*np.power(pi, 4)*C4*C6*L4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6*L5)*L6 + (-16*I*np.power(pi, 4)*C6*C7*L6 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C7)*L1 + (-16*I*np.power(pi, 4)*C2*C6 - 16*I*np.power(pi, 4)*C2*C7)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C7)*L3 + (-16*I*np.power(pi, 4)*C4*C6 - 16*I*np.power(pi, 4)*C4*C7)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C7)*L5)*L7)*ZL*ZS + (16*I*np.power(pi, 4)*C2*L1*L2 + 16*I*np.power(pi, 4)*C4*L1*L4 + 16*I*np.power(pi, 4)*C6*L1*L6 + (16*I*np.power(pi, 4)*C2 + 16*I*np.power(pi, 4)*C3 + 16*I*np.power(pi, 4)*C4)*L1*L3 + (16*I*np.power(pi, 4)*C4 + 16*I*np.power(pi, 4)*C5 + 16*I*np.power(pi, 4)*C6)*L1*L5)*L7)*np.power(freq, 4) + 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + np.power(pi, 3)*C6*L6 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L5)*L7*ZS - (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + np.power(pi, 3)*C6*L1*L6 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L1*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7)*L1*L7)*ZL)*np.power(freq, 3) - (-4*I*np.power(pi, 2)*L1*L7 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + 4*I*np.power(pi, 2)*C6*L6 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5 + 4*I*np.power(pi, 2)*C6)*L5 + (4*I*np.power(pi, 2)*C6 + 4*I*np.power(pi, 2)*C7)*L7)*ZL*ZS)*np.power(freq, 2) + I*ZL*ZS + 2*(pi*L1*ZL - pi*L7*ZS)*freq)/(16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*ZL*ZS*np.power(freq, 14) + 8192*(np.power(pi, 13)*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*ZL + np.power(pi, 13)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*L7*ZS)*np.power(freq, 13) + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*L7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C7)*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C7*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C7*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C7*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7*L1)*L3)*L4)*L5)*L6)*L7)*ZL*ZS)*np.power(freq, 12) - 2048*(((np.power(pi, 11)*C1*C2*C3*C4*C5 + np.power(pi, 11)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*L7*ZS + (np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C2*C3*C4*C6*C7*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C7*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7*L1*L3)*L4)*L5)*L6)*L7)*ZL)*np.power(freq, 11) + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C7)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C7)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C7)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C7)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C7)*L2)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C7*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6*C7*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C7*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C7*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C7*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C7*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C7*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C7*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C7*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C7*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6)*L7)*np.power(freq, 10) + 512*((np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 9)*C1*C2*C3*C4 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C5 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C5 + np.power(pi, 9)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C6*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L3)*L4)*L5)*L6)*L7*ZS + ((np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7)*L1*L3)*L4)*L5 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C6*C7*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7*L1*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C7*L1*L4 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7*L1*L3)*L5)*L6)*L7)*ZL)*np.power(freq, 9) + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C5 - 256*I*np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5 - 256*I*np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C7)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C6 - 256*I*np.power(pi, 8)*C1*C2*C4*C7)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C7)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6 - 256*I*np.power(pi, 8)*C2*C3*C4*C7)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C7)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C7)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C7)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C7)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C7)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C7)*L3)*L4)*L5 + (-256*I*np.power(pi, 8)*C1*C2*C6*C7*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C7*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*C7*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C7*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*C7*L4 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C7*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C7*L3)*L5)*L6)*L7)*ZL*ZS + (-256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*L1*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*L1*L4 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*L1*L3)*L5)*L6)*L7)*np.power(freq, 8) - 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 7)*C1*C2*C4 + np.power(pi, 7)*C1*C2*C5 + np.power(pi, 7)*C1*C2*C6)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C5 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6)*L1 + (np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6)*L1 + (np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 7)*C1*C2*C6*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L2)*L3 + (np.power(pi, 7)*C2*C4*C6*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L4 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L3)*L5)*L6)*L7*ZS + (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C6*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L1*L4 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7)*L1*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7)*L1*L4)*L5 + (np.power(pi, 7)*C2*C6*C7*L1*L2 + np.power(pi, 7)*C4*C6*C7*L1*L4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7*L1*L5)*L6)*L7)*ZL)*np.power(freq, 7) + (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5 + 64*I*np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6)*L1 + (64*I*np.power(pi, 6)*C2*C4*C5 + 64*I*np.power(pi, 6)*C2*C4*C6)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (64*I*np.power(pi, 6)*C1*C2*C6*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C6*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (64*I*np.power(pi, 6)*C4*C5*C6*L4 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((64*I*np.power(pi, 6)*C1*C2*C6 + 64*I*np.power(pi, 6)*C1*C2*C7)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C7)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C7)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C7)*L1 + (64*I*np.power(pi, 6)*C2*C4*C6 + 64*I*np.power(pi, 6)*C2*C4*C7)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C7)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C7)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C7)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C7)*L3 + (64*I*np.power(pi, 6)*C4*C5*C6 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C7)*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*C7*L2 + 64*I*np.power(pi, 6)*C4*C6*C7*L4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C7*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C7*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C7*L5)*L6)*L7)*ZL*ZS + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*L1*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*L1*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*L1*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*L1*L2 + 64*I*np.power(pi, 6)*C4*C6*L1*L4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*L1*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*L1*L5)*L6)*L7)*np.power(freq, 6) + 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C5 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6)*L1 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L4)*L5 + (np.power(pi, 5)*C2*C6*L2 + np.power(pi, 5)*C4*C6*L4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L5)*L6)*L7*ZS + ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L1*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (np.power(pi, 5)*C2*C6*L1*L2 + np.power(pi, 5)*C4*C6*L1*L4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L1*L5)*L6 + (np.power(pi, 5)*C6*C7*L1*L6 + (np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7)*L1*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7)*L1*L5)*L7)*ZL)*np.power(freq, 5) + ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5 - 16*I*np.power(pi, 4)*C2*C6)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6)*L3 + (-16*I*np.power(pi, 4)*C4*C5 - 16*I*np.power(pi, 4)*C4*C6)*L4)*L5 + (-16*I*np.power(pi, 4)*C2*C6*L2 - 16*I*np.power(pi, 4)*C4*C6*L4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6*L5)*L6 + (-16*I*np.power(pi, 4)*C6*C7*L6 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C7)*L1 + (-16*I*np.power(pi, 4)*C2*C6 - 16*I*np.power(pi, 4)*C2*C7)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C7)*L3 + (-16*I*np.power(pi, 4)*C4*C6 - 16*I*np.power(pi, 4)*C4*C7)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C7)*L5)*L7)*ZL*ZS + (-16*I*np.power(pi, 4)*C2*L1*L2 - 16*I*np.power(pi, 4)*C4*L1*L4 - 16*I*np.power(pi, 4)*C6*L1*L6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*L1*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*L1*L5)*L7)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + np.power(pi, 3)*C6*L6 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L5)*L7*ZS + (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + np.power(pi, 3)*C6*L1*L6 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L1*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7)*L1*L7)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L7 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + 4*I*np.power(pi, 2)*C6*L6 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5 + 4*I*np.power(pi, 2)*C6)*L5 + (4*I*np.power(pi, 2)*C6 + 4*I*np.power(pi, 2)*C7)*L7)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L7*ZS)*freq)
                        S21 = -256*np.power(pi, 7)*C2*C4*C6*L1*L3*L5*L7*ZL*ZS*np.power(freq, 7)/((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*ZL*ZS*np.power(freq, 14) + 8192*(np.power(pi, 13)*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*ZL + np.power(pi, 13)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*L7*ZS)*np.power(freq, 13) + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*L7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C7)*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C7*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C7*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C7*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7*L1)*L3)*L4)*L5)*L6)*L7)*ZL*ZS)*np.power(freq, 12) - 2048*(((np.power(pi, 11)*C1*C2*C3*C4*C5 + np.power(pi, 11)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*L7*ZS + (np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C2*C3*C4*C6*C7*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C7*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7*L1*L3)*L4)*L5)*L6)*L7)*ZL)*np.power(freq, 11) + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C7)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C7)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C7)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C7)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C7)*L2)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C7*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6*C7*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C7*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C7*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C7*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C7*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C7*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C7*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C7*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C7*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6)*L7)*np.power(freq, 10) + 512*((np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 9)*C1*C2*C3*C4 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C5 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C5 + np.power(pi, 9)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C6*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L3)*L4)*L5)*L6)*L7*ZS + ((np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7)*L1*L3)*L4)*L5 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C6*C7*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7*L1*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C7*L1*L4 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7*L1*L3)*L5)*L6)*L7)*ZL)*np.power(freq, 9) + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C5 - 256*I*np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5 - 256*I*np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C7)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C6 - 256*I*np.power(pi, 8)*C1*C2*C4*C7)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C7)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6 - 256*I*np.power(pi, 8)*C2*C3*C4*C7)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C7)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C7)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C7)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C7)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C7)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C7)*L3)*L4)*L5 + (-256*I*np.power(pi, 8)*C1*C2*C6*C7*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C7*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*C7*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C7*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*C7*L4 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C7*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C7*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C7*L3)*L5)*L6)*L7)*ZL*ZS + (-256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*L1*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*L1*L4 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*L1*L3)*L5)*L6)*L7)*np.power(freq, 8) - 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 7)*C1*C2*C4 + np.power(pi, 7)*C1*C2*C5 + np.power(pi, 7)*C1*C2*C6)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C5 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6)*L1 + (np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6)*L1 + (np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 7)*C1*C2*C6*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L2)*L3 + (np.power(pi, 7)*C2*C4*C6*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L4 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L3)*L5)*L6)*L7*ZS + (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C6*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L1*L4 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7)*L1*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7)*L1*L4)*L5 + (np.power(pi, 7)*C2*C6*C7*L1*L2 + np.power(pi, 7)*C4*C6*C7*L1*L4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7*L1*L5)*L6)*L7)*ZL)*np.power(freq, 7) + (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5 + 64*I*np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6)*L1 + (64*I*np.power(pi, 6)*C2*C4*C5 + 64*I*np.power(pi, 6)*C2*C4*C6)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (64*I*np.power(pi, 6)*C1*C2*C6*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C6*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (64*I*np.power(pi, 6)*C4*C5*C6*L4 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((64*I*np.power(pi, 6)*C1*C2*C6 + 64*I*np.power(pi, 6)*C1*C2*C7)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C7)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C7)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C7)*L1 + (64*I*np.power(pi, 6)*C2*C4*C6 + 64*I*np.power(pi, 6)*C2*C4*C7)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C7)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C7)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C7)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C7)*L3 + (64*I*np.power(pi, 6)*C4*C5*C6 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C7)*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*C7*L2 + 64*I*np.power(pi, 6)*C4*C6*C7*L4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C7*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C7*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C7*L5)*L6)*L7)*ZL*ZS + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*L1*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*L1*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*L1*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*L1*L2 + 64*I*np.power(pi, 6)*C4*C6*L1*L4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*L1*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*L1*L5)*L6)*L7)*np.power(freq, 6) + 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C5 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6)*L1 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L4)*L5 + (np.power(pi, 5)*C2*C6*L2 + np.power(pi, 5)*C4*C6*L4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L5)*L6)*L7*ZS + ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L1*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (np.power(pi, 5)*C2*C6*L1*L2 + np.power(pi, 5)*C4*C6*L1*L4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L1*L5)*L6 + (np.power(pi, 5)*C6*C7*L1*L6 + (np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7)*L1*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7)*L1*L5)*L7)*ZL)*np.power(freq, 5) + ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5 - 16*I*np.power(pi, 4)*C2*C6)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6)*L3 + (-16*I*np.power(pi, 4)*C4*C5 - 16*I*np.power(pi, 4)*C4*C6)*L4)*L5 + (-16*I*np.power(pi, 4)*C2*C6*L2 - 16*I*np.power(pi, 4)*C4*C6*L4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6*L5)*L6 + (-16*I*np.power(pi, 4)*C6*C7*L6 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C7)*L1 + (-16*I*np.power(pi, 4)*C2*C6 - 16*I*np.power(pi, 4)*C2*C7)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C7)*L3 + (-16*I*np.power(pi, 4)*C4*C6 - 16*I*np.power(pi, 4)*C4*C7)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C7)*L5)*L7)*ZL*ZS + (-16*I*np.power(pi, 4)*C2*L1*L2 - 16*I*np.power(pi, 4)*C4*L1*L4 - 16*I*np.power(pi, 4)*C6*L1*L6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*L1*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*L1*L5)*L7)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + np.power(pi, 3)*C6*L6 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L5)*L7*ZS + (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + np.power(pi, 3)*C6*L1*L6 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L1*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7)*L1*L7)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L7 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + 4*I*np.power(pi, 2)*C6*L6 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5 + 4*I*np.power(pi, 2)*C6)*L5 + (4*I*np.power(pi, 2)*C6 + 4*I*np.power(pi, 2)*C7)*L7)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L7*ZS)*freq)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 8):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        L5 = comp_val['L5']
                        C5 = comp_val['C5']
                        L6 = comp_val['L6']
                        C6 = comp_val['C6']
                        L7 = comp_val['L7']
                        C7 = comp_val['C7']
                        L8 = comp_val['L8']
                        C8 = comp_val['C8']
                        S11 = -(65536*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*ZS*np.power(freq, 16) + (-32768*I*np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*ZL*ZS + 32768*I*np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8)*np.power(freq, 15) + 16384*(np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*ZL - ((np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7 + np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 14)*C1*C2*C3*C4*C5 + np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 14)*C1*C2*C3*C4 + (np.power(pi, 14)*C1*C2*C3 + np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L2 + (np.power(pi, 14)*C1*C2 + (np.power(pi, 14)*C1 + np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 14) + ((-8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C7 - 8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5*C6 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5 + 8192*I*np.power(pi, 13)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((8192*I*np.power(pi, 13)*C1*C2*C3*C4 + (8192*I*np.power(pi, 13)*C1*C2*C3 + 8192*I*np.power(pi, 13)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (8192*I*np.power(pi, 13)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C7*C8*L2 + (8192*I*np.power(pi, 13)*C1*C2 + (8192*I*np.power(pi, 13)*C1 + 8192*I*np.power(pi, 13)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*ZL*ZS + (-8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((-8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6 + (-8192*I*np.power(pi, 13)*C2*C3*C4*C5 - 8192*I*np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (-8192*I*np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((-8192*I*np.power(pi, 13)*C2*C3*C4 + (-8192*I*np.power(pi, 13)*C2*C3 - 8192*I*np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (-8192*I*np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L1*L2 + (-8192*I*np.power(pi, 13)*C2 - 8192*I*np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8)*np.power(freq, 13) - 4096*((np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 12)*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C2*C3*C4*C5 + np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 12)*C2*C3*C4 + (np.power(pi, 12)*C2*C3 + np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 12)*C2 + np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*ZL - (np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C7 + (np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 12)*C1*C2*C3*C4*C6*C7 + np.power(pi, 12)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7 + (np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 12)*C1*C2*C4*C5*C6*C7 + np.power(pi, 12)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8)*L1 + (np.power(pi, 12)*C2*C3*C4*C5*C6*C7 + np.power(pi, 12)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 12)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 12)*C1*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L2 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 12)*C1*C2*C3*C4*C6 + np.power(pi, 12)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 12)*C1*C2*C4*C5*C6 + (np.power(pi, 12)*C1*C2*C4*C5 + np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8*L1 + (np.power(pi, 12)*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C2*C3*C4*C5 + np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 12)*C1*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L2 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((np.power(pi, 12)*C1*C2*C4 + np.power(pi, 12)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8*L1 + (np.power(pi, 12)*C2*C3*C4 + (np.power(pi, 12)*C2*C3 + np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C4*C5*C6*C7*C8*L1 + (np.power(pi, 12)*C2 + np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 12) + (2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*C8*L2 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6 - 2048*I*np.power(pi, 11)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5)*C6 + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C1*C2*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C5 - 2048*I*np.power(pi, 11)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5*C6 + ((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C6)*C7)*C8*L1 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C7*C8*L2 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((-2048*I*np.power(pi, 11)*C1*C2*C4 - 2048*I*np.power(pi, 11)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C4)*C5)*C6*C7*C8*L1 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C7*C8*L2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C4*C5*C6*C7*C8*L1 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6 + (2048*I*np.power(pi, 11)*C2*C3*C4*C5 + 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C7 + (2048*I*np.power(pi, 11)*C2*C3*C4*C5 + 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((2048*I*np.power(pi, 11)*C2*C3*C4*C6*C7 + 2048*I*np.power(pi, 11)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((2048*I*np.power(pi, 11)*C2*C3*C4 + (2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (2048*I*np.power(pi, 11)*C2*C3*C4 + (2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((2048*I*np.power(pi, 11)*C2*C4*C5*C6*C7 + 2048*I*np.power(pi, 11)*C2*C4*C5*C6*C8)*L1*L2 + ((2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C7 + (2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((2048*I*np.power(pi, 11)*C2*C3*C4*C5 + 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (2048*I*np.power(pi, 11)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((2048*I*np.power(pi, 11)*C2*C3*C4 + (2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (2048*I*np.power(pi, 11)*C2*C4*C5*C6*C8*L1*L2 + (2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((2048*I*np.power(pi, 11)*C2*C3*C4*C6 + 2048*I*np.power(pi, 11)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((2048*I*np.power(pi, 11)*C2*C3*C4 + (2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6 + (2048*I*np.power(pi, 11)*C2*C3*C4 + (2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C5 + (2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((2048*I*np.power(pi, 11)*C2*C4*C5*C6 + (2048*I*np.power(pi, 11)*C2*C4*C5 + 2048*I*np.power(pi, 11)*C2*C4*C6)*C7)*C8*L1*L2 + ((2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C5*C6 + ((2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C5 + (2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((2048*I*np.power(pi, 11)*C2*C3 + 2048*I*np.power(pi, 11)*C2*C4)*C6*C7*C8*L1*L2*L3 + (2048*I*np.power(pi, 11)*C2*C4*C6*C7*C8*L1*L2 + (2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (2048*I*np.power(pi, 11)*C4*C5*C6*C7*C8*L1*L4 + (2048*I*np.power(pi, 11)*C2*C4 + 2048*I*np.power(pi, 11)*C2*C5)*C6*C7*C8*L1*L2 + ((2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3)*C4 + (2048*I*np.power(pi, 11)*C2 + 2048*I*np.power(pi, 11)*C3 + 2048*I*np.power(pi, 11)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8)*np.power(freq, 11) + 1024*(((np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 10)*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 10)*C2*C3*C4*C6 + np.power(pi, 10)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 10)*C2*C4*C5*C6 + (np.power(pi, 10)*C2*C4*C5 + np.power(pi, 10)*C2*C4*C6)*C7)*C8*L1*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 10)*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (np.power(pi, 10)*C4*C5*C6*C7*C8*L1*L4 + (np.power(pi, 10)*C2*C4 + np.power(pi, 10)*C2*C5)*C6*C7*C8*L1*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3 + np.power(pi, 10)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*ZL - ((np.power(pi, 10)*C1*C2*C3*C4*C5 + np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 10)*C1*C2*C3*C4*C6 + np.power(pi, 10)*C1*C2*C3*C4*C7 + np.power(pi, 10)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C7 + (np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C5*C6 + (np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C7 + (np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C8)*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C7 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C8)*L1 + (np.power(pi, 10)*C2*C3*C4*C5*C6 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C7 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C7 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C6*C7 + np.power(pi, 10)*C1*C2*C4*C6*C8)*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C7 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C8)*L1 + (np.power(pi, 10)*C2*C3*C4*C6*C7 + np.power(pi, 10)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C7 + (np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C8)*L1*L2 + ((((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C7 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C8)*L1 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C7 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C7 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C8)*L1 + (np.power(pi, 10)*C2*C4*C5*C6*C7 + np.power(pi, 10)*C2*C4*C5*C6*C8)*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C7 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (np.power(pi, 10)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C8*L1 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C6*C8*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C6*C8*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C8*L1 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8*L2)*L3 + (np.power(pi, 10)*C2*C4*C5*C6*C8*L2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C8*L1 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C6 + np.power(pi, 10)*C1*C2*C4*C7)*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C7)*C8*L1 + (np.power(pi, 10)*C2*C3*C4*C6 + np.power(pi, 10)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6 + (np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5 + np.power(pi, 10)*C1*C2*C6)*C7)*C8*L1*L2 + ((((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C6)*C7)*C8*L1 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6 + ((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C6)*C7)*C8*L1 + (np.power(pi, 10)*C2*C4*C5*C6 + (np.power(pi, 10)*C2*C4*C5 + np.power(pi, 10)*C2*C4*C6)*C7)*C8*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (np.power(pi, 10)*C1*C2*C6*C7*C8*L1*L2 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C6*C7*C8*L1 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6*C7*C8*L2)*L3 + (np.power(pi, 10)*C2*C4*C6*C7*C8*L2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C6*C7*C8*L1 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6*C7*C8*L3)*L4 + (np.power(pi, 10)*C4*C5*C6*C7*C8*L4 + ((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C5)*C6*C7*C8*L1 + (np.power(pi, 10)*C2*C4 + np.power(pi, 10)*C2*C5)*C6*C7*C8*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3 + np.power(pi, 10)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 10) + ((-512*I*np.power(pi, 9)*C2*C3*C4*C5 - 512*I*np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (512*I*np.power(pi, 9)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C1*C2*C3*C4 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C5 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C1*C2*C4*C5 + 512*I*np.power(pi, 9)*C1*C2*C4*C6)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6)*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6*C8*L1*L2*L3 + (512*I*np.power(pi, 9)*C1*C2*C4*C6*C8*L1*L2 + (512*I*np.power(pi, 9)*C2*C3*C4*C6*C8*L2 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5)*C6*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5)*C6*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*C8*L2)*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*C8*L2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5*C6*C8*L1 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C1*C2*C4*C6 + 512*I*np.power(pi, 9)*C1*C2*C4*C7)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C7)*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4*C6 + 512*I*np.power(pi, 9)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5)*C6 + (512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5 + 512*I*np.power(pi, 9)*C1*C2*C6)*C7)*C8*L1*L2 + ((((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5)*C6 + ((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C6)*C7)*C8*L1 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C6)*C7)*C8*L1 + (512*I*np.power(pi, 9)*C2*C4*C5*C6 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C7)*C8*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (512*I*np.power(pi, 9)*C1*C2*C6*C7*C8*L1*L2 + ((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C7*C8*L2)*L3 + (512*I*np.power(pi, 9)*C2*C4*C6*C7*C8*L2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C7*C8*L3)*L4 + (512*I*np.power(pi, 9)*C4*C5*C6*C7*C8*L4 + ((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C5)*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C7*C8*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*ZL*ZS + (-512*I*np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((-512*I*np.power(pi, 9)*C2*C3*C4 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (-512*I*np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((-512*I*np.power(pi, 9)*C2*C3*C4*C6 - 512*I*np.power(pi, 9)*C2*C3*C4*C7 - 512*I*np.power(pi, 9)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((-512*I*np.power(pi, 9)*C2*C3*C4 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C5)*C6 + (-512*I*np.power(pi, 9)*C2*C3*C4 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C5 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6)*C7 + (-512*I*np.power(pi, 9)*C2*C3*C4 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C5 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6)*C8)*L1*L2*L3 + ((-512*I*np.power(pi, 9)*C2*C4*C5*C6 + (-512*I*np.power(pi, 9)*C2*C4*C5 - 512*I*np.power(pi, 9)*C2*C4*C6)*C7 + (-512*I*np.power(pi, 9)*C2*C4*C5 - 512*I*np.power(pi, 9)*C2*C4*C6)*C8)*L1*L2 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C5*C6 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C5 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6)*C7 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C5 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6*C7 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6*C8)*L1*L2*L3 + ((-512*I*np.power(pi, 9)*C2*C4*C6*C7 - 512*I*np.power(pi, 9)*C2*C4*C6*C8)*L1*L2 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6*C7 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6*C8)*L1*L3)*L4 + (((-512*I*np.power(pi, 9)*C2*C4 - 512*I*np.power(pi, 9)*C2*C5)*C6*C7 + (-512*I*np.power(pi, 9)*C2*C4 - 512*I*np.power(pi, 9)*C2*C5)*C6*C8)*L1*L2 + (((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C5)*C6*C7 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C5)*C6*C8)*L1*L3 + (-512*I*np.power(pi, 9)*C4*C5*C6*C7 - 512*I*np.power(pi, 9)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (-512*I*np.power(pi, 9)*C2*C3*C4*C8*L1*L2*L3*L4 + ((-512*I*np.power(pi, 9)*C2*C3*C4 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C5 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6)*C8*L1*L2*L3 + ((-512*I*np.power(pi, 9)*C2*C4*C5 - 512*I*np.power(pi, 9)*C2*C4*C6)*C8*L1*L2 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C5 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6*C8*L1*L2*L3 + (-512*I*np.power(pi, 9)*C2*C4*C6*C8*L1*L2 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6*C8*L1*L3)*L4 + (-512*I*np.power(pi, 9)*C4*C5*C6*C8*L1*L4 + (-512*I*np.power(pi, 9)*C2*C4 - 512*I*np.power(pi, 9)*C2*C5)*C6*C8*L1*L2 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C6 + (-512*I*np.power(pi, 9)*C2*C3 - 512*I*np.power(pi, 9)*C2*C4)*C7)*C8*L1*L2*L3 + ((-512*I*np.power(pi, 9)*C2*C4*C6 - 512*I*np.power(pi, 9)*C2*C4*C7)*C8*L1*L2 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C6 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4*C7)*C8*L1*L3)*L4 + (((-512*I*np.power(pi, 9)*C2*C4 - 512*I*np.power(pi, 9)*C2*C5)*C6 + (-512*I*np.power(pi, 9)*C2*C4 - 512*I*np.power(pi, 9)*C2*C5 - 512*I*np.power(pi, 9)*C2*C6)*C7)*C8*L1*L2 + (((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C5)*C6 + ((-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3)*C4 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C5 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C6)*C7)*C8*L1*L3 + (-512*I*np.power(pi, 9)*C4*C5*C6 + (-512*I*np.power(pi, 9)*C4*C5 - 512*I*np.power(pi, 9)*C4*C6)*C7)*C8*L1*L4)*L5 + (-512*I*np.power(pi, 9)*C2*C6*C7*C8*L1*L2 - 512*I*np.power(pi, 9)*C4*C6*C7*C8*L1*L4 + (-512*I*np.power(pi, 9)*C2 - 512*I*np.power(pi, 9)*C3 - 512*I*np.power(pi, 9)*C4)*C6*C7*C8*L1*L3 + (-512*I*np.power(pi, 9)*C4 - 512*I*np.power(pi, 9)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8)*np.power(freq, 9) - 256*((np.power(pi, 8)*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 8)*C2*C4*C6*C8*L1*L2 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8*L1*L3)*L4 + (np.power(pi, 8)*C4*C5*C6*C8*L1*L4 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 8)*C2*C4*C6 + np.power(pi, 8)*C2*C4*C7)*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C7)*C8*L1*L3)*L4 + (((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5 + np.power(pi, 8)*C2*C6)*C7)*C8*L1*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6)*C7)*C8*L1*L3 + (np.power(pi, 8)*C4*C5*C6 + (np.power(pi, 8)*C4*C5 + np.power(pi, 8)*C4*C6)*C7)*C8*L1*L4)*L5 + (np.power(pi, 8)*C2*C6*C7*C8*L1*L2 + np.power(pi, 8)*C4*C6*C7*C8*L1*L4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6*C7*C8*L1*L3 + (np.power(pi, 8)*C4 + np.power(pi, 8)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*ZL - (np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 8)*C1*C2*C3*C4 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C5 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C5 + np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 8)*C2*C3*C4*C5 + np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C6*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C7 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C6 + np.power(pi, 8)*C1*C2*C4*C7 + np.power(pi, 8)*C1*C2*C4*C8)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C7 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C8)*L1 + (np.power(pi, 8)*C2*C3*C4*C6 + np.power(pi, 8)*C2*C3*C4*C7 + np.power(pi, 8)*C2*C3*C4*C8)*L2)*L3)*L4 + (((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6 + (np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C7 + (np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C8)*L1*L2 + ((((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C7 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C8)*L1 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C7 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8)*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C7 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C8)*L1 + (np.power(pi, 8)*C2*C4*C5*C6 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C7 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8)*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C7 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C6*C7 + np.power(pi, 8)*C1*C2*C6*C8)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C7 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C8)*L1 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C7 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8)*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C7 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C8)*L1 + (np.power(pi, 8)*C2*C4*C6*C7 + np.power(pi, 8)*C2*C4*C6*C8)*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C7 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8)*L3)*L4 + ((((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C7 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C8)*L1 + ((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C7 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8)*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C7 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8)*L3 + (np.power(pi, 8)*C4*C5*C6*C7 + np.power(pi, 8)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C8*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C8*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C8*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C8*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C8*L1 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8*L3)*L4)*L5 + (np.power(pi, 8)*C1*C2*C6*C8*L1*L2 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C8*L1 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8*L2)*L3 + (np.power(pi, 8)*C2*C4*C6*C8*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C8*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8*L3)*L4 + (np.power(pi, 8)*C4*C5*C6*C8*L4 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C8*L1 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((np.power(pi, 8)*C1*C2*C6 + np.power(pi, 8)*C1*C2*C7)*C8*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C7)*C8*L1 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C7)*C8*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C7)*C8*L1 + (np.power(pi, 8)*C2*C4*C6 + np.power(pi, 8)*C2*C4*C7)*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C7)*C8*L3)*L4 + ((((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C6)*C7)*C8*L1 + ((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5 + np.power(pi, 8)*C2*C6)*C7)*C8*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6)*C7)*C8*L3 + (np.power(pi, 8)*C4*C5*C6 + (np.power(pi, 8)*C4*C5 + np.power(pi, 8)*C4*C6)*C7)*C8*L4)*L5 + (np.power(pi, 8)*C2*C6*C7*C8*L2 + np.power(pi, 8)*C4*C6*C7*C8*L4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C6*C7*C8*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6*C7*C8*L3 + (np.power(pi, 8)*C4 + np.power(pi, 8)*C5)*C6*C7*C8*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 8) + (128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C3 - 128*I*np.power(pi, 7)*C1*C2*C4)*C8*L1*L2*L3 + (-128*I*np.power(pi, 7)*C1*C2*C4*C8*L1*L2 + (-128*I*np.power(pi, 7)*C2*C3*C4*C8*L2 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C4 - 128*I*np.power(pi, 7)*C1*C2*C5 - 128*I*np.power(pi, 7)*C1*C2*C6)*C8*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C5 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*C8*L2)*L3 + (((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C5 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*C8*L3)*L4)*L5 + (-128*I*np.power(pi, 7)*C1*C2*C6*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*C8*L2)*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*C8*L2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*C8*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*C8*L4 + ((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5)*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((-128*I*np.power(pi, 7)*C1*C2*C6 - 128*I*np.power(pi, 7)*C1*C2*C7)*C8*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C7)*C8*L1 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C7)*C8*L2)*L3 + (((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C7)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4*C6 - 128*I*np.power(pi, 7)*C2*C4*C7)*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C7)*C8*L3)*L4 + ((((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5)*C6 + ((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C6)*C7)*C8*L1 + ((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C7)*C8*L2 + (((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C7)*C8*L3 + (-128*I*np.power(pi, 7)*C4*C5*C6 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C7)*C8*L4)*L5 + (-128*I*np.power(pi, 7)*C2*C6*C7*C8*L2 - 128*I*np.power(pi, 7)*C4*C6*C7*C8*L4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C6*C7*C8*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C7*C8*L3 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C7*C8*L5)*L6)*L7)*ZL*ZS + ((128*I*np.power(pi, 7)*C2*C3*C4 + (128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C5 + (128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((128*I*np.power(pi, 7)*C2*C4*C5 + 128*I*np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C5 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (128*I*np.power(pi, 7)*C2*C4*C6*L1*L2 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (128*I*np.power(pi, 7)*C4*C5*C6*L1*L4 + (128*I*np.power(pi, 7)*C2*C4 + 128*I*np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C6 + (128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C7 + (128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C8)*L1*L2*L3 + ((128*I*np.power(pi, 7)*C2*C4*C6 + 128*I*np.power(pi, 7)*C2*C4*C7 + 128*I*np.power(pi, 7)*C2*C4*C8)*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C6 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C7 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C8)*L1*L3)*L4 + (((128*I*np.power(pi, 7)*C2*C4 + 128*I*np.power(pi, 7)*C2*C5)*C6 + (128*I*np.power(pi, 7)*C2*C4 + 128*I*np.power(pi, 7)*C2*C5 + 128*I*np.power(pi, 7)*C2*C6)*C7 + (128*I*np.power(pi, 7)*C2*C4 + 128*I*np.power(pi, 7)*C2*C5 + 128*I*np.power(pi, 7)*C2*C6)*C8)*L1*L2 + (((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C5)*C6 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C5 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6)*C7 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C5 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6)*C8)*L1*L3 + (128*I*np.power(pi, 7)*C4*C5*C6 + (128*I*np.power(pi, 7)*C4*C5 + 128*I*np.power(pi, 7)*C4*C6)*C7 + (128*I*np.power(pi, 7)*C4*C5 + 128*I*np.power(pi, 7)*C4*C6)*C8)*L1*L4)*L5 + ((128*I*np.power(pi, 7)*C2*C6*C7 + 128*I*np.power(pi, 7)*C2*C6*C8)*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6*C7 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6*C8)*L1*L3 + (128*I*np.power(pi, 7)*C4*C6*C7 + 128*I*np.power(pi, 7)*C4*C6*C8)*L1*L4 + ((128*I*np.power(pi, 7)*C4 + 128*I*np.power(pi, 7)*C5)*C6*C7 + (128*I*np.power(pi, 7)*C4 + 128*I*np.power(pi, 7)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((128*I*np.power(pi, 7)*C2*C3 + 128*I*np.power(pi, 7)*C2*C4)*C8*L1*L2*L3 + (128*I*np.power(pi, 7)*C2*C4*C8*L1*L2 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4*C8*L1*L3)*L4 + ((128*I*np.power(pi, 7)*C2*C4 + 128*I*np.power(pi, 7)*C2*C5 + 128*I*np.power(pi, 7)*C2*C6)*C8*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3)*C4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C5 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6)*C8*L1*L3 + (128*I*np.power(pi, 7)*C4*C5 + 128*I*np.power(pi, 7)*C4*C6)*C8*L1*L4)*L5 + (128*I*np.power(pi, 7)*C2*C6*C8*L1*L2 + 128*I*np.power(pi, 7)*C4*C6*C8*L1*L4 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6*C8*L1*L3 + (128*I*np.power(pi, 7)*C4 + 128*I*np.power(pi, 7)*C5)*C6*C8*L1*L5)*L6 + (128*I*np.power(pi, 7)*C6*C7*C8*L1*L6 + (128*I*np.power(pi, 7)*C2*C6 + 128*I*np.power(pi, 7)*C2*C7)*C8*L1*L2 + ((128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C6 + (128*I*np.power(pi, 7)*C2 + 128*I*np.power(pi, 7)*C3 + 128*I*np.power(pi, 7)*C4)*C7)*C8*L1*L3 + (128*I*np.power(pi, 7)*C4*C6 + 128*I*np.power(pi, 7)*C4*C7)*C8*L1*L4 + ((128*I*np.power(pi, 7)*C4 + 128*I*np.power(pi, 7)*C5)*C6 + (128*I*np.power(pi, 7)*C4 + 128*I*np.power(pi, 7)*C5 + 128*I*np.power(pi, 7)*C6)*C7)*C8*L1*L5)*L7)*L8)*np.power(freq, 7) + 64*(((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 6)*C2*C4*C8*L1*L2 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8*L1*L3)*L4 + ((np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8*L1*L3 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8*L1*L4)*L5 + (np.power(pi, 6)*C2*C6*C8*L1*L2 + np.power(pi, 6)*C4*C6*C8*L1*L4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8*L1*L3 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8*L1*L5)*L6 + (np.power(pi, 6)*C6*C7*C8*L1*L6 + (np.power(pi, 6)*C2*C6 + np.power(pi, 6)*C2*C7)*C8*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C7)*C8*L1*L3 + (np.power(pi, 6)*C4*C6 + np.power(pi, 6)*C4*C7)*C8*L1*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5 + np.power(pi, 6)*C6)*C7)*C8*L1*L5)*L7)*ZL - ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 6)*C1*C2*C4 + np.power(pi, 6)*C1*C2*C5 + np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C5 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6)*L1 + (np.power(pi, 6)*C2*C3*C4 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C5 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6)*L1 + (np.power(pi, 6)*C2*C4*C5 + np.power(pi, 6)*C2*C4*C6)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 6)*C1*C2*C6*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (np.power(pi, 6)*C2*C4*C6*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L4 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((np.power(pi, 6)*C1*C2*C6 + np.power(pi, 6)*C1*C2*C7 + np.power(pi, 6)*C1*C2*C8)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C7 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C8)*L1 + ((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C7 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C7 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C8)*L1 + (np.power(pi, 6)*C2*C4*C6 + np.power(pi, 6)*C2*C4*C7 + np.power(pi, 6)*C2*C4*C8)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C7 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8)*L3)*L4 + ((((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C7 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C8)*L1 + ((np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C7 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8)*L2 + (((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C7 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8)*L3 + (np.power(pi, 6)*C4*C5*C6 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C7 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8)*L4)*L5 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C7 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C8)*L1 + (np.power(pi, 6)*C2*C6*C7 + np.power(pi, 6)*C2*C6*C8)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C7 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8)*L3 + (np.power(pi, 6)*C4*C6*C7 + np.power(pi, 6)*C4*C6*C8)*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C7 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8)*L5)*L6)*L7 + (np.power(pi, 6)*C1*C2*C8*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C8*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8*L2)*L3 + (np.power(pi, 6)*C2*C4*C8*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C8*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8*L3)*L4 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C8*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8*L3 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8*L4)*L5 + (np.power(pi, 6)*C2*C6*C8*L2 + np.power(pi, 6)*C4*C6*C8*L4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C8*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8*L3 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8*L5)*L6 + (np.power(pi, 6)*C6*C7*C8*L6 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C7)*C8*L1 + (np.power(pi, 6)*C2*C6 + np.power(pi, 6)*C2*C7)*C8*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C7)*C8*L3 + (np.power(pi, 6)*C4*C6 + np.power(pi, 6)*C4*C7)*C8*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5 + np.power(pi, 6)*C6)*C7)*C8*L5)*L7)*L8)*ZS)*np.power(freq, 6) + ((-32*I*np.power(pi, 5)*C2*C3 - 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C8*L1*L2 + ((32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4)*C8*L1 + (32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*C8*L2)*L3 + (32*I*np.power(pi, 5)*C2*C4*C8*L2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4*C8*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*C8*L3)*L4 + (((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C5 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6)*C8*L1 + (32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*C8*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*C8*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*C8*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*C8*L2 + 32*I*np.power(pi, 5)*C4*C6*C8*L4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6*C8*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*C8*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*C8*L5)*L6 + (32*I*np.power(pi, 5)*C6*C7*C8*L6 + ((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C7)*C8*L1 + (32*I*np.power(pi, 5)*C2*C6 + 32*I*np.power(pi, 5)*C2*C7)*C8*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C7)*C8*L3 + (32*I*np.power(pi, 5)*C4*C6 + 32*I*np.power(pi, 5)*C4*C7)*C8*L4 + ((32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C7)*C8*L5)*L7)*ZL*ZS + (-32*I*np.power(pi, 5)*C2*C4*L1*L2 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((-32*I*np.power(pi, 5)*C2*C4 - 32*I*np.power(pi, 5)*C2*C5 - 32*I*np.power(pi, 5)*C2*C6)*L1*L2 + ((-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3)*C4 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C5 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C6)*L1*L3 + (-32*I*np.power(pi, 5)*C4*C5 - 32*I*np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (-32*I*np.power(pi, 5)*C2*C6*L1*L2 - 32*I*np.power(pi, 5)*C4*C6*L1*L4 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C6*L1*L3 + (-32*I*np.power(pi, 5)*C4 - 32*I*np.power(pi, 5)*C5)*C6*L1*L5)*L6 + ((-32*I*np.power(pi, 5)*C2*C6 - 32*I*np.power(pi, 5)*C2*C7 - 32*I*np.power(pi, 5)*C2*C8)*L1*L2 + ((-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C6 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C7 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C8)*L1*L3 + (-32*I*np.power(pi, 5)*C4*C6 - 32*I*np.power(pi, 5)*C4*C7 - 32*I*np.power(pi, 5)*C4*C8)*L1*L4 + ((-32*I*np.power(pi, 5)*C4 - 32*I*np.power(pi, 5)*C5)*C6 + (-32*I*np.power(pi, 5)*C4 - 32*I*np.power(pi, 5)*C5 - 32*I*np.power(pi, 5)*C6)*C7 + (-32*I*np.power(pi, 5)*C4 - 32*I*np.power(pi, 5)*C5 - 32*I*np.power(pi, 5)*C6)*C8)*L1*L5 + (-32*I*np.power(pi, 5)*C6*C7 - 32*I*np.power(pi, 5)*C6*C8)*L1*L6)*L7 + (-32*I*np.power(pi, 5)*C2*C8*L1*L2 - 32*I*np.power(pi, 5)*C4*C8*L1*L4 - 32*I*np.power(pi, 5)*C6*C8*L1*L6 + (-32*I*np.power(pi, 5)*C2 - 32*I*np.power(pi, 5)*C3 - 32*I*np.power(pi, 5)*C4)*C8*L1*L3 + (-32*I*np.power(pi, 5)*C4 - 32*I*np.power(pi, 5)*C5 - 32*I*np.power(pi, 5)*C6)*C8*L1*L5 + (-32*I*np.power(pi, 5)*C6 - 32*I*np.power(pi, 5)*C7)*C8*L1*L7)*L8)*np.power(freq, 5) - 16*((np.power(pi, 4)*C2*C8*L1*L2 + np.power(pi, 4)*C4*C8*L1*L4 + np.power(pi, 4)*C6*C8*L1*L6 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8*L1*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8*L1*L5 + (np.power(pi, 4)*C6 + np.power(pi, 4)*C7)*C8*L1*L7)*ZL - (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C5 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6)*L1 + (np.power(pi, 4)*C2*C4 + np.power(pi, 4)*C2*C5 + np.power(pi, 4)*C2*C6)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C5 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6)*L3 + (np.power(pi, 4)*C4*C5 + np.power(pi, 4)*C4*C6)*L4)*L5 + (np.power(pi, 4)*C2*C6*L2 + np.power(pi, 4)*C4*C6*L4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L5)*L6 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C7 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C8)*L1 + (np.power(pi, 4)*C2*C6 + np.power(pi, 4)*C2*C7 + np.power(pi, 4)*C2*C8)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C7 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8)*L3 + (np.power(pi, 4)*C4*C6 + np.power(pi, 4)*C4*C7 + np.power(pi, 4)*C4*C8)*L4 + ((np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C7 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8)*L5 + (np.power(pi, 4)*C6*C7 + np.power(pi, 4)*C6*C8)*L6)*L7 + (np.power(pi, 4)*C2*C8*L2 + np.power(pi, 4)*C4*C8*L4 + np.power(pi, 4)*C6*C8*L6 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C8*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8*L5 + (np.power(pi, 4)*C6 + np.power(pi, 4)*C7)*C8*L7)*L8)*ZS)*np.power(freq, 4) + (8*I*np.power(pi, 3)*C2*L1*L2 + 8*I*np.power(pi, 3)*C4*L1*L4 + 8*I*np.power(pi, 3)*C6*L1*L6 + 8*I*np.power(pi, 3)*C8*L1*L8 + (8*I*np.power(pi, 3)*C2 + 8*I*np.power(pi, 3)*C3 + 8*I*np.power(pi, 3)*C4)*L1*L3 + (8*I*np.power(pi, 3)*C4 + 8*I*np.power(pi, 3)*C5 + 8*I*np.power(pi, 3)*C6)*L1*L5 + (8*I*np.power(pi, 3)*C6 + 8*I*np.power(pi, 3)*C7 + 8*I*np.power(pi, 3)*C8)*L1*L7 + (-8*I*np.power(pi, 3)*C2*C8*L2 - 8*I*np.power(pi, 3)*C4*C8*L4 - 8*I*np.power(pi, 3)*C6*C8*L6 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C8*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*C8*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*C8*L5 + (-8*I*np.power(pi, 3)*C6 - 8*I*np.power(pi, 3)*C7)*C8*L7)*ZL*ZS)*np.power(freq, 3) + 4*(np.power(pi, 2)*C8*L1*ZL - (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + np.power(pi, 2)*C6*L6 + np.power(pi, 2)*C8*L8 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3 + (np.power(pi, 2)*C4 + np.power(pi, 2)*C5 + np.power(pi, 2)*C6)*L5 + (np.power(pi, 2)*C6 + np.power(pi, 2)*C7 + np.power(pi, 2)*C8)*L7)*ZS)*np.power(freq, 2) + (2*I*pi*C8*ZL*ZS - 2*I*pi*L1)*freq + ZS)/(65536*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*ZS*np.power(freq, 16) + (-32768*I*np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*ZL*ZS - 32768*I*np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8)*np.power(freq, 15) - 16384*(np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*ZL + ((np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7 + np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 14)*C1*C2*C3*C4*C5 + np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 14)*C1*C2*C3*C4 + (np.power(pi, 14)*C1*C2*C3 + np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L2 + (np.power(pi, 14)*C1*C2 + (np.power(pi, 14)*C1 + np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 14) + ((8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + 8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5*C6 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5 + 8192*I*np.power(pi, 13)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((8192*I*np.power(pi, 13)*C1*C2*C3*C4 + (8192*I*np.power(pi, 13)*C1*C2*C3 + 8192*I*np.power(pi, 13)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (8192*I*np.power(pi, 13)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C7*C8*L2 + (8192*I*np.power(pi, 13)*C1*C2 + (8192*I*np.power(pi, 13)*C1 + 8192*I*np.power(pi, 13)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*ZL*ZS + (8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6 + (8192*I*np.power(pi, 13)*C2*C3*C4*C5 + 8192*I*np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (8192*I*np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((8192*I*np.power(pi, 13)*C2*C3*C4 + (8192*I*np.power(pi, 13)*C2*C3 + 8192*I*np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (8192*I*np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*np.power(pi, 13)*C2 + 8192*I*np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8)*np.power(freq, 13) + 4096*((np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 12)*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C2*C3*C4*C5 + np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 12)*C2*C3*C4 + (np.power(pi, 12)*C2*C3 + np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 12)*C2 + np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*ZL + (np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C7 + (np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 12)*C1*C2*C3*C4*C6*C7 + np.power(pi, 12)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7 + (np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 12)*C1*C2*C4*C5*C6*C7 + np.power(pi, 12)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8)*L1 + (np.power(pi, 12)*C2*C3*C4*C5*C6*C7 + np.power(pi, 12)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 12)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 12)*C1*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L2 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 12)*C1*C2*C3*C4*C6 + np.power(pi, 12)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 12)*C1*C2*C4*C5*C6 + (np.power(pi, 12)*C1*C2*C4*C5 + np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8*L1 + (np.power(pi, 12)*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C2*C3*C4*C5 + np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 12)*C1*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L2 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((np.power(pi, 12)*C1*C2*C4 + np.power(pi, 12)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8*L1 + (np.power(pi, 12)*C2*C3*C4 + (np.power(pi, 12)*C2*C3 + np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C4*C5*C6*C7*C8*L1 + (np.power(pi, 12)*C2 + np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 12) + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*C8*L2 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6 - 2048*I*np.power(pi, 11)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5)*C6 + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C1*C2*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C5 - 2048*I*np.power(pi, 11)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5*C6 + ((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C6)*C7)*C8*L1 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C7*C8*L2 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((-2048*I*np.power(pi, 11)*C1*C2*C4 - 2048*I*np.power(pi, 11)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C4)*C5)*C6*C7*C8*L1 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C7*C8*L2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C4*C5*C6*C7*C8*L1 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C7 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C7 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C7 - 2048*I*np.power(pi, 11)*C2*C4*C5*C6*C8)*L1*L2 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C7 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C6 - 2048*I*np.power(pi, 11)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C2*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C4*C5 - 2048*I*np.power(pi, 11)*C2*C4*C6)*C7)*C8*L1*L2 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C6*C7*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (-2048*I*np.power(pi, 11)*C4*C5*C6*C7*C8*L1*L4 + (-2048*I*np.power(pi, 11)*C2*C4 - 2048*I*np.power(pi, 11)*C2*C5)*C6*C7*C8*L1*L2 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3 - 2048*I*np.power(pi, 11)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8)*np.power(freq, 11) - 1024*(((np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 10)*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 10)*C2*C3*C4*C6 + np.power(pi, 10)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 10)*C2*C4*C5*C6 + (np.power(pi, 10)*C2*C4*C5 + np.power(pi, 10)*C2*C4*C6)*C7)*C8*L1*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 10)*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (np.power(pi, 10)*C4*C5*C6*C7*C8*L1*L4 + (np.power(pi, 10)*C2*C4 + np.power(pi, 10)*C2*C5)*C6*C7*C8*L1*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3 + np.power(pi, 10)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*ZL + ((np.power(pi, 10)*C1*C2*C3*C4*C5 + np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 10)*C1*C2*C3*C4*C6 + np.power(pi, 10)*C1*C2*C3*C4*C7 + np.power(pi, 10)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C7 + (np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C5*C6 + (np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C7 + (np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C8)*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C7 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C8)*L1 + (np.power(pi, 10)*C2*C3*C4*C5*C6 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C7 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C7 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C6*C7 + np.power(pi, 10)*C1*C2*C4*C6*C8)*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C7 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C8)*L1 + (np.power(pi, 10)*C2*C3*C4*C6*C7 + np.power(pi, 10)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C7 + (np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C8)*L1*L2 + ((((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C7 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C8)*L1 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C7 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C7 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C8)*L1 + (np.power(pi, 10)*C2*C4*C5*C6*C7 + np.power(pi, 10)*C2*C4*C5*C6*C8)*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C7 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (np.power(pi, 10)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C8*L1 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C6*C8*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C6*C8*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C8*L1 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8*L2)*L3 + (np.power(pi, 10)*C2*C4*C5*C6*C8*L2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C8*L1 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C6 + np.power(pi, 10)*C1*C2*C4*C7)*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C7)*C8*L1 + (np.power(pi, 10)*C2*C3*C4*C6 + np.power(pi, 10)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6 + (np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5 + np.power(pi, 10)*C1*C2*C6)*C7)*C8*L1*L2 + ((((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C6)*C7)*C8*L1 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6 + ((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C6)*C7)*C8*L1 + (np.power(pi, 10)*C2*C4*C5*C6 + (np.power(pi, 10)*C2*C4*C5 + np.power(pi, 10)*C2*C4*C6)*C7)*C8*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (np.power(pi, 10)*C1*C2*C6*C7*C8*L1*L2 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C6*C7*C8*L1 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6*C7*C8*L2)*L3 + (np.power(pi, 10)*C2*C4*C6*C7*C8*L2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C6*C7*C8*L1 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6*C7*C8*L3)*L4 + (np.power(pi, 10)*C4*C5*C6*C7*C8*L4 + ((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C5)*C6*C7*C8*L1 + (np.power(pi, 10)*C2*C4 + np.power(pi, 10)*C2*C5)*C6*C7*C8*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3 + np.power(pi, 10)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 10) + ((512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (512*I*np.power(pi, 9)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C1*C2*C3*C4 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C5 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C1*C2*C4*C5 + 512*I*np.power(pi, 9)*C1*C2*C4*C6)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6)*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6*C8*L1*L2*L3 + (512*I*np.power(pi, 9)*C1*C2*C4*C6*C8*L1*L2 + (512*I*np.power(pi, 9)*C2*C3*C4*C6*C8*L2 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5)*C6*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5)*C6*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*C8*L2)*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*C8*L2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5*C6*C8*L1 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C1*C2*C4*C6 + 512*I*np.power(pi, 9)*C1*C2*C4*C7)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C7)*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4*C6 + 512*I*np.power(pi, 9)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5)*C6 + (512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5 + 512*I*np.power(pi, 9)*C1*C2*C6)*C7)*C8*L1*L2 + ((((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5)*C6 + ((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C6)*C7)*C8*L1 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C6)*C7)*C8*L1 + (512*I*np.power(pi, 9)*C2*C4*C5*C6 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C7)*C8*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (512*I*np.power(pi, 9)*C1*C2*C6*C7*C8*L1*L2 + ((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C7*C8*L2)*L3 + (512*I*np.power(pi, 9)*C2*C4*C6*C7*C8*L2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C7*C8*L3)*L4 + (512*I*np.power(pi, 9)*C4*C5*C6*C7*C8*L4 + ((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C5)*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C7*C8*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*ZL*ZS + (512*I*np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((512*I*np.power(pi, 9)*C2*C3*C4*C6 + 512*I*np.power(pi, 9)*C2*C3*C4*C7 + 512*I*np.power(pi, 9)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C7 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C8)*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C5*C6 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C7 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C8)*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C7 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C7 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C8)*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C6*C7 + 512*I*np.power(pi, 9)*C2*C4*C6*C8)*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C7 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C8)*L1*L3)*L4 + (((512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C7 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C8)*L1*L2 + (((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C7 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C8)*L1*L3 + (512*I*np.power(pi, 9)*C4*C5*C6*C7 + 512*I*np.power(pi, 9)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (512*I*np.power(pi, 9)*C2*C3*C4*C8*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C8*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C8*L1*L2*L3 + (512*I*np.power(pi, 9)*C2*C4*C6*C8*L1*L2 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C8*L1*L3)*L4 + (512*I*np.power(pi, 9)*C4*C5*C6*C8*L1*L4 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C8*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C7)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C6 + 512*I*np.power(pi, 9)*C2*C4*C7)*C8*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C7)*C8*L1*L3)*L4 + (((512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5 + 512*I*np.power(pi, 9)*C2*C6)*C7)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C6)*C7)*C8*L1*L3 + (512*I*np.power(pi, 9)*C4*C5*C6 + (512*I*np.power(pi, 9)*C4*C5 + 512*I*np.power(pi, 9)*C4*C6)*C7)*C8*L1*L4)*L5 + (512*I*np.power(pi, 9)*C2*C6*C7*C8*L1*L2 + 512*I*np.power(pi, 9)*C4*C6*C7*C8*L1*L4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C6*C7*C8*L1*L3 + (512*I*np.power(pi, 9)*C4 + 512*I*np.power(pi, 9)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8)*np.power(freq, 9) + 256*((np.power(pi, 8)*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 8)*C2*C4*C6*C8*L1*L2 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8*L1*L3)*L4 + (np.power(pi, 8)*C4*C5*C6*C8*L1*L4 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 8)*C2*C4*C6 + np.power(pi, 8)*C2*C4*C7)*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C7)*C8*L1*L3)*L4 + (((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5 + np.power(pi, 8)*C2*C6)*C7)*C8*L1*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6)*C7)*C8*L1*L3 + (np.power(pi, 8)*C4*C5*C6 + (np.power(pi, 8)*C4*C5 + np.power(pi, 8)*C4*C6)*C7)*C8*L1*L4)*L5 + (np.power(pi, 8)*C2*C6*C7*C8*L1*L2 + np.power(pi, 8)*C4*C6*C7*C8*L1*L4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6*C7*C8*L1*L3 + (np.power(pi, 8)*C4 + np.power(pi, 8)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*ZL + (np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 8)*C1*C2*C3*C4 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C5 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C5 + np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 8)*C2*C3*C4*C5 + np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C6*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C7 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C6 + np.power(pi, 8)*C1*C2*C4*C7 + np.power(pi, 8)*C1*C2*C4*C8)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C7 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C8)*L1 + (np.power(pi, 8)*C2*C3*C4*C6 + np.power(pi, 8)*C2*C3*C4*C7 + np.power(pi, 8)*C2*C3*C4*C8)*L2)*L3)*L4 + (((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6 + (np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C7 + (np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C8)*L1*L2 + ((((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C7 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C8)*L1 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C7 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8)*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C7 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C8)*L1 + (np.power(pi, 8)*C2*C4*C5*C6 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C7 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8)*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C7 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C6*C7 + np.power(pi, 8)*C1*C2*C6*C8)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C7 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C8)*L1 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C7 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8)*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C7 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C8)*L1 + (np.power(pi, 8)*C2*C4*C6*C7 + np.power(pi, 8)*C2*C4*C6*C8)*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C7 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8)*L3)*L4 + ((((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C7 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C8)*L1 + ((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C7 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8)*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C7 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8)*L3 + (np.power(pi, 8)*C4*C5*C6*C7 + np.power(pi, 8)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C8*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C8*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C8*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C8*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C8*L1 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8*L3)*L4)*L5 + (np.power(pi, 8)*C1*C2*C6*C8*L1*L2 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C8*L1 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8*L2)*L3 + (np.power(pi, 8)*C2*C4*C6*C8*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C8*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8*L3)*L4 + (np.power(pi, 8)*C4*C5*C6*C8*L4 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C8*L1 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((np.power(pi, 8)*C1*C2*C6 + np.power(pi, 8)*C1*C2*C7)*C8*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C7)*C8*L1 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C7)*C8*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C7)*C8*L1 + (np.power(pi, 8)*C2*C4*C6 + np.power(pi, 8)*C2*C4*C7)*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C7)*C8*L3)*L4 + ((((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C6)*C7)*C8*L1 + ((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5 + np.power(pi, 8)*C2*C6)*C7)*C8*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6)*C7)*C8*L3 + (np.power(pi, 8)*C4*C5*C6 + (np.power(pi, 8)*C4*C5 + np.power(pi, 8)*C4*C6)*C7)*C8*L4)*L5 + (np.power(pi, 8)*C2*C6*C7*C8*L2 + np.power(pi, 8)*C4*C6*C7*C8*L4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C6*C7*C8*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6*C7*C8*L3 + (np.power(pi, 8)*C4 + np.power(pi, 8)*C5)*C6*C7*C8*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C3 - 128*I*np.power(pi, 7)*C1*C2*C4)*C8*L1*L2*L3 + (-128*I*np.power(pi, 7)*C1*C2*C4*C8*L1*L2 + (-128*I*np.power(pi, 7)*C2*C3*C4*C8*L2 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C4 - 128*I*np.power(pi, 7)*C1*C2*C5 - 128*I*np.power(pi, 7)*C1*C2*C6)*C8*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C5 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*C8*L2)*L3 + (((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C5 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*C8*L3)*L4)*L5 + (-128*I*np.power(pi, 7)*C1*C2*C6*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*C8*L2)*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*C8*L2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*C8*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*C8*L4 + ((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5)*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((-128*I*np.power(pi, 7)*C1*C2*C6 - 128*I*np.power(pi, 7)*C1*C2*C7)*C8*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C7)*C8*L1 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C7)*C8*L2)*L3 + (((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C7)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4*C6 - 128*I*np.power(pi, 7)*C2*C4*C7)*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C7)*C8*L3)*L4 + ((((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5)*C6 + ((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C6)*C7)*C8*L1 + ((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C7)*C8*L2 + (((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C7)*C8*L3 + (-128*I*np.power(pi, 7)*C4*C5*C6 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C7)*C8*L4)*L5 + (-128*I*np.power(pi, 7)*C2*C6*C7*C8*L2 - 128*I*np.power(pi, 7)*C4*C6*C7*C8*L4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C6*C7*C8*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C7*C8*L3 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C7*C8*L5)*L6)*L7)*ZL*ZS + ((-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*L1*L4 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C7 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C8)*L1*L2*L3 + ((-128*I*np.power(pi, 7)*C2*C4*C6 - 128*I*np.power(pi, 7)*C2*C4*C7 - 128*I*np.power(pi, 7)*C2*C4*C8)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C7 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C8)*L1*L3)*L4 + (((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C7 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C8)*L1*L2 + (((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C7 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C8)*L1*L3 + (-128*I*np.power(pi, 7)*C4*C5*C6 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C7 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C8)*L1*L4)*L5 + ((-128*I*np.power(pi, 7)*C2*C6*C7 - 128*I*np.power(pi, 7)*C2*C6*C8)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C7 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C8)*L1*L3 + (-128*I*np.power(pi, 7)*C4*C6*C7 - 128*I*np.power(pi, 7)*C4*C6*C8)*L1*L4 + ((-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C7 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C8*L1*L2*L3 + (-128*I*np.power(pi, 7)*C2*C4*C8*L1*L2 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C8*L1*L3)*L4 + ((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C8*L1*L3 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C8*L1*L4)*L5 + (-128*I*np.power(pi, 7)*C2*C6*C8*L1*L2 - 128*I*np.power(pi, 7)*C4*C6*C8*L1*L4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C8*L1*L3 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C8*L1*L5)*L6 + (-128*I*np.power(pi, 7)*C6*C7*C8*L1*L6 + (-128*I*np.power(pi, 7)*C2*C6 - 128*I*np.power(pi, 7)*C2*C7)*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C7)*C8*L1*L3 + (-128*I*np.power(pi, 7)*C4*C6 - 128*I*np.power(pi, 7)*C4*C7)*C8*L1*L4 + ((-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5 - 128*I*np.power(pi, 7)*C6)*C7)*C8*L1*L5)*L7)*L8)*np.power(freq, 7) - 64*(((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 6)*C2*C4*C8*L1*L2 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8*L1*L3)*L4 + ((np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8*L1*L3 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8*L1*L4)*L5 + (np.power(pi, 6)*C2*C6*C8*L1*L2 + np.power(pi, 6)*C4*C6*C8*L1*L4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8*L1*L3 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8*L1*L5)*L6 + (np.power(pi, 6)*C6*C7*C8*L1*L6 + (np.power(pi, 6)*C2*C6 + np.power(pi, 6)*C2*C7)*C8*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C7)*C8*L1*L3 + (np.power(pi, 6)*C4*C6 + np.power(pi, 6)*C4*C7)*C8*L1*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5 + np.power(pi, 6)*C6)*C7)*C8*L1*L5)*L7)*ZL + ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 6)*C1*C2*C4 + np.power(pi, 6)*C1*C2*C5 + np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C5 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6)*L1 + (np.power(pi, 6)*C2*C3*C4 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C5 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6)*L1 + (np.power(pi, 6)*C2*C4*C5 + np.power(pi, 6)*C2*C4*C6)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 6)*C1*C2*C6*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (np.power(pi, 6)*C2*C4*C6*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L4 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((np.power(pi, 6)*C1*C2*C6 + np.power(pi, 6)*C1*C2*C7 + np.power(pi, 6)*C1*C2*C8)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C7 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C8)*L1 + ((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C7 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C7 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C8)*L1 + (np.power(pi, 6)*C2*C4*C6 + np.power(pi, 6)*C2*C4*C7 + np.power(pi, 6)*C2*C4*C8)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C7 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8)*L3)*L4 + ((((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C7 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C8)*L1 + ((np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C7 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8)*L2 + (((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C7 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8)*L3 + (np.power(pi, 6)*C4*C5*C6 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C7 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8)*L4)*L5 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C7 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C8)*L1 + (np.power(pi, 6)*C2*C6*C7 + np.power(pi, 6)*C2*C6*C8)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C7 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8)*L3 + (np.power(pi, 6)*C4*C6*C7 + np.power(pi, 6)*C4*C6*C8)*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C7 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8)*L5)*L6)*L7 + (np.power(pi, 6)*C1*C2*C8*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C8*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8*L2)*L3 + (np.power(pi, 6)*C2*C4*C8*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C8*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8*L3)*L4 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C8*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8*L3 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8*L4)*L5 + (np.power(pi, 6)*C2*C6*C8*L2 + np.power(pi, 6)*C4*C6*C8*L4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C8*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8*L3 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8*L5)*L6 + (np.power(pi, 6)*C6*C7*C8*L6 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C7)*C8*L1 + (np.power(pi, 6)*C2*C6 + np.power(pi, 6)*C2*C7)*C8*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C7)*C8*L3 + (np.power(pi, 6)*C4*C6 + np.power(pi, 6)*C4*C7)*C8*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5 + np.power(pi, 6)*C6)*C7)*C8*L5)*L7)*L8)*ZS)*np.power(freq, 6) + ((32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C8*L1*L2 + ((32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4)*C8*L1 + (32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*C8*L2)*L3 + (32*I*np.power(pi, 5)*C2*C4*C8*L2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4*C8*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*C8*L3)*L4 + (((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C5 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6)*C8*L1 + (32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*C8*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*C8*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*C8*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*C8*L2 + 32*I*np.power(pi, 5)*C4*C6*C8*L4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6*C8*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*C8*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*C8*L5)*L6 + (32*I*np.power(pi, 5)*C6*C7*C8*L6 + ((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C7)*C8*L1 + (32*I*np.power(pi, 5)*C2*C6 + 32*I*np.power(pi, 5)*C2*C7)*C8*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C7)*C8*L3 + (32*I*np.power(pi, 5)*C4*C6 + 32*I*np.power(pi, 5)*C4*C7)*C8*L4 + ((32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C7)*C8*L5)*L7)*ZL*ZS + (32*I*np.power(pi, 5)*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*L1*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*L1*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*L1*L2 + 32*I*np.power(pi, 5)*C4*C6*L1*L4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*L1*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*L1*L5)*L6 + ((32*I*np.power(pi, 5)*C2*C6 + 32*I*np.power(pi, 5)*C2*C7 + 32*I*np.power(pi, 5)*C2*C8)*L1*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C7 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C8)*L1*L3 + (32*I*np.power(pi, 5)*C4*C6 + 32*I*np.power(pi, 5)*C4*C7 + 32*I*np.power(pi, 5)*C4*C8)*L1*L4 + ((32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C7 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C8)*L1*L5 + (32*I*np.power(pi, 5)*C6*C7 + 32*I*np.power(pi, 5)*C6*C8)*L1*L6)*L7 + (32*I*np.power(pi, 5)*C2*C8*L1*L2 + 32*I*np.power(pi, 5)*C4*C8*L1*L4 + 32*I*np.power(pi, 5)*C6*C8*L1*L6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C8*L1*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C8*L1*L5 + (32*I*np.power(pi, 5)*C6 + 32*I*np.power(pi, 5)*C7)*C8*L1*L7)*L8)*np.power(freq, 5) + 16*((np.power(pi, 4)*C2*C8*L1*L2 + np.power(pi, 4)*C4*C8*L1*L4 + np.power(pi, 4)*C6*C8*L1*L6 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8*L1*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8*L1*L5 + (np.power(pi, 4)*C6 + np.power(pi, 4)*C7)*C8*L1*L7)*ZL + (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C5 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6)*L1 + (np.power(pi, 4)*C2*C4 + np.power(pi, 4)*C2*C5 + np.power(pi, 4)*C2*C6)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C5 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6)*L3 + (np.power(pi, 4)*C4*C5 + np.power(pi, 4)*C4*C6)*L4)*L5 + (np.power(pi, 4)*C2*C6*L2 + np.power(pi, 4)*C4*C6*L4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L5)*L6 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C7 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C8)*L1 + (np.power(pi, 4)*C2*C6 + np.power(pi, 4)*C2*C7 + np.power(pi, 4)*C2*C8)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C7 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8)*L3 + (np.power(pi, 4)*C4*C6 + np.power(pi, 4)*C4*C7 + np.power(pi, 4)*C4*C8)*L4 + ((np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C7 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8)*L5 + (np.power(pi, 4)*C6*C7 + np.power(pi, 4)*C6*C8)*L6)*L7 + (np.power(pi, 4)*C2*C8*L2 + np.power(pi, 4)*C4*C8*L4 + np.power(pi, 4)*C6*C8*L6 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C8*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8*L5 + (np.power(pi, 4)*C6 + np.power(pi, 4)*C7)*C8*L7)*L8)*ZS)*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C2*L1*L2 - 8*I*np.power(pi, 3)*C4*L1*L4 - 8*I*np.power(pi, 3)*C6*L1*L6 - 8*I*np.power(pi, 3)*C8*L1*L8 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*L1*L5 + (-8*I*np.power(pi, 3)*C6 - 8*I*np.power(pi, 3)*C7 - 8*I*np.power(pi, 3)*C8)*L1*L7 + (-8*I*np.power(pi, 3)*C2*C8*L2 - 8*I*np.power(pi, 3)*C4*C8*L4 - 8*I*np.power(pi, 3)*C6*C8*L6 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C8*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*C8*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*C8*L5 + (-8*I*np.power(pi, 3)*C6 - 8*I*np.power(pi, 3)*C7)*C8*L7)*ZL*ZS)*np.power(freq, 3) - 4*(np.power(pi, 2)*C8*L1*ZL + (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + np.power(pi, 2)*C6*L6 + np.power(pi, 2)*C8*L8 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3 + (np.power(pi, 2)*C4 + np.power(pi, 2)*C5 + np.power(pi, 2)*C6)*L5 + (np.power(pi, 2)*C6 + np.power(pi, 2)*C7 + np.power(pi, 2)*C8)*L7)*ZS)*np.power(freq, 2) + (2*I*pi*C8*ZL*ZS + 2*I*pi*L1)*freq + ZS)
                        S21 = 512*np.power(pi, 8)*C2*C4*C6*C8*L1*L3*L5*L7*ZL*ZS*np.power(freq, 8)/((65536*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*ZS*np.power(freq, 16) + (-32768*I*np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*ZL*ZS - 32768*I*np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8)*np.power(freq, 15) - 16384*(np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*ZL + ((np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7 + np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 14)*C1*C2*C3*C4*C5 + np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 14)*C1*C2*C3*C4 + (np.power(pi, 14)*C1*C2*C3 + np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L2 + (np.power(pi, 14)*C1*C2 + (np.power(pi, 14)*C1 + np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 14) + ((8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + 8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5*C6 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C5 + 8192*I*np.power(pi, 13)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (8192*I*np.power(pi, 13)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((8192*I*np.power(pi, 13)*C1*C2*C3*C4 + (8192*I*np.power(pi, 13)*C1*C2*C3 + 8192*I*np.power(pi, 13)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (8192*I*np.power(pi, 13)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C7*C8*L2 + (8192*I*np.power(pi, 13)*C1*C2 + (8192*I*np.power(pi, 13)*C1 + 8192*I*np.power(pi, 13)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*ZL*ZS + (8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((8192*I*np.power(pi, 13)*C2*C3*C4*C5*C6 + (8192*I*np.power(pi, 13)*C2*C3*C4*C5 + 8192*I*np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (8192*I*np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((8192*I*np.power(pi, 13)*C2*C3*C4 + (8192*I*np.power(pi, 13)*C2*C3 + 8192*I*np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (8192*I*np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*np.power(pi, 13)*C2 + 8192*I*np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8)*np.power(freq, 13) + 4096*((np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 12)*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C2*C3*C4*C5 + np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 12)*C2*C3*C4 + (np.power(pi, 12)*C2*C3 + np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 12)*C2 + np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*ZL + (np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C7 + (np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 12)*C1*C2*C3*C4*C6*C7 + np.power(pi, 12)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7 + (np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 12)*C1*C2*C4*C5*C6*C7 + np.power(pi, 12)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8)*L1 + (np.power(pi, 12)*C2*C3*C4*C5*C6*C7 + np.power(pi, 12)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 12)*C1*C2*C3*C4*C5 + np.power(pi, 12)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 12)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 12)*C1*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L2 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 12)*C1*C2*C3*C4*C6 + np.power(pi, 12)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (np.power(pi, 12)*C1*C2*C3*C4 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C5 + (np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 12)*C1*C2*C4*C5*C6 + (np.power(pi, 12)*C1*C2*C4*C5 + np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C5 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8*L1 + (np.power(pi, 12)*C2*C3*C4*C5*C6 + (np.power(pi, 12)*C2*C3*C4*C5 + np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 12)*C1*C2*C3 + np.power(pi, 12)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 12)*C1*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L2 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((np.power(pi, 12)*C1*C2*C4 + np.power(pi, 12)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3)*C4 + (np.power(pi, 12)*C1*C2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C3 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8*L1 + (np.power(pi, 12)*C2*C3*C4 + (np.power(pi, 12)*C2*C3 + np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L2 + (np.power(pi, 12)*C1 + np.power(pi, 12)*C2)*C4*C5*C6*C7*C8*L1 + (np.power(pi, 12)*C2 + np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 12) + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6*C8*L2 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((-2048*I*np.power(pi, 11)*C1*C2*C3*C4*C6 - 2048*I*np.power(pi, 11)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5)*C6 + (-2048*I*np.power(pi, 11)*C1*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C5 + (-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C1*C2*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C5 - 2048*I*np.power(pi, 11)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5*C6 + ((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C5 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C6)*C7)*C8*L1 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((-2048*I*np.power(pi, 11)*C1*C2*C3 - 2048*I*np.power(pi, 11)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C1*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C7*C8*L2 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((-2048*I*np.power(pi, 11)*C1*C2*C4 - 2048*I*np.power(pi, 11)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3)*C4 + (-2048*I*np.power(pi, 11)*C1*C2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C3 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C4)*C5)*C6*C7*C8*L1 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C7*C8*L2 + (-2048*I*np.power(pi, 11)*C1 - 2048*I*np.power(pi, 11)*C2)*C4*C5*C6*C7*C8*L1 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C7 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C7 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C7 - 2048*I*np.power(pi, 11)*C2*C4*C5*C6*C8)*L1*L2 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C7 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C5 - 2048*I*np.power(pi, 11)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-2048*I*np.power(pi, 11)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((-2048*I*np.power(pi, 11)*C2*C3*C4*C6 - 2048*I*np.power(pi, 11)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5)*C6 + (-2048*I*np.power(pi, 11)*C2*C3*C4 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C5 + (-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-2048*I*np.power(pi, 11)*C2*C4*C5*C6 + (-2048*I*np.power(pi, 11)*C2*C4*C5 - 2048*I*np.power(pi, 11)*C2*C4*C6)*C7)*C8*L1*L2 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5*C6 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C5 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((-2048*I*np.power(pi, 11)*C2*C3 - 2048*I*np.power(pi, 11)*C2*C4)*C6*C7*C8*L1*L2*L3 + (-2048*I*np.power(pi, 11)*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (-2048*I*np.power(pi, 11)*C4*C5*C6*C7*C8*L1*L4 + (-2048*I*np.power(pi, 11)*C2*C4 - 2048*I*np.power(pi, 11)*C2*C5)*C6*C7*C8*L1*L2 + ((-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3)*C4 + (-2048*I*np.power(pi, 11)*C2 - 2048*I*np.power(pi, 11)*C3 - 2048*I*np.power(pi, 11)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8)*np.power(freq, 11) - 1024*(((np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 10)*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 10)*C2*C3*C4*C6 + np.power(pi, 10)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 10)*C2*C4*C5*C6 + (np.power(pi, 10)*C2*C4*C5 + np.power(pi, 10)*C2*C4*C6)*C7)*C8*L1*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 10)*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (np.power(pi, 10)*C4*C5*C6*C7*C8*L1*L4 + (np.power(pi, 10)*C2*C4 + np.power(pi, 10)*C2*C5)*C6*C7*C8*L1*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3 + np.power(pi, 10)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*ZL + ((np.power(pi, 10)*C1*C2*C3*C4*C5 + np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 10)*C1*C2*C3*C4*C6 + np.power(pi, 10)*C1*C2*C3*C4*C7 + np.power(pi, 10)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C7 + (np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C5*C6 + (np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C7 + (np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C8)*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C7 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C8)*L1 + (np.power(pi, 10)*C2*C3*C4*C5*C6 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C7 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C7 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C6*C7 + np.power(pi, 10)*C1*C2*C4*C6*C8)*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C7 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C8)*L1 + (np.power(pi, 10)*C2*C3*C4*C6*C7 + np.power(pi, 10)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C7 + (np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C8)*L1*L2 + ((((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C7 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C8)*L1 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C7 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C7 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C8)*L1 + (np.power(pi, 10)*C2*C4*C5*C6*C7 + np.power(pi, 10)*C2*C4*C5*C6*C8)*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C7 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (np.power(pi, 10)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 10)*C1*C2*C3*C4 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C5 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C5 + np.power(pi, 10)*C1*C2*C4*C6)*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6)*C8*L1 + (np.power(pi, 10)*C2*C3*C4*C5 + np.power(pi, 10)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 10)*C1*C2*C4*C6*C8*L1*L2 + (np.power(pi, 10)*C2*C3*C4*C6*C8*L2 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6*C8*L1 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6*C8*L2)*L3 + (np.power(pi, 10)*C2*C4*C5*C6*C8*L2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6*C8*L1 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C6 + (np.power(pi, 10)*C1*C2*C3 + np.power(pi, 10)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 10)*C1*C2*C4*C6 + np.power(pi, 10)*C1*C2*C4*C7)*C8*L1*L2 + (((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C6 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4*C7)*C8*L1 + (np.power(pi, 10)*C2*C3*C4*C6 + np.power(pi, 10)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5)*C6 + (np.power(pi, 10)*C1*C2*C4 + np.power(pi, 10)*C1*C2*C5 + np.power(pi, 10)*C1*C2*C6)*C7)*C8*L1*L2 + ((((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5)*C6 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3)*C4 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C5 + (np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C6)*C7)*C8*L1 + ((np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5)*C6 + (np.power(pi, 10)*C2*C3*C4 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C5 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5*C6 + ((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C5 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C6)*C7)*C8*L1 + (np.power(pi, 10)*C2*C4*C5*C6 + (np.power(pi, 10)*C2*C4*C5 + np.power(pi, 10)*C2*C4*C6)*C7)*C8*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5*C6 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C5 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (np.power(pi, 10)*C1*C2*C6*C7*C8*L1*L2 + ((np.power(pi, 10)*C1*C2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C3 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4)*C6*C7*C8*L1 + (np.power(pi, 10)*C2*C3 + np.power(pi, 10)*C2*C4)*C6*C7*C8*L2)*L3 + (np.power(pi, 10)*C2*C4*C6*C7*C8*L2 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4*C6*C7*C8*L1 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4*C6*C7*C8*L3)*L4 + (np.power(pi, 10)*C4*C5*C6*C7*C8*L4 + ((np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C4 + (np.power(pi, 10)*C1 + np.power(pi, 10)*C2)*C5)*C6*C7*C8*L1 + (np.power(pi, 10)*C2*C4 + np.power(pi, 10)*C2*C5)*C6*C7*C8*L2 + ((np.power(pi, 10)*C2 + np.power(pi, 10)*C3)*C4 + (np.power(pi, 10)*C2 + np.power(pi, 10)*C3 + np.power(pi, 10)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 10) + ((512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (512*I*np.power(pi, 9)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C1*C2*C3*C4 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C5 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C1*C2*C4*C5 + 512*I*np.power(pi, 9)*C1*C2*C4*C6)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6)*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4*C5 + 512*I*np.power(pi, 9)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6*C8*L1*L2*L3 + (512*I*np.power(pi, 9)*C1*C2*C4*C6*C8*L1*L2 + (512*I*np.power(pi, 9)*C2*C3*C4*C6*C8*L2 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5)*C6*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5)*C6*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*C8*L2)*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*C8*L2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5*C6*C8*L1 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C6 + (512*I*np.power(pi, 9)*C1*C2*C3 + 512*I*np.power(pi, 9)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C1*C2*C4*C6 + 512*I*np.power(pi, 9)*C1*C2*C4*C7)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C6 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4*C7)*C8*L1 + (512*I*np.power(pi, 9)*C2*C3*C4*C6 + 512*I*np.power(pi, 9)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5)*C6 + (512*I*np.power(pi, 9)*C1*C2*C4 + 512*I*np.power(pi, 9)*C1*C2*C5 + 512*I*np.power(pi, 9)*C1*C2*C6)*C7)*C8*L1*L2 + ((((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5)*C6 + ((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3)*C4 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C5 + (512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C6)*C7)*C8*L1 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C5 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C6)*C7)*C8*L1 + (512*I*np.power(pi, 9)*C2*C4*C5*C6 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C7)*C8*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (512*I*np.power(pi, 9)*C1*C2*C6*C7*C8*L1*L2 + ((512*I*np.power(pi, 9)*C1*C2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C3 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4)*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C7*C8*L2)*L3 + (512*I*np.power(pi, 9)*C2*C4*C6*C7*C8*L2 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C7*C8*L3)*L4 + (512*I*np.power(pi, 9)*C4*C5*C6*C7*C8*L4 + ((512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C4 + (512*I*np.power(pi, 9)*C1 + 512*I*np.power(pi, 9)*C2)*C5)*C6*C7*C8*L1 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C7*C8*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*ZL*ZS + (512*I*np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (512*I*np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((512*I*np.power(pi, 9)*C2*C3*C4*C6 + 512*I*np.power(pi, 9)*C2*C3*C4*C7 + 512*I*np.power(pi, 9)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5)*C6 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C7 + (512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C8)*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C5*C6 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C7 + (512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C8)*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C7 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C7 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C8)*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C6*C7 + 512*I*np.power(pi, 9)*C2*C4*C6*C8)*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C7 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C8)*L1*L3)*L4 + (((512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C7 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C8)*L1*L2 + (((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C7 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C8)*L1*L3 + (512*I*np.power(pi, 9)*C4*C5*C6*C7 + 512*I*np.power(pi, 9)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (512*I*np.power(pi, 9)*C2*C3*C4*C8*L1*L2*L3*L4 + ((512*I*np.power(pi, 9)*C2*C3*C4 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C5 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C5 + 512*I*np.power(pi, 9)*C2*C4*C6)*C8*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6*C8*L1*L2*L3 + (512*I*np.power(pi, 9)*C2*C4*C6*C8*L1*L2 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6*C8*L1*L3)*L4 + (512*I*np.power(pi, 9)*C4*C5*C6*C8*L1*L4 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6*C8*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C6 + (512*I*np.power(pi, 9)*C2*C3 + 512*I*np.power(pi, 9)*C2*C4)*C7)*C8*L1*L2*L3 + ((512*I*np.power(pi, 9)*C2*C4*C6 + 512*I*np.power(pi, 9)*C2*C4*C7)*C8*L1*L2 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C6 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4*C7)*C8*L1*L3)*L4 + (((512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5)*C6 + (512*I*np.power(pi, 9)*C2*C4 + 512*I*np.power(pi, 9)*C2*C5 + 512*I*np.power(pi, 9)*C2*C6)*C7)*C8*L1*L2 + (((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5)*C6 + ((512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3)*C4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C5 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C6)*C7)*C8*L1*L3 + (512*I*np.power(pi, 9)*C4*C5*C6 + (512*I*np.power(pi, 9)*C4*C5 + 512*I*np.power(pi, 9)*C4*C6)*C7)*C8*L1*L4)*L5 + (512*I*np.power(pi, 9)*C2*C6*C7*C8*L1*L2 + 512*I*np.power(pi, 9)*C4*C6*C7*C8*L1*L4 + (512*I*np.power(pi, 9)*C2 + 512*I*np.power(pi, 9)*C3 + 512*I*np.power(pi, 9)*C4)*C6*C7*C8*L1*L3 + (512*I*np.power(pi, 9)*C4 + 512*I*np.power(pi, 9)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8)*np.power(freq, 9) + 256*((np.power(pi, 8)*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 8)*C2*C4*C6*C8*L1*L2 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8*L1*L3)*L4 + (np.power(pi, 8)*C4*C5*C6*C8*L1*L4 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 8)*C2*C4*C6 + np.power(pi, 8)*C2*C4*C7)*C8*L1*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C7)*C8*L1*L3)*L4 + (((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5 + np.power(pi, 8)*C2*C6)*C7)*C8*L1*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6)*C7)*C8*L1*L3 + (np.power(pi, 8)*C4*C5*C6 + (np.power(pi, 8)*C4*C5 + np.power(pi, 8)*C4*C6)*C7)*C8*L1*L4)*L5 + (np.power(pi, 8)*C2*C6*C7*C8*L1*L2 + np.power(pi, 8)*C4*C6*C7*C8*L1*L4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6*C7*C8*L1*L3 + (np.power(pi, 8)*C4 + np.power(pi, 8)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*ZL + (np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 8)*C1*C2*C3*C4 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C5 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C5 + np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 8)*C2*C3*C4*C5 + np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C6*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 8)*C2*C4*C5*C6*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C6 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C7 + (np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 8)*C1*C2*C4*C6 + np.power(pi, 8)*C1*C2*C4*C7 + np.power(pi, 8)*C1*C2*C4*C8)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C6 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C7 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C8)*L1 + (np.power(pi, 8)*C2*C3*C4*C6 + np.power(pi, 8)*C2*C3*C4*C7 + np.power(pi, 8)*C2*C3*C4*C8)*L2)*L3)*L4 + (((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5)*C6 + (np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C7 + (np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C8)*L1*L2 + ((((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5)*C6 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C7 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C8)*L1 + ((np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5)*C6 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C7 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8)*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5*C6 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C7 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C8)*L1 + (np.power(pi, 8)*C2*C4*C5*C6 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C7 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8)*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C7 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((np.power(pi, 8)*C1*C2*C6*C7 + np.power(pi, 8)*C1*C2*C6*C8)*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C7 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C8)*L1 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C7 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8)*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C7 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C8)*L1 + (np.power(pi, 8)*C2*C4*C6*C7 + np.power(pi, 8)*C2*C4*C6*C8)*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C7 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8)*L3)*L4 + ((((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C7 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C8)*L1 + ((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C7 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8)*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C7 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8)*L3 + (np.power(pi, 8)*C4*C5*C6*C7 + np.power(pi, 8)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((np.power(pi, 8)*C1*C2*C3 + np.power(pi, 8)*C1*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 8)*C1*C2*C4*C8*L1*L2 + (np.power(pi, 8)*C2*C3*C4*C8*L2 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((np.power(pi, 8)*C1*C2*C4 + np.power(pi, 8)*C1*C2*C5 + np.power(pi, 8)*C1*C2*C6)*C8*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3)*C4 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C5 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6)*C8*L1 + (np.power(pi, 8)*C2*C3*C4 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C5 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6)*C8*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6)*C8*L1 + (np.power(pi, 8)*C2*C4*C5 + np.power(pi, 8)*C2*C4*C6)*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6)*C8*L3)*L4)*L5 + (np.power(pi, 8)*C1*C2*C6*C8*L1*L2 + ((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6*C8*L1 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6*C8*L2)*L3 + (np.power(pi, 8)*C2*C4*C6*C8*L2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6*C8*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6*C8*L3)*L4 + (np.power(pi, 8)*C4*C5*C6*C8*L4 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6*C8*L1 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((np.power(pi, 8)*C1*C2*C6 + np.power(pi, 8)*C1*C2*C7)*C8*L1*L2 + (((np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C6 + (np.power(pi, 8)*C1*C2 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C3 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4)*C7)*C8*L1 + ((np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C6 + (np.power(pi, 8)*C2*C3 + np.power(pi, 8)*C2*C4)*C7)*C8*L2)*L3 + (((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C6 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4*C7)*C8*L1 + (np.power(pi, 8)*C2*C4*C6 + np.power(pi, 8)*C2*C4*C7)*C8*L2 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C6 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4*C7)*C8*L3)*L4 + ((((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5)*C6 + ((np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C5 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C6)*C7)*C8*L1 + ((np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5)*C6 + (np.power(pi, 8)*C2*C4 + np.power(pi, 8)*C2*C5 + np.power(pi, 8)*C2*C6)*C7)*C8*L2 + (((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5)*C6 + ((np.power(pi, 8)*C2 + np.power(pi, 8)*C3)*C4 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C5 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6)*C7)*C8*L3 + (np.power(pi, 8)*C4*C5*C6 + (np.power(pi, 8)*C4*C5 + np.power(pi, 8)*C4*C6)*C7)*C8*L4)*L5 + (np.power(pi, 8)*C2*C6*C7*C8*L2 + np.power(pi, 8)*C4*C6*C7*C8*L4 + (np.power(pi, 8)*C1 + np.power(pi, 8)*C2)*C6*C7*C8*L1 + (np.power(pi, 8)*C2 + np.power(pi, 8)*C3 + np.power(pi, 8)*C4)*C6*C7*C8*L3 + (np.power(pi, 8)*C4 + np.power(pi, 8)*C5)*C6*C7*C8*L5)*L6)*L7)*L8)*ZS)*np.power(freq, 8) + (-128*I*np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C3 - 128*I*np.power(pi, 7)*C1*C2*C4)*C8*L1*L2*L3 + (-128*I*np.power(pi, 7)*C1*C2*C4*C8*L1*L2 + (-128*I*np.power(pi, 7)*C2*C3*C4*C8*L2 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((-128*I*np.power(pi, 7)*C1*C2*C4 - 128*I*np.power(pi, 7)*C1*C2*C5 - 128*I*np.power(pi, 7)*C1*C2*C6)*C8*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3)*C4 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C5 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*C8*L2)*L3 + (((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C5 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*C8*L3)*L4)*L5 + (-128*I*np.power(pi, 7)*C1*C2*C6*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*C8*L2)*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*C8*L2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*C8*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*C8*L4 + ((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5)*C6*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((-128*I*np.power(pi, 7)*C1*C2*C6 - 128*I*np.power(pi, 7)*C1*C2*C7)*C8*L1*L2 + (((-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C6 + (-128*I*np.power(pi, 7)*C1*C2 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C3 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4)*C7)*C8*L1 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C7)*C8*L2)*L3 + (((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C6 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4*C7)*C8*L1 + (-128*I*np.power(pi, 7)*C2*C4*C6 - 128*I*np.power(pi, 7)*C2*C4*C7)*C8*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C7)*C8*L3)*L4 + ((((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5)*C6 + ((-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C5 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C6)*C7)*C8*L1 + ((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C7)*C8*L2 + (((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C7)*C8*L3 + (-128*I*np.power(pi, 7)*C4*C5*C6 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C7)*C8*L4)*L5 + (-128*I*np.power(pi, 7)*C2*C6*C7*C8*L2 - 128*I*np.power(pi, 7)*C4*C6*C7*C8*L4 + (-128*I*np.power(pi, 7)*C1 - 128*I*np.power(pi, 7)*C2)*C6*C7*C8*L1 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C7*C8*L3 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C7*C8*L5)*L6)*L7)*ZL*ZS + ((-128*I*np.power(pi, 7)*C2*C3*C4 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C5 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((-128*I*np.power(pi, 7)*C2*C4*C5 - 128*I*np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (-128*I*np.power(pi, 7)*C2*C4*C6*L1*L2 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (-128*I*np.power(pi, 7)*C4*C5*C6*L1*L4 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C6 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C7 + (-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C8)*L1*L2*L3 + ((-128*I*np.power(pi, 7)*C2*C4*C6 - 128*I*np.power(pi, 7)*C2*C4*C7 - 128*I*np.power(pi, 7)*C2*C4*C8)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C7 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C8)*L1*L3)*L4 + (((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5)*C6 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C7 + (-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C8)*L1*L2 + (((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5)*C6 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C7 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C8)*L1*L3 + (-128*I*np.power(pi, 7)*C4*C5*C6 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C7 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C8)*L1*L4)*L5 + ((-128*I*np.power(pi, 7)*C2*C6*C7 - 128*I*np.power(pi, 7)*C2*C6*C8)*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C7 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C8)*L1*L3 + (-128*I*np.power(pi, 7)*C4*C6*C7 - 128*I*np.power(pi, 7)*C4*C6*C8)*L1*L4 + ((-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C7 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((-128*I*np.power(pi, 7)*C2*C3 - 128*I*np.power(pi, 7)*C2*C4)*C8*L1*L2*L3 + (-128*I*np.power(pi, 7)*C2*C4*C8*L1*L2 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4*C8*L1*L3)*L4 + ((-128*I*np.power(pi, 7)*C2*C4 - 128*I*np.power(pi, 7)*C2*C5 - 128*I*np.power(pi, 7)*C2*C6)*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3)*C4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C5 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6)*C8*L1*L3 + (-128*I*np.power(pi, 7)*C4*C5 - 128*I*np.power(pi, 7)*C4*C6)*C8*L1*L4)*L5 + (-128*I*np.power(pi, 7)*C2*C6*C8*L1*L2 - 128*I*np.power(pi, 7)*C4*C6*C8*L1*L4 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6*C8*L1*L3 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6*C8*L1*L5)*L6 + (-128*I*np.power(pi, 7)*C6*C7*C8*L1*L6 + (-128*I*np.power(pi, 7)*C2*C6 - 128*I*np.power(pi, 7)*C2*C7)*C8*L1*L2 + ((-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C6 + (-128*I*np.power(pi, 7)*C2 - 128*I*np.power(pi, 7)*C3 - 128*I*np.power(pi, 7)*C4)*C7)*C8*L1*L3 + (-128*I*np.power(pi, 7)*C4*C6 - 128*I*np.power(pi, 7)*C4*C7)*C8*L1*L4 + ((-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5)*C6 + (-128*I*np.power(pi, 7)*C4 - 128*I*np.power(pi, 7)*C5 - 128*I*np.power(pi, 7)*C6)*C7)*C8*L1*L5)*L7)*L8)*np.power(freq, 7) - 64*(((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 6)*C2*C4*C8*L1*L2 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8*L1*L3)*L4 + ((np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8*L1*L3 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8*L1*L4)*L5 + (np.power(pi, 6)*C2*C6*C8*L1*L2 + np.power(pi, 6)*C4*C6*C8*L1*L4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8*L1*L3 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8*L1*L5)*L6 + (np.power(pi, 6)*C6*C7*C8*L1*L6 + (np.power(pi, 6)*C2*C6 + np.power(pi, 6)*C2*C7)*C8*L1*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C7)*C8*L1*L3 + (np.power(pi, 6)*C4*C6 + np.power(pi, 6)*C4*C7)*C8*L1*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5 + np.power(pi, 6)*C6)*C7)*C8*L1*L5)*L7)*ZL + ((np.power(pi, 6)*C1*C2*C3 + np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 6)*C1*C2*C4*L1*L2 + (np.power(pi, 6)*C2*C3*C4*L2 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 6)*C1*C2*C4 + np.power(pi, 6)*C1*C2*C5 + np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3)*C4 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C5 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6)*L1 + (np.power(pi, 6)*C2*C3*C4 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C5 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6)*L1 + (np.power(pi, 6)*C2*C4*C5 + np.power(pi, 6)*C2*C4*C6)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 6)*C1*C2*C6*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (np.power(pi, 6)*C2*C4*C6*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (np.power(pi, 6)*C4*C5*C6*L4 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((np.power(pi, 6)*C1*C2*C6 + np.power(pi, 6)*C1*C2*C7 + np.power(pi, 6)*C1*C2*C8)*L1*L2 + (((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C6 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C7 + (np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C8)*L1 + ((np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C6 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C7 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8)*L2)*L3 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C6 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C7 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C8)*L1 + (np.power(pi, 6)*C2*C4*C6 + np.power(pi, 6)*C2*C4*C7 + np.power(pi, 6)*C2*C4*C8)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C7 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8)*L3)*L4 + ((((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5)*C6 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C7 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C8)*L1 + ((np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5)*C6 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C7 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8)*L2 + (((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5)*C6 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C7 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8)*L3 + (np.power(pi, 6)*C4*C5*C6 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C7 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8)*L4)*L5 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C7 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C8)*L1 + (np.power(pi, 6)*C2*C6*C7 + np.power(pi, 6)*C2*C6*C8)*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C7 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8)*L3 + (np.power(pi, 6)*C4*C6*C7 + np.power(pi, 6)*C4*C6*C8)*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C7 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8)*L5)*L6)*L7 + (np.power(pi, 6)*C1*C2*C8*L1*L2 + ((np.power(pi, 6)*C1*C2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C3 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4)*C8*L1 + (np.power(pi, 6)*C2*C3 + np.power(pi, 6)*C2*C4)*C8*L2)*L3 + (np.power(pi, 6)*C2*C4*C8*L2 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4*C8*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4*C8*L3)*L4 + (((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C5 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6)*C8*L1 + (np.power(pi, 6)*C2*C4 + np.power(pi, 6)*C2*C5 + np.power(pi, 6)*C2*C6)*C8*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3)*C4 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C5 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6)*C8*L3 + (np.power(pi, 6)*C4*C5 + np.power(pi, 6)*C4*C6)*C8*L4)*L5 + (np.power(pi, 6)*C2*C6*C8*L2 + np.power(pi, 6)*C4*C6*C8*L4 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6*C8*L1 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6*C8*L3 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6*C8*L5)*L6 + (np.power(pi, 6)*C6*C7*C8*L6 + ((np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C6 + (np.power(pi, 6)*C1 + np.power(pi, 6)*C2)*C7)*C8*L1 + (np.power(pi, 6)*C2*C6 + np.power(pi, 6)*C2*C7)*C8*L2 + ((np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C6 + (np.power(pi, 6)*C2 + np.power(pi, 6)*C3 + np.power(pi, 6)*C4)*C7)*C8*L3 + (np.power(pi, 6)*C4*C6 + np.power(pi, 6)*C4*C7)*C8*L4 + ((np.power(pi, 6)*C4 + np.power(pi, 6)*C5)*C6 + (np.power(pi, 6)*C4 + np.power(pi, 6)*C5 + np.power(pi, 6)*C6)*C7)*C8*L5)*L7)*L8)*ZS)*np.power(freq, 6) + ((32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*L1*L2*L3 + (32*I*np.power(pi, 5)*C1*C2*C8*L1*L2 + ((32*I*np.power(pi, 5)*C1*C2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C3 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4)*C8*L1 + (32*I*np.power(pi, 5)*C2*C3 + 32*I*np.power(pi, 5)*C2*C4)*C8*L2)*L3 + (32*I*np.power(pi, 5)*C2*C4*C8*L2 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4*C8*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*C8*L3)*L4 + (((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C5 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6)*C8*L1 + (32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*C8*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*C8*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*C8*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*C8*L2 + 32*I*np.power(pi, 5)*C4*C6*C8*L4 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6*C8*L1 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*C8*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*C8*L5)*L6 + (32*I*np.power(pi, 5)*C6*C7*C8*L6 + ((32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C6 + (32*I*np.power(pi, 5)*C1 + 32*I*np.power(pi, 5)*C2)*C7)*C8*L1 + (32*I*np.power(pi, 5)*C2*C6 + 32*I*np.power(pi, 5)*C2*C7)*C8*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C7)*C8*L3 + (32*I*np.power(pi, 5)*C4*C6 + 32*I*np.power(pi, 5)*C4*C7)*C8*L4 + ((32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C7)*C8*L5)*L7)*ZL*ZS + (32*I*np.power(pi, 5)*C2*C4*L1*L2 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((32*I*np.power(pi, 5)*C2*C4 + 32*I*np.power(pi, 5)*C2*C5 + 32*I*np.power(pi, 5)*C2*C6)*L1*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3)*C4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C5 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6)*L1*L3 + (32*I*np.power(pi, 5)*C4*C5 + 32*I*np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (32*I*np.power(pi, 5)*C2*C6*L1*L2 + 32*I*np.power(pi, 5)*C4*C6*L1*L4 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6*L1*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6*L1*L5)*L6 + ((32*I*np.power(pi, 5)*C2*C6 + 32*I*np.power(pi, 5)*C2*C7 + 32*I*np.power(pi, 5)*C2*C8)*L1*L2 + ((32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C7 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C8)*L1*L3 + (32*I*np.power(pi, 5)*C4*C6 + 32*I*np.power(pi, 5)*C4*C7 + 32*I*np.power(pi, 5)*C4*C8)*L1*L4 + ((32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5)*C6 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C7 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C8)*L1*L5 + (32*I*np.power(pi, 5)*C6*C7 + 32*I*np.power(pi, 5)*C6*C8)*L1*L6)*L7 + (32*I*np.power(pi, 5)*C2*C8*L1*L2 + 32*I*np.power(pi, 5)*C4*C8*L1*L4 + 32*I*np.power(pi, 5)*C6*C8*L1*L6 + (32*I*np.power(pi, 5)*C2 + 32*I*np.power(pi, 5)*C3 + 32*I*np.power(pi, 5)*C4)*C8*L1*L3 + (32*I*np.power(pi, 5)*C4 + 32*I*np.power(pi, 5)*C5 + 32*I*np.power(pi, 5)*C6)*C8*L1*L5 + (32*I*np.power(pi, 5)*C6 + 32*I*np.power(pi, 5)*C7)*C8*L1*L7)*L8)*np.power(freq, 5) + 16*((np.power(pi, 4)*C2*C8*L1*L2 + np.power(pi, 4)*C4*C8*L1*L4 + np.power(pi, 4)*C6*C8*L1*L6 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8*L1*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8*L1*L5 + (np.power(pi, 4)*C6 + np.power(pi, 4)*C7)*C8*L1*L7)*ZL + (np.power(pi, 4)*C1*C2*L1*L2 + ((np.power(pi, 4)*C1*C2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C3 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4)*L1 + (np.power(pi, 4)*C2*C3 + np.power(pi, 4)*C2*C4)*L2)*L3 + (np.power(pi, 4)*C2*C4*L2 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4*L3)*L4 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C5 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6)*L1 + (np.power(pi, 4)*C2*C4 + np.power(pi, 4)*C2*C5 + np.power(pi, 4)*C2*C6)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3)*C4 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C5 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6)*L3 + (np.power(pi, 4)*C4*C5 + np.power(pi, 4)*C4*C6)*L4)*L5 + (np.power(pi, 4)*C2*C6*L2 + np.power(pi, 4)*C4*C6*L4 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6*L5)*L6 + (((np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C6 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C7 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C8)*L1 + (np.power(pi, 4)*C2*C6 + np.power(pi, 4)*C2*C7 + np.power(pi, 4)*C2*C8)*L2 + ((np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C6 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C7 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8)*L3 + (np.power(pi, 4)*C4*C6 + np.power(pi, 4)*C4*C7 + np.power(pi, 4)*C4*C8)*L4 + ((np.power(pi, 4)*C4 + np.power(pi, 4)*C5)*C6 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C7 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8)*L5 + (np.power(pi, 4)*C6*C7 + np.power(pi, 4)*C6*C8)*L6)*L7 + (np.power(pi, 4)*C2*C8*L2 + np.power(pi, 4)*C4*C8*L4 + np.power(pi, 4)*C6*C8*L6 + (np.power(pi, 4)*C1 + np.power(pi, 4)*C2)*C8*L1 + (np.power(pi, 4)*C2 + np.power(pi, 4)*C3 + np.power(pi, 4)*C4)*C8*L3 + (np.power(pi, 4)*C4 + np.power(pi, 4)*C5 + np.power(pi, 4)*C6)*C8*L5 + (np.power(pi, 4)*C6 + np.power(pi, 4)*C7)*C8*L7)*L8)*ZS)*np.power(freq, 4) + (-8*I*np.power(pi, 3)*C2*L1*L2 - 8*I*np.power(pi, 3)*C4*L1*L4 - 8*I*np.power(pi, 3)*C6*L1*L6 - 8*I*np.power(pi, 3)*C8*L1*L8 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*L1*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*L1*L5 + (-8*I*np.power(pi, 3)*C6 - 8*I*np.power(pi, 3)*C7 - 8*I*np.power(pi, 3)*C8)*L1*L7 + (-8*I*np.power(pi, 3)*C2*C8*L2 - 8*I*np.power(pi, 3)*C4*C8*L4 - 8*I*np.power(pi, 3)*C6*C8*L6 + (-8*I*np.power(pi, 3)*C1 - 8*I*np.power(pi, 3)*C2)*C8*L1 + (-8*I*np.power(pi, 3)*C2 - 8*I*np.power(pi, 3)*C3 - 8*I*np.power(pi, 3)*C4)*C8*L3 + (-8*I*np.power(pi, 3)*C4 - 8*I*np.power(pi, 3)*C5 - 8*I*np.power(pi, 3)*C6)*C8*L5 + (-8*I*np.power(pi, 3)*C6 - 8*I*np.power(pi, 3)*C7)*C8*L7)*ZL*ZS)*np.power(freq, 3) - 4*(np.power(pi, 2)*C8*L1*ZL + (np.power(pi, 2)*C2*L2 + np.power(pi, 2)*C4*L4 + np.power(pi, 2)*C6*L6 + np.power(pi, 2)*C8*L8 + (np.power(pi, 2)*C1 + np.power(pi, 2)*C2)*L1 + (np.power(pi, 2)*C2 + np.power(pi, 2)*C3 + np.power(pi, 2)*C4)*L3 + (np.power(pi, 2)*C4 + np.power(pi, 2)*C5 + np.power(pi, 2)*C6)*L5 + (np.power(pi, 2)*C6 + np.power(pi, 2)*C7 + np.power(pi, 2)*C8)*L7)*ZS)*np.power(freq, 2) + (2*I*pi*C8*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 9):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        L5 = comp_val['L5']
                        C5 = comp_val['C5']
                        L6 = comp_val['L6']
                        C6 = comp_val['C6']
                        L7 = comp_val['L7']
                        C7 = comp_val['C7']
                        L8 = comp_val['L8']
                        C8 = comp_val['C8']
                        L9 = comp_val['L9']
                        C9 = comp_val['C9']
                        S11 = (-262144*I*np.power(pi, 18)*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS*np.power(freq, 18) + 131072*(np.power(pi, 17)*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL - np.power(pi, 17)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*np.power(freq, 17) - (65536*I*np.power(pi, 16)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*L9 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7 - 65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5 - 65536*I*np.power(pi, 16)*C1*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4 + (-65536*I*np.power(pi, 16)*C1*C2*C3 - 65536*I*np.power(pi, 16)*C1*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (-65536*I*np.power(pi, 16)*C1*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (-65536*I*np.power(pi, 16)*C2*C3*C4*C5*C6*C7*C8*C9*L2 + (-65536*I*np.power(pi, 16)*C1*C2 + (-65536*I*np.power(pi, 16)*C1 - 65536*I*np.power(pi, 16)*C2)*C3)*C4*C5*C6*C7*C8*C9*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS)*np.power(freq, 16) + 32768*(((np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C7 + np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 15)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 15)*C1*C2*C3*C4*C5 + np.power(pi, 15)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 15)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 15)*C1*C2*C3*C4 + (np.power(pi, 15)*C1*C2*C3 + np.power(pi, 15)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 15)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L2 + (np.power(pi, 15)*C1*C2 + (np.power(pi, 15)*C1 + np.power(pi, 15)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9*ZS - (np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7 + np.power(pi, 15)*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 15)*C2*C3*C4*C5*C6 + (np.power(pi, 15)*C2*C3*C4*C5 + np.power(pi, 15)*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (np.power(pi, 15)*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 15)*C2*C3*C4 + (np.power(pi, 15)*C2*C3 + np.power(pi, 15)*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (np.power(pi, 15)*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (np.power(pi, 15)*C2 + np.power(pi, 15)*C3)*C4*C5*C6*C7*C8*C9*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 15) - (((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C8)*C9)*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8 + ((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C8*C9*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C8*C9*L1)*L3)*L4)*L5)*L6 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C4*C6)*C7)*C8*C9*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6 + ((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C6)*C7)*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C2*C3*C4*C6)*C7)*C8*C9*L2)*L3)*L4)*L5 + ((16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C6*C7*C8*C9*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C6*C7*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C6*C7*C8*C9*L1)*L3)*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C4 + 16384*I*np.power(pi, 14)*C1*C2*C5)*C6*C7*C8*C9*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C4)*C5)*C6*C7*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4 + (16384*I*np.power(pi, 14)*C2*C3 + 16384*I*np.power(pi, 14)*C2*C4)*C5)*C6*C7*C8*C9*L2)*L3 + (16384*I*np.power(pi, 14)*C2*C4*C5*C6*C7*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C4*C5*C6*C7*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2 + 16384*I*np.power(pi, 14)*C3)*C4*C5*C6*C7*C8*C9*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7 - 16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (-16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((-16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6 + (-16384*I*np.power(pi, 14)*C2*C3*C4*C5 - 16384*I*np.power(pi, 14)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (-16384*I*np.power(pi, 14)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((-16384*I*np.power(pi, 14)*C2*C3*C4 + (-16384*I*np.power(pi, 14)*C2*C3 - 16384*I*np.power(pi, 14)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (-16384*I*np.power(pi, 14)*C2*C4*C5*C6*C7*C8*L1*L2 + (-16384*I*np.power(pi, 14)*C2 - 16384*I*np.power(pi, 14)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*np.power(freq, 14) - 8192*((np.power(pi, 13)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 13)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C7 + (np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 13)*C1*C2*C3*C4*C6*C7 + np.power(pi, 13)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C7 + (np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 13)*C1*C2*C4*C5*C6*C7 + np.power(pi, 13)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C7 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C8)*L1 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 13)*C1*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L2 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 13)*C1*C2*C3*C4*C6 + np.power(pi, 13)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6 + (np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 13)*C1*C2*C4*C5*C6 + (np.power(pi, 13)*C1*C2*C4*C5 + np.power(pi, 13)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C6)*C7)*C8*L1 + (np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 13)*C1*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L2 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((np.power(pi, 13)*C1*C2*C4 + np.power(pi, 13)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C4)*C5)*C6*C7*C8*L1 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C4*C5*C6*C7*C8*L1 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8)*L9*ZS - ((np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + ((np.power(pi, 13)*C2*C3*C4*C5*C6*C8 + np.power(pi, 13)*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8 + (np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((np.power(pi, 13)*C2*C3*C4*C6*C7*C8 + (np.power(pi, 13)*C2*C3*C4*C6*C7 + np.power(pi, 13)*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((np.power(pi, 13)*C2*C4*C5*C6*C7*C8 + (np.power(pi, 13)*C2*C4*C5*C6*C7 + np.power(pi, 13)*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C8*C9*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C8*C9*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 13)*C2*C3*C4*C6 + np.power(pi, 13)*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((np.power(pi, 13)*C2*C4*C5*C6 + (np.power(pi, 13)*C2*C4*C5 + np.power(pi, 13)*C2*C4*C6)*C7)*C8*C9*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C6)*C7)*C8*C9*L1*L3)*L4)*L5 + ((np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C6*C7*C8*C9*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C6*C7*C8*C9*L1*L3)*L4 + (np.power(pi, 13)*C4*C5*C6*C7*C8*C9*L1*L4 + (np.power(pi, 13)*C2*C4 + np.power(pi, 13)*C2*C5)*C6*C7*C8*C9*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3 + np.power(pi, 13)*C4)*C5)*C6*C7*C8*C9*L1*L3)*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 13) - ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7*C8*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8 - 4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C9)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8 - 4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C8)*C9)*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C8)*C9)*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + (((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6*C8)*C9)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C8)*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C8)*C9)*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C8)*C9)*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C8)*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8)*C9)*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8*C9*L2)*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C8*C9*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C8*C9*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C8*C9*L1)*L3)*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8*C9*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8*C9*L3)*L4)*L5)*L6 + (((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C4*C7)*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C7)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C2*C3*C4*C7)*C8*C9*L2)*L3)*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5 - 4096*I*np.power(pi, 12)*C1*C2*C6)*C7)*C8*C9*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C6)*C7)*C8*C9*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6)*C7)*C8*C9*L2)*L3 + (((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C6)*C7)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C4*C5 - 4096*I*np.power(pi, 12)*C2*C4*C6)*C7)*C8*C9*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6)*C7)*C8*C9*L3)*L4)*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C6*C7*C8*C9*L1*L2 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6*C7*C8*C9*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C6*C7*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6*C7*C8*C9*L3)*L4 + (-4096*I*np.power(pi, 12)*C4*C5*C6*C7*C8*C9*L4 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C5)*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C4 - 4096*I*np.power(pi, 12)*C2*C5)*C6*C7*C8*C9*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3 - 4096*I*np.power(pi, 12)*C4)*C5)*C6*C7*C8*C9*L3)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (4096*I*np.power(pi, 12)*C2*C3*C4*C5 + 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7 + (4096*I*np.power(pi, 12)*C2*C3*C4*C5 + 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7 + 4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((4096*I*np.power(pi, 12)*C2*C3*C4 + (4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7 + (4096*I*np.power(pi, 12)*C2*C3*C4 + (4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7 + 4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8)*L1*L2 + ((4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7 + (4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((4096*I*np.power(pi, 12)*C2*C3*C4*C5 + 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((4096*I*np.power(pi, 12)*C2*C3*C4 + (4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8*L1*L2 + (4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((4096*I*np.power(pi, 12)*C2*C3*C4*C6 + 4096*I*np.power(pi, 12)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((4096*I*np.power(pi, 12)*C2*C3*C4 + (4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6 + (4096*I*np.power(pi, 12)*C2*C3*C4 + (4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C5 + (4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((4096*I*np.power(pi, 12)*C2*C4*C5*C6 + (4096*I*np.power(pi, 12)*C2*C4*C5 + 4096*I*np.power(pi, 12)*C2*C4*C6)*C7)*C8*L1*L2 + ((4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C5*C6 + ((4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C5 + (4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((4096*I*np.power(pi, 12)*C2*C3 + 4096*I*np.power(pi, 12)*C2*C4)*C6*C7*C8*L1*L2*L3 + (4096*I*np.power(pi, 12)*C2*C4*C6*C7*C8*L1*L2 + (4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (4096*I*np.power(pi, 12)*C4*C5*C6*C7*C8*L1*L4 + (4096*I*np.power(pi, 12)*C2*C4 + 4096*I*np.power(pi, 12)*C2*C5)*C6*C7*C8*L1*L2 + ((4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3)*C4 + (4096*I*np.power(pi, 12)*C2 + 4096*I*np.power(pi, 12)*C3 + 4096*I*np.power(pi, 12)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8)*L9)*np.power(freq, 12) + 2048*(((np.power(pi, 11)*C1*C2*C3*C4*C5 + np.power(pi, 11)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 11)*C1*C2*C3*C4*C6 + np.power(pi, 11)*C1*C2*C3*C4*C7 + np.power(pi, 11)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6 + (np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C7 + (np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C5*C6 + (np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C7 + (np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C8)*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C7 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C8)*L1 + (np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C7 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C6*C7 + np.power(pi, 11)*C1*C2*C4*C6*C8)*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C7 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C8)*L1 + (np.power(pi, 11)*C2*C3*C4*C6*C7 + np.power(pi, 11)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C7 + (np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C8)*L1*L2 + ((((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C7 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C8)*L1 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C7 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C8)*L1 + (np.power(pi, 11)*C2*C4*C5*C6*C7 + np.power(pi, 11)*C2*C4*C5*C6*C8)*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (np.power(pi, 11)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C8*L1 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C6*C8*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C6*C8*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C8*L1 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8*L2)*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C8*L2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C8*L1 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C6 + np.power(pi, 11)*C1*C2*C4*C7)*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C7)*C8*L1 + (np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6 + (np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5 + np.power(pi, 11)*C1*C2*C6)*C7)*C8*L1*L2 + ((((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C6)*C7)*C8*L1 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6 + ((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C6)*C7)*C8*L1 + (np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (np.power(pi, 11)*C1*C2*C6*C7*C8*L1*L2 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C6*C7*C8*L1 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8*L2)*L3 + (np.power(pi, 11)*C2*C4*C6*C7*C8*L2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C6*C7*C8*L1 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C7*C8*L4 + ((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C5)*C6*C7*C8*L1 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8)*L9*ZS - (np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 11)*C2*C3*C4*C6*C7 + np.power(pi, 11)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6*C7 + np.power(pi, 11)*C2*C4*C5*C6*C8)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C7*C8*L1*L4 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + (((np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((np.power(pi, 11)*C2*C3*C4*C6*C8 + np.power(pi, 11)*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6*C8 + np.power(pi, 11)*C2*C4*C5*C6*C9)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C9)*L1*L3)*L4)*L5)*L6 + (((np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8 + (np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7 + np.power(pi, 11)*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8 + (np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C8)*C9)*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + (((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C6*C7*C8 + (np.power(pi, 11)*C2*C4*C6*C7 + np.power(pi, 11)*C2*C4*C6*C8)*C9)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8 + ((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C8)*C9)*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C8)*C9)*L1*L3 + (np.power(pi, 11)*C4*C5*C6*C7*C8 + (np.power(pi, 11)*C4*C5*C6*C7 + np.power(pi, 11)*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + (np.power(pi, 11)*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C8*C9*L1*L3)*L4)*L5 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C8*C9*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C6*C8*C9*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C8*C9*L1*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C8*C9*L1*L4 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C8*C9*L1*L3)*L5)*L6 + (((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C6 + np.power(pi, 11)*C2*C4*C7)*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C7)*C8*C9*L1*L3)*L4 + (((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5 + np.power(pi, 11)*C2*C6)*C7)*C8*C9*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C6)*C7)*C8*C9*L1*L3 + (np.power(pi, 11)*C4*C5*C6 + (np.power(pi, 11)*C4*C5 + np.power(pi, 11)*C4*C6)*C7)*C8*C9*L1*L4)*L5 + (np.power(pi, 11)*C2*C6*C7*C8*C9*L1*L2 + np.power(pi, 11)*C4*C6*C7*C8*C9*L1*L4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C6*C7*C8*C9*L1*L3 + (np.power(pi, 11)*C4 + np.power(pi, 11)*C5)*C6*C7*C8*C9*L1*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 11) - (((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C7 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7)*C8*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7)*C8*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7)*C8*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (1024*I*np.power(pi, 10)*C1*C2*C6*C7*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7*C8*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7*C8*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7*C8*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7*C8*L4 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7*C8*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C9)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C9)*L1*L2*L3 + (((1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C9)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6*C9)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6*C9)*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C9)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8 + 1024*I*np.power(pi, 10)*C2*C4*C5*C6*C9)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C9)*L3)*L4)*L5)*L6 + ((((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C8)*C9)*L1*L2*L3 + (((1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7 + 1024*I*np.power(pi, 10)*C1*C2*C4*C8)*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7)*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C8)*C9)*L1*L2 + (((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7)*C8 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C8)*C9)*L1 + (((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8)*C9)*L2)*L3 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7)*C8 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8)*C9)*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C6*C7*C8 + (1024*I*np.power(pi, 10)*C1*C2*C6*C7 + 1024*I*np.power(pi, 10)*C1*C2*C6*C8)*C9)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8)*C9)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C8)*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7*C8 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C6*C8)*C9)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7*C8 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8)*C9)*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7*C8 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8)*C9)*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7*C8 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C8*C9*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C8*C9*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C8*C9*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C8*C9*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C8*C9*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8*C9*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8*C9*L3)*L4)*L5 + (1024*I*np.power(pi, 10)*C1*C2*C6*C8*C9*L1*L2 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8*C9*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C8*C9*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8*C9*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C8*C9*L4 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8*C9*L3)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C6 + 1024*I*np.power(pi, 10)*C1*C2*C7)*C8*C9*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C7)*C8*C9*L1 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C7)*C8*C9*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C7)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4*C6 + 1024*I*np.power(pi, 10)*C2*C4*C7)*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C7)*C8*C9*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C6)*C7)*C8*C9*L1 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5 + 1024*I*np.power(pi, 10)*C2*C6)*C7)*C8*C9*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6)*C7)*C8*C9*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6 + (1024*I*np.power(pi, 10)*C4*C5 + 1024*I*np.power(pi, 10)*C4*C6)*C7)*C8*C9*L4)*L5 + (1024*I*np.power(pi, 10)*C2*C6*C7*C8*C9*L2 + 1024*I*np.power(pi, 10)*C4*C6*C7*C8*C9*L4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C6*C7*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6*C7*C8*C9*L3 + (1024*I*np.power(pi, 10)*C4 + 1024*I*np.power(pi, 10)*C5)*C6*C7*C8*C9*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-1024*I*np.power(pi, 10)*C2*C3*C4*C5 - 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (-1024*I*np.power(pi, 10)*C2*C3*C4*C6*L1*L2*L3*L4 + ((-1024*I*np.power(pi, 10)*C2*C3*C4 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*L1*L2*L3 + (-1024*I*np.power(pi, 10)*C2*C4*C5*C6*L1*L2 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((-1024*I*np.power(pi, 10)*C2*C3*C4*C6 - 1024*I*np.power(pi, 10)*C2*C3*C4*C7 - 1024*I*np.power(pi, 10)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((-1024*I*np.power(pi, 10)*C2*C3*C4 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (-1024*I*np.power(pi, 10)*C2*C3*C4 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C5 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7 + (-1024*I*np.power(pi, 10)*C2*C3*C4 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C5 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8)*L1*L2*L3 + ((-1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (-1024*I*np.power(pi, 10)*C2*C4*C5 - 1024*I*np.power(pi, 10)*C2*C4*C6)*C7 + (-1024*I*np.power(pi, 10)*C2*C4*C5 - 1024*I*np.power(pi, 10)*C2*C4*C6)*C8)*L1*L2 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C5 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C5 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6*C7 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6*C8)*L1*L2*L3 + ((-1024*I*np.power(pi, 10)*C2*C4*C6*C7 - 1024*I*np.power(pi, 10)*C2*C4*C6*C8)*L1*L2 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6*C7 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6*C8)*L1*L3)*L4 + (((-1024*I*np.power(pi, 10)*C2*C4 - 1024*I*np.power(pi, 10)*C2*C5)*C6*C7 + (-1024*I*np.power(pi, 10)*C2*C4 - 1024*I*np.power(pi, 10)*C2*C5)*C6*C8)*L1*L2 + (((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8)*L1*L3 + (-1024*I*np.power(pi, 10)*C4*C5*C6*C7 - 1024*I*np.power(pi, 10)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (-1024*I*np.power(pi, 10)*C2*C3*C4*C8*L1*L2*L3*L4 + ((-1024*I*np.power(pi, 10)*C2*C3*C4 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C5 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8*L1*L2*L3 + ((-1024*I*np.power(pi, 10)*C2*C4*C5 - 1024*I*np.power(pi, 10)*C2*C4*C6)*C8*L1*L2 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C5 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6*C8*L1*L2*L3 + (-1024*I*np.power(pi, 10)*C2*C4*C6*C8*L1*L2 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6*C8*L1*L3)*L4 + (-1024*I*np.power(pi, 10)*C4*C5*C6*C8*L1*L4 + (-1024*I*np.power(pi, 10)*C2*C4 - 1024*I*np.power(pi, 10)*C2*C5)*C6*C8*L1*L2 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C6 + (-1024*I*np.power(pi, 10)*C2*C3 - 1024*I*np.power(pi, 10)*C2*C4)*C7)*C8*L1*L2*L3 + ((-1024*I*np.power(pi, 10)*C2*C4*C6 - 1024*I*np.power(pi, 10)*C2*C4*C7)*C8*L1*L2 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C6 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4*C7)*C8*L1*L3)*L4 + (((-1024*I*np.power(pi, 10)*C2*C4 - 1024*I*np.power(pi, 10)*C2*C5)*C6 + (-1024*I*np.power(pi, 10)*C2*C4 - 1024*I*np.power(pi, 10)*C2*C5 - 1024*I*np.power(pi, 10)*C2*C6)*C7)*C8*L1*L2 + (((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C5)*C6 + ((-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3)*C4 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C5 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C6)*C7)*C8*L1*L3 + (-1024*I*np.power(pi, 10)*C4*C5*C6 + (-1024*I*np.power(pi, 10)*C4*C5 - 1024*I*np.power(pi, 10)*C4*C6)*C7)*C8*L1*L4)*L5 + (-1024*I*np.power(pi, 10)*C2*C6*C7*C8*L1*L2 - 1024*I*np.power(pi, 10)*C4*C6*C7*C8*L1*L4 + (-1024*I*np.power(pi, 10)*C2 - 1024*I*np.power(pi, 10)*C3 - 1024*I*np.power(pi, 10)*C4)*C6*C7*C8*L1*L3 + (-1024*I*np.power(pi, 10)*C4 - 1024*I*np.power(pi, 10)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8)*L9)*np.power(freq, 10) - 512*((np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 9)*C1*C2*C3*C4 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C5 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C5 + np.power(pi, 9)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C6*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C7 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C6 + np.power(pi, 9)*C1*C2*C4*C7 + np.power(pi, 9)*C1*C2*C4*C8)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C7 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C8)*L1 + (np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7 + np.power(pi, 9)*C2*C3*C4*C8)*L2)*L3)*L4 + (((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6 + (np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C7 + (np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C8)*L1*L2 + ((((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C7 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C8)*L1 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8)*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C7 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C8)*L1 + (np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8)*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C6*C7 + np.power(pi, 9)*C1*C2*C6*C8)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C7 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C8)*L1 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8)*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C7 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C8)*L1 + (np.power(pi, 9)*C2*C4*C6*C7 + np.power(pi, 9)*C2*C4*C6*C8)*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8)*L3)*L4 + ((((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C7 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C8)*L1 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8)*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8)*L3 + (np.power(pi, 9)*C4*C5*C6*C7 + np.power(pi, 9)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C8*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C8*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C8*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C8*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C8*L1 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8*L3)*L4)*L5 + (np.power(pi, 9)*C1*C2*C6*C8*L1*L2 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C8*L1 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8*L2)*L3 + (np.power(pi, 9)*C2*C4*C6*C8*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C8*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C8*L4 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C8*L1 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((np.power(pi, 9)*C1*C2*C6 + np.power(pi, 9)*C1*C2*C7)*C8*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C7)*C8*L1 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C7)*C8*L1 + (np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8*L3)*L4 + ((((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C6)*C7)*C8*L1 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8*L3 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8*L4)*L5 + (np.power(pi, 9)*C2*C6*C7*C8*L2 + np.power(pi, 9)*C4*C6*C7*C8*L4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C6*C7*C8*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8*L5)*L6)*L7)*L8)*L9*ZS - ((np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7 + np.power(pi, 9)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6*C7 + np.power(pi, 9)*C2*C4*C6*C8)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8)*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8)*L1*L3 + (np.power(pi, 9)*C4*C5*C6*C7 + np.power(pi, 9)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (np.power(pi, 9)*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C6*C8*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8*L1*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C8*L1*L4 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8*L1*L3 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8*L1*L4)*L5 + (np.power(pi, 9)*C2*C6*C7*C8*L1*L2 + np.power(pi, 9)*C4*C6*C7*C8*L1*L4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8*L1*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + ((np.power(pi, 9)*C2*C3*C4*C8 + np.power(pi, 9)*C2*C3*C4*C9)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C9)*L1*L2*L3 + (((np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C9)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6*C8 + np.power(pi, 9)*C2*C4*C6*C9)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C9)*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C9)*L1*L3 + (np.power(pi, 9)*C4*C5*C6*C8 + np.power(pi, 9)*C4*C5*C6*C9)*L1*L4)*L5)*L6 + ((((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C8)*C9)*L1*L2*L3 + (((np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8 + (np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7 + np.power(pi, 9)*C2*C4*C8)*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C8)*C9)*L1*L2 + ((((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C8)*C9)*L1*L3 + ((np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C8)*C9)*L1*L4)*L5 + ((np.power(pi, 9)*C2*C6*C7*C8 + (np.power(pi, 9)*C2*C6*C7 + np.power(pi, 9)*C2*C6*C8)*C9)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C8)*C9)*L1*L3 + (np.power(pi, 9)*C4*C6*C7*C8 + (np.power(pi, 9)*C4*C6*C7 + np.power(pi, 9)*C4*C6*C8)*C9)*L1*L4 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C8*C9*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C8*C9*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C8*C9*L1*L3)*L4 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C8*C9*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C8*C9*L1*L3 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C8*C9*L1*L4)*L5 + (np.power(pi, 9)*C2*C6*C8*C9*L1*L2 + np.power(pi, 9)*C4*C6*C8*C9*L1*L4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C8*C9*L1*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C8*C9*L1*L5)*L6 + (np.power(pi, 9)*C6*C7*C8*C9*L1*L6 + (np.power(pi, 9)*C2*C6 + np.power(pi, 9)*C2*C7)*C8*C9*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C7)*C8*C9*L1*L3 + (np.power(pi, 9)*C4*C6 + np.power(pi, 9)*C4*C7)*C8*C9*L1*L4 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5 + np.power(pi, 9)*C6)*C7)*C8*C9*L1*L5)*L7)*L8)*L9)*ZL)*np.power(freq, 9) - ((-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C5 - 256*I*np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5 - 256*I*np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C6 - 256*I*np.power(pi, 8)*C1*C2*C4*C7 - 256*I*np.power(pi, 8)*C1*C2*C4*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6 - 256*I*np.power(pi, 8)*C2*C3*C4*C7 - 256*I*np.power(pi, 8)*C2*C3*C4*C8)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C6*C7 - 256*I*np.power(pi, 8)*C1*C2*C6*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6*C7 - 256*I*np.power(pi, 8)*C2*C4*C6*C8)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8)*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8)*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6*C7 - 256*I*np.power(pi, 8)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C8*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C8*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8*L3)*L4)*L5 + (-256*I*np.power(pi, 8)*C1*C2*C6*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*C8*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*C8*L4 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7)*C8*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7)*C8*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7)*C8*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7)*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7)*C8*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7)*C8*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7)*C8*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7)*C8*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7)*C8*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C7*C8*L2 - 256*I*np.power(pi, 8)*C4*C6*C7*C8*L4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7*C8*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7*C8*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C9)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C8 - 256*I*np.power(pi, 8)*C1*C2*C4*C9)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C8 - 256*I*np.power(pi, 8)*C2*C3*C4*C9)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C9)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C9)*L2)*L3 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C9)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C6*C8 - 256*I*np.power(pi, 8)*C1*C2*C6*C9)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C9)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6*C8 - 256*I*np.power(pi, 8)*C2*C4*C6*C9)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C9)*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C9)*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6*C8 - 256*I*np.power(pi, 8)*C4*C5*C6*C9)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7 - 256*I*np.power(pi, 8)*C1*C2*C8)*C9)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7)*C8 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C8)*C9)*L1 + (((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7)*C8 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8)*C9)*L2)*L3 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7)*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C8)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7)*C8 + (-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7 - 256*I*np.power(pi, 8)*C2*C4*C8)*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7)*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8)*C9)*L3)*L4 + (((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7)*C8 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C8)*C9)*L1 + (((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7)*C8 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8)*C9)*L2 + ((((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7)*C8 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8)*C9)*L3 + ((-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7)*C8 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8)*C9)*L4)*L5 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C8)*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C6*C7*C8 + (-256*I*np.power(pi, 8)*C2*C6*C7 - 256*I*np.power(pi, 8)*C2*C6*C8)*C9)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8)*C9)*L3 + (-256*I*np.power(pi, 8)*C4*C6*C7*C8 + (-256*I*np.power(pi, 8)*C4*C6*C7 - 256*I*np.power(pi, 8)*C4*C6*C8)*C9)*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8)*C9)*L5)*L6)*L7 + (-256*I*np.power(pi, 8)*C1*C2*C8*C9*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8*C9*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C8*C9*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8*C9*L3)*L4 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8*C9*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8*C9*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C8*C9*L2 - 256*I*np.power(pi, 8)*C4*C6*C8*C9*L4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8*C9*L5)*L6 + (-256*I*np.power(pi, 8)*C6*C7*C8*C9*L6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C7)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C6 - 256*I*np.power(pi, 8)*C2*C7)*C8*C9*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C7)*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4*C6 - 256*I*np.power(pi, 8)*C4*C7)*C8*C9*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5 - 256*I*np.power(pi, 8)*C6)*C7)*C8*C9*L5)*L7)*L8)*L9)*ZL*ZS + (256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4 + ((256*I*np.power(pi, 8)*C2*C3*C4 + (256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C5 + (256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C6)*L1*L2*L3 + ((256*I*np.power(pi, 8)*C2*C4*C5 + 256*I*np.power(pi, 8)*C2*C4*C6)*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C5 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C6*L1*L2*L3 + (256*I*np.power(pi, 8)*C2*C4*C6*L1*L2 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C6*L1*L3)*L4 + (256*I*np.power(pi, 8)*C4*C5*C6*L1*L4 + (256*I*np.power(pi, 8)*C2*C4 + 256*I*np.power(pi, 8)*C2*C5)*C6*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C6 + (256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C7 + (256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C8)*L1*L2*L3 + ((256*I*np.power(pi, 8)*C2*C4*C6 + 256*I*np.power(pi, 8)*C2*C4*C7 + 256*I*np.power(pi, 8)*C2*C4*C8)*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C6 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C7 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C8)*L1*L3)*L4 + (((256*I*np.power(pi, 8)*C2*C4 + 256*I*np.power(pi, 8)*C2*C5)*C6 + (256*I*np.power(pi, 8)*C2*C4 + 256*I*np.power(pi, 8)*C2*C5 + 256*I*np.power(pi, 8)*C2*C6)*C7 + (256*I*np.power(pi, 8)*C2*C4 + 256*I*np.power(pi, 8)*C2*C5 + 256*I*np.power(pi, 8)*C2*C6)*C8)*L1*L2 + (((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C5 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6)*C7 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C5 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6)*C8)*L1*L3 + (256*I*np.power(pi, 8)*C4*C5*C6 + (256*I*np.power(pi, 8)*C4*C5 + 256*I*np.power(pi, 8)*C4*C6)*C7 + (256*I*np.power(pi, 8)*C4*C5 + 256*I*np.power(pi, 8)*C4*C6)*C8)*L1*L4)*L5 + ((256*I*np.power(pi, 8)*C2*C6*C7 + 256*I*np.power(pi, 8)*C2*C6*C8)*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6*C7 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6*C8)*L1*L3 + (256*I*np.power(pi, 8)*C4*C6*C7 + 256*I*np.power(pi, 8)*C4*C6*C8)*L1*L4 + ((256*I*np.power(pi, 8)*C4 + 256*I*np.power(pi, 8)*C5)*C6*C7 + (256*I*np.power(pi, 8)*C4 + 256*I*np.power(pi, 8)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((256*I*np.power(pi, 8)*C2*C3 + 256*I*np.power(pi, 8)*C2*C4)*C8*L1*L2*L3 + (256*I*np.power(pi, 8)*C2*C4*C8*L1*L2 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4*C8*L1*L3)*L4 + ((256*I*np.power(pi, 8)*C2*C4 + 256*I*np.power(pi, 8)*C2*C5 + 256*I*np.power(pi, 8)*C2*C6)*C8*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3)*C4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C5 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6)*C8*L1*L3 + (256*I*np.power(pi, 8)*C4*C5 + 256*I*np.power(pi, 8)*C4*C6)*C8*L1*L4)*L5 + (256*I*np.power(pi, 8)*C2*C6*C8*L1*L2 + 256*I*np.power(pi, 8)*C4*C6*C8*L1*L4 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6*C8*L1*L3 + (256*I*np.power(pi, 8)*C4 + 256*I*np.power(pi, 8)*C5)*C6*C8*L1*L5)*L6 + (256*I*np.power(pi, 8)*C6*C7*C8*L1*L6 + (256*I*np.power(pi, 8)*C2*C6 + 256*I*np.power(pi, 8)*C2*C7)*C8*L1*L2 + ((256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C6 + (256*I*np.power(pi, 8)*C2 + 256*I*np.power(pi, 8)*C3 + 256*I*np.power(pi, 8)*C4)*C7)*C8*L1*L3 + (256*I*np.power(pi, 8)*C4*C6 + 256*I*np.power(pi, 8)*C4*C7)*C8*L1*L4 + ((256*I*np.power(pi, 8)*C4 + 256*I*np.power(pi, 8)*C5)*C6 + (256*I*np.power(pi, 8)*C4 + 256*I*np.power(pi, 8)*C5 + 256*I*np.power(pi, 8)*C6)*C7)*C8*L1*L5)*L7)*L8)*L9)*np.power(freq, 8) + 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 7)*C1*C2*C4 + np.power(pi, 7)*C1*C2*C5 + np.power(pi, 7)*C1*C2*C6)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C5 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6)*L1 + (np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6)*L1 + (np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 7)*C1*C2*C6*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L2)*L3 + (np.power(pi, 7)*C2*C4*C6*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L4 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L3)*L5)*L6 + ((np.power(pi, 7)*C1*C2*C6 + np.power(pi, 7)*C1*C2*C7 + np.power(pi, 7)*C1*C2*C8)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C7 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C8)*L1 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C7 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C8)*L1 + (np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7 + np.power(pi, 7)*C2*C4*C8)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8)*L3)*L4 + ((((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C7 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C8)*L1 + ((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8)*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8)*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8)*L4)*L5 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C7 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C8)*L1 + (np.power(pi, 7)*C2*C6*C7 + np.power(pi, 7)*C2*C6*C8)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8)*L3 + (np.power(pi, 7)*C4*C6*C7 + np.power(pi, 7)*C4*C6*C8)*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8)*L5)*L6)*L7 + (np.power(pi, 7)*C1*C2*C8*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C8*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8*L2)*L3 + (np.power(pi, 7)*C2*C4*C8*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C8*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8*L3)*L4 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C8*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8*L3 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8*L4)*L5 + (np.power(pi, 7)*C2*C6*C8*L2 + np.power(pi, 7)*C4*C6*C8*L4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C8*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8*L5)*L6 + (np.power(pi, 7)*C6*C7*C8*L6 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C7)*C8*L1 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8*L3 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8*L5)*L7)*L8)*L9*ZS - (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C6*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L1*L4 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7 + np.power(pi, 7)*C2*C4*C8)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8)*L1*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8)*L1*L4)*L5 + ((np.power(pi, 7)*C2*C6*C7 + np.power(pi, 7)*C2*C6*C8)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8)*L1*L3 + (np.power(pi, 7)*C4*C6*C7 + np.power(pi, 7)*C4*C6*C8)*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C8*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8*L1*L3)*L4 + ((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8*L1*L3 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8*L1*L4)*L5 + (np.power(pi, 7)*C2*C6*C8*L1*L2 + np.power(pi, 7)*C4*C6*C8*L1*L4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8*L1*L5)*L6 + (np.power(pi, 7)*C6*C7*C8*L1*L6 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8*L1*L3 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8*L1*L5)*L7)*L8 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C9)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C8 + np.power(pi, 7)*C2*C4*C9)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C9)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C9)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C9)*L1*L3 + ((np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C9)*L1*L4)*L5 + ((np.power(pi, 7)*C2*C6*C8 + np.power(pi, 7)*C2*C6*C9)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C9)*L1*L3 + (np.power(pi, 7)*C4*C6*C8 + np.power(pi, 7)*C4*C6*C9)*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C9)*L1*L5)*L6 + (((np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7 + np.power(pi, 7)*C2*C8)*C9)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C8)*C9)*L1*L3 + ((np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7 + np.power(pi, 7)*C4*C8)*C9)*L1*L4 + (((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C8)*C9)*L1*L5 + (np.power(pi, 7)*C6*C7*C8 + (np.power(pi, 7)*C6*C7 + np.power(pi, 7)*C6*C8)*C9)*L1*L6)*L7 + (np.power(pi, 7)*C2*C8*C9*L1*L2 + np.power(pi, 7)*C4*C8*C9*L1*L4 + np.power(pi, 7)*C6*C8*C9*L1*L6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C8*C9*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C8*C9*L1*L5 + (np.power(pi, 7)*C6 + np.power(pi, 7)*C7)*C8*C9*L1*L7)*L8)*L9)*ZL)*np.power(freq, 7) - (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5 + 64*I*np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6)*L1 + (64*I*np.power(pi, 6)*C2*C4*C5 + 64*I*np.power(pi, 6)*C2*C4*C6)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (64*I*np.power(pi, 6)*C1*C2*C6*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C6*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (64*I*np.power(pi, 6)*C4*C5*C6*L4 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((64*I*np.power(pi, 6)*C1*C2*C6 + 64*I*np.power(pi, 6)*C1*C2*C7 + 64*I*np.power(pi, 6)*C1*C2*C8)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C7 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C7 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8)*L1 + (64*I*np.power(pi, 6)*C2*C4*C6 + 64*I*np.power(pi, 6)*C2*C4*C7 + 64*I*np.power(pi, 6)*C2*C4*C8)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C7 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C7 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C7 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8)*L3 + (64*I*np.power(pi, 6)*C4*C5*C6 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C7 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8)*L4)*L5 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8)*L1 + (64*I*np.power(pi, 6)*C2*C6*C7 + 64*I*np.power(pi, 6)*C2*C6*C8)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8)*L3 + (64*I*np.power(pi, 6)*C4*C6*C7 + 64*I*np.power(pi, 6)*C4*C6*C8)*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8)*L5)*L6)*L7 + (64*I*np.power(pi, 6)*C1*C2*C8*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C8*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8*L3)*L4 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*C8*L2 + 64*I*np.power(pi, 6)*C4*C6*C8*L4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8*L5)*L6 + (64*I*np.power(pi, 6)*C6*C7*C8*L6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7)*C8*L1 + (64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7)*C8*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7)*C8*L3 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7)*C8*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7)*C8*L5)*L7)*L8 + ((64*I*np.power(pi, 6)*C1*C2*C8 + 64*I*np.power(pi, 6)*C1*C2*C9)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C9)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C9)*L1 + (64*I*np.power(pi, 6)*C2*C4*C8 + 64*I*np.power(pi, 6)*C2*C4*C9)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C9)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C9)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C9)*L3 + ((64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C9)*L4)*L5 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C9)*L1 + (64*I*np.power(pi, 6)*C2*C6*C8 + 64*I*np.power(pi, 6)*C2*C6*C9)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C9)*L3 + (64*I*np.power(pi, 6)*C4*C6*C8 + 64*I*np.power(pi, 6)*C4*C6*C9)*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C9)*L5)*L6 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7)*C8 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C8)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7)*C8 + (64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7 + 64*I*np.power(pi, 6)*C2*C8)*C9)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7)*C8 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8)*C9)*L3 + ((64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7)*C8 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7 + 64*I*np.power(pi, 6)*C4*C8)*C9)*L4 + (((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7)*C8 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8)*C9)*L5 + (64*I*np.power(pi, 6)*C6*C7*C8 + (64*I*np.power(pi, 6)*C6*C7 + 64*I*np.power(pi, 6)*C6*C8)*C9)*L6)*L7 + (64*I*np.power(pi, 6)*C2*C8*C9*L2 + 64*I*np.power(pi, 6)*C4*C8*C9*L4 + 64*I*np.power(pi, 6)*C6*C8*C9*L6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C8*C9*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8*C9*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8*C9*L5 + (64*I*np.power(pi, 6)*C6 + 64*I*np.power(pi, 6)*C7)*C8*C9*L7)*L8)*L9)*ZL*ZS + ((-64*I*np.power(pi, 6)*C2*C3 - 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (-64*I*np.power(pi, 6)*C2*C4*L1*L2 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4 + ((-64*I*np.power(pi, 6)*C2*C4 - 64*I*np.power(pi, 6)*C2*C5 - 64*I*np.power(pi, 6)*C2*C6)*L1*L2 + ((-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3)*C4 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C5 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C6)*L1*L3 + (-64*I*np.power(pi, 6)*C4*C5 - 64*I*np.power(pi, 6)*C4*C6)*L1*L4)*L5 + (-64*I*np.power(pi, 6)*C2*C6*L1*L2 - 64*I*np.power(pi, 6)*C4*C6*L1*L4 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C6*L1*L3 + (-64*I*np.power(pi, 6)*C4 - 64*I*np.power(pi, 6)*C5)*C6*L1*L5)*L6 + ((-64*I*np.power(pi, 6)*C2*C6 - 64*I*np.power(pi, 6)*C2*C7 - 64*I*np.power(pi, 6)*C2*C8)*L1*L2 + ((-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C6 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C7 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C8)*L1*L3 + (-64*I*np.power(pi, 6)*C4*C6 - 64*I*np.power(pi, 6)*C4*C7 - 64*I*np.power(pi, 6)*C4*C8)*L1*L4 + ((-64*I*np.power(pi, 6)*C4 - 64*I*np.power(pi, 6)*C5)*C6 + (-64*I*np.power(pi, 6)*C4 - 64*I*np.power(pi, 6)*C5 - 64*I*np.power(pi, 6)*C6)*C7 + (-64*I*np.power(pi, 6)*C4 - 64*I*np.power(pi, 6)*C5 - 64*I*np.power(pi, 6)*C6)*C8)*L1*L5 + (-64*I*np.power(pi, 6)*C6*C7 - 64*I*np.power(pi, 6)*C6*C8)*L1*L6)*L7 + (-64*I*np.power(pi, 6)*C2*C8*L1*L2 - 64*I*np.power(pi, 6)*C4*C8*L1*L4 - 64*I*np.power(pi, 6)*C6*C8*L1*L6 + (-64*I*np.power(pi, 6)*C2 - 64*I*np.power(pi, 6)*C3 - 64*I*np.power(pi, 6)*C4)*C8*L1*L3 + (-64*I*np.power(pi, 6)*C4 - 64*I*np.power(pi, 6)*C5 - 64*I*np.power(pi, 6)*C6)*C8*L1*L5 + (-64*I*np.power(pi, 6)*C6 - 64*I*np.power(pi, 6)*C7)*C8*L1*L7)*L8)*L9)*np.power(freq, 6) - 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C5 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6)*L1 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L4)*L5 + (np.power(pi, 5)*C2*C6*L2 + np.power(pi, 5)*C4*C6*L4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L5)*L6 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C7 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C8)*L1 + (np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7 + np.power(pi, 5)*C2*C8)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8)*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7 + np.power(pi, 5)*C4*C8)*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8)*L5 + (np.power(pi, 5)*C6*C7 + np.power(pi, 5)*C6*C8)*L6)*L7 + (np.power(pi, 5)*C2*C8*L2 + np.power(pi, 5)*C4*C8*L4 + np.power(pi, 5)*C6*C8*L6 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C8*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8*L5 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8*L7)*L8)*L9*ZS - ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L1*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (np.power(pi, 5)*C2*C6*L1*L2 + np.power(pi, 5)*C4*C6*L1*L4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L1*L5)*L6 + ((np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7 + np.power(pi, 5)*C2*C8)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8)*L1*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7 + np.power(pi, 5)*C4*C8)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8)*L1*L5 + (np.power(pi, 5)*C6*C7 + np.power(pi, 5)*C6*C8)*L1*L6)*L7 + (np.power(pi, 5)*C2*C8*L1*L2 + np.power(pi, 5)*C4*C8*L1*L4 + np.power(pi, 5)*C6*C8*L1*L6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8*L1*L5 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8*L1*L7)*L8 + (np.power(pi, 5)*C8*C9*L1*L8 + (np.power(pi, 5)*C2*C8 + np.power(pi, 5)*C2*C9)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C9)*L1*L3 + (np.power(pi, 5)*C4*C8 + np.power(pi, 5)*C4*C9)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C9)*L1*L5 + (np.power(pi, 5)*C6*C8 + np.power(pi, 5)*C6*C9)*L1*L6 + ((np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7 + np.power(pi, 5)*C8)*C9)*L1*L7)*L9)*ZL)*np.power(freq, 5) - ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5 - 16*I*np.power(pi, 4)*C2*C6)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6)*L3 + (-16*I*np.power(pi, 4)*C4*C5 - 16*I*np.power(pi, 4)*C4*C6)*L4)*L5 + (-16*I*np.power(pi, 4)*C2*C6*L2 - 16*I*np.power(pi, 4)*C4*C6*L4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6*L5)*L6 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C7 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8)*L1 + (-16*I*np.power(pi, 4)*C2*C6 - 16*I*np.power(pi, 4)*C2*C7 - 16*I*np.power(pi, 4)*C2*C8)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C7 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8)*L3 + (-16*I*np.power(pi, 4)*C4*C6 - 16*I*np.power(pi, 4)*C4*C7 - 16*I*np.power(pi, 4)*C4*C8)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C7 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8)*L5 + (-16*I*np.power(pi, 4)*C6*C7 - 16*I*np.power(pi, 4)*C6*C8)*L6)*L7 + (-16*I*np.power(pi, 4)*C2*C8*L2 - 16*I*np.power(pi, 4)*C4*C8*L4 - 16*I*np.power(pi, 4)*C6*C8*L6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8*L5 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7)*C8*L7)*L8 + (-16*I*np.power(pi, 4)*C8*C9*L8 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C9)*L1 + (-16*I*np.power(pi, 4)*C2*C8 - 16*I*np.power(pi, 4)*C2*C9)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C9)*L3 + (-16*I*np.power(pi, 4)*C4*C8 - 16*I*np.power(pi, 4)*C4*C9)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C9)*L5 + (-16*I*np.power(pi, 4)*C6*C8 - 16*I*np.power(pi, 4)*C6*C9)*L6 + ((-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7)*C8 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7 - 16*I*np.power(pi, 4)*C8)*C9)*L7)*L9)*ZL*ZS + (16*I*np.power(pi, 4)*C2*L1*L2 + 16*I*np.power(pi, 4)*C4*L1*L4 + 16*I*np.power(pi, 4)*C6*L1*L6 + 16*I*np.power(pi, 4)*C8*L1*L8 + (16*I*np.power(pi, 4)*C2 + 16*I*np.power(pi, 4)*C3 + 16*I*np.power(pi, 4)*C4)*L1*L3 + (16*I*np.power(pi, 4)*C4 + 16*I*np.power(pi, 4)*C5 + 16*I*np.power(pi, 4)*C6)*L1*L5 + (16*I*np.power(pi, 4)*C6 + 16*I*np.power(pi, 4)*C7 + 16*I*np.power(pi, 4)*C8)*L1*L7)*L9)*np.power(freq, 4) + 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + np.power(pi, 3)*C6*L6 + np.power(pi, 3)*C8*L8 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7 + np.power(pi, 3)*C8)*L7)*L9*ZS - (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + np.power(pi, 3)*C6*L1*L6 + np.power(pi, 3)*C8*L1*L8 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L1*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7 + np.power(pi, 3)*C8)*L1*L7 + (np.power(pi, 3)*C8 + np.power(pi, 3)*C9)*L1*L9)*ZL)*np.power(freq, 3) - (-4*I*np.power(pi, 2)*L1*L9 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + 4*I*np.power(pi, 2)*C6*L6 + 4*I*np.power(pi, 2)*C8*L8 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5 + 4*I*np.power(pi, 2)*C6)*L5 + (4*I*np.power(pi, 2)*C6 + 4*I*np.power(pi, 2)*C7 + 4*I*np.power(pi, 2)*C8)*L7 + (4*I*np.power(pi, 2)*C8 + 4*I*np.power(pi, 2)*C9)*L9)*ZL*ZS)*np.power(freq, 2) + I*ZL*ZS + 2*(pi*L1*ZL - pi*L9*ZS)*freq)/(262144*I*np.power(pi, 18)*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS*np.power(freq, 18) + 131072*(np.power(pi, 17)*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL + np.power(pi, 17)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*np.power(freq, 17) + (-65536*I*np.power(pi, 16)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*L9 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7 - 65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5 - 65536*I*np.power(pi, 16)*C1*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4 + (-65536*I*np.power(pi, 16)*C1*C2*C3 - 65536*I*np.power(pi, 16)*C1*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (-65536*I*np.power(pi, 16)*C1*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (-65536*I*np.power(pi, 16)*C2*C3*C4*C5*C6*C7*C8*C9*L2 + (-65536*I*np.power(pi, 16)*C1*C2 + (-65536*I*np.power(pi, 16)*C1 - 65536*I*np.power(pi, 16)*C2)*C3)*C4*C5*C6*C7*C8*C9*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS)*np.power(freq, 16) - 32768*(((np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C7 + np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 15)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 15)*C1*C2*C3*C4*C5 + np.power(pi, 15)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 15)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 15)*C1*C2*C3*C4 + (np.power(pi, 15)*C1*C2*C3 + np.power(pi, 15)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 15)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L2 + (np.power(pi, 15)*C1*C2 + (np.power(pi, 15)*C1 + np.power(pi, 15)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9*ZS + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7 + np.power(pi, 15)*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 15)*C2*C3*C4*C5*C6 + (np.power(pi, 15)*C2*C3*C4*C5 + np.power(pi, 15)*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (np.power(pi, 15)*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 15)*C2*C3*C4 + (np.power(pi, 15)*C2*C3 + np.power(pi, 15)*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (np.power(pi, 15)*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (np.power(pi, 15)*C2 + np.power(pi, 15)*C3)*C4*C5*C6*C7*C8*C9*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 15) + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C8)*C9)*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8 + ((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C8*C9*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C8*C9*L1)*L3)*L4)*L5)*L6 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C4*C6)*C7)*C8*C9*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6 + ((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C6)*C7)*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C2*C3*C4*C6)*C7)*C8*C9*L2)*L3)*L4)*L5 + ((16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C6*C7*C8*C9*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C6*C7*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C6*C7*C8*C9*L1)*L3)*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C4 + 16384*I*np.power(pi, 14)*C1*C2*C5)*C6*C7*C8*C9*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C4)*C5)*C6*C7*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4 + (16384*I*np.power(pi, 14)*C2*C3 + 16384*I*np.power(pi, 14)*C2*C4)*C5)*C6*C7*C8*C9*L2)*L3 + (16384*I*np.power(pi, 14)*C2*C4*C5*C6*C7*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C4*C5*C6*C7*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2 + 16384*I*np.power(pi, 14)*C3)*C4*C5*C6*C7*C8*C9*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C2*C3*C4 + (16384*I*np.power(pi, 14)*C2*C3 + 16384*I*np.power(pi, 14)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (16384*I*np.power(pi, 14)*C2*C4*C5*C6*C7*C8*L1*L2 + (16384*I*np.power(pi, 14)*C2 + 16384*I*np.power(pi, 14)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*np.power(freq, 14) + 8192*((np.power(pi, 13)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 13)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C7 + (np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 13)*C1*C2*C3*C4*C6*C7 + np.power(pi, 13)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C7 + (np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 13)*C1*C2*C4*C5*C6*C7 + np.power(pi, 13)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C7 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C8)*L1 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 13)*C1*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L2 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 13)*C1*C2*C3*C4*C6 + np.power(pi, 13)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6 + (np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 13)*C1*C2*C4*C5*C6 + (np.power(pi, 13)*C1*C2*C4*C5 + np.power(pi, 13)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C6)*C7)*C8*L1 + (np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 13)*C1*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L2 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((np.power(pi, 13)*C1*C2*C4 + np.power(pi, 13)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C4)*C5)*C6*C7*C8*L1 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C4*C5*C6*C7*C8*L1 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8)*L9*ZS + ((np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + ((np.power(pi, 13)*C2*C3*C4*C5*C6*C8 + np.power(pi, 13)*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8 + (np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((np.power(pi, 13)*C2*C3*C4*C6*C7*C8 + (np.power(pi, 13)*C2*C3*C4*C6*C7 + np.power(pi, 13)*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((np.power(pi, 13)*C2*C4*C5*C6*C7*C8 + (np.power(pi, 13)*C2*C4*C5*C6*C7 + np.power(pi, 13)*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C8*C9*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C8*C9*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 13)*C2*C3*C4*C6 + np.power(pi, 13)*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((np.power(pi, 13)*C2*C4*C5*C6 + (np.power(pi, 13)*C2*C4*C5 + np.power(pi, 13)*C2*C4*C6)*C7)*C8*C9*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C6)*C7)*C8*C9*L1*L3)*L4)*L5 + ((np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C6*C7*C8*C9*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C6*C7*C8*C9*L1*L3)*L4 + (np.power(pi, 13)*C4*C5*C6*C7*C8*C9*L1*L4 + (np.power(pi, 13)*C2*C4 + np.power(pi, 13)*C2*C5)*C6*C7*C8*C9*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3 + np.power(pi, 13)*C4)*C5)*C6*C7*C8*C9*L1*L3)*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 13) + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7*C8*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8 - 4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C9)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8 - 4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C8)*C9)*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C8)*C9)*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + (((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6*C8)*C9)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C8)*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C8)*C9)*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C8)*C9)*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C8)*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8)*C9)*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8*C9*L2)*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C8*C9*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C8*C9*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C8*C9*L1)*L3)*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8*C9*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8*C9*L3)*L4)*L5)*L6 + (((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C4*C7)*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C7)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C2*C3*C4*C7)*C8*C9*L2)*L3)*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5 - 4096*I*np.power(pi, 12)*C1*C2*C6)*C7)*C8*C9*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C6)*C7)*C8*C9*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6)*C7)*C8*C9*L2)*L3 + (((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C6)*C7)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C4*C5 - 4096*I*np.power(pi, 12)*C2*C4*C6)*C7)*C8*C9*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6)*C7)*C8*C9*L3)*L4)*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C6*C7*C8*C9*L1*L2 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6*C7*C8*C9*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C6*C7*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6*C7*C8*C9*L3)*L4 + (-4096*I*np.power(pi, 12)*C4*C5*C6*C7*C8*C9*L4 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C5)*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C4 - 4096*I*np.power(pi, 12)*C2*C5)*C6*C7*C8*C9*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3 - 4096*I*np.power(pi, 12)*C4)*C5)*C6*C7*C8*C9*L3)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8)*L1*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C4*C5 - 4096*I*np.power(pi, 12)*C2*C4*C6)*C7)*C8*L1*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6*C7*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C6*C7*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (-4096*I*np.power(pi, 12)*C4*C5*C6*C7*C8*L1*L4 + (-4096*I*np.power(pi, 12)*C2*C4 - 4096*I*np.power(pi, 12)*C2*C5)*C6*C7*C8*L1*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3 - 4096*I*np.power(pi, 12)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8)*L9)*np.power(freq, 12) - 2048*(((np.power(pi, 11)*C1*C2*C3*C4*C5 + np.power(pi, 11)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 11)*C1*C2*C3*C4*C6 + np.power(pi, 11)*C1*C2*C3*C4*C7 + np.power(pi, 11)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6 + (np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C7 + (np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C5*C6 + (np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C7 + (np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C8)*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C7 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C8)*L1 + (np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C7 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C6*C7 + np.power(pi, 11)*C1*C2*C4*C6*C8)*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C7 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C8)*L1 + (np.power(pi, 11)*C2*C3*C4*C6*C7 + np.power(pi, 11)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C7 + (np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C8)*L1*L2 + ((((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C7 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C8)*L1 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C7 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C8)*L1 + (np.power(pi, 11)*C2*C4*C5*C6*C7 + np.power(pi, 11)*C2*C4*C5*C6*C8)*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (np.power(pi, 11)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C8*L1 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C6*C8*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C6*C8*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C8*L1 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8*L2)*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C8*L2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C8*L1 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C6 + np.power(pi, 11)*C1*C2*C4*C7)*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C7)*C8*L1 + (np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6 + (np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5 + np.power(pi, 11)*C1*C2*C6)*C7)*C8*L1*L2 + ((((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C6)*C7)*C8*L1 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6 + ((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C6)*C7)*C8*L1 + (np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (np.power(pi, 11)*C1*C2*C6*C7*C8*L1*L2 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C6*C7*C8*L1 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8*L2)*L3 + (np.power(pi, 11)*C2*C4*C6*C7*C8*L2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C6*C7*C8*L1 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C7*C8*L4 + ((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C5)*C6*C7*C8*L1 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8)*L9*ZS + (np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 11)*C2*C3*C4*C6*C7 + np.power(pi, 11)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6*C7 + np.power(pi, 11)*C2*C4*C5*C6*C8)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C7*C8*L1*L4 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + (((np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((np.power(pi, 11)*C2*C3*C4*C6*C8 + np.power(pi, 11)*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6*C8 + np.power(pi, 11)*C2*C4*C5*C6*C9)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C9)*L1*L3)*L4)*L5)*L6 + (((np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8 + (np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7 + np.power(pi, 11)*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8 + (np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C8)*C9)*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + (((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C6*C7*C8 + (np.power(pi, 11)*C2*C4*C6*C7 + np.power(pi, 11)*C2*C4*C6*C8)*C9)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8 + ((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C8)*C9)*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C8)*C9)*L1*L3 + (np.power(pi, 11)*C4*C5*C6*C7*C8 + (np.power(pi, 11)*C4*C5*C6*C7 + np.power(pi, 11)*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + (np.power(pi, 11)*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C8*C9*L1*L3)*L4)*L5 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C8*C9*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C6*C8*C9*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C8*C9*L1*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C8*C9*L1*L4 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C8*C9*L1*L3)*L5)*L6 + (((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C6 + np.power(pi, 11)*C2*C4*C7)*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C7)*C8*C9*L1*L3)*L4 + (((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5 + np.power(pi, 11)*C2*C6)*C7)*C8*C9*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C6)*C7)*C8*C9*L1*L3 + (np.power(pi, 11)*C4*C5*C6 + (np.power(pi, 11)*C4*C5 + np.power(pi, 11)*C4*C6)*C7)*C8*C9*L1*L4)*L5 + (np.power(pi, 11)*C2*C6*C7*C8*C9*L1*L2 + np.power(pi, 11)*C4*C6*C7*C8*C9*L1*L4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C6*C7*C8*C9*L1*L3 + (np.power(pi, 11)*C4 + np.power(pi, 11)*C5)*C6*C7*C8*C9*L1*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 11) + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C7 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7)*C8*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7)*C8*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7)*C8*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (1024*I*np.power(pi, 10)*C1*C2*C6*C7*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7*C8*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7*C8*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7*C8*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7*C8*L4 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7*C8*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C9)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C9)*L1*L2*L3 + (((1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C9)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6*C9)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6*C9)*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C9)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8 + 1024*I*np.power(pi, 10)*C2*C4*C5*C6*C9)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C9)*L3)*L4)*L5)*L6 + ((((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C8)*C9)*L1*L2*L3 + (((1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7 + 1024*I*np.power(pi, 10)*C1*C2*C4*C8)*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7)*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C8)*C9)*L1*L2 + (((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7)*C8 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C8)*C9)*L1 + (((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8)*C9)*L2)*L3 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7)*C8 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8)*C9)*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C6*C7*C8 + (1024*I*np.power(pi, 10)*C1*C2*C6*C7 + 1024*I*np.power(pi, 10)*C1*C2*C6*C8)*C9)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8)*C9)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C8)*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7*C8 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C6*C8)*C9)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7*C8 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8)*C9)*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7*C8 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8)*C9)*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7*C8 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C8*C9*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C8*C9*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C8*C9*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C8*C9*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C8*C9*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8*C9*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8*C9*L3)*L4)*L5 + (1024*I*np.power(pi, 10)*C1*C2*C6*C8*C9*L1*L2 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8*C9*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C8*C9*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8*C9*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C8*C9*L4 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8*C9*L3)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C6 + 1024*I*np.power(pi, 10)*C1*C2*C7)*C8*C9*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C7)*C8*C9*L1 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C7)*C8*C9*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C7)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4*C6 + 1024*I*np.power(pi, 10)*C2*C4*C7)*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C7)*C8*C9*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C6)*C7)*C8*C9*L1 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5 + 1024*I*np.power(pi, 10)*C2*C6)*C7)*C8*C9*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6)*C7)*C8*C9*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6 + (1024*I*np.power(pi, 10)*C4*C5 + 1024*I*np.power(pi, 10)*C4*C6)*C7)*C8*C9*L4)*L5 + (1024*I*np.power(pi, 10)*C2*C6*C7*C8*C9*L2 + 1024*I*np.power(pi, 10)*C4*C6*C7*C8*C9*L4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C6*C7*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6*C7*C8*C9*L3 + (1024*I*np.power(pi, 10)*C4 + 1024*I*np.power(pi, 10)*C5)*C6*C7*C8*C9*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8)*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C6*C8)*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8)*L1*L3)*L4 + (((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8)*L1*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (1024*I*np.power(pi, 10)*C2*C3*C4*C8*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8*L1*L2*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C8*L1*L2 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8*L1*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C8*L1*L4 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C7)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C6 + 1024*I*np.power(pi, 10)*C2*C4*C7)*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C7)*C8*L1*L3)*L4 + (((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5 + 1024*I*np.power(pi, 10)*C2*C6)*C7)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6)*C7)*C8*L1*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6 + (1024*I*np.power(pi, 10)*C4*C5 + 1024*I*np.power(pi, 10)*C4*C6)*C7)*C8*L1*L4)*L5 + (1024*I*np.power(pi, 10)*C2*C6*C7*C8*L1*L2 + 1024*I*np.power(pi, 10)*C4*C6*C7*C8*L1*L4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6*C7*C8*L1*L3 + (1024*I*np.power(pi, 10)*C4 + 1024*I*np.power(pi, 10)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8)*L9)*np.power(freq, 10) + 512*((np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 9)*C1*C2*C3*C4 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C5 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C5 + np.power(pi, 9)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C6*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C7 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C6 + np.power(pi, 9)*C1*C2*C4*C7 + np.power(pi, 9)*C1*C2*C4*C8)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C7 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C8)*L1 + (np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7 + np.power(pi, 9)*C2*C3*C4*C8)*L2)*L3)*L4 + (((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6 + (np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C7 + (np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C8)*L1*L2 + ((((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C7 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C8)*L1 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8)*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C7 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C8)*L1 + (np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8)*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C6*C7 + np.power(pi, 9)*C1*C2*C6*C8)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C7 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C8)*L1 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8)*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C7 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C8)*L1 + (np.power(pi, 9)*C2*C4*C6*C7 + np.power(pi, 9)*C2*C4*C6*C8)*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8)*L3)*L4 + ((((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C7 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C8)*L1 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8)*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8)*L3 + (np.power(pi, 9)*C4*C5*C6*C7 + np.power(pi, 9)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C8*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C8*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C8*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C8*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C8*L1 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8*L3)*L4)*L5 + (np.power(pi, 9)*C1*C2*C6*C8*L1*L2 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C8*L1 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8*L2)*L3 + (np.power(pi, 9)*C2*C4*C6*C8*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C8*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C8*L4 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C8*L1 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((np.power(pi, 9)*C1*C2*C6 + np.power(pi, 9)*C1*C2*C7)*C8*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C7)*C8*L1 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C7)*C8*L1 + (np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8*L3)*L4 + ((((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C6)*C7)*C8*L1 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8*L3 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8*L4)*L5 + (np.power(pi, 9)*C2*C6*C7*C8*L2 + np.power(pi, 9)*C4*C6*C7*C8*L4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C6*C7*C8*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8*L5)*L6)*L7)*L8)*L9*ZS + ((np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7 + np.power(pi, 9)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6*C7 + np.power(pi, 9)*C2*C4*C6*C8)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8)*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8)*L1*L3 + (np.power(pi, 9)*C4*C5*C6*C7 + np.power(pi, 9)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (np.power(pi, 9)*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C6*C8*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8*L1*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C8*L1*L4 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8*L1*L3 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8*L1*L4)*L5 + (np.power(pi, 9)*C2*C6*C7*C8*L1*L2 + np.power(pi, 9)*C4*C6*C7*C8*L1*L4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8*L1*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + ((np.power(pi, 9)*C2*C3*C4*C8 + np.power(pi, 9)*C2*C3*C4*C9)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C9)*L1*L2*L3 + (((np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C9)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6*C8 + np.power(pi, 9)*C2*C4*C6*C9)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C9)*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C9)*L1*L3 + (np.power(pi, 9)*C4*C5*C6*C8 + np.power(pi, 9)*C4*C5*C6*C9)*L1*L4)*L5)*L6 + ((((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C8)*C9)*L1*L2*L3 + (((np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8 + (np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7 + np.power(pi, 9)*C2*C4*C8)*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C8)*C9)*L1*L2 + ((((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C8)*C9)*L1*L3 + ((np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C8)*C9)*L1*L4)*L5 + ((np.power(pi, 9)*C2*C6*C7*C8 + (np.power(pi, 9)*C2*C6*C7 + np.power(pi, 9)*C2*C6*C8)*C9)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C8)*C9)*L1*L3 + (np.power(pi, 9)*C4*C6*C7*C8 + (np.power(pi, 9)*C4*C6*C7 + np.power(pi, 9)*C4*C6*C8)*C9)*L1*L4 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C8*C9*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C8*C9*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C8*C9*L1*L3)*L4 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C8*C9*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C8*C9*L1*L3 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C8*C9*L1*L4)*L5 + (np.power(pi, 9)*C2*C6*C8*C9*L1*L2 + np.power(pi, 9)*C4*C6*C8*C9*L1*L4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C8*C9*L1*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C8*C9*L1*L5)*L6 + (np.power(pi, 9)*C6*C7*C8*C9*L1*L6 + (np.power(pi, 9)*C2*C6 + np.power(pi, 9)*C2*C7)*C8*C9*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C7)*C8*C9*L1*L3 + (np.power(pi, 9)*C4*C6 + np.power(pi, 9)*C4*C7)*C8*C9*L1*L4 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5 + np.power(pi, 9)*C6)*C7)*C8*C9*L1*L5)*L7)*L8)*L9)*ZL)*np.power(freq, 9) + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C5 - 256*I*np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5 - 256*I*np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C6 - 256*I*np.power(pi, 8)*C1*C2*C4*C7 - 256*I*np.power(pi, 8)*C1*C2*C4*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6 - 256*I*np.power(pi, 8)*C2*C3*C4*C7 - 256*I*np.power(pi, 8)*C2*C3*C4*C8)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C6*C7 - 256*I*np.power(pi, 8)*C1*C2*C6*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6*C7 - 256*I*np.power(pi, 8)*C2*C4*C6*C8)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8)*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8)*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6*C7 - 256*I*np.power(pi, 8)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C8*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C8*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8*L3)*L4)*L5 + (-256*I*np.power(pi, 8)*C1*C2*C6*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*C8*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*C8*L4 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7)*C8*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7)*C8*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7)*C8*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7)*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7)*C8*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7)*C8*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7)*C8*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7)*C8*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7)*C8*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C7*C8*L2 - 256*I*np.power(pi, 8)*C4*C6*C7*C8*L4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7*C8*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7*C8*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C9)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C8 - 256*I*np.power(pi, 8)*C1*C2*C4*C9)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C8 - 256*I*np.power(pi, 8)*C2*C3*C4*C9)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C9)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C9)*L2)*L3 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C9)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C6*C8 - 256*I*np.power(pi, 8)*C1*C2*C6*C9)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C9)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6*C8 - 256*I*np.power(pi, 8)*C2*C4*C6*C9)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C9)*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C9)*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6*C8 - 256*I*np.power(pi, 8)*C4*C5*C6*C9)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7 - 256*I*np.power(pi, 8)*C1*C2*C8)*C9)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7)*C8 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C8)*C9)*L1 + (((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7)*C8 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8)*C9)*L2)*L3 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7)*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C8)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7)*C8 + (-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7 - 256*I*np.power(pi, 8)*C2*C4*C8)*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7)*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8)*C9)*L3)*L4 + (((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7)*C8 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C8)*C9)*L1 + (((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7)*C8 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8)*C9)*L2 + ((((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7)*C8 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8)*C9)*L3 + ((-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7)*C8 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8)*C9)*L4)*L5 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C8)*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C6*C7*C8 + (-256*I*np.power(pi, 8)*C2*C6*C7 - 256*I*np.power(pi, 8)*C2*C6*C8)*C9)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8)*C9)*L3 + (-256*I*np.power(pi, 8)*C4*C6*C7*C8 + (-256*I*np.power(pi, 8)*C4*C6*C7 - 256*I*np.power(pi, 8)*C4*C6*C8)*C9)*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8)*C9)*L5)*L6)*L7 + (-256*I*np.power(pi, 8)*C1*C2*C8*C9*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8*C9*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C8*C9*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8*C9*L3)*L4 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8*C9*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8*C9*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C8*C9*L2 - 256*I*np.power(pi, 8)*C4*C6*C8*C9*L4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8*C9*L5)*L6 + (-256*I*np.power(pi, 8)*C6*C7*C8*C9*L6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C7)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C6 - 256*I*np.power(pi, 8)*C2*C7)*C8*C9*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C7)*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4*C6 - 256*I*np.power(pi, 8)*C4*C7)*C8*C9*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5 - 256*I*np.power(pi, 8)*C6)*C7)*C8*C9*L5)*L7)*L8)*L9)*ZL*ZS + (-256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*L1*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*L1*L4 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7 - 256*I*np.power(pi, 8)*C2*C4*C8)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8)*L1*L3)*L4 + (((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8)*L1*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8)*L1*L4)*L5 + ((-256*I*np.power(pi, 8)*C2*C6*C7 - 256*I*np.power(pi, 8)*C2*C6*C8)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8)*L1*L3 + (-256*I*np.power(pi, 8)*C4*C6*C7 - 256*I*np.power(pi, 8)*C4*C6*C8)*L1*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8*L1*L2*L3 + (-256*I*np.power(pi, 8)*C2*C4*C8*L1*L2 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8*L1*L3)*L4 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8*L1*L3 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8*L1*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C8*L1*L2 - 256*I*np.power(pi, 8)*C4*C6*C8*L1*L4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8*L1*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8*L1*L5)*L6 + (-256*I*np.power(pi, 8)*C6*C7*C8*L1*L6 + (-256*I*np.power(pi, 8)*C2*C6 - 256*I*np.power(pi, 8)*C2*C7)*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C7)*C8*L1*L3 + (-256*I*np.power(pi, 8)*C4*C6 - 256*I*np.power(pi, 8)*C4*C7)*C8*L1*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5 - 256*I*np.power(pi, 8)*C6)*C7)*C8*L1*L5)*L7)*L8)*L9)*np.power(freq, 8) - 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 7)*C1*C2*C4 + np.power(pi, 7)*C1*C2*C5 + np.power(pi, 7)*C1*C2*C6)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C5 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6)*L1 + (np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6)*L1 + (np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 7)*C1*C2*C6*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L2)*L3 + (np.power(pi, 7)*C2*C4*C6*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L4 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L3)*L5)*L6 + ((np.power(pi, 7)*C1*C2*C6 + np.power(pi, 7)*C1*C2*C7 + np.power(pi, 7)*C1*C2*C8)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C7 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C8)*L1 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C7 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C8)*L1 + (np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7 + np.power(pi, 7)*C2*C4*C8)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8)*L3)*L4 + ((((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C7 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C8)*L1 + ((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8)*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8)*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8)*L4)*L5 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C7 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C8)*L1 + (np.power(pi, 7)*C2*C6*C7 + np.power(pi, 7)*C2*C6*C8)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8)*L3 + (np.power(pi, 7)*C4*C6*C7 + np.power(pi, 7)*C4*C6*C8)*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8)*L5)*L6)*L7 + (np.power(pi, 7)*C1*C2*C8*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C8*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8*L2)*L3 + (np.power(pi, 7)*C2*C4*C8*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C8*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8*L3)*L4 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C8*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8*L3 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8*L4)*L5 + (np.power(pi, 7)*C2*C6*C8*L2 + np.power(pi, 7)*C4*C6*C8*L4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C8*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8*L5)*L6 + (np.power(pi, 7)*C6*C7*C8*L6 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C7)*C8*L1 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8*L3 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8*L5)*L7)*L8)*L9*ZS + (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C6*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L1*L4 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7 + np.power(pi, 7)*C2*C4*C8)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8)*L1*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8)*L1*L4)*L5 + ((np.power(pi, 7)*C2*C6*C7 + np.power(pi, 7)*C2*C6*C8)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8)*L1*L3 + (np.power(pi, 7)*C4*C6*C7 + np.power(pi, 7)*C4*C6*C8)*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C8*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8*L1*L3)*L4 + ((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8*L1*L3 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8*L1*L4)*L5 + (np.power(pi, 7)*C2*C6*C8*L1*L2 + np.power(pi, 7)*C4*C6*C8*L1*L4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8*L1*L5)*L6 + (np.power(pi, 7)*C6*C7*C8*L1*L6 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8*L1*L3 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8*L1*L5)*L7)*L8 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C9)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C8 + np.power(pi, 7)*C2*C4*C9)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C9)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C9)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C9)*L1*L3 + ((np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C9)*L1*L4)*L5 + ((np.power(pi, 7)*C2*C6*C8 + np.power(pi, 7)*C2*C6*C9)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C9)*L1*L3 + (np.power(pi, 7)*C4*C6*C8 + np.power(pi, 7)*C4*C6*C9)*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C9)*L1*L5)*L6 + (((np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7 + np.power(pi, 7)*C2*C8)*C9)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C8)*C9)*L1*L3 + ((np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7 + np.power(pi, 7)*C4*C8)*C9)*L1*L4 + (((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C8)*C9)*L1*L5 + (np.power(pi, 7)*C6*C7*C8 + (np.power(pi, 7)*C6*C7 + np.power(pi, 7)*C6*C8)*C9)*L1*L6)*L7 + (np.power(pi, 7)*C2*C8*C9*L1*L2 + np.power(pi, 7)*C4*C8*C9*L1*L4 + np.power(pi, 7)*C6*C8*C9*L1*L6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C8*C9*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C8*C9*L1*L5 + (np.power(pi, 7)*C6 + np.power(pi, 7)*C7)*C8*C9*L1*L7)*L8)*L9)*ZL)*np.power(freq, 7) + (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5 + 64*I*np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6)*L1 + (64*I*np.power(pi, 6)*C2*C4*C5 + 64*I*np.power(pi, 6)*C2*C4*C6)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (64*I*np.power(pi, 6)*C1*C2*C6*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C6*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (64*I*np.power(pi, 6)*C4*C5*C6*L4 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((64*I*np.power(pi, 6)*C1*C2*C6 + 64*I*np.power(pi, 6)*C1*C2*C7 + 64*I*np.power(pi, 6)*C1*C2*C8)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C7 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C7 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8)*L1 + (64*I*np.power(pi, 6)*C2*C4*C6 + 64*I*np.power(pi, 6)*C2*C4*C7 + 64*I*np.power(pi, 6)*C2*C4*C8)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C7 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C7 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C7 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8)*L3 + (64*I*np.power(pi, 6)*C4*C5*C6 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C7 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8)*L4)*L5 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8)*L1 + (64*I*np.power(pi, 6)*C2*C6*C7 + 64*I*np.power(pi, 6)*C2*C6*C8)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8)*L3 + (64*I*np.power(pi, 6)*C4*C6*C7 + 64*I*np.power(pi, 6)*C4*C6*C8)*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8)*L5)*L6)*L7 + (64*I*np.power(pi, 6)*C1*C2*C8*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C8*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8*L3)*L4 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*C8*L2 + 64*I*np.power(pi, 6)*C4*C6*C8*L4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8*L5)*L6 + (64*I*np.power(pi, 6)*C6*C7*C8*L6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7)*C8*L1 + (64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7)*C8*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7)*C8*L3 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7)*C8*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7)*C8*L5)*L7)*L8 + ((64*I*np.power(pi, 6)*C1*C2*C8 + 64*I*np.power(pi, 6)*C1*C2*C9)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C9)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C9)*L1 + (64*I*np.power(pi, 6)*C2*C4*C8 + 64*I*np.power(pi, 6)*C2*C4*C9)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C9)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C9)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C9)*L3 + ((64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C9)*L4)*L5 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C9)*L1 + (64*I*np.power(pi, 6)*C2*C6*C8 + 64*I*np.power(pi, 6)*C2*C6*C9)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C9)*L3 + (64*I*np.power(pi, 6)*C4*C6*C8 + 64*I*np.power(pi, 6)*C4*C6*C9)*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C9)*L5)*L6 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7)*C8 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C8)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7)*C8 + (64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7 + 64*I*np.power(pi, 6)*C2*C8)*C9)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7)*C8 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8)*C9)*L3 + ((64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7)*C8 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7 + 64*I*np.power(pi, 6)*C4*C8)*C9)*L4 + (((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7)*C8 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8)*C9)*L5 + (64*I*np.power(pi, 6)*C6*C7*C8 + (64*I*np.power(pi, 6)*C6*C7 + 64*I*np.power(pi, 6)*C6*C8)*C9)*L6)*L7 + (64*I*np.power(pi, 6)*C2*C8*C9*L2 + 64*I*np.power(pi, 6)*C4*C8*C9*L4 + 64*I*np.power(pi, 6)*C6*C8*C9*L6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C8*C9*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8*C9*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8*C9*L5 + (64*I*np.power(pi, 6)*C6 + 64*I*np.power(pi, 6)*C7)*C8*C9*L7)*L8)*L9)*ZL*ZS + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*L1*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*L1*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*L1*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*L1*L2 + 64*I*np.power(pi, 6)*C4*C6*L1*L4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*L1*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*L1*L5)*L6 + ((64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7 + 64*I*np.power(pi, 6)*C2*C8)*L1*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8)*L1*L3 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7 + 64*I*np.power(pi, 6)*C4*C8)*L1*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8)*L1*L5 + (64*I*np.power(pi, 6)*C6*C7 + 64*I*np.power(pi, 6)*C6*C8)*L1*L6)*L7 + (64*I*np.power(pi, 6)*C2*C8*L1*L2 + 64*I*np.power(pi, 6)*C4*C8*L1*L4 + 64*I*np.power(pi, 6)*C6*C8*L1*L6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8*L1*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8*L1*L5 + (64*I*np.power(pi, 6)*C6 + 64*I*np.power(pi, 6)*C7)*C8*L1*L7)*L8)*L9)*np.power(freq, 6) + 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C5 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6)*L1 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L4)*L5 + (np.power(pi, 5)*C2*C6*L2 + np.power(pi, 5)*C4*C6*L4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L5)*L6 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C7 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C8)*L1 + (np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7 + np.power(pi, 5)*C2*C8)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8)*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7 + np.power(pi, 5)*C4*C8)*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8)*L5 + (np.power(pi, 5)*C6*C7 + np.power(pi, 5)*C6*C8)*L6)*L7 + (np.power(pi, 5)*C2*C8*L2 + np.power(pi, 5)*C4*C8*L4 + np.power(pi, 5)*C6*C8*L6 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C8*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8*L5 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8*L7)*L8)*L9*ZS + ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L1*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (np.power(pi, 5)*C2*C6*L1*L2 + np.power(pi, 5)*C4*C6*L1*L4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L1*L5)*L6 + ((np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7 + np.power(pi, 5)*C2*C8)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8)*L1*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7 + np.power(pi, 5)*C4*C8)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8)*L1*L5 + (np.power(pi, 5)*C6*C7 + np.power(pi, 5)*C6*C8)*L1*L6)*L7 + (np.power(pi, 5)*C2*C8*L1*L2 + np.power(pi, 5)*C4*C8*L1*L4 + np.power(pi, 5)*C6*C8*L1*L6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8*L1*L5 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8*L1*L7)*L8 + (np.power(pi, 5)*C8*C9*L1*L8 + (np.power(pi, 5)*C2*C8 + np.power(pi, 5)*C2*C9)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C9)*L1*L3 + (np.power(pi, 5)*C4*C8 + np.power(pi, 5)*C4*C9)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C9)*L1*L5 + (np.power(pi, 5)*C6*C8 + np.power(pi, 5)*C6*C9)*L1*L6 + ((np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7 + np.power(pi, 5)*C8)*C9)*L1*L7)*L9)*ZL)*np.power(freq, 5) + ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5 - 16*I*np.power(pi, 4)*C2*C6)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6)*L3 + (-16*I*np.power(pi, 4)*C4*C5 - 16*I*np.power(pi, 4)*C4*C6)*L4)*L5 + (-16*I*np.power(pi, 4)*C2*C6*L2 - 16*I*np.power(pi, 4)*C4*C6*L4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6*L5)*L6 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C7 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8)*L1 + (-16*I*np.power(pi, 4)*C2*C6 - 16*I*np.power(pi, 4)*C2*C7 - 16*I*np.power(pi, 4)*C2*C8)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C7 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8)*L3 + (-16*I*np.power(pi, 4)*C4*C6 - 16*I*np.power(pi, 4)*C4*C7 - 16*I*np.power(pi, 4)*C4*C8)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C7 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8)*L5 + (-16*I*np.power(pi, 4)*C6*C7 - 16*I*np.power(pi, 4)*C6*C8)*L6)*L7 + (-16*I*np.power(pi, 4)*C2*C8*L2 - 16*I*np.power(pi, 4)*C4*C8*L4 - 16*I*np.power(pi, 4)*C6*C8*L6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8*L5 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7)*C8*L7)*L8 + (-16*I*np.power(pi, 4)*C8*C9*L8 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C9)*L1 + (-16*I*np.power(pi, 4)*C2*C8 - 16*I*np.power(pi, 4)*C2*C9)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C9)*L3 + (-16*I*np.power(pi, 4)*C4*C8 - 16*I*np.power(pi, 4)*C4*C9)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C9)*L5 + (-16*I*np.power(pi, 4)*C6*C8 - 16*I*np.power(pi, 4)*C6*C9)*L6 + ((-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7)*C8 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7 - 16*I*np.power(pi, 4)*C8)*C9)*L7)*L9)*ZL*ZS + (-16*I*np.power(pi, 4)*C2*L1*L2 - 16*I*np.power(pi, 4)*C4*L1*L4 - 16*I*np.power(pi, 4)*C6*L1*L6 - 16*I*np.power(pi, 4)*C8*L1*L8 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*L1*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*L1*L5 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7 - 16*I*np.power(pi, 4)*C8)*L1*L7)*L9)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + np.power(pi, 3)*C6*L6 + np.power(pi, 3)*C8*L8 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7 + np.power(pi, 3)*C8)*L7)*L9*ZS + (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + np.power(pi, 3)*C6*L1*L6 + np.power(pi, 3)*C8*L1*L8 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L1*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7 + np.power(pi, 3)*C8)*L1*L7 + (np.power(pi, 3)*C8 + np.power(pi, 3)*C9)*L1*L9)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L9 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + 4*I*np.power(pi, 2)*C6*L6 + 4*I*np.power(pi, 2)*C8*L8 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5 + 4*I*np.power(pi, 2)*C6)*L5 + (4*I*np.power(pi, 2)*C6 + 4*I*np.power(pi, 2)*C7 + 4*I*np.power(pi, 2)*C8)*L7 + (4*I*np.power(pi, 2)*C8 + 4*I*np.power(pi, 2)*C9)*L9)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L9*ZS)*freq)
                        S21 = 1024*np.power(pi, 9)*C2*C4*C6*C8*L1*L3*L5*L7*L9*ZL*ZS*np.power(freq, 9)/((262144*I*np.power(pi, 18)*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS*np.power(freq, 18) + 131072*(np.power(pi, 17)*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL + np.power(pi, 17)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*np.power(freq, 17) + (-65536*I*np.power(pi, 16)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*L9 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7*C8 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C7 - 65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5*C6 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C5 - 65536*I*np.power(pi, 16)*C1*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (-65536*I*np.power(pi, 16)*C1*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((-65536*I*np.power(pi, 16)*C1*C2*C3*C4 + (-65536*I*np.power(pi, 16)*C1*C2*C3 - 65536*I*np.power(pi, 16)*C1*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (-65536*I*np.power(pi, 16)*C1*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (-65536*I*np.power(pi, 16)*C2*C3*C4*C5*C6*C7*C8*C9*L2 + (-65536*I*np.power(pi, 16)*C1*C2 + (-65536*I*np.power(pi, 16)*C1 - 65536*I*np.power(pi, 16)*C2)*C3)*C4*C5*C6*C7*C8*C9*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS)*np.power(freq, 16) - 32768*(((np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C7 + np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 15)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 15)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 15)*C1*C2*C3*C4*C5 + np.power(pi, 15)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 15)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 15)*C1*C2*C3*C4 + (np.power(pi, 15)*C1*C2*C3 + np.power(pi, 15)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 15)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L2 + (np.power(pi, 15)*C1*C2 + (np.power(pi, 15)*C1 + np.power(pi, 15)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9*ZS + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((np.power(pi, 15)*C2*C3*C4*C5*C6*C7*C8 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C7 + np.power(pi, 15)*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 15)*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 15)*C2*C3*C4*C5*C6 + (np.power(pi, 15)*C2*C3*C4*C5 + np.power(pi, 15)*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (np.power(pi, 15)*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 15)*C2*C3*C4 + (np.power(pi, 15)*C2*C3 + np.power(pi, 15)*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (np.power(pi, 15)*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (np.power(pi, 15)*C2 + np.power(pi, 15)*C3)*C4*C5*C6*C7*C8*C9*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 15) + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C8 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7)*C8 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7*C8 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7*C8 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C7 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7*C8 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C8)*C9)*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7*C8 + ((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C7 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7*C8 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6*C8*C9*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6*C8*C9*L1)*L3)*L4)*L5)*L6 + ((16384*I*np.power(pi, 14)*C1*C2*C3*C4*C6 + 16384*I*np.power(pi, 14)*C1*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5)*C6 + (16384*I*np.power(pi, 14)*C1*C2*C3*C4 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C5 + (16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((16384*I*np.power(pi, 14)*C1*C2*C4*C5*C6 + (16384*I*np.power(pi, 14)*C1*C2*C4*C5 + 16384*I*np.power(pi, 14)*C1*C2*C4*C6)*C7)*C8*C9*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5*C6 + ((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C5 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C6)*C7)*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C2*C3*C4*C6)*C7)*C8*C9*L2)*L3)*L4)*L5 + ((16384*I*np.power(pi, 14)*C1*C2*C3 + 16384*I*np.power(pi, 14)*C1*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (16384*I*np.power(pi, 14)*C1*C2*C4*C6*C7*C8*C9*L1*L2 + (16384*I*np.power(pi, 14)*C2*C3*C4*C6*C7*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4*C6*C7*C8*C9*L1)*L3)*L4 + ((16384*I*np.power(pi, 14)*C1*C2*C4 + 16384*I*np.power(pi, 14)*C1*C2*C5)*C6*C7*C8*C9*L1*L2 + (((16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3)*C4 + (16384*I*np.power(pi, 14)*C1*C2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C3 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C4)*C5)*C6*C7*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2*C3*C4 + (16384*I*np.power(pi, 14)*C2*C3 + 16384*I*np.power(pi, 14)*C2*C4)*C5)*C6*C7*C8*C9*L2)*L3 + (16384*I*np.power(pi, 14)*C2*C4*C5*C6*C7*C8*C9*L2 + (16384*I*np.power(pi, 14)*C1 + 16384*I*np.power(pi, 14)*C2)*C4*C5*C6*C7*C8*C9*L1 + (16384*I*np.power(pi, 14)*C2 + 16384*I*np.power(pi, 14)*C3)*C4*C5*C6*C7*C8*C9*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C7 + 16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((16384*I*np.power(pi, 14)*C2*C3*C4*C5*C6 + (16384*I*np.power(pi, 14)*C2*C3*C4*C5 + 16384*I*np.power(pi, 14)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (16384*I*np.power(pi, 14)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((16384*I*np.power(pi, 14)*C2*C3*C4 + (16384*I*np.power(pi, 14)*C2*C3 + 16384*I*np.power(pi, 14)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (16384*I*np.power(pi, 14)*C2*C4*C5*C6*C7*C8*L1*L2 + (16384*I*np.power(pi, 14)*C2 + 16384*I*np.power(pi, 14)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*np.power(freq, 14) + 8192*((np.power(pi, 13)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 13)*C1*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C7 + (np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 13)*C1*C2*C3*C4*C6*C7 + np.power(pi, 13)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C7 + (np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 13)*C1*C2*C4*C5*C6*C7 + np.power(pi, 13)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C7 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C8)*L1 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 13)*C1*C2*C3*C4*C5 + np.power(pi, 13)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 13)*C1*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L2 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 13)*C1*C2*C3*C4*C6 + np.power(pi, 13)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5)*C6 + (np.power(pi, 13)*C1*C2*C3*C4 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C5 + (np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 13)*C1*C2*C4*C5*C6 + (np.power(pi, 13)*C1*C2*C4*C5 + np.power(pi, 13)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C5 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C6)*C7)*C8*L1 + (np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 13)*C1*C2*C3 + np.power(pi, 13)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 13)*C1*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L2 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((np.power(pi, 13)*C1*C2*C4 + np.power(pi, 13)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3)*C4 + (np.power(pi, 13)*C1*C2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C3 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C4)*C5)*C6*C7*C8*L1 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L2 + (np.power(pi, 13)*C1 + np.power(pi, 13)*C2)*C4*C5*C6*C7*C8*L1 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8)*L9*ZS + ((np.power(pi, 13)*C2*C3*C4*C5*C6*C7 + np.power(pi, 13)*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (np.power(pi, 13)*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C7*C8*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + ((np.power(pi, 13)*C2*C3*C4*C5*C6*C8 + np.power(pi, 13)*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7)*C8 + (np.power(pi, 13)*C2*C3*C4*C5*C6 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C7 + (np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((np.power(pi, 13)*C2*C3*C4*C6*C7*C8 + (np.power(pi, 13)*C2*C3*C4*C6*C7 + np.power(pi, 13)*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7*C8 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C7 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((np.power(pi, 13)*C2*C4*C5*C6*C7*C8 + (np.power(pi, 13)*C2*C4*C5*C6*C7 + np.power(pi, 13)*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7*C8 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C7 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 13)*C2*C3*C4*C5 + np.power(pi, 13)*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (np.power(pi, 13)*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C5*C6*C8*C9*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6*C8*C9*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 13)*C2*C3*C4*C6 + np.power(pi, 13)*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5)*C6 + (np.power(pi, 13)*C2*C3*C4 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C5 + (np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((np.power(pi, 13)*C2*C4*C5*C6 + (np.power(pi, 13)*C2*C4*C5 + np.power(pi, 13)*C2*C4*C6)*C7)*C8*C9*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5*C6 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C5 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C6)*C7)*C8*C9*L1*L3)*L4)*L5 + ((np.power(pi, 13)*C2*C3 + np.power(pi, 13)*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (np.power(pi, 13)*C2*C4*C6*C7*C8*C9*L1*L2 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4*C6*C7*C8*C9*L1*L3)*L4 + (np.power(pi, 13)*C4*C5*C6*C7*C8*C9*L1*L4 + (np.power(pi, 13)*C2*C4 + np.power(pi, 13)*C2*C5)*C6*C7*C8*C9*L1*L2 + ((np.power(pi, 13)*C2 + np.power(pi, 13)*C3)*C4 + (np.power(pi, 13)*C2 + np.power(pi, 13)*C3 + np.power(pi, 13)*C4)*C5)*C6*C7*C8*C9*L1*L3)*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 13) + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7*C8*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7*C8*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7*C8*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7*C8*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C8 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C8 - 4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6*C9)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C8 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C8 - 4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + (((-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C7 - 4096*I*np.power(pi, 12)*C1*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7)*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7)*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C8)*C9)*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7)*C8 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C7 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C8)*C9)*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7)*C8 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + (((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C7 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6*C8)*C9)*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C8)*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C8)*C9)*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7*C8 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C7 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C8)*C9)*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C8)*C9)*L1 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7*C8 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8)*C9)*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7*C8 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + (-4096*I*np.power(pi, 12)*C1*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C5 - 4096*I*np.power(pi, 12)*C1*C2*C4*C6)*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8*C9*L2)*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6*C8*C9*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C1*C2*C4*C6*C8*C9*L1*L2 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6*C8*C9*L1)*L3)*L4 + ((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8*C9*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8*C9*L3)*L4)*L5)*L6 + (((-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C3 - 4096*I*np.power(pi, 12)*C1*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C1*C2*C4*C6 - 4096*I*np.power(pi, 12)*C1*C2*C4*C7)*C8*C9*L1*L2 + (((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C6 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4*C7)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C2*C3*C4*C7)*C8*C9*L2)*L3)*L4 + (((-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5)*C6 + (-4096*I*np.power(pi, 12)*C1*C2*C4 - 4096*I*np.power(pi, 12)*C1*C2*C5 - 4096*I*np.power(pi, 12)*C1*C2*C6)*C7)*C8*C9*L1*L2 + ((((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5)*C6 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3)*C4 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C5 + (-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C6)*C7)*C8*C9*L1 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6)*C7)*C8*C9*L2)*L3 + (((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C5 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C6)*C7)*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C4*C5 - 4096*I*np.power(pi, 12)*C2*C4*C6)*C7)*C8*C9*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6)*C7)*C8*C9*L3)*L4)*L5 + (-4096*I*np.power(pi, 12)*C1*C2*C6*C7*C8*C9*L1*L2 + ((-4096*I*np.power(pi, 12)*C1*C2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C3 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4)*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6*C7*C8*C9*L2)*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C6*C7*C8*C9*L2 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6*C7*C8*C9*L3)*L4 + (-4096*I*np.power(pi, 12)*C4*C5*C6*C7*C8*C9*L4 + ((-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C4 + (-4096*I*np.power(pi, 12)*C1 - 4096*I*np.power(pi, 12)*C2)*C5)*C6*C7*C8*C9*L1 + (-4096*I*np.power(pi, 12)*C2*C4 - 4096*I*np.power(pi, 12)*C2*C5)*C6*C7*C8*C9*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3 - 4096*I*np.power(pi, 12)*C4)*C5)*C6*C7*C8*C9*L3)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C7 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C7 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C7 - 4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8)*L1*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C7 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C5 - 4096*I*np.power(pi, 12)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (-4096*I*np.power(pi, 12)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C5*C6*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((-4096*I*np.power(pi, 12)*C2*C3*C4*C6 - 4096*I*np.power(pi, 12)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5)*C6 + (-4096*I*np.power(pi, 12)*C2*C3*C4 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C5 + (-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((-4096*I*np.power(pi, 12)*C2*C4*C5*C6 + (-4096*I*np.power(pi, 12)*C2*C4*C5 - 4096*I*np.power(pi, 12)*C2*C4*C6)*C7)*C8*L1*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5*C6 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C5 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((-4096*I*np.power(pi, 12)*C2*C3 - 4096*I*np.power(pi, 12)*C2*C4)*C6*C7*C8*L1*L2*L3 + (-4096*I*np.power(pi, 12)*C2*C4*C6*C7*C8*L1*L2 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (-4096*I*np.power(pi, 12)*C4*C5*C6*C7*C8*L1*L4 + (-4096*I*np.power(pi, 12)*C2*C4 - 4096*I*np.power(pi, 12)*C2*C5)*C6*C7*C8*L1*L2 + ((-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3)*C4 + (-4096*I*np.power(pi, 12)*C2 - 4096*I*np.power(pi, 12)*C3 - 4096*I*np.power(pi, 12)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8)*L9)*np.power(freq, 12) - 2048*(((np.power(pi, 11)*C1*C2*C3*C4*C5 + np.power(pi, 11)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C5*C6*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C5*C6*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((np.power(pi, 11)*C1*C2*C3*C4*C6 + np.power(pi, 11)*C1*C2*C3*C4*C7 + np.power(pi, 11)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5)*C6 + (np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C7 + (np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C5*C6 + (np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C7 + (np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C8)*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C7 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C8)*L1 + (np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C7 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C6*C7 + np.power(pi, 11)*C1*C2*C4*C6*C8)*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C7 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C8)*L1 + (np.power(pi, 11)*C2*C3*C4*C6*C7 + np.power(pi, 11)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C7 + (np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C8)*L1*L2 + ((((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C7 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C8)*L1 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C7 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C8)*L1 + (np.power(pi, 11)*C2*C4*C5*C6*C7 + np.power(pi, 11)*C2*C4*C5*C6*C8)*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (np.power(pi, 11)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 11)*C1*C2*C3*C4 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C5 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C5 + np.power(pi, 11)*C1*C2*C4*C6)*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6)*C8*L1 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 11)*C1*C2*C4*C6*C8*L1*L2 + (np.power(pi, 11)*C2*C3*C4*C6*C8*L2 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6*C8*L1 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8*L2)*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C8*L2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6*C8*L1 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C6 + (np.power(pi, 11)*C1*C2*C3 + np.power(pi, 11)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 11)*C1*C2*C4*C6 + np.power(pi, 11)*C1*C2*C4*C7)*C8*L1*L2 + (((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C6 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4*C7)*C8*L1 + (np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5)*C6 + (np.power(pi, 11)*C1*C2*C4 + np.power(pi, 11)*C1*C2*C5 + np.power(pi, 11)*C1*C2*C6)*C7)*C8*L1*L2 + ((((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5)*C6 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3)*C4 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C5 + (np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C6)*C7)*C8*L1 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5*C6 + ((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C5 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C6)*C7)*C8*L1 + (np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (np.power(pi, 11)*C1*C2*C6*C7*C8*L1*L2 + ((np.power(pi, 11)*C1*C2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C3 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4)*C6*C7*C8*L1 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8*L2)*L3 + (np.power(pi, 11)*C2*C4*C6*C7*C8*L2 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4*C6*C7*C8*L1 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C7*C8*L4 + ((np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C4 + (np.power(pi, 11)*C1 + np.power(pi, 11)*C2)*C5)*C6*C7*C8*L1 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8)*L9*ZS + (np.power(pi, 11)*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((np.power(pi, 11)*C2*C3*C4*C5*C6 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C7 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((np.power(pi, 11)*C2*C3*C4*C6*C7 + np.power(pi, 11)*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6*C7 + np.power(pi, 11)*C2*C4*C5*C6*C8)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (np.power(pi, 11)*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C5*C6*C8*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C6*C7*C8*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8*L1*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C7*C8*L1*L4 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + (((np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C8 + (np.power(pi, 11)*C2*C3*C4*C5 + np.power(pi, 11)*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((np.power(pi, 11)*C2*C3*C4*C6*C8 + np.power(pi, 11)*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C8 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5*C6*C8 + np.power(pi, 11)*C2*C4*C5*C6*C9)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C8 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6*C9)*L1*L3)*L4)*L5)*L6 + (((np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7)*C8 + (np.power(pi, 11)*C2*C3*C4*C6 + np.power(pi, 11)*C2*C3*C4*C7 + np.power(pi, 11)*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7)*C8 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5)*C6 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C7 + (np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7)*C8 + (np.power(pi, 11)*C2*C4*C5*C6 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C7 + (np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C8)*C9)*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7)*C8 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C7 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + (((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7*C8 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C7 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C6*C7*C8 + (np.power(pi, 11)*C2*C4*C6*C7 + np.power(pi, 11)*C2*C4*C6*C8)*C9)*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7*C8 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C7 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7*C8 + ((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C7 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C8)*C9)*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7*C8 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C7 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C8)*C9)*L1*L3 + (np.power(pi, 11)*C4*C5*C6*C7*C8 + (np.power(pi, 11)*C4*C5*C6*C7 + np.power(pi, 11)*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + (np.power(pi, 11)*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((np.power(pi, 11)*C2*C3*C4 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C5 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C5 + np.power(pi, 11)*C2*C4*C6)*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6)*C8*C9*L1*L3)*L4)*L5 + ((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6*C8*C9*L1*L2*L3 + (np.power(pi, 11)*C2*C4*C6*C8*C9*L1*L2 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6*C8*C9*L1*L3)*L4 + (np.power(pi, 11)*C4*C5*C6*C8*C9*L1*L4 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6*C8*C9*L1*L3)*L5)*L6 + (((np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C6 + (np.power(pi, 11)*C2*C3 + np.power(pi, 11)*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((np.power(pi, 11)*C2*C4*C6 + np.power(pi, 11)*C2*C4*C7)*C8*C9*L1*L2 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C6 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4*C7)*C8*C9*L1*L3)*L4 + (((np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5)*C6 + (np.power(pi, 11)*C2*C4 + np.power(pi, 11)*C2*C5 + np.power(pi, 11)*C2*C6)*C7)*C8*C9*L1*L2 + (((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5)*C6 + ((np.power(pi, 11)*C2 + np.power(pi, 11)*C3)*C4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C5 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C6)*C7)*C8*C9*L1*L3 + (np.power(pi, 11)*C4*C5*C6 + (np.power(pi, 11)*C4*C5 + np.power(pi, 11)*C4*C6)*C7)*C8*C9*L1*L4)*L5 + (np.power(pi, 11)*C2*C6*C7*C8*C9*L1*L2 + np.power(pi, 11)*C4*C6*C7*C8*C9*L1*L4 + (np.power(pi, 11)*C2 + np.power(pi, 11)*C3 + np.power(pi, 11)*C4)*C6*C7*C8*C9*L1*L3 + (np.power(pi, 11)*C4 + np.power(pi, 11)*C5)*C6*C7*C8*C9*L1*L5)*L6)*L7)*L8)*L9)*ZL)*np.power(freq, 11) + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C7 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7)*C8*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7)*C8*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7)*C8*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7)*C8*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7)*C8*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (1024*I*np.power(pi, 10)*C1*C2*C6*C7*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7*C8*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7*C8*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7*C8*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7*C8*L4 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7*C8*L1 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7*C8*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + ((1024*I*np.power(pi, 10)*C1*C2*C3*C4*C8 + 1024*I*np.power(pi, 10)*C1*C2*C3*C4*C9)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C3*C4 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6)*C9)*L1*L2*L3 + (((1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4*C5 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6)*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6*C9)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C1*C2*C4*C6*C8 + 1024*I*np.power(pi, 10)*C1*C2*C4*C6*C9)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*C8 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6*C9)*L2)*L3)*L4 + (((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*C9)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C8 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*C8 + 1024*I*np.power(pi, 10)*C2*C4*C5*C6*C9)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C8 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*C9)*L3)*L4)*L5)*L6 + ((((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C8)*C9)*L1*L2*L3 + (((1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7)*C8 + (1024*I*np.power(pi, 10)*C1*C2*C4*C6 + 1024*I*np.power(pi, 10)*C1*C2*C4*C7 + 1024*I*np.power(pi, 10)*C1*C2*C4*C8)*C9)*L1*L2 + ((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7)*C8 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C7 + (1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C8)*C9)*L1*L2 + (((((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7)*C8 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C7 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C8)*C9)*L1 + (((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8)*C9)*L2)*L3 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7)*C8 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8)*C9)*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7)*C8 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C1*C2*C6*C7*C8 + (1024*I*np.power(pi, 10)*C1*C2*C6*C7 + 1024*I*np.power(pi, 10)*C1*C2*C6*C8)*C9)*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8)*C9)*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C8)*C9)*L1 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7*C8 + (1024*I*np.power(pi, 10)*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C6*C8)*C9)*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7*C8 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C8)*C9)*L1 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7*C8 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8)*C9)*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7*C8 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8)*C9)*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7*C8 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + ((1024*I*np.power(pi, 10)*C1*C2*C3 + 1024*I*np.power(pi, 10)*C1*C2*C4)*C8*C9*L1*L2*L3 + (1024*I*np.power(pi, 10)*C1*C2*C4*C8*C9*L1*L2 + (1024*I*np.power(pi, 10)*C2*C3*C4*C8*C9*L2 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4*C8*C9*L1)*L3)*L4 + ((1024*I*np.power(pi, 10)*C1*C2*C4 + 1024*I*np.power(pi, 10)*C1*C2*C5 + 1024*I*np.power(pi, 10)*C1*C2*C6)*C8*C9*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3)*C4 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C5 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8*C9*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8*C9*L3)*L4)*L5 + (1024*I*np.power(pi, 10)*C1*C2*C6*C8*C9*L1*L2 + ((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8*C9*L2)*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C8*C9*L2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8*C9*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C8*C9*L4 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8*C9*L3)*L5)*L6 + ((1024*I*np.power(pi, 10)*C1*C2*C6 + 1024*I*np.power(pi, 10)*C1*C2*C7)*C8*C9*L1*L2 + (((1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C6 + (1024*I*np.power(pi, 10)*C1*C2 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C3 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4)*C7)*C8*C9*L1 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C7)*C8*C9*L2)*L3 + (((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C6 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4*C7)*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2*C4*C6 + 1024*I*np.power(pi, 10)*C2*C4*C7)*C8*C9*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C7)*C8*C9*L3)*L4 + ((((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5)*C6 + ((1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C5 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C6)*C7)*C8*C9*L1 + ((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5 + 1024*I*np.power(pi, 10)*C2*C6)*C7)*C8*C9*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6)*C7)*C8*C9*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6 + (1024*I*np.power(pi, 10)*C4*C5 + 1024*I*np.power(pi, 10)*C4*C6)*C7)*C8*C9*L4)*L5 + (1024*I*np.power(pi, 10)*C2*C6*C7*C8*C9*L2 + 1024*I*np.power(pi, 10)*C4*C6*C7*C8*C9*L4 + (1024*I*np.power(pi, 10)*C1 + 1024*I*np.power(pi, 10)*C2)*C6*C7*C8*C9*L1 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6*C7*C8*C9*L3 + (1024*I*np.power(pi, 10)*C4 + 1024*I*np.power(pi, 10)*C5)*C6*C7*C8*C9*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((1024*I*np.power(pi, 10)*C2*C3*C4*C5 + 1024*I*np.power(pi, 10)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (1024*I*np.power(pi, 10)*C2*C3*C4*C6*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6*L1*L2*L3 + (1024*I*np.power(pi, 10)*C2*C4*C5*C6*L1*L2 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((1024*I*np.power(pi, 10)*C2*C3*C4*C6 + 1024*I*np.power(pi, 10)*C2*C3*C4*C7 + 1024*I*np.power(pi, 10)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C5*C6 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C7 + (1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8)*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8)*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C6*C7 + 1024*I*np.power(pi, 10)*C2*C4*C6*C8)*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C7 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8)*L1*L3)*L4 + (((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C7 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8)*L1*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C7 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8)*L1*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6*C7 + 1024*I*np.power(pi, 10)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (1024*I*np.power(pi, 10)*C2*C3*C4*C8*L1*L2*L3*L4 + ((1024*I*np.power(pi, 10)*C2*C3*C4 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C5 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C5 + 1024*I*np.power(pi, 10)*C2*C4*C6)*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6*C8*L1*L2*L3 + (1024*I*np.power(pi, 10)*C2*C4*C6*C8*L1*L2 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6*C8*L1*L3)*L4 + (1024*I*np.power(pi, 10)*C4*C5*C6*C8*L1*L4 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C6 + (1024*I*np.power(pi, 10)*C2*C3 + 1024*I*np.power(pi, 10)*C2*C4)*C7)*C8*L1*L2*L3 + ((1024*I*np.power(pi, 10)*C2*C4*C6 + 1024*I*np.power(pi, 10)*C2*C4*C7)*C8*L1*L2 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C6 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4*C7)*C8*L1*L3)*L4 + (((1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5)*C6 + (1024*I*np.power(pi, 10)*C2*C4 + 1024*I*np.power(pi, 10)*C2*C5 + 1024*I*np.power(pi, 10)*C2*C6)*C7)*C8*L1*L2 + (((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5)*C6 + ((1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3)*C4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C5 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6)*C7)*C8*L1*L3 + (1024*I*np.power(pi, 10)*C4*C5*C6 + (1024*I*np.power(pi, 10)*C4*C5 + 1024*I*np.power(pi, 10)*C4*C6)*C7)*C8*L1*L4)*L5 + (1024*I*np.power(pi, 10)*C2*C6*C7*C8*L1*L2 + 1024*I*np.power(pi, 10)*C4*C6*C7*C8*L1*L4 + (1024*I*np.power(pi, 10)*C2 + 1024*I*np.power(pi, 10)*C3 + 1024*I*np.power(pi, 10)*C4)*C6*C7*C8*L1*L3 + (1024*I*np.power(pi, 10)*C4 + 1024*I*np.power(pi, 10)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8)*L9)*np.power(freq, 10) + 512*((np.power(pi, 9)*C1*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 9)*C1*C2*C3*C4 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C5 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C5 + np.power(pi, 9)*C1*C2*C4*C6)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6)*L1 + (np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C6*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C6*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L2)*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C6 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C7 + (np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 9)*C1*C2*C4*C6 + np.power(pi, 9)*C1*C2*C4*C7 + np.power(pi, 9)*C1*C2*C4*C8)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C6 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C7 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C8)*L1 + (np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7 + np.power(pi, 9)*C2*C3*C4*C8)*L2)*L3)*L4 + (((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5)*C6 + (np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C7 + (np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C8)*L1*L2 + ((((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5)*C6 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C7 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C8)*L1 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8)*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5*C6 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C7 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C8)*L1 + (np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8)*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((np.power(pi, 9)*C1*C2*C6*C7 + np.power(pi, 9)*C1*C2*C6*C8)*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C7 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C8)*L1 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8)*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C7 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C8)*L1 + (np.power(pi, 9)*C2*C4*C6*C7 + np.power(pi, 9)*C2*C4*C6*C8)*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8)*L3)*L4 + ((((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C7 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C8)*L1 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8)*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8)*L3 + (np.power(pi, 9)*C4*C5*C6*C7 + np.power(pi, 9)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((np.power(pi, 9)*C1*C2*C3 + np.power(pi, 9)*C1*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 9)*C1*C2*C4*C8*L1*L2 + (np.power(pi, 9)*C2*C3*C4*C8*L2 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((np.power(pi, 9)*C1*C2*C4 + np.power(pi, 9)*C1*C2*C5 + np.power(pi, 9)*C1*C2*C6)*C8*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3)*C4 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C5 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6)*C8*L1 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6)*C8*L1 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8*L3)*L4)*L5 + (np.power(pi, 9)*C1*C2*C6*C8*L1*L2 + ((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6*C8*L1 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8*L2)*L3 + (np.power(pi, 9)*C2*C4*C6*C8*L2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6*C8*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C8*L4 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6*C8*L1 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((np.power(pi, 9)*C1*C2*C6 + np.power(pi, 9)*C1*C2*C7)*C8*L1*L2 + (((np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C6 + (np.power(pi, 9)*C1*C2 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C3 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4)*C7)*C8*L1 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8*L2)*L3 + (((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C6 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4*C7)*C8*L1 + (np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8*L3)*L4 + ((((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5)*C6 + ((np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C5 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C6)*C7)*C8*L1 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8*L3 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8*L4)*L5 + (np.power(pi, 9)*C2*C6*C7*C8*L2 + np.power(pi, 9)*C4*C6*C7*C8*L4 + (np.power(pi, 9)*C1 + np.power(pi, 9)*C2)*C6*C7*C8*L1 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8*L5)*L6)*L7)*L8)*L9*ZS + ((np.power(pi, 9)*C2*C3*C4*C5 + np.power(pi, 9)*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (np.power(pi, 9)*C2*C3*C4*C6*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C5*C6*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((np.power(pi, 9)*C2*C3*C4*C6 + np.power(pi, 9)*C2*C3*C4*C7 + np.power(pi, 9)*C2*C3*C4*C8)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5)*C6 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C7 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5*C6 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C7 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6*C7 + np.power(pi, 9)*C2*C4*C6*C8)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8)*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8)*L1*L3 + (np.power(pi, 9)*C4*C5*C6*C7 + np.power(pi, 9)*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (np.power(pi, 9)*C2*C3*C4*C8*L1*L2*L3*L4 + ((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C6*C8*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8*L1*L3)*L4 + (np.power(pi, 9)*C4*C5*C6*C8*L1*L4 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8*L1*L3 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8*L1*L4)*L5 + (np.power(pi, 9)*C2*C6*C7*C8*L1*L2 + np.power(pi, 9)*C4*C6*C7*C8*L1*L4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8*L1*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + ((np.power(pi, 9)*C2*C3*C4*C8 + np.power(pi, 9)*C2*C3*C4*C9)*L1*L2*L3*L4 + (((np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C8 + (np.power(pi, 9)*C2*C3*C4 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C5 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6)*C9)*L1*L2*L3 + (((np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C8 + (np.power(pi, 9)*C2*C4*C5 + np.power(pi, 9)*C2*C4*C6)*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + (((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C8 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6*C9)*L1*L2*L3 + ((np.power(pi, 9)*C2*C4*C6*C8 + np.power(pi, 9)*C2*C4*C6*C9)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C8 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6*C9)*L1*L3)*L4 + (((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C8 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6*C9)*L1*L3 + (np.power(pi, 9)*C4*C5*C6*C8 + np.power(pi, 9)*C4*C5*C6*C9)*L1*L4)*L5)*L6 + ((((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7)*C8 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C6 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C7 + (np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C8)*C9)*L1*L2*L3 + (((np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7)*C8 + (np.power(pi, 9)*C2*C4*C6 + np.power(pi, 9)*C2*C4*C7 + np.power(pi, 9)*C2*C4*C8)*C9)*L1*L2 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7)*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7)*C8 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5)*C6 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C7 + (np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C8)*C9)*L1*L2 + ((((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7)*C8 + (((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5)*C6 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C7 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C8)*C9)*L1*L3 + ((np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7)*C8 + (np.power(pi, 9)*C4*C5*C6 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C7 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C8)*C9)*L1*L4)*L5 + ((np.power(pi, 9)*C2*C6*C7*C8 + (np.power(pi, 9)*C2*C6*C7 + np.power(pi, 9)*C2*C6*C8)*C9)*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7*C8 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C7 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C8)*C9)*L1*L3 + (np.power(pi, 9)*C4*C6*C7*C8 + (np.power(pi, 9)*C4*C6*C7 + np.power(pi, 9)*C4*C6*C8)*C9)*L1*L4 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7*C8 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C7 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + ((np.power(pi, 9)*C2*C3 + np.power(pi, 9)*C2*C4)*C8*C9*L1*L2*L3 + (np.power(pi, 9)*C2*C4*C8*C9*L1*L2 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4*C8*C9*L1*L3)*L4 + ((np.power(pi, 9)*C2*C4 + np.power(pi, 9)*C2*C5 + np.power(pi, 9)*C2*C6)*C8*C9*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3)*C4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C5 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6)*C8*C9*L1*L3 + (np.power(pi, 9)*C4*C5 + np.power(pi, 9)*C4*C6)*C8*C9*L1*L4)*L5 + (np.power(pi, 9)*C2*C6*C8*C9*L1*L2 + np.power(pi, 9)*C4*C6*C8*C9*L1*L4 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6*C8*C9*L1*L3 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6*C8*C9*L1*L5)*L6 + (np.power(pi, 9)*C6*C7*C8*C9*L1*L6 + (np.power(pi, 9)*C2*C6 + np.power(pi, 9)*C2*C7)*C8*C9*L1*L2 + ((np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C6 + (np.power(pi, 9)*C2 + np.power(pi, 9)*C3 + np.power(pi, 9)*C4)*C7)*C8*C9*L1*L3 + (np.power(pi, 9)*C4*C6 + np.power(pi, 9)*C4*C7)*C8*C9*L1*L4 + ((np.power(pi, 9)*C4 + np.power(pi, 9)*C5)*C6 + (np.power(pi, 9)*C4 + np.power(pi, 9)*C5 + np.power(pi, 9)*C6)*C7)*C8*C9*L1*L5)*L7)*L8)*L9)*ZL)*np.power(freq, 9) + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C3*C4 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C5 - 256*I*np.power(pi, 8)*C1*C2*C4*C6)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C5 - 256*I*np.power(pi, 8)*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C6 - 256*I*np.power(pi, 8)*C1*C2*C4*C7 - 256*I*np.power(pi, 8)*C1*C2*C4*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C6 - 256*I*np.power(pi, 8)*C2*C3*C4*C7 - 256*I*np.power(pi, 8)*C2*C3*C4*C8)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5*C6 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C6*C7 - 256*I*np.power(pi, 8)*C1*C2*C6*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6*C7 - 256*I*np.power(pi, 8)*C2*C4*C6*C8)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8)*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8)*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8)*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6*C7 - 256*I*np.power(pi, 8)*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8*L1*L2*L3 + (-256*I*np.power(pi, 8)*C1*C2*C4*C8*L1*L2 + (-256*I*np.power(pi, 8)*C2*C3*C4*C8*L2 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8*L1)*L3)*L4 + ((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8*L3)*L4)*L5 + (-256*I*np.power(pi, 8)*C1*C2*C6*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*C8*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*C8*L4 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8*L3)*L5)*L6 + ((-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7)*C8*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7)*C8*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7)*C8*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7)*C8*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7)*C8*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7)*C8*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7)*C8*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7)*C8*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7)*C8*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7)*C8*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C7*C8*L2 - 256*I*np.power(pi, 8)*C4*C6*C7*C8*L4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7*C8*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7*C8*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + (((-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C3 - 256*I*np.power(pi, 8)*C1*C2*C4)*C9)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C1*C2*C4*C8 - 256*I*np.power(pi, 8)*C1*C2*C4*C9)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C8 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C3*C4*C8 - 256*I*np.power(pi, 8)*C2*C3*C4*C9)*L2)*L3)*L4 + (((-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C4 - 256*I*np.power(pi, 8)*C1*C2*C5 - 256*I*np.power(pi, 8)*C1*C2*C6)*C9)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C8 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3)*C4 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C5 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C8 + (-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*C9)*L2)*L3 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C8 + (-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*C9)*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C1*C2*C6*C8 - 256*I*np.power(pi, 8)*C1*C2*C6*C9)*L1*L2 + (((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C8 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C8 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*C9)*L2)*L3 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C8 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C4*C6*C8 - 256*I*np.power(pi, 8)*C2*C4*C6*C9)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C8 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*C9)*L3)*L4 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C8 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*C9)*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6*C8 - 256*I*np.power(pi, 8)*C4*C5*C6*C9)*L4)*L5)*L6 + (((-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7)*C8 + (-256*I*np.power(pi, 8)*C1*C2*C6 - 256*I*np.power(pi, 8)*C1*C2*C7 - 256*I*np.power(pi, 8)*C1*C2*C8)*C9)*L1*L2 + ((((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7)*C8 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C6 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C7 + (-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C8)*C9)*L1 + (((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7)*C8 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8)*C9)*L2)*L3 + ((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7)*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C8)*C9)*L1 + ((-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7)*C8 + (-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7 - 256*I*np.power(pi, 8)*C2*C4*C8)*C9)*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7)*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8)*C9)*L3)*L4 + (((((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7)*C8 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5)*C6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C7 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C8)*C9)*L1 + (((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7)*C8 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8)*C9)*L2 + ((((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7)*C8 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8)*C9)*L3 + ((-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7)*C8 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8)*C9)*L4)*L5 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C7 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C8)*C9)*L1 + (-256*I*np.power(pi, 8)*C2*C6*C7*C8 + (-256*I*np.power(pi, 8)*C2*C6*C7 - 256*I*np.power(pi, 8)*C2*C6*C8)*C9)*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8)*C9)*L3 + (-256*I*np.power(pi, 8)*C4*C6*C7*C8 + (-256*I*np.power(pi, 8)*C4*C6*C7 - 256*I*np.power(pi, 8)*C4*C6*C8)*C9)*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7*C8 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8)*C9)*L5)*L6)*L7 + (-256*I*np.power(pi, 8)*C1*C2*C8*C9*L1*L2 + ((-256*I*np.power(pi, 8)*C1*C2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C3 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8*C9*L2)*L3 + (-256*I*np.power(pi, 8)*C2*C4*C8*C9*L2 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8*C9*L3)*L4 + (((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C5 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8*C9*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8*C9*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C8*C9*L2 - 256*I*np.power(pi, 8)*C4*C6*C8*C9*L4 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8*C9*L5)*L6 + (-256*I*np.power(pi, 8)*C6*C7*C8*C9*L6 + ((-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C6 + (-256*I*np.power(pi, 8)*C1 - 256*I*np.power(pi, 8)*C2)*C7)*C8*C9*L1 + (-256*I*np.power(pi, 8)*C2*C6 - 256*I*np.power(pi, 8)*C2*C7)*C8*C9*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C7)*C8*C9*L3 + (-256*I*np.power(pi, 8)*C4*C6 - 256*I*np.power(pi, 8)*C4*C7)*C8*C9*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5 - 256*I*np.power(pi, 8)*C6)*C7)*C8*C9*L5)*L7)*L8)*L9)*ZL*ZS + (-256*I*np.power(pi, 8)*C2*C3*C4*L1*L2*L3*L4 + ((-256*I*np.power(pi, 8)*C2*C3*C4 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C5 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C2*C4*C5 - 256*I*np.power(pi, 8)*C2*C4*C6)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6*L1*L2*L3 + (-256*I*np.power(pi, 8)*C2*C4*C6*L1*L2 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6*L1*L3)*L4 + (-256*I*np.power(pi, 8)*C4*C5*C6*L1*L4 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C6 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C7 + (-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8)*L1*L2*L3 + ((-256*I*np.power(pi, 8)*C2*C4*C6 - 256*I*np.power(pi, 8)*C2*C4*C7 - 256*I*np.power(pi, 8)*C2*C4*C8)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8)*L1*L3)*L4 + (((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5)*C6 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C7 + (-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8)*L1*L2 + (((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5)*C6 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C7 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8)*L1*L3 + (-256*I*np.power(pi, 8)*C4*C5*C6 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C7 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8)*L1*L4)*L5 + ((-256*I*np.power(pi, 8)*C2*C6*C7 - 256*I*np.power(pi, 8)*C2*C6*C8)*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C7 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8)*L1*L3 + (-256*I*np.power(pi, 8)*C4*C6*C7 - 256*I*np.power(pi, 8)*C4*C6*C8)*L1*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C7 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((-256*I*np.power(pi, 8)*C2*C3 - 256*I*np.power(pi, 8)*C2*C4)*C8*L1*L2*L3 + (-256*I*np.power(pi, 8)*C2*C4*C8*L1*L2 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4*C8*L1*L3)*L4 + ((-256*I*np.power(pi, 8)*C2*C4 - 256*I*np.power(pi, 8)*C2*C5 - 256*I*np.power(pi, 8)*C2*C6)*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3)*C4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C5 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6)*C8*L1*L3 + (-256*I*np.power(pi, 8)*C4*C5 - 256*I*np.power(pi, 8)*C4*C6)*C8*L1*L4)*L5 + (-256*I*np.power(pi, 8)*C2*C6*C8*L1*L2 - 256*I*np.power(pi, 8)*C4*C6*C8*L1*L4 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6*C8*L1*L3 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6*C8*L1*L5)*L6 + (-256*I*np.power(pi, 8)*C6*C7*C8*L1*L6 + (-256*I*np.power(pi, 8)*C2*C6 - 256*I*np.power(pi, 8)*C2*C7)*C8*L1*L2 + ((-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C6 + (-256*I*np.power(pi, 8)*C2 - 256*I*np.power(pi, 8)*C3 - 256*I*np.power(pi, 8)*C4)*C7)*C8*L1*L3 + (-256*I*np.power(pi, 8)*C4*C6 - 256*I*np.power(pi, 8)*C4*C7)*C8*L1*L4 + ((-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5)*C6 + (-256*I*np.power(pi, 8)*C4 - 256*I*np.power(pi, 8)*C5 - 256*I*np.power(pi, 8)*C6)*C7)*C8*L1*L5)*L7)*L8)*L9)*np.power(freq, 8) - 128*(((np.power(pi, 7)*C1*C2*C3 + np.power(pi, 7)*C1*C2*C4)*L1*L2*L3 + (np.power(pi, 7)*C1*C2*C4*L1*L2 + (np.power(pi, 7)*C2*C3*C4*L2 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4*L1)*L3)*L4 + ((np.power(pi, 7)*C1*C2*C4 + np.power(pi, 7)*C1*C2*C5 + np.power(pi, 7)*C1*C2*C6)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3)*C4 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C5 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6)*L1 + (np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6)*L1 + (np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L3)*L4)*L5 + (np.power(pi, 7)*C1*C2*C6*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L2)*L3 + (np.power(pi, 7)*C2*C4*C6*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L4 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L3)*L5)*L6 + ((np.power(pi, 7)*C1*C2*C6 + np.power(pi, 7)*C1*C2*C7 + np.power(pi, 7)*C1*C2*C8)*L1*L2 + (((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C6 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C7 + (np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C8)*L1 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8)*L2)*L3 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C6 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C7 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C8)*L1 + (np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7 + np.power(pi, 7)*C2*C4*C8)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8)*L3)*L4 + ((((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5)*C6 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C7 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C8)*L1 + ((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8)*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8)*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8)*L4)*L5 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C7 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C8)*L1 + (np.power(pi, 7)*C2*C6*C7 + np.power(pi, 7)*C2*C6*C8)*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8)*L3 + (np.power(pi, 7)*C4*C6*C7 + np.power(pi, 7)*C4*C6*C8)*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8)*L5)*L6)*L7 + (np.power(pi, 7)*C1*C2*C8*L1*L2 + ((np.power(pi, 7)*C1*C2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C3 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4)*C8*L1 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8*L2)*L3 + (np.power(pi, 7)*C2*C4*C8*L2 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4*C8*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8*L3)*L4 + (((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C5 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6)*C8*L1 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8*L3 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8*L4)*L5 + (np.power(pi, 7)*C2*C6*C8*L2 + np.power(pi, 7)*C4*C6*C8*L4 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6*C8*L1 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8*L5)*L6 + (np.power(pi, 7)*C6*C7*C8*L6 + ((np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C6 + (np.power(pi, 7)*C1 + np.power(pi, 7)*C2)*C7)*C8*L1 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8*L3 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8*L5)*L7)*L8)*L9*ZS + (np.power(pi, 7)*C2*C3*C4*L1*L2*L3*L4 + ((np.power(pi, 7)*C2*C3*C4 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C5 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C5 + np.power(pi, 7)*C2*C4*C6)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6)*L1*L3)*L4)*L5 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C6*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6*L1*L3)*L4 + (np.power(pi, 7)*C4*C5*C6*L1*L4 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6*L1*L3)*L5)*L6 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C6 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C7 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C6 + np.power(pi, 7)*C2*C4*C7 + np.power(pi, 7)*C2*C4*C8)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5)*C6 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C7 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5)*C6 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C7 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8)*L1*L3 + (np.power(pi, 7)*C4*C5*C6 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C7 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8)*L1*L4)*L5 + ((np.power(pi, 7)*C2*C6*C7 + np.power(pi, 7)*C2*C6*C8)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8)*L1*L3 + (np.power(pi, 7)*C4*C6*C7 + np.power(pi, 7)*C4*C6*C8)*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8)*L1*L5)*L6)*L7 + ((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8*L1*L2*L3 + (np.power(pi, 7)*C2*C4*C8*L1*L2 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8*L1*L3)*L4 + ((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8*L1*L3 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8*L1*L4)*L5 + (np.power(pi, 7)*C2*C6*C8*L1*L2 + np.power(pi, 7)*C4*C6*C8*L1*L4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8*L1*L5)*L6 + (np.power(pi, 7)*C6*C7*C8*L1*L6 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8*L1*L3 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8*L1*L5)*L7)*L8 + (((np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C8 + (np.power(pi, 7)*C2*C3 + np.power(pi, 7)*C2*C4)*C9)*L1*L2*L3 + ((np.power(pi, 7)*C2*C4*C8 + np.power(pi, 7)*C2*C4*C9)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C8 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4*C9)*L1*L3)*L4 + (((np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C8 + (np.power(pi, 7)*C2*C4 + np.power(pi, 7)*C2*C5 + np.power(pi, 7)*C2*C6)*C9)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C8 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3)*C4 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C5 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6)*C9)*L1*L3 + ((np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C8 + (np.power(pi, 7)*C4*C5 + np.power(pi, 7)*C4*C6)*C9)*L1*L4)*L5 + ((np.power(pi, 7)*C2*C6*C8 + np.power(pi, 7)*C2*C6*C9)*L1*L2 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C8 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6*C9)*L1*L3 + (np.power(pi, 7)*C4*C6*C8 + np.power(pi, 7)*C4*C6*C9)*L1*L4 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C8 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6*C9)*L1*L5)*L6 + (((np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7)*C8 + (np.power(pi, 7)*C2*C6 + np.power(pi, 7)*C2*C7 + np.power(pi, 7)*C2*C8)*C9)*L1*L2 + (((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7)*C8 + ((np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C7 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C8)*C9)*L1*L3 + ((np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7)*C8 + (np.power(pi, 7)*C4*C6 + np.power(pi, 7)*C4*C7 + np.power(pi, 7)*C4*C8)*C9)*L1*L4 + (((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7)*C8 + ((np.power(pi, 7)*C4 + np.power(pi, 7)*C5)*C6 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C7 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C8)*C9)*L1*L5 + (np.power(pi, 7)*C6*C7*C8 + (np.power(pi, 7)*C6*C7 + np.power(pi, 7)*C6*C8)*C9)*L1*L6)*L7 + (np.power(pi, 7)*C2*C8*C9*L1*L2 + np.power(pi, 7)*C4*C8*C9*L1*L4 + np.power(pi, 7)*C6*C8*C9*L1*L6 + (np.power(pi, 7)*C2 + np.power(pi, 7)*C3 + np.power(pi, 7)*C4)*C8*C9*L1*L3 + (np.power(pi, 7)*C4 + np.power(pi, 7)*C5 + np.power(pi, 7)*C6)*C8*C9*L1*L5 + (np.power(pi, 7)*C6 + np.power(pi, 7)*C7)*C8*C9*L1*L7)*L8)*L9)*ZL)*np.power(freq, 7) + (((64*I*np.power(pi, 6)*C1*C2*C3 + 64*I*np.power(pi, 6)*C1*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C1*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2*C3*C4*L2 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4*L1)*L3)*L4 + ((64*I*np.power(pi, 6)*C1*C2*C4 + 64*I*np.power(pi, 6)*C1*C2*C5 + 64*I*np.power(pi, 6)*C1*C2*C6)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3)*C4 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C5 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6)*L1 + (64*I*np.power(pi, 6)*C2*C3*C4 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C5 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6)*L1 + (64*I*np.power(pi, 6)*C2*C4*C5 + 64*I*np.power(pi, 6)*C2*C4*C6)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6)*L3)*L4)*L5 + (64*I*np.power(pi, 6)*C1*C2*C6*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C6*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6*L3)*L4 + (64*I*np.power(pi, 6)*C4*C5*C6*L4 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6*L3)*L5)*L6 + ((64*I*np.power(pi, 6)*C1*C2*C6 + 64*I*np.power(pi, 6)*C1*C2*C7 + 64*I*np.power(pi, 6)*C1*C2*C8)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C6 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C7 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C6 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C7 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8)*L1 + (64*I*np.power(pi, 6)*C2*C4*C6 + 64*I*np.power(pi, 6)*C2*C4*C7 + 64*I*np.power(pi, 6)*C2*C4*C8)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5)*C6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C7 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5)*C6 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C7 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5)*C6 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C7 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8)*L3 + (64*I*np.power(pi, 6)*C4*C5*C6 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C7 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8)*L4)*L5 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8)*L1 + (64*I*np.power(pi, 6)*C2*C6*C7 + 64*I*np.power(pi, 6)*C2*C6*C8)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8)*L3 + (64*I*np.power(pi, 6)*C4*C6*C7 + 64*I*np.power(pi, 6)*C4*C6*C8)*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8)*L5)*L6)*L7 + (64*I*np.power(pi, 6)*C1*C2*C8*L1*L2 + ((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8*L1 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8*L2)*L3 + (64*I*np.power(pi, 6)*C2*C4*C8*L2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8*L3)*L4 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8*L1 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*C8*L2 + 64*I*np.power(pi, 6)*C4*C6*C8*L4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8*L5)*L6 + (64*I*np.power(pi, 6)*C6*C7*C8*L6 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7)*C8*L1 + (64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7)*C8*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7)*C8*L3 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7)*C8*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7)*C8*L5)*L7)*L8 + ((64*I*np.power(pi, 6)*C1*C2*C8 + 64*I*np.power(pi, 6)*C1*C2*C9)*L1*L2 + (((64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C8 + (64*I*np.power(pi, 6)*C1*C2 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C3 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C8 + (64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*C9)*L2)*L3 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C8 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4*C9)*L1 + (64*I*np.power(pi, 6)*C2*C4*C8 + 64*I*np.power(pi, 6)*C2*C4*C9)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C8 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*C9)*L3)*L4 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C8 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C4 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C5 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C8 + (64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*C9)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C8 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*C9)*L3 + ((64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C8 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*C9)*L4)*L5 + (((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C8 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6*C9)*L1 + (64*I*np.power(pi, 6)*C2*C6*C8 + 64*I*np.power(pi, 6)*C2*C6*C9)*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C8 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*C9)*L3 + (64*I*np.power(pi, 6)*C4*C6*C8 + 64*I*np.power(pi, 6)*C4*C6*C9)*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C8 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*C9)*L5)*L6 + ((((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7)*C8 + ((64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C7 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C8)*C9)*L1 + ((64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7)*C8 + (64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7 + 64*I*np.power(pi, 6)*C2*C8)*C9)*L2 + (((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7)*C8 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8)*C9)*L3 + ((64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7)*C8 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7 + 64*I*np.power(pi, 6)*C4*C8)*C9)*L4 + (((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7)*C8 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8)*C9)*L5 + (64*I*np.power(pi, 6)*C6*C7*C8 + (64*I*np.power(pi, 6)*C6*C7 + 64*I*np.power(pi, 6)*C6*C8)*C9)*L6)*L7 + (64*I*np.power(pi, 6)*C2*C8*C9*L2 + 64*I*np.power(pi, 6)*C4*C8*C9*L4 + 64*I*np.power(pi, 6)*C6*C8*C9*L6 + (64*I*np.power(pi, 6)*C1 + 64*I*np.power(pi, 6)*C2)*C8*C9*L1 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8*C9*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8*C9*L5 + (64*I*np.power(pi, 6)*C6 + 64*I*np.power(pi, 6)*C7)*C8*C9*L7)*L8)*L9)*ZL*ZS + ((64*I*np.power(pi, 6)*C2*C3 + 64*I*np.power(pi, 6)*C2*C4)*L1*L2*L3 + (64*I*np.power(pi, 6)*C2*C4*L1*L2 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4*L1*L3)*L4 + ((64*I*np.power(pi, 6)*C2*C4 + 64*I*np.power(pi, 6)*C2*C5 + 64*I*np.power(pi, 6)*C2*C6)*L1*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3)*C4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C5 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6)*L1*L3 + (64*I*np.power(pi, 6)*C4*C5 + 64*I*np.power(pi, 6)*C4*C6)*L1*L4)*L5 + (64*I*np.power(pi, 6)*C2*C6*L1*L2 + 64*I*np.power(pi, 6)*C4*C6*L1*L4 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6*L1*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6*L1*L5)*L6 + ((64*I*np.power(pi, 6)*C2*C6 + 64*I*np.power(pi, 6)*C2*C7 + 64*I*np.power(pi, 6)*C2*C8)*L1*L2 + ((64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C7 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8)*L1*L3 + (64*I*np.power(pi, 6)*C4*C6 + 64*I*np.power(pi, 6)*C4*C7 + 64*I*np.power(pi, 6)*C4*C8)*L1*L4 + ((64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5)*C6 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C7 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8)*L1*L5 + (64*I*np.power(pi, 6)*C6*C7 + 64*I*np.power(pi, 6)*C6*C8)*L1*L6)*L7 + (64*I*np.power(pi, 6)*C2*C8*L1*L2 + 64*I*np.power(pi, 6)*C4*C8*L1*L4 + 64*I*np.power(pi, 6)*C6*C8*L1*L6 + (64*I*np.power(pi, 6)*C2 + 64*I*np.power(pi, 6)*C3 + 64*I*np.power(pi, 6)*C4)*C8*L1*L3 + (64*I*np.power(pi, 6)*C4 + 64*I*np.power(pi, 6)*C5 + 64*I*np.power(pi, 6)*C6)*C8*L1*L5 + (64*I*np.power(pi, 6)*C6 + 64*I*np.power(pi, 6)*C7)*C8*L1*L7)*L8)*L9)*np.power(freq, 6) + 32*((np.power(pi, 5)*C1*C2*L1*L2 + ((np.power(pi, 5)*C1*C2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C3 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4)*L1 + (np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L2)*L3 + (np.power(pi, 5)*C2*C4*L2 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L3)*L4 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C5 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6)*L1 + (np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L4)*L5 + (np.power(pi, 5)*C2*C6*L2 + np.power(pi, 5)*C4*C6*L4 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L5)*L6 + (((np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C6 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C7 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C8)*L1 + (np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7 + np.power(pi, 5)*C2*C8)*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8)*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7 + np.power(pi, 5)*C4*C8)*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8)*L5 + (np.power(pi, 5)*C6*C7 + np.power(pi, 5)*C6*C8)*L6)*L7 + (np.power(pi, 5)*C2*C8*L2 + np.power(pi, 5)*C4*C8*L4 + np.power(pi, 5)*C6*C8*L6 + (np.power(pi, 5)*C1 + np.power(pi, 5)*C2)*C8*L1 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8*L5 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8*L7)*L8)*L9*ZS + ((np.power(pi, 5)*C2*C3 + np.power(pi, 5)*C2*C4)*L1*L2*L3 + (np.power(pi, 5)*C2*C4*L1*L2 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4*L1*L3)*L4 + ((np.power(pi, 5)*C2*C4 + np.power(pi, 5)*C2*C5 + np.power(pi, 5)*C2*C6)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3)*C4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C5 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6)*L1*L3 + (np.power(pi, 5)*C4*C5 + np.power(pi, 5)*C4*C6)*L1*L4)*L5 + (np.power(pi, 5)*C2*C6*L1*L2 + np.power(pi, 5)*C4*C6*L1*L4 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6*L1*L5)*L6 + ((np.power(pi, 5)*C2*C6 + np.power(pi, 5)*C2*C7 + np.power(pi, 5)*C2*C8)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C7 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8)*L1*L3 + (np.power(pi, 5)*C4*C6 + np.power(pi, 5)*C4*C7 + np.power(pi, 5)*C4*C8)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5)*C6 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C7 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8)*L1*L5 + (np.power(pi, 5)*C6*C7 + np.power(pi, 5)*C6*C8)*L1*L6)*L7 + (np.power(pi, 5)*C2*C8*L1*L2 + np.power(pi, 5)*C4*C8*L1*L4 + np.power(pi, 5)*C6*C8*L1*L6 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8*L1*L3 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8*L1*L5 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8*L1*L7)*L8 + (np.power(pi, 5)*C8*C9*L1*L8 + (np.power(pi, 5)*C2*C8 + np.power(pi, 5)*C2*C9)*L1*L2 + ((np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C8 + (np.power(pi, 5)*C2 + np.power(pi, 5)*C3 + np.power(pi, 5)*C4)*C9)*L1*L3 + (np.power(pi, 5)*C4*C8 + np.power(pi, 5)*C4*C9)*L1*L4 + ((np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C8 + (np.power(pi, 5)*C4 + np.power(pi, 5)*C5 + np.power(pi, 5)*C6)*C9)*L1*L5 + (np.power(pi, 5)*C6*C8 + np.power(pi, 5)*C6*C9)*L1*L6 + ((np.power(pi, 5)*C6 + np.power(pi, 5)*C7)*C8 + (np.power(pi, 5)*C6 + np.power(pi, 5)*C7 + np.power(pi, 5)*C8)*C9)*L1*L7)*L9)*ZL)*np.power(freq, 5) + ((-16*I*np.power(pi, 4)*C1*C2*L1*L2 + ((-16*I*np.power(pi, 4)*C1*C2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C3 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4)*L1 + (-16*I*np.power(pi, 4)*C2*C3 - 16*I*np.power(pi, 4)*C2*C4)*L2)*L3 + (-16*I*np.power(pi, 4)*C2*C4*L2 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4*L3)*L4 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C5 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6)*L1 + (-16*I*np.power(pi, 4)*C2*C4 - 16*I*np.power(pi, 4)*C2*C5 - 16*I*np.power(pi, 4)*C2*C6)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3)*C4 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C5 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6)*L3 + (-16*I*np.power(pi, 4)*C4*C5 - 16*I*np.power(pi, 4)*C4*C6)*L4)*L5 + (-16*I*np.power(pi, 4)*C2*C6*L2 - 16*I*np.power(pi, 4)*C4*C6*L4 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6*L5)*L6 + (((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C7 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8)*L1 + (-16*I*np.power(pi, 4)*C2*C6 - 16*I*np.power(pi, 4)*C2*C7 - 16*I*np.power(pi, 4)*C2*C8)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C6 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C7 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8)*L3 + (-16*I*np.power(pi, 4)*C4*C6 - 16*I*np.power(pi, 4)*C4*C7 - 16*I*np.power(pi, 4)*C4*C8)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5)*C6 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C7 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8)*L5 + (-16*I*np.power(pi, 4)*C6*C7 - 16*I*np.power(pi, 4)*C6*C8)*L6)*L7 + (-16*I*np.power(pi, 4)*C2*C8*L2 - 16*I*np.power(pi, 4)*C4*C8*L4 - 16*I*np.power(pi, 4)*C6*C8*L6 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8*L1 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8*L5 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7)*C8*L7)*L8 + (-16*I*np.power(pi, 4)*C8*C9*L8 + ((-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C8 + (-16*I*np.power(pi, 4)*C1 - 16*I*np.power(pi, 4)*C2)*C9)*L1 + (-16*I*np.power(pi, 4)*C2*C8 - 16*I*np.power(pi, 4)*C2*C9)*L2 + ((-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C8 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*C9)*L3 + (-16*I*np.power(pi, 4)*C4*C8 - 16*I*np.power(pi, 4)*C4*C9)*L4 + ((-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C8 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*C9)*L5 + (-16*I*np.power(pi, 4)*C6*C8 - 16*I*np.power(pi, 4)*C6*C9)*L6 + ((-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7)*C8 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7 - 16*I*np.power(pi, 4)*C8)*C9)*L7)*L9)*ZL*ZS + (-16*I*np.power(pi, 4)*C2*L1*L2 - 16*I*np.power(pi, 4)*C4*L1*L4 - 16*I*np.power(pi, 4)*C6*L1*L6 - 16*I*np.power(pi, 4)*C8*L1*L8 + (-16*I*np.power(pi, 4)*C2 - 16*I*np.power(pi, 4)*C3 - 16*I*np.power(pi, 4)*C4)*L1*L3 + (-16*I*np.power(pi, 4)*C4 - 16*I*np.power(pi, 4)*C5 - 16*I*np.power(pi, 4)*C6)*L1*L5 + (-16*I*np.power(pi, 4)*C6 - 16*I*np.power(pi, 4)*C7 - 16*I*np.power(pi, 4)*C8)*L1*L7)*L9)*np.power(freq, 4) - 8*((np.power(pi, 3)*C2*L2 + np.power(pi, 3)*C4*L4 + np.power(pi, 3)*C6*L6 + np.power(pi, 3)*C8*L8 + (np.power(pi, 3)*C1 + np.power(pi, 3)*C2)*L1 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7 + np.power(pi, 3)*C8)*L7)*L9*ZS + (np.power(pi, 3)*C2*L1*L2 + np.power(pi, 3)*C4*L1*L4 + np.power(pi, 3)*C6*L1*L6 + np.power(pi, 3)*C8*L1*L8 + (np.power(pi, 3)*C2 + np.power(pi, 3)*C3 + np.power(pi, 3)*C4)*L1*L3 + (np.power(pi, 3)*C4 + np.power(pi, 3)*C5 + np.power(pi, 3)*C6)*L1*L5 + (np.power(pi, 3)*C6 + np.power(pi, 3)*C7 + np.power(pi, 3)*C8)*L1*L7 + (np.power(pi, 3)*C8 + np.power(pi, 3)*C9)*L1*L9)*ZL)*np.power(freq, 3) + (4*I*np.power(pi, 2)*L1*L9 + (4*I*np.power(pi, 2)*C2*L2 + 4*I*np.power(pi, 2)*C4*L4 + 4*I*np.power(pi, 2)*C6*L6 + 4*I*np.power(pi, 2)*C8*L8 + (4*I*np.power(pi, 2)*C1 + 4*I*np.power(pi, 2)*C2)*L1 + (4*I*np.power(pi, 2)*C2 + 4*I*np.power(pi, 2)*C3 + 4*I*np.power(pi, 2)*C4)*L3 + (4*I*np.power(pi, 2)*C4 + 4*I*np.power(pi, 2)*C5 + 4*I*np.power(pi, 2)*C6)*L5 + (4*I*np.power(pi, 2)*C6 + 4*I*np.power(pi, 2)*C7 + 4*I*np.power(pi, 2)*C8)*L7 + (4*I*np.power(pi, 2)*C8 + 4*I*np.power(pi, 2)*C9)*L9)*ZL*ZS)*np.power(freq, 2) - I*ZL*ZS + 2*(pi*L1*ZL + pi*L9*ZS)*freq)*np.sqrt(ZL*ZS))
                    elif(network_type['N'] == 10):
                        L1 = comp_val['L1']
                        C1 = comp_val['C1']
                        L2 = comp_val['L2']
                        C2 = comp_val['C2']
                        L3 = comp_val['L3']
                        C3 = comp_val['C3']
                        L4 = comp_val['L4']
                        C4 = comp_val['C4']
                        L5 = comp_val['L5']
                        C5 = comp_val['C5']
                        L6 = comp_val['L6']
                        C6 = comp_val['C6']
                        L7 = comp_val['L7']
                        C7 = comp_val['C7']
                        L8 = comp_val['L8']
                        C8 = comp_val['C8']
                        L9 = comp_val['L9']
                        C9 = comp_val['C9']
                        L10 = comp_val['L10']
                        C10 = comp_val['C10']
                        S11 = -(1048576*pi**20*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZS*freq**20 + (-524288*I*pi**19*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS + 524288*I*pi**19*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9)*freq**19 + 262144*(pi**18*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL - (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8*L1*L10*L2*L3*L4*L5*L6*L7*L8 + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + pi**18*C1*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C8*C9*L1*L10*L2*L3*L4*L5*L6 + ((pi**18*C1*C10*C2*C3*C4*C5*C6 + (pi**18*C1*C10*C2*C3*C4*C5 + pi**18*C1*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L10*L2*L3*L4*L5 + (pi**18*C1*C10*C2*C3*C4*C6*C7*C8*C9*L1*L10*L2*L3*L4 + ((pi**18*C1*C10*C2*C3*C4 + (pi**18*C1*C10*C2*C3 + pi**18*C1*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L10*L2*L3 + (pi**18*C1*C10*C2*C4*C5*C6*C7*C8*C9*L1*L10*L2 + ((pi**18*C1*C10*C2 + (pi**18*C1*C10 + pi**18*C10*C2)*C3)*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**18*C10*C2*C3*C4*C5*C6*C7*C8*C9*L10 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9)*L1)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**18 + (-131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8*L1*L10*L2*L3*L4*L5*L6*L7*L8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5 + 131072*I*pi**17*C1*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (131072*I*pi**17*C1*C10*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((131072*I*pi**17*C1*C10*C2*C3*C4 + (131072*I*pi**17*C1*C10*C2*C3 + 131072*I*pi**17*C1*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (131072*I*pi**17*C1*C10*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8*C9*L2 + (131072*I*pi**17*C1*C10*C2 + (131072*I*pi**17*C1*C10 + 131072*I*pi**17*C10*C2)*C3)*C4*C5*C6*C7*C8*C9*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8 + (-131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7 - 131072*I*pi**17*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + (-131072*I*pi**17*C10*C2*C3*C4*C5*C6*C8*C9*L1*L10*L2*L3*L4*L5*L6 + ((-131072*I*pi**17*C10*C2*C3*C4*C5*C6 + (-131072*I*pi**17*C10*C2*C3*C4*C5 - 131072*I*pi**17*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L10*L2*L3*L4*L5 + (-131072*I*pi**17*C10*C2*C3*C4*C6*C7*C8*C9*L1*L10*L2*L3*L4 + ((-131072*I*pi**17*C10*C2*C3*C4 + (-131072*I*pi**17*C10*C2*C3 - 131072*I*pi**17*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L10*L2*L3 + (-131072*I*pi**17*C10*C2*C4*C5*C6*C7*C8*C9*L1*L10*L2 + ((-131072*I*pi**17*C10*C2 - 131072*I*pi**17*C10*C3)*C4*C5*C6*C7*C8*C9*L1*L10 + (-131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8 - 131072*I*pi**17*C2*C3*C4*C5*C6*C7*C8*C9)*L1*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**17 - 65536*((pi**16*C10*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**16*C10*C2*C3*C4*C5*C6*C7 + pi**16*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (pi**16*C10*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((pi**16*C10*C2*C3*C4*C5*C6 + (pi**16*C10*C2*C3*C4*C5 + pi**16*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (pi**16*C10*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((pi**16*C10*C2*C3*C4 + (pi**16*C10*C2*C3 + pi**16*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (pi**16*C10*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (pi**16*C10*C2 + pi**16*C10*C3)*C4*C5*C6*C7*C8*C9*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL - ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + pi**16*C1*C10*C2*C3*C4*C5*C6*C8)*L1*L10*L2*L3*L4*L5*L6*L7 + (pi**16*C1*C10*C2*C3*C4*C5*C6*C8*L1*L10*L2*L3*L4*L5*L6 + ((pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8*L1*L10*L2*L3*L4*L5 + (pi**16*C1*C10*C2*C3*C4*C6*C7*C8*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C5*C6*C7*C8*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C8*L1 + pi**16*C10*C2*C3*C4*C5*C6*C7*C8*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C8 + pi**16*C1*C10*C2*C3*C4*C5*C6*C9)*L1*L10*L2*L3*L4*L5*L6 + (((pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C8)*C9)*L1*L10*L2*L3*L4*L5 + ((pi**16*C1*C10*C2*C3*C4*C6*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C6*C7 + pi**16*C1*C10*C2*C3*C4*C6*C8)*C9)*L1*L10*L2*L3*L4 + (((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C4*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C4*C5*C6*C7 + pi**16*C1*C10*C2*C4*C5*C6*C8)*C9)*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C8)*C9)*L1*L10 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C6*C7)*C8 + (pi**16*C1*C2*C3*C4*C5*C6*C7 + pi**16*C1*C2*C3*C4*C5*C6*C8)*C9)*L1 + (pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**16*C10*C2*C3*C4*C5*C6*C7 + pi**16*C10*C2*C3*C4*C5*C6*C8)*C9)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C8*C9*L1*L10*L2*L3*L4*L5 + (pi**16*C1*C10*C2*C3*C4*C6*C8*C9*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C8*C9*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C5*C6*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C8*C9*L1*L10 + (pi**16*C10*C2*C3*C4*C5*C6*C8*C9*L10 + (pi**16*C1*C10*C2*C3*C4*C5*C6*C8 + pi**16*C1*C2*C3*C4*C5*C6*C8*C9)*L1)*L2)*L3)*L4)*L5)*L6 + ((pi**16*C1*C10*C2*C3*C4*C6 + pi**16*C1*C10*C2*C3*C4*C7)*C8*C9*L1*L10*L2*L3*L4 + (((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C6)*C7)*C8*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C4*C5*C6 + (pi**16*C1*C10*C2*C4*C5 + pi**16*C1*C10*C2*C4*C6)*C7)*C8*C9*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C6)*C7)*C8*C9*L1*L10 + ((pi**16*C10*C2*C3*C4*C5*C6 + (pi**16*C10*C2*C3*C4*C5 + pi**16*C10*C2*C3*C4*C6)*C7)*C8*C9*L10 + ((pi**16*C1*C2*C3*C4*C5*C6 + (pi**16*C1*C2*C3*C4*C5 + pi**16*C1*C2*C3*C4*C6)*C7)*C8*C9 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8)*L1)*L2)*L3)*L4)*L5 + ((pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C6*C7*C8*C9*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C6*C7*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C6*C7*C8*C9*L1*L10 + (pi**16*C10*C2*C3*C4*C6*C7*C8*C9*L10 + (pi**16*C1*C10*C2*C3*C4*C6*C7*C8 + pi**16*C1*C2*C3*C4*C6*C7*C8*C9)*L1)*L2)*L3)*L4 + ((pi**16*C1*C10*C2*C4 + pi**16*C1*C10*C2*C5)*C6*C7*C8*C9*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3 + (pi**16*C1*C10 + pi**16*C10*C2)*C4)*C5)*C6*C7*C8*C9*L1*L10 + ((pi**16*C10*C2*C3*C4 + (pi**16*C10*C2*C3 + pi**16*C10*C2*C4)*C5)*C6*C7*C8*C9*L10 + ((pi**16*C1*C2*C3*C4 + (pi**16*C1*C2*C3 + pi**16*C1*C2*C4)*C5)*C6*C7*C8*C9 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8)*L1)*L2)*L3 + ((pi**16*C1*C10 + pi**16*C10*C2)*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**16*C10*C2*C4*C5*C6*C7*C8*C9*L10 + (pi**16*C1*C10*C2*C4*C5*C6*C7*C8 + pi**16*C1*C2*C4*C5*C6*C7*C8*C9)*L1)*L2 + ((pi**16*C10*C2 + pi**16*C10*C3)*C4*C5*C6*C7*C8*C9*L10 + ((pi**16*C1*C2 + (pi**16*C1 + pi**16*C2)*C3)*C4*C5*C6*C7*C8*C9 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8)*L1 + (pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + pi**16*C2*C3*C4*C5*C6*C7*C8*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**16 + ((32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 + 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8)*L1*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7*C8*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7*C8*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7)*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7*C8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7 - 32768*I*pi**15*C1*C10*C2*C4*C5*C6*C8)*C9)*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7*C8 + ((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C8*C9*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8*C9*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C8*C9*L1)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C4*C5 - 32768*I*pi**15*C1*C10*C2*C4*C6)*C7)*C8*C9*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6 + ((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C6)*C7)*C8*C9*L1 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8*C9*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C6*C7*C8*C9*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8*C9*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C6*C7*C8*C9*L1)*L3)*L4 + ((-32768*I*pi**15*C1*C10*C2*C4 - 32768*I*pi**15*C1*C10*C2*C5)*C6*C7*C8*C9*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C4)*C5)*C6*C7*C8*C9*L1 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8*C9*L2)*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8*C9*L2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C4*C5*C6*C7*C8*C9*L1 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8*C9*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8*L1*L10*L2*L3*L4*L5*L6 + ((32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (32768*I*pi**15*C10*C2*C3*C4*C5 + 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8*L1*L10*L2*L3*L4*L5 + (32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8*L1*L10*L2*L3*L4 + ((32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8*L1*L10*L2*L3 + (32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8*L1*L10*L2 + (32768*I*pi**15*C2*C3*C4*C5*C6*C7*C8*L1*L2 + (32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8*L1*L10)*L3)*L4)*L5)*L6)*L7)*L8 + ((32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8 + 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C9)*L1*L10*L2*L3*L4*L5*L6 + (((32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (32768*I*pi**15*C10*C2*C3*C4*C5 + 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8 + (32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (32768*I*pi**15*C10*C2*C3*C4*C5 + 32768*I*pi**15*C10*C2*C3*C4*C6)*C7 + (32768*I*pi**15*C10*C2*C3*C4*C5 + 32768*I*pi**15*C10*C2*C3*C4*C6)*C8)*C9)*L1*L10*L2*L3*L4*L5 + ((32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8 + (32768*I*pi**15*C10*C2*C3*C4*C6*C7 + 32768*I*pi**15*C10*C2*C3*C4*C6*C8)*C9)*L1*L10*L2*L3*L4 + (((32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8 + ((32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7 + (32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L10*L2*L3 + ((32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8 + (32768*I*pi**15*C10*C2*C4*C5*C6*C7 + 32768*I*pi**15*C10*C2*C4*C5*C6*C8)*C9)*L1*L10*L2 + (((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8 + ((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6*C7 + (32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6*C8)*C9)*L1*L10 + (32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 + (32768*I*pi**15*C10*C2*C3*C4*C5*C6 + 32768*I*pi**15*C2*C3*C4*C5*C6*C7)*C8 + (32768*I*pi**15*C2*C3*C4*C5*C6*C7 + 32768*I*pi**15*C2*C3*C4*C5*C6*C8)*C9)*L1*L2)*L3)*L4)*L5)*L6)*L7 + ((32768*I*pi**15*C10*C2*C3*C4*C5 + 32768*I*pi**15*C10*C2*C3*C4*C6)*C8*C9*L1*L10*L2*L3*L4*L5 + (32768*I*pi**15*C10*C2*C3*C4*C6*C8*C9*L1*L10*L2*L3*L4 + ((32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6*C8*C9*L1*L10*L2*L3 + (32768*I*pi**15*C10*C2*C4*C5*C6*C8*C9*L1*L10*L2 + ((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6*C8*C9*L1*L10 + (32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8 + 32768*I*pi**15*C2*C3*C4*C5*C6*C8*C9)*L1*L2)*L3)*L4)*L5)*L6 + ((32768*I*pi**15*C10*C2*C3*C4*C6 + 32768*I*pi**15*C10*C2*C3*C4*C7)*C8*C9*L1*L10*L2*L3*L4 + (((32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6 + (32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C6)*C7)*C8*C9*L1*L10*L2*L3 + ((32768*I*pi**15*C10*C2*C4*C5*C6 + (32768*I*pi**15*C10*C2*C4*C5 + 32768*I*pi**15*C10*C2*C4*C6)*C7)*C8*C9*L1*L10*L2 + (((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6 + ((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5 + (32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C6)*C7)*C8*C9*L1*L10 + ((32768*I*pi**15*C2*C3*C4*C5*C6 + (32768*I*pi**15*C2*C3*C4*C5 + 32768*I*pi**15*C2*C3*C4*C6)*C7)*C8*C9 + (32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (32768*I*pi**15*C10*C2*C3*C4*C5 + 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8)*L1*L2)*L3)*L4)*L5 + ((32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C6*C7*C8*C9*L1*L10*L2*L3 + (32768*I*pi**15*C10*C2*C4*C6*C7*C8*C9*L1*L10*L2 + ((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C6*C7*C8*C9*L1*L10 + (32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8 + 32768*I*pi**15*C2*C3*C4*C6*C7*C8*C9)*L1*L2)*L3)*L4 + ((32768*I*pi**15*C10*C2*C4 + 32768*I*pi**15*C10*C2*C5)*C6*C7*C8*C9*L1*L10*L2 + (((32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4 + (32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3 + 32768*I*pi**15*C10*C4)*C5)*C6*C7*C8*C9*L1*L10 + ((32768*I*pi**15*C2*C3*C4 + (32768*I*pi**15*C2*C3 + 32768*I*pi**15*C2*C4)*C5)*C6*C7*C8*C9 + (32768*I*pi**15*C10*C2*C3*C4 + (32768*I*pi**15*C10*C2*C3 + 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8)*L1*L2)*L3 + (32768*I*pi**15*C10*C4*C5*C6*C7*C8*C9*L1*L10 + (32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8 + 32768*I*pi**15*C2*C4*C5*C6*C7*C8*C9)*L1*L2 + ((32768*I*pi**15*C2 + 32768*I*pi**15*C3)*C4*C5*C6*C7*C8*C9 + (32768*I*pi**15*C10*C2 + 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8)*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**15 + 16384*(((pi**14*C10*C2*C3*C4*C5*C6*C7 + pi**14*C10*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (pi**14*C10*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (pi**14*C10*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (pi**14*C10*C2*C4*C5*C6*C7*C8*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C10*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((pi**14*C10*C2*C3*C4*C6*C7*C8 + (pi**14*C10*C2*C3*C4*C6*C7 + pi**14*C10*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((pi**14*C10*C2*C4*C5*C6*C7*C8 + (pi**14*C10*C2*C4*C5*C6*C7 + pi**14*C10*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + ((pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (pi**14*C10*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (pi**14*C10*C2*C4*C5*C6*C8*C9*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8*C9*L1*L3)*L4)*L5)*L6 + ((pi**14*C10*C2*C3*C4*C6 + pi**14*C10*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((pi**14*C10*C2*C4*C5*C6 + (pi**14*C10*C2*C4*C5 + pi**14*C10*C2*C4*C6)*C7)*C8*C9*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6)*C7)*C8*C9*L1*L3)*L4)*L5 + ((pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (pi**14*C10*C2*C4*C6*C7*C8*C9*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6*C7*C8*C9*L1*L3)*L4 + (pi**14*C10*C4*C5*C6*C7*C8*C9*L1*L4 + (pi**14*C10*C2*C4 + pi**14*C10*C2*C5)*C6*C7*C8*C9*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C10*C2 + pi**14*C10*C3 + pi**14*C10*C4)*C5)*C6*C7*C8*C9*L1*L3)*L5)*L6)*L7)*L8)*L9)*ZL - (pi**14*C1*C10*C2*C3*C4*C5*C6*L1*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8)*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C6*C7 + pi**14*C1*C10*C2*C3*C4*C6*C8)*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6*C7 + pi**14*C1*C10*C2*C4*C5*C6*C8)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + pi**14*C1*C2*C3*C4*C5*C6*C8)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C7 + pi**14*C10*C2*C3*C4*C5*C6*C8)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8*L1*L10*L2*L3*L4*L5 + (pi**14*C1*C10*C2*C3*C4*C6*C8*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C5*C6*C8*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C6*C8*L1 + pi**14*C10*C2*C3*C4*C5*C6*C8*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7)*C8*L1 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8*L10)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C6*C7*C8*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8*L1*L10 + (pi**14*C1*C2*C3*C4*C6*C7*C8*L1 + pi**14*C10*C2*C3*C4*C6*C7*C8*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8*L1*L10 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7*C8*L1 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8*L10)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8*L1*L10 + (pi**14*C1*C2*C4*C5*C6*C7*C8*L1 + pi**14*C10*C2*C4*C5*C6*C7*C8*L10)*L2 + (pi**14*C2*C3*C4*C5*C6*C7*C8*L2 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7*C8*L1 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8*L10)*L3)*L4)*L5)*L6)*L7)*L8 + (((pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C9)*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C6*C8 + pi**14*C1*C10*C2*C3*C4*C6*C9)*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C9)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6*C8 + pi**14*C1*C10*C2*C4*C5*C6*C9)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C6*C8 + pi**14*C1*C2*C3*C4*C5*C6*C9)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C10*C2*C3*C4*C5*C6*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7 + pi**14*C1*C10*C2*C3*C4*C8)*C9)*L1*L10*L2*L3*L4 + ((((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8 + (pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C8)*C9)*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C2*C3*C4*C5)*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C8)*C9)*L1 + ((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C8)*C9)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C6*C7*C8 + (pi**14*C1*C10*C2*C4*C6*C7 + pi**14*C1*C10*C2*C4*C6*C8)*C9)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C6*C7 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C2*C3*C4*C6*C7)*C8 + (pi**14*C1*C2*C3*C4*C6*C7 + pi**14*C1*C2*C3*C4*C6*C8)*C9)*L1 + (pi**14*C10*C2*C3*C4*C6*C7*C8 + (pi**14*C10*C2*C3*C4*C6*C7 + pi**14*C10*C2*C3*C4*C6*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C8)*C9)*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C8)*C9)*L1*L10 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C7 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6)*C8 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7 + (pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C8)*C9)*L1 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8)*C9)*L10)*L2)*L3 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C4*C5*C6*C7 + (pi**14*C1*C10*C2*C4*C5*C6 + pi**14*C1*C2*C4*C5*C6*C7)*C8 + (pi**14*C1*C2*C4*C5*C6*C7 + pi**14*C1*C2*C4*C5*C6*C8)*C9)*L1 + (pi**14*C10*C2*C4*C5*C6*C7*C8 + (pi**14*C10*C2*C4*C5*C6*C7 + pi**14*C10*C2*C4*C5*C6*C8)*C9)*L10)*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C7 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6)*C8 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8)*C9)*L10 + (pi**14*C10*C2*C3*C4*C5*C6*C7 + (pi**14*C10*C2*C3*C4*C5*C6 + pi**14*C2*C3*C4*C5*C6*C7)*C8 + (pi**14*C2*C3*C4*C5*C6*C7 + pi**14*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + (pi**14*C1*C10*C2*C3*C4*C8*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8*C9*L10 + ((pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C8*C9 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8)*L1)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C8*C9*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C6*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C8*C9*L1*L10 + (pi**14*C10*C2*C3*C4*C6*C8*C9*L10 + (pi**14*C1*C10*C2*C3*C4*C6*C8 + pi**14*C1*C2*C3*C4*C6*C8*C9)*L1)*L2)*L3)*L4 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8*C9*L10 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C8*C9 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8)*L1)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C8*C9*L1*L10 + (pi**14*C10*C2*C4*C5*C6*C8*C9*L10 + (pi**14*C1*C10*C2*C4*C5*C6*C8 + pi**14*C1*C2*C4*C5*C6*C8*C9)*L1)*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8*C9*L10 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C8*C9 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C2*C3*C4*C5*C6*C8*C9)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C7)*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C6 + pi**14*C1*C10*C2*C4*C7)*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C7)*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4*C6 + pi**14*C10*C2*C3*C4*C7)*C8*C9*L10 + ((pi**14*C1*C2*C3*C4*C6 + pi**14*C1*C2*C3*C4*C7)*C8*C9 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8)*L1)*L2)*L3)*L4 + (((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5 + pi**14*C1*C10*C2*C6)*C7)*C8*C9*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C6)*C7)*C8*C9*L1*L10 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6)*C7)*C8*C9*L10 + (((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6 + (pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C6)*C7)*C8*C9 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8)*L1)*L2)*L3 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C6)*C7)*C8*C9*L1*L10 + ((pi**14*C10*C2*C4*C5*C6 + (pi**14*C10*C2*C4*C5 + pi**14*C10*C2*C4*C6)*C7)*C8*C9*L10 + ((pi**14*C1*C2*C4*C5*C6 + (pi**14*C1*C2*C4*C5 + pi**14*C1*C2*C4*C6)*C7)*C8*C9 + (pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8)*L1)*L2 + (((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6)*C7)*C8*C9*L10 + (((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C6)*C7)*C8*C9 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8)*L1 + ((pi**14*C2*C3*C4*C5*C6 + (pi**14*C2*C3*C4*C5 + pi**14*C2*C3*C4*C6)*C7)*C8*C9 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8)*L2)*L3)*L4)*L5 + (pi**14*C1*C10*C2*C6*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C6*C7*C8*C9*L1*L10 + ((pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6*C7*C8*C9*L10 + ((pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C6*C7*C8*C9 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8)*L1)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C6*C7*C8*C9*L1*L10 + (pi**14*C10*C2*C4*C6*C7*C8*C9*L10 + (pi**14*C1*C10*C2*C4*C6*C7*C8 + pi**14*C1*C2*C4*C6*C7*C8*C9)*L1)*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C6*C7*C8*C9*L10 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C6*C7*C8*C9 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8)*L1 + (pi**14*C10*C2*C3*C4*C6*C7*C8 + pi**14*C2*C3*C4*C6*C7*C8*C9)*L2)*L3)*L4 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C5)*C6*C7*C8*C9*L1*L10 + ((pi**14*C10*C2*C4 + pi**14*C10*C2*C5)*C6*C7*C8*C9*L10 + ((pi**14*C1*C2*C4 + pi**14*C1*C2*C5)*C6*C7*C8*C9 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8)*L1)*L2 + (((pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C10*C2 + pi**14*C10*C3 + pi**14*C10*C4)*C5)*C6*C7*C8*C9*L10 + (((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2)*C4)*C5)*C6*C7*C8*C9 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8)*L1 + ((pi**14*C2*C3*C4 + (pi**14*C2*C3 + pi**14*C2*C4)*C5)*C6*C7*C8*C9 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8)*L2)*L3 + (pi**14*C10*C4*C5*C6*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C4*C5*C6*C7*C8*C9 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8)*L1 + (pi**14*C10*C2*C4*C5*C6*C7*C8 + pi**14*C2*C4*C5*C6*C7*C8*C9)*L2 + ((pi**14*C2 + pi**14*C3)*C4*C5*C6*C7*C8*C9 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**14 + (-8192*I*pi**13*C10*C2*C3*C4*C5*C6*L1*L10*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7)*C8*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7)*C8*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7*C8*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C6*C7*C8*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7*C8*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7*C8*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7*C8*L1 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7*C8*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7*C8*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C1*C10*C2*C4*C5*C6*C9)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C9)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8 + 8192*I*pi**13*C10*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7)*C8 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C8)*C9)*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7)*C8 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C8)*C9)*L1 + ((8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C6*C7*C8 + (8192*I*pi**13*C1*C10*C2*C4*C6*C7 + 8192*I*pi**13*C1*C10*C2*C4*C6*C8)*C9)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C8)*C9)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7*C8 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C8)*C9)*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7*C8 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C8)*C9)*L1 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C8)*C9)*L1 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7*C8 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C4*C5*C6*C8)*C9)*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8*C9*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C8*C9*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C6*C8*C9*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8*C9*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C8*C9*L1)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8*C9*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8*C9*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C8*C9*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8*C9*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C6 + 8192*I*pi**13*C1*C10*C2*C4*C7)*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C7)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8*C9*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5 + 8192*I*pi**13*C1*C10*C2*C6)*C7)*C8*C9*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C6)*C7)*C8*C9*L1 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8*C9*L2)*L3 + (((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C6)*C7)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8*C9*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8*C9*L3)*L4)*L5 + (8192*I*pi**13*C1*C10*C2*C6*C7*C8*C9*L1*L2 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8*C9*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8*C9*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8*C9*L3)*L4 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8*C9*L4 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C5)*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8*C9*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8*C9*L3)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*L1*L10*L2*L3*L4*L5 + ((-8192*I*pi**13*C10*C2*C3*C4*C6*C7 - 8192*I*pi**13*C10*C2*C3*C4*C6*C8)*L1*L10*L2*L3*L4 + (((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*L1*L10*L2*L3 + ((-8192*I*pi**13*C10*C2*C4*C5*C6*C7 - 8192*I*pi**13*C10*C2*C4*C5*C6*C8)*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*L1*L10 + (-8192*I*pi**13*C2*C3*C4*C5*C6*C7 - 8192*I*pi**13*C2*C3*C4*C5*C6*C8)*L1*L2)*L3)*L4)*L5)*L6)*L7 + ((-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C8*L1*L10*L2*L3*L4*L5 + (-8192*I*pi**13*C10*C2*C3*C4*C6*C8*L1*L10*L2*L3*L4 + ((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8*L1*L10*L2*L3 + (-8192*I*pi**13*C10*C2*C4*C5*C6*C8*L1*L10*L2 + (-8192*I*pi**13*C2*C3*C4*C5*C6*C8*L1*L2 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C8*L1*L10)*L3)*L4)*L5)*L6 + ((-8192*I*pi**13*C10*C2*C3*C4*C6 - 8192*I*pi**13*C10*C2*C3*C4*C7)*C8*L1*L10*L2*L3*L4 + (((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8*L1*L10*L2*L3 + ((-8192*I*pi**13*C10*C2*C4*C5*C6 + (-8192*I*pi**13*C10*C2*C4*C5 - 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8*L1*L10 + (-8192*I*pi**13*C2*C3*C4*C5*C6 + (-8192*I*pi**13*C2*C3*C4*C5 - 8192*I*pi**13*C2*C3*C4*C6)*C7)*C8*L1*L2)*L3)*L4)*L5 + ((-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6*C7*C8*L1*L10*L2*L3 + (-8192*I*pi**13*C10*C2*C4*C6*C7*C8*L1*L10*L2 + (-8192*I*pi**13*C2*C3*C4*C6*C7*C8*L1*L2 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6*C7*C8*L1*L10)*L3)*L4 + ((-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6*C7*C8*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8*L1*L10 + (-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5)*C6*C7*C8*L1*L2)*L3 + (-8192*I*pi**13*C10*C4*C5*C6*C7*C8*L1*L10 - 8192*I*pi**13*C2*C4*C5*C6*C7*C8*L1*L2 + (-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + (((-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C8 + (-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C9)*L1*L10*L2*L3*L4*L5 + ((-8192*I*pi**13*C10*C2*C3*C4*C6*C8 - 8192*I*pi**13*C10*C2*C3*C4*C6*C9)*L1*L10*L2*L3*L4 + (((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C9)*L1*L10*L2*L3 + ((-8192*I*pi**13*C10*C2*C4*C5*C6*C8 - 8192*I*pi**13*C10*C2*C4*C5*C6*C9)*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C8 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C9)*L1*L10 + (-8192*I*pi**13*C10*C2*C3*C4*C5*C6 - 8192*I*pi**13*C2*C3*C4*C5*C6*C8 - 8192*I*pi**13*C2*C3*C4*C5*C6*C9)*L1*L2)*L3)*L4)*L5)*L6 + (((-8192*I*pi**13*C10*C2*C3*C4*C6 - 8192*I*pi**13*C10*C2*C3*C4*C7)*C8 + (-8192*I*pi**13*C10*C2*C3*C4*C6 - 8192*I*pi**13*C10*C2*C3*C4*C7 - 8192*I*pi**13*C10*C2*C3*C4*C8)*C9)*L1*L10*L2*L3*L4 + ((((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8 + ((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6)*C7 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6)*C8)*C9)*L1*L10*L2*L3 + (((-8192*I*pi**13*C10*C2*C4*C5*C6 + (-8192*I*pi**13*C10*C2*C4*C5 - 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8 + (-8192*I*pi**13*C10*C2*C4*C5*C6 + (-8192*I*pi**13*C10*C2*C4*C5 - 8192*I*pi**13*C10*C2*C4*C6)*C7 + (-8192*I*pi**13*C10*C2*C4*C5 - 8192*I*pi**13*C10*C2*C4*C6)*C8)*C9)*L1*L10*L2 + ((((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6)*C7 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6)*C8)*C9)*L1*L10 + (-8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (-8192*I*pi**13*C10*C2*C3*C4*C5 + (-8192*I*pi**13*C10*C2*C3*C4 - 8192*I*pi**13*C2*C3*C4*C5)*C6 + (-8192*I*pi**13*C2*C3*C4*C5 - 8192*I*pi**13*C2*C3*C4*C6)*C7)*C8 + (-8192*I*pi**13*C2*C3*C4*C5*C6 + (-8192*I*pi**13*C2*C3*C4*C5 - 8192*I*pi**13*C2*C3*C4*C6)*C7 + (-8192*I*pi**13*C2*C3*C4*C5 - 8192*I*pi**13*C2*C3*C4*C6)*C8)*C9)*L1*L2)*L3)*L4)*L5 + (((-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6*C7*C8 + ((-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6*C7 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6*C8)*C9)*L1*L10*L2*L3 + ((-8192*I*pi**13*C10*C2*C4*C6*C7*C8 + (-8192*I*pi**13*C10*C2*C4*C6*C7 - 8192*I*pi**13*C10*C2*C4*C6*C8)*C9)*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6*C7*C8 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6*C7 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6*C8)*C9)*L1*L10 + (-8192*I*pi**13*C10*C2*C3*C4*C6*C7 + (-8192*I*pi**13*C10*C2*C3*C4*C6 - 8192*I*pi**13*C2*C3*C4*C6*C7)*C8 + (-8192*I*pi**13*C2*C3*C4*C6*C7 - 8192*I*pi**13*C2*C3*C4*C6*C8)*C9)*L1*L2)*L3)*L4 + (((-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6*C7*C8 + ((-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6*C7 + (-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6*C8)*C9)*L1*L10*L2 + ((((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6*C7 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6*C8)*C9)*L1*L10 + ((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + ((-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5)*C6*C7 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6)*C8 + ((-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5)*C6*C7 + (-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5)*C6*C8)*C9)*L1*L2)*L3 + ((-8192*I*pi**13*C10*C4*C5*C6*C7*C8 + (-8192*I*pi**13*C10*C4*C5*C6*C7 - 8192*I*pi**13*C10*C4*C5*C6*C8)*C9)*L1*L10 + (-8192*I*pi**13*C10*C2*C4*C5*C6*C7 + (-8192*I*pi**13*C10*C2*C4*C5*C6 - 8192*I*pi**13*C2*C4*C5*C6*C7)*C8 + (-8192*I*pi**13*C2*C4*C5*C6*C7 - 8192*I*pi**13*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + ((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5*C6*C7 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6)*C8 + ((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5*C6*C7 + (-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + (-8192*I*pi**13*C10*C2*C3*C4*C8*C9*L1*L10*L2*L3*L4 + ((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6)*C8*C9*L1*L10*L2*L3 + ((-8192*I*pi**13*C10*C2*C4*C5 - 8192*I*pi**13*C10*C2*C4*C6)*C8*C9*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6)*C8*C9*L1*L10 + ((-8192*I*pi**13*C2*C3*C4*C5 - 8192*I*pi**13*C2*C3*C4*C6)*C8*C9 + (-8192*I*pi**13*C10*C2*C3*C4*C5 - 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*L1*L2)*L3)*L4)*L5 + ((-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6*C8*C9*L1*L10*L2*L3 + (-8192*I*pi**13*C10*C2*C4*C6*C8*C9*L1*L10*L2 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6*C8*C9*L1*L10 + (-8192*I*pi**13*C10*C2*C3*C4*C6*C8 - 8192*I*pi**13*C2*C3*C4*C6*C8*C9)*L1*L2)*L3)*L4 + ((-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6*C8*C9*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6*C8*C9*L1*L10 + ((-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5)*C6*C8*C9 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*L1*L2)*L3 + (-8192*I*pi**13*C10*C4*C5*C6*C8*C9*L1*L10 + (-8192*I*pi**13*C10*C2*C4*C5*C6*C8 - 8192*I*pi**13*C2*C4*C5*C6*C8*C9)*L1*L2 + ((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5*C6*C8*C9 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6 + (((-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C7)*C8*C9*L1*L10*L2*L3 + ((-8192*I*pi**13*C10*C2*C4*C6 - 8192*I*pi**13*C10*C2*C4*C7)*C8*C9*L1*L10*L2 + (((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C7)*C8*C9*L1*L10 + ((-8192*I*pi**13*C2*C3*C4*C6 - 8192*I*pi**13*C2*C3*C4*C7)*C8*C9 + (-8192*I*pi**13*C10*C2*C3*C4*C6 - 8192*I*pi**13*C10*C2*C3*C4*C7)*C8)*L1*L2)*L3)*L4 + (((-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6 + (-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5 - 8192*I*pi**13*C10*C2*C6)*C7)*C8*C9*L1*L10*L2 + ((((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C6)*C7)*C8*C9*L1*L10 + (((-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5)*C6 + (-8192*I*pi**13*C2*C3*C4 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C5 + (-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C6)*C7)*C8*C9 + ((-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (-8192*I*pi**13*C10*C2*C3*C4 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C5 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8)*L1*L2)*L3 + ((-8192*I*pi**13*C10*C4*C5*C6 + (-8192*I*pi**13*C10*C4*C5 - 8192*I*pi**13*C10*C4*C6)*C7)*C8*C9*L1*L10 + ((-8192*I*pi**13*C2*C4*C5*C6 + (-8192*I*pi**13*C2*C4*C5 - 8192*I*pi**13*C2*C4*C6)*C7)*C8*C9 + (-8192*I*pi**13*C10*C2*C4*C5*C6 + (-8192*I*pi**13*C10*C2*C4*C5 - 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8)*L1*L2 + (((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5*C6 + ((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C5 + (-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C6)*C7)*C8*C9 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C5 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8)*L1*L3)*L4)*L5 + (-8192*I*pi**13*C10*C2*C6*C7*C8*C9*L1*L10*L2 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C6*C7*C8*C9*L1*L10 + ((-8192*I*pi**13*C2*C3 - 8192*I*pi**13*C2*C4)*C6*C7*C8*C9 + (-8192*I*pi**13*C10*C2*C3 - 8192*I*pi**13*C10*C2*C4)*C6*C7*C8)*L1*L2)*L3 + (-8192*I*pi**13*C10*C4*C6*C7*C8*C9*L1*L10 + (-8192*I*pi**13*C10*C2*C4*C6*C7*C8 - 8192*I*pi**13*C2*C4*C6*C7*C8*C9)*L1*L2 + ((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4*C6*C7*C8*C9 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4*C6*C7*C8)*L1*L3)*L4 + ((-8192*I*pi**13*C10*C4 - 8192*I*pi**13*C10*C5)*C6*C7*C8*C9*L1*L10 + ((-8192*I*pi**13*C2*C4 - 8192*I*pi**13*C2*C5)*C6*C7*C8*C9 + (-8192*I*pi**13*C10*C2*C4 - 8192*I*pi**13*C10*C2*C5)*C6*C7*C8)*L1*L2 + (((-8192*I*pi**13*C2 - 8192*I*pi**13*C3)*C4 + (-8192*I*pi**13*C2 - 8192*I*pi**13*C3 - 8192*I*pi**13*C4)*C5)*C6*C7*C8*C9 + ((-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3)*C4 + (-8192*I*pi**13*C10*C2 - 8192*I*pi**13*C10*C3 - 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8)*L1*L3 + (-8192*I*pi**13*C10*C4*C5*C6*C7*C8 - 8192*I*pi**13*C4*C5*C6*C7*C8*C9)*L1*L4)*L5)*L6)*L7)*L8)*L9)*freq**13 - 4096*((pi**12*C10*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((pi**12*C10*C2*C3*C4*C6*C7 + pi**12*C10*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6*C7 + pi**12*C10*C2*C4*C5*C6*C8)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (pi**12*C10*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8*L1*L2*L3 + (pi**12*C10*C2*C4*C5*C6*C8*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8*L1*L2*L3 + (pi**12*C10*C2*C4*C6*C7*C8*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8*L1*L3)*L4 + (pi**12*C10*C4*C5*C6*C7*C8*L1*L4 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + (((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C10*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C10*C2*C4*C5*C6*C9)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C9)*L1*L3)*L4)*L5)*L6 + (((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7 + pi**12*C10*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8)*C9)*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((pi**12*C10*C2*C4*C6*C7*C8 + (pi**12*C10*C2*C4*C6*C7 + pi**12*C10*C2*C4*C6*C8)*C9)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8)*C9)*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8)*C9)*L1*L3 + (pi**12*C10*C4*C5*C6*C7*C8 + (pi**12*C10*C4*C5*C6*C7 + pi**12*C10*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + (pi**12*C10*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8*C9*L1*L3)*L4)*L5 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8*C9*L1*L2*L3 + (pi**12*C10*C2*C4*C6*C8*C9*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8*C9*L1*L3)*L4 + (pi**12*C10*C4*C5*C6*C8*C9*L1*L4 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8*C9*L1*L3)*L5)*L6 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((pi**12*C10*C2*C4*C6 + pi**12*C10*C2*C4*C7)*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C7)*C8*C9*L1*L3)*L4 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5 + pi**12*C10*C2*C6)*C7)*C8*C9*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6)*C7)*C8*C9*L1*L3 + (pi**12*C10*C4*C5*C6 + (pi**12*C10*C4*C5 + pi**12*C10*C4*C6)*C7)*C8*C9*L1*L4)*L5 + (pi**12*C10*C2*C6*C7*C8*C9*L1*L2 + pi**12*C10*C4*C6*C7*C8*C9*L1*L4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6*C7*C8*C9*L1*L3 + (pi**12*C10*C4 + pi**12*C10*C5)*C6*C7*C8*C9*L1*L5)*L6)*L7)*L8)*L9)*ZL - ((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C10*C2*C3*C4*C6)*L1*L10*L2*L3*L4*L5 + (pi**12*C1*C10*C2*C3*C4*C6*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C5*C6*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C6*L1 + pi**12*C10*C2*C3*C4*C5*C6*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C10*C2*C3*C4*C7 + pi**12*C1*C10*C2*C3*C4*C8)*L1*L10*L2*L3*L4 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C7 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C5*C6 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C7 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C6 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8)*L1 + (pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6*C7 + pi**12*C1*C10*C2*C4*C6*C8)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8)*L1*L10 + ((pi**12*C1*C2*C3*C4*C6*C7 + pi**12*C1*C2*C3*C4*C6*C8)*L1 + (pi**12*C10*C2*C3*C4*C6*C7 + pi**12*C10*C2*C3*C4*C6*C8)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8)*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C7 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8)*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8)*L1*L10 + ((pi**12*C1*C2*C4*C5*C6*C7 + pi**12*C1*C2*C4*C5*C6*C8)*L1 + (pi**12*C10*C2*C4*C5*C6*C7 + pi**12*C10*C2*C4*C5*C6*C8)*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C7 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L10 + (pi**12*C2*C3*C4*C5*C6*C7 + pi**12*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + (pi**12*C1*C10*C2*C3*C4*C8*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8*L1 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8*L10)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C6*C8*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8*L1*L10 + (pi**12*C1*C2*C3*C4*C6*C8*L1 + pi**12*C10*C2*C3*C4*C6*C8*L10)*L2)*L3)*L4 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8*L1*L10 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8*L1 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8*L10)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8*L1*L10 + (pi**12*C1*C2*C4*C5*C6*C8*L1 + pi**12*C10*C2*C4*C5*C6*C8*L10)*L2 + (pi**12*C2*C3*C4*C5*C6*C8*L2 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8*L1 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8*L10)*L3)*L4)*L5)*L6 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8*L1*L10 + ((pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7)*C8*L1 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7)*C8*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8*L1*L10 + ((pi**12*C1*C2*C4*C5*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7)*C8*L1 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7)*C8*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8*L10 + (pi**12*C2*C3*C4*C5*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + (pi**12*C1*C10*C2*C6*C7*C8*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8*L1*L10 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7*C8*L1 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8*L10)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8*L1*L10 + (pi**12*C1*C2*C4*C6*C7*C8*L1 + pi**12*C10*C2*C4*C6*C7*C8*L10)*L2 + (pi**12*C2*C3*C4*C6*C7*C8*L2 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7*C8*L1 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8*L10)*L3)*L4 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8*L1*L10 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7*C8*L1 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7*C8*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8*L10 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (pi**12*C10*C4*C5*C6*C7*C8*L10 + pi**12*C2*C4*C5*C6*C7*C8*L2 + (pi**12*C1 + pi**12*C2)*C4*C5*C6*C7*C8*L1 + (pi**12*C2 + pi**12*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**12*C1*C10*C2*C3*C4*C8 + pi**12*C1*C10*C2*C3*C4*C9)*L1*L10*L2*L3*L4 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C10*C2*C3*C4*C6 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C9)*L1 + ((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C9)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6*C8 + pi**12*C1*C10*C2*C4*C6*C9)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C6*C8 + pi**12*C1*C2*C3*C4*C6*C9)*L1 + (pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C10*C2*C3*C4*C6*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C9 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6)*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C9)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C5*C6 + pi**12*C1*C2*C4*C5*C6*C8 + pi**12*C1*C2*C4*C5*C6*C9)*L1 + (pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C10*C2*C4*C5*C6*C9)*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C9)*L10 + (pi**12*C10*C2*C3*C4*C5*C6 + pi**12*C2*C3*C4*C5*C6*C8 + pi**12*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + ((((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7 + pi**12*C1*C10*C2*C4*C8)*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C10*C2*C3*C4*C7 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7)*C8 + (pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7 + pi**12*C1*C2*C3*C4*C8)*C9)*L1 + ((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7 + pi**12*C10*C2*C3*C4*C8)*C9)*L10)*L2)*L3)*L4 + ((((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C8)*C9)*L1*L10*L2 + (((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C7 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C2*C3)*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7)*C8 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C8)*C9)*L1 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8)*C9)*L10)*L2)*L3 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C5*C6 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C7 + (pi**12*C1*C10*C2*C4*C5 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C2*C4*C5)*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7)*C8 + (pi**12*C1*C2*C4*C5*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C8)*C9)*L1 + ((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8)*C9)*L10)*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4)*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7)*C8 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C8)*C9)*L1 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8)*C9)*L10 + (pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + (pi**12*C10*C2*C3*C4 + pi**12*C2*C3*C4*C5)*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7)*C8 + (pi**12*C2*C3*C4*C5*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C6*C7*C8 + (pi**12*C1*C10*C2*C6*C7 + pi**12*C1*C10*C2*C6*C8)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C7 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C8)*C9)*L1 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C6*C7 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C2*C4*C6*C7)*C8 + (pi**12*C1*C2*C4*C6*C7 + pi**12*C1*C2*C4*C6*C8)*C9)*L1 + (pi**12*C10*C2*C4*C6*C7*C8 + (pi**12*C10*C2*C4*C6*C7 + pi**12*C10*C2*C4*C6*C8)*C9)*L10)*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C8)*C9)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8)*C9)*L10 + (pi**12*C10*C2*C3*C4*C6*C7 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C2*C3*C4*C6*C7)*C8 + (pi**12*C2*C3*C4*C6*C7 + pi**12*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C7 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6)*C8 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7 + (pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C8)*C9)*L1 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8)*C9)*L10)*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C7 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6)*C8 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C8)*C9)*L1 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8)*C9)*L10 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6)*C8 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6)*C8 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C7 + (pi**12*C1 + pi**12*C2)*C4*C5*C6*C8)*C9)*L1 + (pi**12*C10*C4*C5*C6*C7*C8 + (pi**12*C10*C4*C5*C6*C7 + pi**12*C10*C4*C5*C6*C8)*C9)*L10 + (pi**12*C10*C2*C4*C5*C6*C7 + (pi**12*C10*C2*C4*C5*C6 + pi**12*C2*C4*C5*C6*C7)*C8 + (pi**12*C2*C4*C5*C6*C7 + pi**12*C2*C4*C5*C6*C8)*C9)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6)*C8 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C7 + (pi**12*C2 + pi**12*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C8*C9*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C8*C9*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C8*C9*L1*L10 + (pi**12*C10*C2*C3*C4*C8*C9*L10 + (pi**12*C1*C10*C2*C3*C4*C8 + pi**12*C1*C2*C3*C4*C8*C9)*L1)*L2)*L3)*L4 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C8*C9*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C8*C9*L1*L10 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8*C9*L10 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C8*C9 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8)*L1)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C8*C9*L1*L10 + ((pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8*C9*L10 + ((pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C8*C9 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8)*L1 + ((pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C8*C9 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (pi**12*C1*C10*C2*C6*C8*C9*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C8*C9*L1*L10 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8*C9*L10 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C8*C9 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8)*L1)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C8*C9*L1*L10 + (pi**12*C10*C2*C4*C6*C8*C9*L10 + (pi**12*C1*C10*C2*C4*C6*C8 + pi**12*C1*C2*C4*C6*C8*C9)*L1)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8*C9*L10 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C8*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8)*L1 + (pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C2*C3*C4*C6*C8*C9)*L2)*L3)*L4 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C8*C9*L1*L10 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8*C9*L10 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C8*C9 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8)*L1 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C8*C9 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L2)*L3 + (pi**12*C10*C4*C5*C6*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C8*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8)*L1 + (pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C2*C4*C5*C6*C8*C9)*L2 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C8*C9 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C6 + pi**12*C1*C10*C2*C7)*C8*C9*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C7)*C8*C9*L1*L10 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C7)*C8*C9*L10 + (((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C7)*C8*C9 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8)*L1)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C7)*C8*C9*L1*L10 + ((pi**12*C10*C2*C4*C6 + pi**12*C10*C2*C4*C7)*C8*C9*L10 + ((pi**12*C1*C2*C4*C6 + pi**12*C1*C2*C4*C7)*C8*C9 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C7)*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C7)*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8)*L1 + ((pi**12*C2*C3*C4*C6 + pi**12*C2*C3*C4*C7)*C8*C9 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8)*L2)*L3)*L4 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C6)*C7)*C8*C9*L1*L10 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5 + pi**12*C10*C2*C6)*C7)*C8*C9*L10 + (((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6 + (pi**12*C1*C2*C4 + pi**12*C1*C2*C5 + pi**12*C1*C2*C6)*C7)*C8*C9 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8)*L1)*L2 + ((((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6)*C7)*C8*C9*L10 + ((((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C6)*C7)*C8*C9 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8)*L1 + (((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5 + (pi**12*C2*C3 + pi**12*C2*C4)*C6)*C7)*C8*C9 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8)*L2)*L3 + ((pi**12*C10*C4*C5*C6 + (pi**12*C10*C4*C5 + pi**12*C10*C4*C6)*C7)*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C4*C5*C6 + ((pi**12*C1 + pi**12*C2)*C4*C5 + (pi**12*C1 + pi**12*C2)*C4*C6)*C7)*C8*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8)*L1 + ((pi**12*C2*C4*C5*C6 + (pi**12*C2*C4*C5 + pi**12*C2*C4*C6)*C7)*C8*C9 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8)*L2 + (((pi**12*C2 + pi**12*C3)*C4*C5*C6 + ((pi**12*C2 + pi**12*C3)*C4*C5 + (pi**12*C2 + pi**12*C3)*C4*C6)*C7)*C8*C9 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8)*L3)*L4)*L5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C6*C7*C8*C9*L1*L10 + (pi**12*C10*C2*C6*C7*C8*C9*L10 + (pi**12*C1*C10*C2*C6*C7*C8 + pi**12*C1*C2*C6*C7*C8*C9)*L1)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6*C7*C8*C9*L10 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C6*C7*C8*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8)*L1 + ((pi**12*C2*C3 + pi**12*C2*C4)*C6*C7*C8*C9 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8)*L2)*L3 + (pi**12*C10*C4*C6*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C4*C6*C7*C8*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8)*L1 + (pi**12*C10*C2*C4*C6*C7*C8 + pi**12*C2*C4*C6*C7*C8*C9)*L2 + ((pi**12*C2 + pi**12*C3)*C4*C6*C7*C8*C9 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8)*L3)*L4 + ((pi**12*C10*C4 + pi**12*C10*C5)*C6*C7*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C4 + (pi**12*C1 + pi**12*C2)*C5)*C6*C7*C8*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8)*L1 + ((pi**12*C2*C4 + pi**12*C2*C5)*C6*C7*C8*C9 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8)*L2 + (((pi**12*C2 + pi**12*C3)*C4 + (pi**12*C2 + pi**12*C3 + pi**12*C4)*C5)*C6*C7*C8*C9 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8)*L3 + (pi**12*C10*C4*C5*C6*C7*C8 + pi**12*C4*C5*C6*C7*C8*C9)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**12 + ((2048*I*pi**11*C10*C2*C3*C4*C5 + 2048*I*pi**11*C10*C2*C3*C4*C6)*L1*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 - 2048*I*pi**11*C1*C10*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (-2048*I*pi**11*C1*C10*C2*C3*C4*C6*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5)*C6*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C5*C6*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C5*C6*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C6 - 2048*I*pi**11*C1*C10*C2*C3*C4*C7 - 2048*I*pi**11*C1*C10*C2*C3*C4*C8)*L1*L2*L3*L4 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6*C7 - 2048*I*pi**11*C1*C10*C2*C4*C6*C8)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C7 - 2048*I*pi**11*C10*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8)*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C7 - 2048*I*pi**11*C10*C2*C4*C5*C6*C8)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (-2048*I*pi**11*C1*C10*C2*C3*C4*C8*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C6*C8*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C8*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C8*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7)*C8*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7)*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7)*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7)*C8*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7)*C8*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7)*C8*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7)*C8*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7)*C8*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (-2048*I*pi**11*C1*C10*C2*C6*C7*C8*L1*L2 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7*C8*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C7*C8*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7*C8*L3)*L4 + (-2048*I*pi**11*C10*C4*C5*C6*C7*C8*L4 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7*C8*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C8 - 2048*I*pi**11*C1*C10*C2*C3*C4*C9)*L1*L2*L3*L4 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C9)*L1*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C9)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6*C8 - 2048*I*pi**11*C1*C10*C2*C4*C6*C9)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C9)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C8 - 2048*I*pi**11*C10*C2*C3*C4*C6*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C9)*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C8 - 2048*I*pi**11*C10*C2*C4*C5*C6*C9)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C9)*L3)*L4)*L5)*L6 + ((((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C8)*C9)*L1*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7)*C8 + (-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7 - 2048*I*pi**11*C1*C10*C2*C4*C8)*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7)*C8 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 - 2048*I*pi**11*C10*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + ((((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C8)*C9)*L1*L2 + (((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7)*C8 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C8)*C9)*L1 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*C9)*L2)*L3 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7)*C8 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*C9)*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C6*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C6*C7 - 2048*I*pi**11*C1*C10*C2*C6*C8)*C9)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7*C8 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C8)*C9)*L1 + (-2048*I*pi**11*C10*C2*C4*C6*C7*C8 + (-2048*I*pi**11*C10*C2*C4*C6*C7 - 2048*I*pi**11*C10*C2*C4*C6*C8)*C9)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7*C8 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*C9)*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7*C8 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*C9)*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C7*C8 + (-2048*I*pi**11*C10*C4*C5*C6*C7 - 2048*I*pi**11*C10*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C8*C9*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C8*C9*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C8*C9*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C8*C9*L1)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C8*C9*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8*C9*L3)*L4)*L5 + (-2048*I*pi**11*C1*C10*C2*C6*C8*C9*L1*L2 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8*C9*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C8*C9*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8*C9*L3)*L4 + (-2048*I*pi**11*C10*C4*C5*C6*C8*C9*L4 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8*C9*L3)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C6 - 2048*I*pi**11*C1*C10*C2*C7)*C8*C9*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C7)*C8*C9*L1 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C7)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8*C9*L3)*L4 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C6)*C7)*C8*C9*L1 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8*C9*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8*C9*L3 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8*C9*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C7*C8*C9*L2 - 2048*I*pi**11*C10*C4*C6*C7*C8*C9*L4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C6*C7*C8*C9*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8*C9*L3 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8*C9*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (2048*I*pi**11*C10*C2*C3*C4*C6*L1*L10*L2*L3*L4 + ((2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5)*C6*L1*L10*L2*L3 + (2048*I*pi**11*C10*C2*C4*C5*C6*L1*L10*L2 + (2048*I*pi**11*C2*C3*C4*C5*C6*L1*L2 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5*C6*L1*L10)*L3)*L4)*L5)*L6 + ((2048*I*pi**11*C10*C2*C3*C4*C6 + 2048*I*pi**11*C10*C2*C3*C4*C7 + 2048*I*pi**11*C10*C2*C3*C4*C8)*L1*L10*L2*L3*L4 + (((2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C8)*L1*L10*L2*L3 + ((2048*I*pi**11*C10*C2*C4*C5*C6 + (2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C7 + (2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C8)*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C8)*L1*L10 + (2048*I*pi**11*C2*C3*C4*C5*C6 + (2048*I*pi**11*C2*C3*C4*C5 + 2048*I*pi**11*C2*C3*C4*C6)*C7 + (2048*I*pi**11*C2*C3*C4*C5 + 2048*I*pi**11*C2*C3*C4*C6)*C8)*L1*L2)*L3)*L4)*L5 + (((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C7 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C8)*L1*L10*L2*L3 + ((2048*I*pi**11*C10*C2*C4*C6*C7 + 2048*I*pi**11*C10*C2*C4*C6*C8)*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C7 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C8)*L1*L10 + (2048*I*pi**11*C2*C3*C4*C6*C7 + 2048*I*pi**11*C2*C3*C4*C6*C8)*L1*L2)*L3)*L4 + (((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C7 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C8)*L1*L10*L2 + ((((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C7 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C8)*L1*L10 + ((2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6*C7 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6*C8)*L1*L2)*L3 + ((2048*I*pi**11*C10*C4*C5*C6*C7 + 2048*I*pi**11*C10*C4*C5*C6*C8)*L1*L10 + (2048*I*pi**11*C2*C4*C5*C6*C7 + 2048*I*pi**11*C2*C4*C5*C6*C8)*L1*L2 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6*C7 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + (2048*I*pi**11*C10*C2*C3*C4*C8*L1*L10*L2*L3*L4 + ((2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C8*L1*L10*L2*L3 + ((2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C8*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C8*L1*L10 + (2048*I*pi**11*C2*C3*C4*C5 + 2048*I*pi**11*C2*C3*C4*C6)*C8*L1*L2)*L3)*L4)*L5 + ((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C8*L1*L10*L2*L3 + (2048*I*pi**11*C10*C2*C4*C6*C8*L1*L10*L2 + (2048*I*pi**11*C2*C3*C4*C6*C8*L1*L2 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C8*L1*L10)*L3)*L4 + ((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C8*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C8*L1*L10 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6*C8*L1*L2)*L3 + (2048*I*pi**11*C10*C4*C5*C6*C8*L1*L10 + 2048*I*pi**11*C2*C4*C5*C6*C8*L1*L2 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + (((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C7)*C8*L1*L10*L2*L3 + ((2048*I*pi**11*C10*C2*C4*C6 + 2048*I*pi**11*C10*C2*C4*C7)*C8*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C7)*C8*L1*L10 + (2048*I*pi**11*C2*C3*C4*C6 + 2048*I*pi**11*C2*C3*C4*C7)*C8*L1*L2)*L3)*L4 + (((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5 + 2048*I*pi**11*C10*C2*C6)*C7)*C8*L1*L10*L2 + ((((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6)*C7)*C8*L1*L10 + ((2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6)*C7)*C8*L1*L2)*L3 + ((2048*I*pi**11*C10*C4*C5*C6 + (2048*I*pi**11*C10*C4*C5 + 2048*I*pi**11*C10*C4*C6)*C7)*C8*L1*L10 + (2048*I*pi**11*C2*C4*C5*C6 + (2048*I*pi**11*C2*C4*C5 + 2048*I*pi**11*C2*C4*C6)*C7)*C8*L1*L2 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + (2048*I*pi**11*C10*C2*C6*C7*C8*L1*L10*L2 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6*C7*C8*L1*L10 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6*C7*C8*L1*L2)*L3 + (2048*I*pi**11*C10*C4*C6*C7*C8*L1*L10 + 2048*I*pi**11*C2*C4*C6*C7*C8*L1*L2 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6*C7*C8*L1*L3)*L4 + (2048*I*pi**11*C4*C5*C6*C7*C8*L1*L4 + (2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6*C7*C8*L1*L10 + (2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5)*C6*C7*C8*L1*L2 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + ((2048*I*pi**11*C10*C2*C3*C4*C8 + 2048*I*pi**11*C10*C2*C3*C4*C9)*L1*L10*L2*L3*L4 + (((2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C8 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C9)*L1*L10*L2*L3 + (((2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C8 + (2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C9)*L1*L10*L2 + ((((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C8 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C9)*L1*L10 + (2048*I*pi**11*C10*C2*C3*C4*C5 + 2048*I*pi**11*C10*C2*C3*C4*C6 + (2048*I*pi**11*C2*C3*C4*C5 + 2048*I*pi**11*C2*C3*C4*C6)*C8 + (2048*I*pi**11*C2*C3*C4*C5 + 2048*I*pi**11*C2*C3*C4*C6)*C9)*L1*L2)*L3)*L4)*L5 + (((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C8 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C9)*L1*L10*L2*L3 + ((2048*I*pi**11*C10*C2*C4*C6*C8 + 2048*I*pi**11*C10*C2*C4*C6*C9)*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C8 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C9)*L1*L10 + (2048*I*pi**11*C10*C2*C3*C4*C6 + 2048*I*pi**11*C2*C3*C4*C6*C8 + 2048*I*pi**11*C2*C3*C4*C6*C9)*L1*L2)*L3)*L4 + (((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C8 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C9)*L1*L10*L2 + ((((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C8 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C9)*L1*L10 + ((2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6*C8 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6*C9 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5)*C6)*L1*L2)*L3 + ((2048*I*pi**11*C10*C4*C5*C6*C8 + 2048*I*pi**11*C10*C4*C5*C6*C9)*L1*L10 + (2048*I*pi**11*C10*C2*C4*C5*C6 + 2048*I*pi**11*C2*C4*C5*C6*C8 + 2048*I*pi**11*C2*C4*C5*C6*C9)*L1*L2 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6*C8 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6*C9 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5*C6)*L1*L3)*L4)*L5)*L6 + ((((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C7)*C8 + ((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C7 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C8)*C9)*L1*L10*L2*L3 + (((2048*I*pi**11*C10*C2*C4*C6 + 2048*I*pi**11*C10*C2*C4*C7)*C8 + (2048*I*pi**11*C10*C2*C4*C6 + 2048*I*pi**11*C10*C2*C4*C7 + 2048*I*pi**11*C10*C2*C4*C8)*C9)*L1*L10*L2 + ((((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C7)*C8 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C7 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C8)*C9)*L1*L10 + (2048*I*pi**11*C10*C2*C3*C4*C6 + 2048*I*pi**11*C10*C2*C3*C4*C7 + (2048*I*pi**11*C10*C2*C3*C4 + 2048*I*pi**11*C2*C3*C4*C6 + 2048*I*pi**11*C2*C3*C4*C7)*C8 + (2048*I*pi**11*C2*C3*C4*C6 + 2048*I*pi**11*C2*C3*C4*C7 + 2048*I*pi**11*C2*C3*C4*C8)*C9)*L1*L2)*L3)*L4 + ((((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5 + 2048*I*pi**11*C10*C2*C6)*C7)*C8 + ((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5 + 2048*I*pi**11*C10*C2*C6)*C7 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5 + 2048*I*pi**11*C10*C2*C6)*C8)*C9)*L1*L10*L2 + (((((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6)*C7)*C8 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6)*C7 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6)*C8)*C9)*L1*L10 + ((2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C2*C3)*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6)*C7)*C8 + ((2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5)*C6 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6)*C7 + (2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6)*C8)*C9)*L1*L2)*L3 + (((2048*I*pi**11*C10*C4*C5*C6 + (2048*I*pi**11*C10*C4*C5 + 2048*I*pi**11*C10*C4*C6)*C7)*C8 + (2048*I*pi**11*C10*C4*C5*C6 + (2048*I*pi**11*C10*C4*C5 + 2048*I*pi**11*C10*C4*C6)*C7 + (2048*I*pi**11*C10*C4*C5 + 2048*I*pi**11*C10*C4*C6)*C8)*C9)*L1*L10 + (2048*I*pi**11*C10*C2*C4*C5*C6 + (2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C7 + (2048*I*pi**11*C10*C2*C4*C5 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C2*C4*C5)*C6 + (2048*I*pi**11*C2*C4*C5 + 2048*I*pi**11*C2*C4*C6)*C7)*C8 + (2048*I*pi**11*C2*C4*C5*C6 + (2048*I*pi**11*C2*C4*C5 + 2048*I*pi**11*C2*C4*C6)*C7 + (2048*I*pi**11*C2*C4*C5 + 2048*I*pi**11*C2*C4*C6)*C8)*C9)*L1*L2 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4)*C6 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6)*C7)*C8 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5*C6 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6)*C7 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + ((2048*I*pi**11*C10*C2*C6*C7*C8 + (2048*I*pi**11*C10*C2*C6*C7 + 2048*I*pi**11*C10*C2*C6*C8)*C9)*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6*C7*C8 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6*C7 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6*C8)*C9)*L1*L10 + ((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C7 + ((2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6*C7 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C8 + ((2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6*C7 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6*C8)*C9)*L1*L2)*L3 + ((2048*I*pi**11*C10*C4*C6*C7*C8 + (2048*I*pi**11*C10*C4*C6*C7 + 2048*I*pi**11*C10*C4*C6*C8)*C9)*L1*L10 + (2048*I*pi**11*C10*C2*C4*C6*C7 + (2048*I*pi**11*C10*C2*C4*C6 + 2048*I*pi**11*C2*C4*C6*C7)*C8 + (2048*I*pi**11*C2*C4*C6*C7 + 2048*I*pi**11*C2*C4*C6*C8)*C9)*L1*L2 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C7 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6*C7 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C8 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6*C7 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6*C7*C8 + ((2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6*C7 + (2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6*C8)*C9)*L1*L10 + ((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C7 + ((2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5)*C6*C7 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6)*C8 + ((2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5)*C6*C7 + (2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5)*C6*C8)*C9)*L1*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C7 + (((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5)*C6*C7 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6)*C8 + (((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5)*C6*C7 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5)*C6*C8)*C9)*L1*L3 + (2048*I*pi**11*C10*C4*C5*C6*C7 + (2048*I*pi**11*C10*C4*C5*C6 + 2048*I*pi**11*C4*C5*C6*C7)*C8 + (2048*I*pi**11*C4*C5*C6*C7 + 2048*I*pi**11*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + ((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C8*C9*L1*L10*L2*L3 + (2048*I*pi**11*C10*C2*C4*C8*C9*L1*L10*L2 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C8*C9*L1*L10 + (2048*I*pi**11*C10*C2*C3*C4*C8 + 2048*I*pi**11*C2*C3*C4*C8*C9)*L1*L2)*L3)*L4 + ((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5 + 2048*I*pi**11*C10*C2*C6)*C8*C9*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6)*C8*C9*L1*L10 + ((2048*I*pi**11*C2*C3*C4 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C5 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6)*C8*C9 + (2048*I*pi**11*C10*C2*C3*C4 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C5 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6)*C8)*L1*L2)*L3 + ((2048*I*pi**11*C10*C4*C5 + 2048*I*pi**11*C10*C4*C6)*C8*C9*L1*L10 + ((2048*I*pi**11*C2*C4*C5 + 2048*I*pi**11*C2*C4*C6)*C8*C9 + (2048*I*pi**11*C10*C2*C4*C5 + 2048*I*pi**11*C10*C2*C4*C6)*C8)*L1*L2 + (((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C5 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6)*C8*C9 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (2048*I*pi**11*C10*C2*C6*C8*C9*L1*L10*L2 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6*C8*C9*L1*L10 + ((2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6*C8*C9 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6*C8)*L1*L2)*L3 + (2048*I*pi**11*C10*C4*C6*C8*C9*L1*L10 + (2048*I*pi**11*C10*C2*C4*C6*C8 + 2048*I*pi**11*C2*C4*C6*C8*C9)*L1*L2 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6*C8*C9 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6*C8)*L1*L3)*L4 + ((2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6*C8*C9*L1*L10 + ((2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5)*C6*C8*C9 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6*C8)*L1*L2 + (((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5)*C6*C8*C9 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6*C8)*L1*L3 + (2048*I*pi**11*C10*C4*C5*C6*C8 + 2048*I*pi**11*C4*C5*C6*C8*C9)*L1*L4)*L5)*L6 + ((2048*I*pi**11*C10*C2*C6 + 2048*I*pi**11*C10*C2*C7)*C8*C9*L1*L10*L2 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C7)*C8*C9*L1*L10 + (((2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C6 + (2048*I*pi**11*C2*C3 + 2048*I*pi**11*C2*C4)*C7)*C8*C9 + ((2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C6 + (2048*I*pi**11*C10*C2*C3 + 2048*I*pi**11*C10*C2*C4)*C7)*C8)*L1*L2)*L3 + ((2048*I*pi**11*C10*C4*C6 + 2048*I*pi**11*C10*C4*C7)*C8*C9*L1*L10 + ((2048*I*pi**11*C2*C4*C6 + 2048*I*pi**11*C2*C4*C7)*C8*C9 + (2048*I*pi**11*C10*C2*C4*C6 + 2048*I*pi**11*C10*C2*C4*C7)*C8)*L1*L2 + (((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C6 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4*C7)*C8*C9 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C6 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4*C7)*C8)*L1*L3)*L4 + (((2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6 + (2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5 + 2048*I*pi**11*C10*C6)*C7)*C8*C9*L1*L10 + (((2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5)*C6 + (2048*I*pi**11*C2*C4 + 2048*I*pi**11*C2*C5 + 2048*I*pi**11*C2*C6)*C7)*C8*C9 + ((2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5)*C6 + (2048*I*pi**11*C10*C2*C4 + 2048*I*pi**11*C10*C2*C5 + 2048*I*pi**11*C10*C2*C6)*C7)*C8)*L1*L2 + ((((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5)*C6 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3)*C4 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C5 + (2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C6)*C7)*C8*C9 + (((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5)*C6 + ((2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3)*C4 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C5 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6)*C7)*C8)*L1*L3 + ((2048*I*pi**11*C4*C5*C6 + (2048*I*pi**11*C4*C5 + 2048*I*pi**11*C4*C6)*C7)*C8*C9 + (2048*I*pi**11*C10*C4*C5*C6 + (2048*I*pi**11*C10*C4*C5 + 2048*I*pi**11*C10*C4*C6)*C7)*C8)*L1*L4)*L5 + (2048*I*pi**11*C10*C6*C7*C8*C9*L1*L10 + (2048*I*pi**11*C10*C2*C6*C7*C8 + 2048*I*pi**11*C2*C6*C7*C8*C9)*L1*L2 + ((2048*I*pi**11*C2 + 2048*I*pi**11*C3 + 2048*I*pi**11*C4)*C6*C7*C8*C9 + (2048*I*pi**11*C10*C2 + 2048*I*pi**11*C10*C3 + 2048*I*pi**11*C10*C4)*C6*C7*C8)*L1*L3 + (2048*I*pi**11*C10*C4*C6*C7*C8 + 2048*I*pi**11*C4*C6*C7*C8*C9)*L1*L4 + ((2048*I*pi**11*C4 + 2048*I*pi**11*C5)*C6*C7*C8*C9 + (2048*I*pi**11*C10*C4 + 2048*I*pi**11*C10*C5)*C6*C7*C8)*L1*L5)*L6)*L7)*L8)*L9)*freq**11 + 1024*(((pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (pi**10*C10*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6*L1*L2*L3 + (pi**10*C10*C2*C4*C5*C6*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + pi**10*C10*C2*C3*C4*C8)*L1*L2*L3*L4 + (((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L1*L2*L3 + ((pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L1*L2*L3 + ((pi**10*C10*C2*C4*C6*C7 + pi**10*C10*C2*C4*C6*C8)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L1*L3 + (pi**10*C10*C4*C5*C6*C7 + pi**10*C10*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (pi**10*C10*C2*C3*C4*C8*L1*L2*L3*L4 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8*L1*L2*L3 + ((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8*L1*L2*L3 + (pi**10*C10*C2*C4*C6*C8*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8*L1*L3)*L4 + (pi**10*C10*C4*C5*C6*C8*L1*L4 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8*L1*L2*L3 + ((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8*L1*L3 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8*L1*L4)*L5 + (pi**10*C10*C2*C6*C7*C8*L1*L2 + pi**10*C10*C4*C6*C7*C8*L1*L4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8*L1*L3 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + ((pi**10*C10*C2*C3*C4*C8 + pi**10*C10*C2*C3*C4*C9)*L1*L2*L3*L4 + (((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C9)*L1*L2*L3 + (((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C9)*L1*L2*L3 + ((pi**10*C10*C2*C4*C6*C8 + pi**10*C10*C2*C4*C6*C9)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C9)*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C9)*L1*L3 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C10*C4*C5*C6*C9)*L1*L4)*L5)*L6 + ((((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8)*C9)*L1*L2*L3 + (((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7 + pi**10*C10*C2*C4*C8)*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8)*C9)*L1*L2 + ((((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8)*C9)*L1*L3 + ((pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8)*C9)*L1*L4)*L5 + ((pi**10*C10*C2*C6*C7*C8 + (pi**10*C10*C2*C6*C7 + pi**10*C10*C2*C6*C8)*C9)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8)*C9)*L1*L3 + (pi**10*C10*C4*C6*C7*C8 + (pi**10*C10*C4*C6*C7 + pi**10*C10*C4*C6*C8)*C9)*L1*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8*C9*L1*L2*L3 + (pi**10*C10*C2*C4*C8*C9*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8*C9*L1*L3)*L4 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8*C9*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8*C9*L1*L3 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8*C9*L1*L4)*L5 + (pi**10*C10*C2*C6*C8*C9*L1*L2 + pi**10*C10*C4*C6*C8*C9*L1*L4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8*C9*L1*L3 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8*C9*L1*L5)*L6 + (pi**10*C10*C6*C7*C8*C9*L1*L6 + (pi**10*C10*C2*C6 + pi**10*C10*C2*C7)*C8*C9*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C7)*C8*C9*L1*L3 + (pi**10*C10*C4*C6 + pi**10*C10*C4*C7)*C8*C9*L1*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C4 + pi**10*C10*C5 + pi**10*C10*C6)*C7)*C8*C9*L1*L5)*L7)*L8)*L9)*ZL - (pi**10*C1*C10*C2*C3*C4*L1*L10*L2*L3*L4 + ((pi**10*C1*C10*C2*C3*C4 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C5 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C5 + pi**10*C1*C10*C2*C4*C6)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6)*L1*L10 + ((pi**10*C1*C2*C3*C4*C5 + pi**10*C1*C2*C3*C4*C6)*L1 + (pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6)*L10)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6*L1*L10*L2*L3 + (pi**10*C1*C10*C2*C4*C6*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6*L1*L10 + (pi**10*C1*C2*C3*C4*C6*L1 + pi**10*C10*C2*C3*C4*C6*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6*L1*L10 + ((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5)*C6*L1 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6*L10)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6*L1*L10 + (pi**10*C1*C2*C4*C5*C6*L1 + pi**10*C10*C2*C4*C5*C6*L10)*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5*C6*L1 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6*L10)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C7 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C10*C2*C4*C7 + pi**10*C1*C10*C2*C4*C8)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8)*L1*L10 + ((pi**10*C1*C2*C3*C4*C6 + pi**10*C1*C2*C3*C4*C7 + pi**10*C1*C2*C3*C4*C8)*L1 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + pi**10*C10*C2*C3*C4*C8)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C7 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8)*L1*L10 + (((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5)*C6 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C7 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8)*L1 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8)*L1*L10 + ((pi**10*C1*C2*C4*C5*C6 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C7 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8)*L1 + (pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L10 + (pi**10*C2*C3*C4*C5*C6 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C7 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C6*C7 + pi**10*C1*C10*C2*C6*C8)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8)*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C7 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8)*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8)*L1*L10 + ((pi**10*C1*C2*C4*C6*C7 + pi**10*C1*C2*C4*C6*C8)*L1 + (pi**10*C10*C2*C4*C6*C7 + pi**10*C10*C2*C4*C6*C8)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L10 + (pi**10*C2*C3*C4*C6*C7 + pi**10*C2*C3*C4*C6*C8)*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8)*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C7 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8)*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C7 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8)*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6*C7 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C8)*L1 + (pi**10*C10*C4*C5*C6*C7 + pi**10*C10*C4*C5*C6*C8)*L10 + (pi**10*C2*C4*C5*C6*C7 + pi**10*C2*C4*C5*C6*C8)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6*C7 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + ((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8*L1*L10*L2*L3 + (pi**10*C1*C10*C2*C4*C8*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8*L1*L10 + (pi**10*C1*C2*C3*C4*C8*L1 + pi**10*C10*C2*C3*C4*C8*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8*L1*L10 + ((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8*L1 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8*L1*L10 + ((pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8*L1 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8*L10 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + (pi**10*C1*C10*C2*C6*C8*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8*L1*L10 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8*L1 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8*L10)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8*L1*L10 + (pi**10*C1*C2*C4*C6*C8*L1 + pi**10*C10*C2*C4*C6*C8*L10)*L2 + (pi**10*C2*C3*C4*C6*C8*L2 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8*L1 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8*L10)*L3)*L4 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8*L1*L10 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8*L1 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8*L10 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8*L2)*L3 + (pi**10*C10*C4*C5*C6*C8*L10 + pi**10*C2*C4*C5*C6*C8*L2 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C8*L1 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7)*C8*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8*L1*L10 + ((pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7)*C8*L1 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7)*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8*L10 + (pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7)*C8*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7)*C8*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7)*C8*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7)*C8*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7)*C8*L1 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8*L10 + (pi**10*C2*C4*C5*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7)*C8*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8*L1*L10 + (pi**10*C1*C2*C6*C7*C8*L1 + pi**10*C10*C2*C6*C7*C8*L10)*L2 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7*C8*L1 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8*L10 + (pi**10*C2*C3 + pi**10*C2*C4)*C6*C7*C8*L2)*L3 + (pi**10*C10*C4*C6*C7*C8*L10 + pi**10*C2*C4*C6*C7*C8*L2 + (pi**10*C1 + pi**10*C2)*C4*C6*C7*C8*L1 + (pi**10*C2 + pi**10*C3)*C4*C6*C7*C8*L3)*L4 + (pi**10*C4*C5*C6*C7*C8*L4 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7*C8*L1 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8*L10 + (pi**10*C2*C4 + pi**10*C2*C5)*C6*C7*C8*L2 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C9)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C8 + pi**10*C1*C10*C2*C4*C9)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C9)*L1*L10 + ((pi**10*C1*C10*C2*C3*C4 + pi**10*C1*C2*C3*C4*C8 + pi**10*C1*C2*C3*C4*C9)*L1 + (pi**10*C10*C2*C3*C4*C8 + pi**10*C10*C2*C3*C4*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C9)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C3*C4 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C5 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C9)*L1 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C5 + pi**10*C1*C10*C2*C4*C6 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C9)*L1 + ((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C9)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C9)*L10 + (pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C6*C8 + pi**10*C1*C10*C2*C6*C9)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C9)*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C9 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6)*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C9)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C2*C4*C6*C8 + pi**10*C1*C2*C4*C6*C9)*L1 + (pi**10*C10*C2*C4*C6*C8 + pi**10*C10*C2*C4*C6*C9)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C9)*L10 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C6*C8 + pi**10*C2*C3*C4*C6*C9)*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C9)*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C9 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6)*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C9)*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C9)*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C9 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6)*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6*C8 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6)*L1 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C10*C4*C5*C6*C9)*L10 + (pi**10*C10*C2*C4*C5*C6 + pi**10*C2*C4*C5*C6*C8 + pi**10*C2*C4*C5*C6*C9)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6*C8 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C9 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7 + pi**10*C1*C10*C2*C8)*C9)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C8)*C9)*L1*L10 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C7 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7)*C8 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C8)*C9)*L1 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C8)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C10*C2*C4*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7)*C8 + (pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7 + pi**10*C1*C2*C4*C8)*C9)*L1 + ((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7 + pi**10*C10*C2*C4*C8)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C8)*C9)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8)*C9)*L10 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + (pi**10*C10*C2*C3*C4 + pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7)*C8 + (pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7 + pi**10*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + (((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C8)*C9)*L1*L10 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7)*C8 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C8)*C9)*L1 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8)*C9)*L10)*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C7 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + (pi**10*C1 + pi**10*C10)*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7)*C8 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C8)*C9)*L1 + ((((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8)*C9)*L10 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + (pi**10*C10*C2 + pi**10*C2*C3)*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7)*C8 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C8)*C9)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C4*C5*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C8)*C9)*L1 + ((pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8)*C9)*L10 + (pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + (pi**10*C10*C2*C4 + pi**10*C2*C4*C5)*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7)*C8 + (pi**10*C2*C4*C5*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C8)*C9)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4)*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7)*C8 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + (((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C6*C8)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C6*C7 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C2*C6*C7)*C8 + (pi**10*C1*C2*C6*C7 + pi**10*C1*C2*C6*C8)*C9)*L1 + (pi**10*C10*C2*C6*C7*C8 + (pi**10*C10*C2*C6*C7 + pi**10*C10*C2*C6*C8)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C8)*C9)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8)*C9)*L10 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C7 + (pi**10*C2*C3 + pi**10*C2*C4)*C6*C8)*C9)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C7 + ((pi**10*C1 + pi**10*C2)*C4*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8 + ((pi**10*C1 + pi**10*C2)*C4*C6*C7 + (pi**10*C1 + pi**10*C2)*C4*C6*C8)*C9)*L1 + (pi**10*C10*C4*C6*C7*C8 + (pi**10*C10*C4*C6*C7 + pi**10*C10*C4*C6*C8)*C9)*L10 + (pi**10*C10*C2*C4*C6*C7 + (pi**10*C10*C2*C4*C6 + pi**10*C2*C4*C6*C7)*C8 + (pi**10*C2*C4*C6*C7 + pi**10*C2*C4*C6*C8)*C9)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + ((pi**10*C2 + pi**10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C2 + pi**10*C3)*C4*C6*C7 + (pi**10*C2 + pi**10*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C7 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6)*C8 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C8)*C9)*L1 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8)*C9)*L10 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6)*C8 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C7 + (pi**10*C2*C4 + pi**10*C2*C5)*C6*C8)*C9)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6)*C8 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C8)*C9)*L3 + (pi**10*C10*C4*C5*C6*C7 + (pi**10*C10*C4*C5*C6 + pi**10*C4*C5*C6*C7)*C8 + (pi**10*C4*C5*C6*C7 + pi**10*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + (pi**10*C1*C10*C2*C8*C9*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C8*C9*L1*L10 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8*C9*L10 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C8*C9 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8)*L1)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C8*C9*L1*L10 + (pi**10*C10*C2*C4*C8*C9*L10 + (pi**10*C1*C10*C2*C4*C8 + pi**10*C1*C2*C4*C8*C9)*L1)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C8*C9*L10 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C8*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8)*L1 + (pi**10*C10*C2*C3*C4*C8 + pi**10*C2*C3*C4*C8*C9)*L2)*L3)*L4 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C8*C9*L1*L10 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8*C9*L10 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C8*C9 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8)*L1)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8*C9*L10 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C8*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8)*L1 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C8*C9 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L2)*L3 + ((pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8)*L1 + ((pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C8*C9 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C8*C9*L1*L10 + (pi**10*C10*C2*C6*C8*C9*L10 + (pi**10*C1*C10*C2*C6*C8 + pi**10*C1*C2*C6*C8*C9)*L1)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8*C9*L10 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C8*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8)*L1 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C8*C9 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L2)*L3 + (pi**10*C10*C4*C6*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C4*C6*C8*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8)*L1 + (pi**10*C10*C2*C4*C6*C8 + pi**10*C2*C4*C6*C8*C9)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C6*C8*C9 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L3)*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8)*L1 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C8*C9 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L3 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C4*C5*C6*C8*C9)*L4)*L5)*L6 + (((pi**10*C1*C10 + pi**10*C10*C2)*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C7)*C8*C9*L1*L10 + ((pi**10*C10*C2*C6 + pi**10*C10*C2*C7)*C8*C9*L10 + ((pi**10*C1*C2*C6 + pi**10*C1*C2*C7)*C8*C9 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8)*L1)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C7)*C8*C9*L10 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C7)*C8*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8)*L1 + (((pi**10*C2*C3 + pi**10*C2*C4)*C6 + (pi**10*C2*C3 + pi**10*C2*C4)*C7)*C8*C9 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8)*L2)*L3 + ((pi**10*C10*C4*C6 + pi**10*C10*C4*C7)*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4*C6 + (pi**10*C1 + pi**10*C2)*C4*C7)*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8)*L1 + ((pi**10*C2*C4*C6 + pi**10*C2*C4*C7)*C8*C9 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4*C6 + (pi**10*C2 + pi**10*C3)*C4*C7)*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8)*L3)*L4 + (((pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C4 + pi**10*C10*C5 + pi**10*C10*C6)*C7)*C8*C9*L10 + ((((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5 + (pi**10*C1 + pi**10*C2)*C6)*C7)*C8*C9 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8)*L1 + (((pi**10*C2*C4 + pi**10*C2*C5)*C6 + (pi**10*C2*C4 + pi**10*C2*C5 + pi**10*C2*C6)*C7)*C8*C9 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8)*L2 + ((((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C6)*C7)*C8*C9 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8)*L3 + ((pi**10*C4*C5*C6 + (pi**10*C4*C5 + pi**10*C4*C6)*C7)*C8*C9 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8)*L4)*L5 + (pi**10*C10*C6*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C6*C7*C8*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8)*L1 + (pi**10*C10*C2*C6*C7*C8 + pi**10*C2*C6*C7*C8*C9)*L2 + ((pi**10*C2 + pi**10*C3 + pi**10*C4)*C6*C7*C8*C9 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8)*L3 + (pi**10*C10*C4*C6*C7*C8 + pi**10*C4*C6*C7*C8*C9)*L4 + ((pi**10*C4 + pi**10*C5)*C6*C7*C8*C9 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**10 + (-512*I*pi**9*C10*C2*C3*C4*L1*L10*L2*L3*L4 + (512*I*pi**9*C1*C10*C2*C3*C4*L1*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C4 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C5 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C5 + 512*I*pi**9*C1*C10*C2*C4*C6)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6)*L1 + (512*I*pi**9*C10*C2*C3*C4*C5 + 512*I*pi**9*C10*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6*L1*L2*L3 + (512*I*pi**9*C1*C10*C2*C4*C6*L1*L2 + (512*I*pi**9*C10*C2*C3*C4*C6*L2 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6*L1)*L3)*L4 + ((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5)*C6*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5)*C6*L1 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5)*C6*L2)*L3 + (512*I*pi**9*C10*C2*C4*C5*C6*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5*C6*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C7 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C6 + 512*I*pi**9*C1*C10*C2*C4*C7 + 512*I*pi**9*C1*C10*C2*C4*C8)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8)*L1 + (512*I*pi**9*C10*C2*C3*C4*C6 + 512*I*pi**9*C10*C2*C3*C4*C7 + 512*I*pi**9*C10*C2*C3*C4*C8)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5)*C6 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C7 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5)*C6 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C7 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8)*L1 + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5)*C6 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C7 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8)*L1 + (512*I*pi**9*C10*C2*C4*C5*C6 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C7 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C6*C7 + 512*I*pi**9*C1*C10*C2*C6*C8)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8)*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8)*L1 + (512*I*pi**9*C10*C2*C4*C6*C7 + 512*I*pi**9*C10*C2*C4*C6*C8)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8)*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8)*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8)*L3 + (512*I*pi**9*C10*C4*C5*C6*C7 + 512*I*pi**9*C10*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8*L1*L2*L3 + (512*I*pi**9*C1*C10*C2*C4*C8*L1*L2 + (512*I*pi**9*C10*C2*C3*C4*C8*L2 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8*L1)*L3)*L4 + ((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8*L1 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8*L1 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8*L3)*L4)*L5 + (512*I*pi**9*C1*C10*C2*C6*C8*L1*L2 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8*L1 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8*L2)*L3 + (512*I*pi**9*C10*C2*C4*C6*C8*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8*L3)*L4 + (512*I*pi**9*C10*C4*C5*C6*C8*L4 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8*L1 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8*L3)*L5)*L6 + ((512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7)*C8*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7)*C8*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7)*C8*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7)*C8*L1 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7)*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7)*C8*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7)*C8*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7)*C8*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7)*C8*L3 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7)*C8*L4)*L5 + (512*I*pi**9*C10*C2*C6*C7*C8*L2 + 512*I*pi**9*C10*C4*C6*C7*C8*L4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7*C8*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7*C8*L3 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + (((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C9)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C8 + 512*I*pi**9*C1*C10*C2*C4*C9)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C9)*L1 + (512*I*pi**9*C10*C2*C3*C4*C8 + 512*I*pi**9*C10*C2*C3*C4*C9)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C9)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C9)*L1 + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C9)*L1 + ((512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C9)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C6*C8 + 512*I*pi**9*C1*C10*C2*C6*C9)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C9)*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C9)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C9)*L1 + (512*I*pi**9*C10*C2*C4*C6*C8 + 512*I*pi**9*C10*C2*C4*C6*C9)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C9)*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C9)*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C9)*L3 + (512*I*pi**9*C10*C4*C5*C6*C8 + 512*I*pi**9*C10*C4*C5*C6*C9)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7)*C8 + (512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7 + 512*I*pi**9*C1*C10*C2*C8)*C9)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7)*C8 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C8)*C9)*L1 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7)*C8 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7)*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C8)*C9)*L1 + ((512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7)*C8 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + 512*I*pi**9*C10*C2*C4*C8)*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*C9)*L3)*L4 + (((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7)*C8 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C8)*C9)*L1 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7)*C8 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*C9)*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7)*C8 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*C9)*L3 + ((512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7)*C8 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*C9)*L4)*L5 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C8)*C9)*L1 + (512*I*pi**9*C10*C2*C6*C7*C8 + (512*I*pi**9*C10*C2*C6*C7 + 512*I*pi**9*C10*C2*C6*C8)*C9)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*C9)*L3 + (512*I*pi**9*C10*C4*C6*C7*C8 + (512*I*pi**9*C10*C4*C6*C7 + 512*I*pi**9*C10*C4*C6*C8)*C9)*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7*C8 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*C9)*L5)*L6)*L7 + (512*I*pi**9*C1*C10*C2*C8*C9*L1*L2 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C8*C9*L1 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8*C9*L2)*L3 + (512*I*pi**9*C10*C2*C4*C8*C9*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C8*C9*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8*C9*L3)*L4 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C8*C9*L1 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8*C9*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8*C9*L3 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8*C9*L4)*L5 + (512*I*pi**9*C10*C2*C6*C8*C9*L2 + 512*I*pi**9*C10*C4*C6*C8*C9*L4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C8*C9*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8*C9*L3 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8*C9*L5)*L6 + (512*I*pi**9*C10*C6*C7*C8*C9*L6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C7)*C8*C9*L1 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8*C9*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8*C9*L3 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8*C9*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8*C9*L5)*L7)*L8)*L9)*ZL*ZS + ((-512*I*pi**9*C10*C2*C3*C4 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C5 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C6)*L1*L10*L2*L3 + ((-512*I*pi**9*C10*C2*C4*C5 - 512*I*pi**9*C10*C2*C4*C6)*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C6)*L1*L10 + (-512*I*pi**9*C2*C3*C4*C5 - 512*I*pi**9*C2*C3*C4*C6)*L1*L2)*L3)*L4)*L5 + ((-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C6*L1*L10*L2*L3 + (-512*I*pi**9*C10*C2*C4*C6*L1*L10*L2 + (-512*I*pi**9*C2*C3*C4*C6*L1*L2 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C6*L1*L10)*L3)*L4 + ((-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5)*C6*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5)*C6*L1*L10 + (-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5)*C6*L1*L2)*L3 + (-512*I*pi**9*C10*C4*C5*C6*L1*L10 - 512*I*pi**9*C2*C4*C5*C6*L1*L2 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + (((-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C6 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C7 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C8)*L1*L10*L2*L3 + ((-512*I*pi**9*C10*C2*C4*C6 - 512*I*pi**9*C10*C2*C4*C7 - 512*I*pi**9*C10*C2*C4*C8)*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C6 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C7 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C8)*L1*L10 + (-512*I*pi**9*C2*C3*C4*C6 - 512*I*pi**9*C2*C3*C4*C7 - 512*I*pi**9*C2*C3*C4*C8)*L1*L2)*L3)*L4 + (((-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5)*C6 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C7 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C8)*L1*L10*L2 + ((((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5)*C6 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C7 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C8)*L1*L10 + ((-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5)*C6 + (-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6)*C7 + (-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6)*C8)*L1*L2)*L3 + ((-512*I*pi**9*C10*C4*C5*C6 + (-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C7 + (-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C8)*L1*L10 + (-512*I*pi**9*C2*C4*C5*C6 + (-512*I*pi**9*C2*C4*C5 - 512*I*pi**9*C2*C4*C6)*C7 + (-512*I*pi**9*C2*C4*C5 - 512*I*pi**9*C2*C4*C6)*C8)*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5*C6 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6)*C7 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + ((-512*I*pi**9*C10*C2*C6*C7 - 512*I*pi**9*C10*C2*C6*C8)*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C7 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C8)*L1*L10 + ((-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6*C7 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6*C8)*L1*L2)*L3 + ((-512*I*pi**9*C10*C4*C6*C7 - 512*I*pi**9*C10*C4*C6*C8)*L1*L10 + (-512*I*pi**9*C2*C4*C6*C7 - 512*I*pi**9*C2*C4*C6*C8)*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6*C7 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6*C8)*L1*L3)*L4 + (((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C7 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C8)*L1*L10 + ((-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6*C7 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6*C8)*L1*L2 + (((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6*C7 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6*C8)*L1*L3 + (-512*I*pi**9*C4*C5*C6*C7 - 512*I*pi**9*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + ((-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C8*L1*L10*L2*L3 + (-512*I*pi**9*C10*C2*C4*C8*L1*L10*L2 + (-512*I*pi**9*C2*C3*C4*C8*L1*L2 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C8*L1*L10)*L3)*L4 + ((-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C8*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C8*L1*L10 + (-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6)*C8*L1*L2)*L3 + ((-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C8*L1*L10 + (-512*I*pi**9*C2*C4*C5 - 512*I*pi**9*C2*C4*C6)*C8*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + (-512*I*pi**9*C10*C2*C6*C8*L1*L10*L2 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C8*L1*L10 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6*C8*L1*L2)*L3 + (-512*I*pi**9*C10*C4*C6*C8*L1*L10 - 512*I*pi**9*C2*C4*C6*C8*L1*L2 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6*C8*L1*L3)*L4 + (-512*I*pi**9*C4*C5*C6*C8*L1*L4 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C8*L1*L10 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6*C8*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + ((-512*I*pi**9*C10*C2*C6 - 512*I*pi**9*C10*C2*C7)*C8*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C7)*C8*L1*L10 + ((-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C7)*C8*L1*L2)*L3 + ((-512*I*pi**9*C10*C4*C6 - 512*I*pi**9*C10*C4*C7)*C8*L1*L10 + (-512*I*pi**9*C2*C4*C6 - 512*I*pi**9*C2*C4*C7)*C8*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C7)*C8*L1*L3)*L4 + (((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5 - 512*I*pi**9*C10*C6)*C7)*C8*L1*L10 + ((-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5 - 512*I*pi**9*C2*C6)*C7)*C8*L1*L2 + (((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6)*C7)*C8*L1*L3 + (-512*I*pi**9*C4*C5*C6 + (-512*I*pi**9*C4*C5 - 512*I*pi**9*C4*C6)*C7)*C8*L1*L4)*L5 + (-512*I*pi**9*C10*C6*C7*C8*L1*L10 - 512*I*pi**9*C2*C6*C7*C8*L1*L2 - 512*I*pi**9*C4*C6*C7*C8*L1*L4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6*C7*C8*L1*L3 + (-512*I*pi**9*C4 - 512*I*pi**9*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + (((-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C8 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C9)*L1*L10*L2*L3 + ((-512*I*pi**9*C10*C2*C4*C8 - 512*I*pi**9*C10*C2*C4*C9)*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C8 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C9)*L1*L10 + (-512*I*pi**9*C10*C2*C3*C4 - 512*I*pi**9*C2*C3*C4*C8 - 512*I*pi**9*C2*C3*C4*C9)*L1*L2)*L3)*L4 + (((-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C8 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C9)*L1*L10*L2 + ((((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C8 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C9)*L1*L10 + (-512*I*pi**9*C10*C2*C3*C4 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C5 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C6 + (-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6)*C8 + (-512*I*pi**9*C2*C3*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C5 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6)*C9)*L1*L2)*L3 + (((-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C8 + (-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C9)*L1*L10 + (-512*I*pi**9*C10*C2*C4*C5 - 512*I*pi**9*C10*C2*C4*C6 + (-512*I*pi**9*C2*C4*C5 - 512*I*pi**9*C2*C4*C6)*C8 + (-512*I*pi**9*C2*C4*C5 - 512*I*pi**9*C2*C4*C6)*C9)*L1*L2 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C6 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6)*C8 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + ((-512*I*pi**9*C10*C2*C6*C8 - 512*I*pi**9*C10*C2*C6*C9)*L1*L10*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C8 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C9)*L1*L10 + ((-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6*C8 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6*C9 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C6)*L1*L2)*L3 + ((-512*I*pi**9*C10*C4*C6*C8 - 512*I*pi**9*C10*C4*C6*C9)*L1*L10 + (-512*I*pi**9*C10*C2*C4*C6 - 512*I*pi**9*C2*C4*C6*C8 - 512*I*pi**9*C2*C4*C6*C9)*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6*C8 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6*C9 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C6)*L1*L3)*L4 + (((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C8 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C9)*L1*L10 + ((-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6*C8 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6*C9 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5)*C6)*L1*L2 + (((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6*C8 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6*C9 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5)*C6)*L1*L3 + (-512*I*pi**9*C10*C4*C5*C6 - 512*I*pi**9*C4*C5*C6*C8 - 512*I*pi**9*C4*C5*C6*C9)*L1*L4)*L5)*L6 + (((-512*I*pi**9*C10*C2*C6 - 512*I*pi**9*C10*C2*C7)*C8 + (-512*I*pi**9*C10*C2*C6 - 512*I*pi**9*C10*C2*C7 - 512*I*pi**9*C10*C2*C8)*C9)*L1*L10*L2 + ((((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C7)*C8 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C7 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C8)*C9)*L1*L10 + ((-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C6 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C7 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C7)*C8 + ((-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C6 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C7 + (-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C8)*C9)*L1*L2)*L3 + (((-512*I*pi**9*C10*C4*C6 - 512*I*pi**9*C10*C4*C7)*C8 + (-512*I*pi**9*C10*C4*C6 - 512*I*pi**9*C10*C4*C7 - 512*I*pi**9*C10*C4*C8)*C9)*L1*L10 + (-512*I*pi**9*C10*C2*C4*C6 - 512*I*pi**9*C10*C2*C4*C7 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C2*C4*C6 - 512*I*pi**9*C2*C4*C7)*C8 + (-512*I*pi**9*C2*C4*C6 - 512*I*pi**9*C2*C4*C7 - 512*I*pi**9*C2*C4*C8)*C9)*L1*L2 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C6 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C7 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C7 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4)*C8 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C6 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C7 + (-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5 - 512*I*pi**9*C10*C6)*C7)*C8 + ((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5 - 512*I*pi**9*C10*C6)*C7 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5 - 512*I*pi**9*C10*C6)*C8)*C9)*L1*L10 + ((-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5)*C6 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C7 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5 - 512*I*pi**9*C2*C6)*C7)*C8 + ((-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5)*C6 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5 - 512*I*pi**9*C2*C6)*C7 + (-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5 - 512*I*pi**9*C2*C6)*C8)*C9)*L1*L2 + (((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5)*C6 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C7 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 + (-512*I*pi**9*C10 - 512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6)*C7)*C8 + (((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5)*C6 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6)*C7 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6)*C8)*C9)*L1*L3 + (-512*I*pi**9*C10*C4*C5*C6 + (-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C7 + (-512*I*pi**9*C10*C4*C5 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C4*C5)*C6 + (-512*I*pi**9*C4*C5 - 512*I*pi**9*C4*C6)*C7)*C8 + (-512*I*pi**9*C4*C5*C6 + (-512*I*pi**9*C4*C5 - 512*I*pi**9*C4*C6)*C7 + (-512*I*pi**9*C4*C5 - 512*I*pi**9*C4*C6)*C8)*C9)*L1*L4)*L5 + ((-512*I*pi**9*C10*C6*C7*C8 + (-512*I*pi**9*C10*C6*C7 - 512*I*pi**9*C10*C6*C8)*C9)*L1*L10 + (-512*I*pi**9*C10*C2*C6*C7 + (-512*I*pi**9*C10*C2*C6 - 512*I*pi**9*C2*C6*C7)*C8 + (-512*I*pi**9*C2*C6*C7 - 512*I*pi**9*C2*C6*C8)*C9)*L1*L2 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C7 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6*C7 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C8 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6*C7 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6*C8)*C9)*L1*L3 + (-512*I*pi**9*C10*C4*C6*C7 + (-512*I*pi**9*C10*C4*C6 - 512*I*pi**9*C4*C6*C7)*C8 + (-512*I*pi**9*C4*C6*C7 - 512*I*pi**9*C4*C6*C8)*C9)*L1*L4 + ((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C7 + ((-512*I*pi**9*C4 - 512*I*pi**9*C5)*C6*C7 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6)*C8 + ((-512*I*pi**9*C4 - 512*I*pi**9*C5)*C6*C7 + (-512*I*pi**9*C4 - 512*I*pi**9*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + (-512*I*pi**9*C10*C2*C8*C9*L1*L10*L2 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C8*C9*L1*L10 + ((-512*I*pi**9*C2*C3 - 512*I*pi**9*C2*C4)*C8*C9 + (-512*I*pi**9*C10*C2*C3 - 512*I*pi**9*C10*C2*C4)*C8)*L1*L2)*L3 + (-512*I*pi**9*C10*C4*C8*C9*L1*L10 + (-512*I*pi**9*C10*C2*C4*C8 - 512*I*pi**9*C2*C4*C8*C9)*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C8*C9 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4*C8)*L1*L3)*L4 + ((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5 - 512*I*pi**9*C10*C6)*C8*C9*L1*L10 + ((-512*I*pi**9*C2*C4 - 512*I*pi**9*C2*C5 - 512*I*pi**9*C2*C6)*C8*C9 + (-512*I*pi**9*C10*C2*C4 - 512*I*pi**9*C10*C2*C5 - 512*I*pi**9*C10*C2*C6)*C8)*L1*L2 + (((-512*I*pi**9*C2 - 512*I*pi**9*C3)*C4 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C5 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6)*C8*C9 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3)*C4 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C5 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6)*C8)*L1*L3 + ((-512*I*pi**9*C4*C5 - 512*I*pi**9*C4*C6)*C8*C9 + (-512*I*pi**9*C10*C4*C5 - 512*I*pi**9*C10*C4*C6)*C8)*L1*L4)*L5 + (-512*I*pi**9*C10*C6*C8*C9*L1*L10 + (-512*I*pi**9*C10*C2*C6*C8 - 512*I*pi**9*C2*C6*C8*C9)*L1*L2 + ((-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6*C8*C9 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6*C8)*L1*L3 + (-512*I*pi**9*C10*C4*C6*C8 - 512*I*pi**9*C4*C6*C8*C9)*L1*L4 + ((-512*I*pi**9*C4 - 512*I*pi**9*C5)*C6*C8*C9 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6*C8)*L1*L5)*L6 + ((-512*I*pi**9*C10*C6 - 512*I*pi**9*C10*C7)*C8*C9*L1*L10 + ((-512*I*pi**9*C2*C6 - 512*I*pi**9*C2*C7)*C8*C9 + (-512*I*pi**9*C10*C2*C6 - 512*I*pi**9*C10*C2*C7)*C8)*L1*L2 + (((-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C6 + (-512*I*pi**9*C2 - 512*I*pi**9*C3 - 512*I*pi**9*C4)*C7)*C8*C9 + ((-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C6 + (-512*I*pi**9*C10*C2 - 512*I*pi**9*C10*C3 - 512*I*pi**9*C10*C4)*C7)*C8)*L1*L3 + ((-512*I*pi**9*C4*C6 - 512*I*pi**9*C4*C7)*C8*C9 + (-512*I*pi**9*C10*C4*C6 - 512*I*pi**9*C10*C4*C7)*C8)*L1*L4 + (((-512*I*pi**9*C4 - 512*I*pi**9*C5)*C6 + (-512*I*pi**9*C4 - 512*I*pi**9*C5 - 512*I*pi**9*C6)*C7)*C8*C9 + ((-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5)*C6 + (-512*I*pi**9*C10*C4 - 512*I*pi**9*C10*C5 - 512*I*pi**9*C10*C6)*C7)*C8)*L1*L5 + (-512*I*pi**9*C10*C6*C7*C8 - 512*I*pi**9*C6*C7*C8*C9)*L1*L6)*L7)*L8)*L9)*freq**9 - 256*((pi**8*C10*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L1*L2*L3 + ((pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L1*L3)*L4)*L5 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6*L1*L2*L3 + (pi**8*C10*C2*C4*C6*L1*L2 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6*L1*L3)*L4 + (pi**8*C10*C4*C5*C6*L1*L4 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6*L1*L3)*L5)*L6 + (((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L1*L2*L3 + ((pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + pi**8*C10*C2*C4*C8)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L1*L3)*L4 + (((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L1*L3 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L1*L4)*L5 + ((pi**8*C10*C2*C6*C7 + pi**8*C10*C2*C6*C8)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L1*L3 + (pi**8*C10*C4*C6*C7 + pi**8*C10*C4*C6*C8)*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L1*L5)*L6)*L7 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8*L1*L2*L3 + (pi**8*C10*C2*C4*C8*L1*L2 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8*L1*L3)*L4 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8*L1*L3 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8*L1*L4)*L5 + (pi**8*C10*C2*C6*C8*L1*L2 + pi**8*C10*C4*C6*C8*L1*L4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8*L1*L3 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8*L1*L5)*L6 + (pi**8*C10*C6*C7*C8*L1*L6 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8*L1*L3 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8*L1*L5)*L7)*L8 + (((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C9)*L1*L2*L3 + ((pi**8*C10*C2*C4*C8 + pi**8*C10*C2*C4*C9)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C8 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C9)*L1*L3)*L4 + (((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C9)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C9)*L1*L3 + ((pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C9)*L1*L4)*L5 + ((pi**8*C10*C2*C6*C8 + pi**8*C10*C2*C6*C9)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C9)*L1*L3 + (pi**8*C10*C4*C6*C8 + pi**8*C10*C4*C6*C9)*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C8 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C9)*L1*L5)*L6 + (((pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7 + pi**8*C10*C2*C8)*C9)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8)*C9)*L1*L3 + ((pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7 + pi**8*C10*C4*C8)*C9)*L1*L4 + (((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8)*C9)*L1*L5 + (pi**8*C10*C6*C7*C8 + (pi**8*C10*C6*C7 + pi**8*C10*C6*C8)*C9)*L1*L6)*L7 + (pi**8*C10*C2*C8*C9*L1*L2 + pi**8*C10*C4*C8*C9*L1*L4 + pi**8*C10*C6*C8*C9*L1*L6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8*C9*L1*L3 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8*C9*L1*L5 + (pi**8*C10*C6 + pi**8*C10*C7)*C8*C9*L1*L7)*L8)*L9)*ZL - ((pi**8*C1*C10*C2*C3 + pi**8*C1*C10*C2*C4)*L1*L10*L2*L3 + (pi**8*C1*C10*C2*C4*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4*L1*L10 + (pi**8*C1*C2*C3*C4*L1 + pi**8*C10*C2*C3*C4*L10)*L2)*L3)*L4 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C10*C2*C5 + pi**8*C1*C10*C2*C6)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C5 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6)*L1*L10 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6)*L1 + (pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6)*L1*L10 + ((pi**8*C1*C2*C4*C5 + pi**8*C1*C2*C4*C6)*L1 + (pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L10 + (pi**8*C2*C3*C4*C5 + pi**8*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + (pi**8*C1*C10*C2*C6*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6*L1*L10 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6*L1 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6*L10)*L2)*L3 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6*L1*L10 + (pi**8*C1*C2*C4*C6*L1 + pi**8*C10*C2*C4*C6*L10)*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6*L1 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6*L10)*L3)*L4 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6*L1*L10 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6*L1 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5)*C6*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6*L10 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5)*C6*L2)*L3 + (pi**8*C10*C4*C5*C6*L10 + pi**8*C2*C4*C5*C6*L2 + (pi**8*C1 + pi**8*C2)*C4*C5*C6*L1 + (pi**8*C2 + pi**8*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C10*C2*C7 + pi**8*C1*C10*C2*C8)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C7 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8)*L1*L10 + (((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C7 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8)*L1 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C8)*L1*L10 + ((pi**8*C1*C2*C4*C6 + pi**8*C1*C2*C4*C7 + pi**8*C1*C2*C4*C8)*L1 + (pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + pi**8*C10*C2*C4*C8)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L10 + (pi**8*C2*C3*C4*C6 + pi**8*C2*C3*C4*C7 + pi**8*C2*C3*C4*C8)*L2)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8)*L1*L10 + (((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C7 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8)*L1 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L10)*L2 + ((((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5)*C6 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C7 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L10 + ((pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5)*C6 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C7 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C5*C6 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8)*L1 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L10 + (pi**8*C2*C4*C5*C6 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C7 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C5*C6 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C7 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8)*L3)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C8)*L1*L10 + ((pi**8*C1*C2*C6*C7 + pi**8*C1*C2*C6*C8)*L1 + (pi**8*C10*C2*C6*C7 + pi**8*C10*C2*C6*C8)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6*C7 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C8)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6*C7 + (pi**8*C1 + pi**8*C2)*C4*C6*C8)*L1 + (pi**8*C10*C4*C6*C7 + pi**8*C10*C4*C6*C8)*L10 + (pi**8*C2*C4*C6*C7 + pi**8*C2*C4*C6*C8)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6*C7 + (pi**8*C2 + pi**8*C3)*C4*C6*C8)*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C7 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8)*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6*C7 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C8)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C7 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8)*L3 + (pi**8*C4*C5*C6*C7 + pi**8*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + (pi**8*C1*C10*C2*C8*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8*L1*L10 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8*L1 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8*L10)*L2)*L3 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4*C8*L1*L10 + (pi**8*C1*C2*C4*C8*L1 + pi**8*C10*C2*C4*C8*L10)*L2 + (pi**8*C2*C3*C4*C8*L2 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8*L1 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8*L10)*L3)*L4 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8*L1*L10 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8*L1 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8*L10 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8*L1 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8*L10 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8*L3)*L4)*L5 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6*C8*L1*L10 + (pi**8*C1*C2*C6*C8*L1 + pi**8*C10*C2*C6*C8*L10)*L2 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8*L1 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8*L10 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C8*L2)*L3 + (pi**8*C10*C4*C6*C8*L10 + pi**8*C2*C4*C6*C8*L2 + (pi**8*C1 + pi**8*C2)*C4*C6*C8*L1 + (pi**8*C2 + pi**8*C3)*C4*C6*C8*L3)*L4 + (pi**8*C4*C5*C6*C8*L4 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8*L1 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8*L10 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8*L3)*L5)*L6 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8*L1*L10 + ((pi**8*C1*C2*C6 + pi**8*C1*C2*C7)*C8*L1 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7)*C8*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7)*C8*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7)*C8*L1 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8*L10 + (pi**8*C2*C4*C6 + pi**8*C2*C4*C7)*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7)*C8*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7)*C8*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7)*C8*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7)*C8*L3 + (pi**8*C4*C5*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7)*C8*L4)*L5 + (pi**8*C10*C6*C7*C8*L10 + pi**8*C2*C6*C7*C8*L2 + pi**8*C4*C6*C7*C8*L4 + (pi**8*C1 + pi**8*C2)*C6*C7*C8*L1 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7*C8*L3 + (pi**8*C4 + pi**8*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + ((pi**8*C1*C10*C2*C8 + pi**8*C1*C10*C2*C9)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C3 + pi**8*C1*C10*C2*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C9)*L1 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C9)*L1*L10 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C2*C4*C8 + pi**8*C1*C2*C4*C9)*L1 + (pi**8*C10*C2*C4*C8 + pi**8*C10*C2*C4*C9)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C8 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C9)*L10 + (pi**8*C10*C2*C3*C4 + pi**8*C2*C3*C4*C8 + pi**8*C2*C3*C4*C9)*L2)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C10*C2*C5 + pi**8*C1*C10*C2*C6 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C9)*L1 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C9)*L10)*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C5 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C9)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C9)*L10 + (pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C9)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C9)*L1 + ((pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C9)*L10 + (pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C9)*L3)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C9)*L1*L10 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C2*C6*C8 + pi**8*C1*C2*C6*C9)*L1 + (pi**8*C10*C2*C6*C8 + pi**8*C10*C2*C6*C9)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C9)*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6*C8 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C9 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6*C8 + (pi**8*C1 + pi**8*C2)*C4*C6*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6)*L1 + (pi**8*C10*C4*C6*C8 + pi**8*C10*C4*C6*C9)*L10 + (pi**8*C10*C2*C4*C6 + pi**8*C2*C4*C6*C8 + pi**8*C2*C4*C6*C9)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6*C8 + (pi**8*C2 + pi**8*C3)*C4*C6*C9 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6)*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C8 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C9)*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6*C8 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C9 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C9 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6)*L3 + (pi**8*C10*C4*C5*C6 + pi**8*C4*C5*C6*C8 + pi**8*C4*C5*C6*C9)*L4)*L5)*L6 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C8)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C10*C2*C7 + (pi**8*C1*C10*C2 + pi**8*C1*C2*C6 + pi**8*C1*C2*C7)*C8 + (pi**8*C1*C2*C6 + pi**8*C1*C2*C7 + pi**8*C1*C2*C8)*C9)*L1 + ((pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7 + pi**8*C10*C2*C8)*C9)*L10)*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C7 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7)*C8 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C8)*C9)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8)*C9)*L10 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7)*C8 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7 + (pi**8*C2*C3 + pi**8*C2*C4)*C8)*C9)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C7 + ((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8 + ((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7 + (pi**8*C1 + pi**8*C2)*C4*C8)*C9)*L1 + ((pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7 + pi**8*C10*C4*C8)*C9)*L10 + (pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + (pi**8*C10*C2*C4 + pi**8*C2*C4*C6 + pi**8*C2*C4*C7)*C8 + (pi**8*C2*C4*C6 + pi**8*C2*C4*C7 + pi**8*C2*C4*C8)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4)*C8 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7 + (pi**8*C2 + pi**8*C3)*C4*C8)*C9)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + (pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7)*C8 + (((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C8)*C9)*L1 + (((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8)*C9)*L10 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + (pi**8*C10*C2 + pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7)*C8 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C8)*C9)*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + (pi**8*C10 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7)*C8 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C8)*C9)*L3 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + (pi**8*C10*C4 + pi**8*C4*C5)*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7)*C8 + (pi**8*C4*C5*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7 + (pi**8*C4*C5 + pi**8*C4*C6)*C8)*C9)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C7 + ((pi**8*C1 + pi**8*C2)*C6*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8 + ((pi**8*C1 + pi**8*C2)*C6*C7 + (pi**8*C1 + pi**8*C2)*C6*C8)*C9)*L1 + (pi**8*C10*C6*C7*C8 + (pi**8*C10*C6*C7 + pi**8*C10*C6*C8)*C9)*L10 + (pi**8*C10*C2*C6*C7 + (pi**8*C10*C2*C6 + pi**8*C2*C6*C7)*C8 + (pi**8*C2*C6*C7 + pi**8*C2*C6*C8)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C8)*C9)*L3 + (pi**8*C10*C4*C6*C7 + (pi**8*C10*C4*C6 + pi**8*C4*C6*C7)*C8 + (pi**8*C4*C6*C7 + pi**8*C4*C6*C8)*C9)*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + ((pi**8*C4 + pi**8*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6)*C8 + ((pi**8*C4 + pi**8*C5)*C6*C7 + (pi**8*C4 + pi**8*C5)*C6*C8)*C9)*L5)*L6)*L7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C8*C9*L1*L10 + (pi**8*C10*C2*C8*C9*L10 + (pi**8*C1*C10*C2*C8 + pi**8*C1*C2*C8*C9)*L1)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8*C9*L10 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C8*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8)*L1 + ((pi**8*C2*C3 + pi**8*C2*C4)*C8*C9 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L2)*L3 + (pi**8*C10*C4*C8*C9*L10 + ((pi**8*C1 + pi**8*C2)*C4*C8*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C8)*L1 + (pi**8*C10*C2*C4*C8 + pi**8*C2*C4*C8*C9)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C8*C9 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L3)*L4 + ((pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8*C9*L10 + (((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C8*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8)*L1 + ((pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C8*C9 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C8*C9 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L3 + ((pi**8*C4*C5 + pi**8*C4*C6)*C8*C9 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L4)*L5 + (pi**8*C10*C6*C8*C9*L10 + ((pi**8*C1 + pi**8*C2)*C6*C8*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C8)*L1 + (pi**8*C10*C2*C6*C8 + pi**8*C2*C6*C8*C9)*L2 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C8*C9 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L3 + (pi**8*C10*C4*C6*C8 + pi**8*C4*C6*C8*C9)*L4 + ((pi**8*C4 + pi**8*C5)*C6*C8*C9 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L5)*L6 + ((pi**8*C10*C6 + pi**8*C10*C7)*C8*C9*L10 + (((pi**8*C1 + pi**8*C2)*C6 + (pi**8*C1 + pi**8*C2)*C7)*C8*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8)*L1 + ((pi**8*C2*C6 + pi**8*C2*C7)*C8*C9 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8)*L2 + (((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C7)*C8*C9 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8)*L3 + ((pi**8*C4*C6 + pi**8*C4*C7)*C8*C9 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8)*L4 + (((pi**8*C4 + pi**8*C5)*C6 + (pi**8*C4 + pi**8*C5 + pi**8*C6)*C7)*C8*C9 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8)*L5 + (pi**8*C10*C6*C7*C8 + pi**8*C6*C7*C8*C9)*L6)*L7)*L8)*L9)*ZS)*freq**8 + ((128*I*pi**7*C10*C2*C3 + 128*I*pi**7*C10*C2*C4)*L1*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 - 128*I*pi**7*C1*C10*C2*C4)*L1*L2*L3 + (-128*I*pi**7*C1*C10*C2*C4*L1*L2 + (-128*I*pi**7*C10*C2*C3*C4*L2 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3)*C4*L1)*L3)*L4 + ((-128*I*pi**7*C1*C10*C2*C4 - 128*I*pi**7*C1*C10*C2*C5 - 128*I*pi**7*C1*C10*C2*C6)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3)*C4 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C5 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6)*L1 + (-128*I*pi**7*C10*C2*C3*C4 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C5 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6)*L1 + (-128*I*pi**7*C10*C2*C4*C5 - 128*I*pi**7*C10*C2*C4*C6)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6)*L3)*L4)*L5 + (-128*I*pi**7*C1*C10*C2*C6*L1*L2 + ((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6*L1 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6*L2)*L3 + (-128*I*pi**7*C10*C2*C4*C6*L2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6*L3)*L4 + (-128*I*pi**7*C10*C4*C5*C6*L4 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5)*C6*L1 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5)*C6*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5)*C6*L3)*L5)*L6 + ((-128*I*pi**7*C1*C10*C2*C6 - 128*I*pi**7*C1*C10*C2*C7 - 128*I*pi**7*C1*C10*C2*C8)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C7 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8)*L1 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C7 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8)*L1 + (-128*I*pi**7*C10*C2*C4*C6 - 128*I*pi**7*C10*C2*C4*C7 - 128*I*pi**7*C10*C2*C4*C8)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8)*L3)*L4 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5)*C6 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C7 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8)*L1 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5)*C6 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C7 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5)*C6 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C7 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8)*L3 + (-128*I*pi**7*C10*C4*C5*C6 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C7 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8)*L4)*L5 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8)*L1 + (-128*I*pi**7*C10*C2*C6*C7 - 128*I*pi**7*C10*C2*C6*C8)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8)*L3 + (-128*I*pi**7*C10*C4*C6*C7 - 128*I*pi**7*C10*C4*C6*C8)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8)*L5)*L6)*L7 + (-128*I*pi**7*C1*C10*C2*C8*L1*L2 + ((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8*L1 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8*L2)*L3 + (-128*I*pi**7*C10*C2*C4*C8*L2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8*L3)*L4 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8*L1 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8*L3 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8*L4)*L5 + (-128*I*pi**7*C10*C2*C6*C8*L2 - 128*I*pi**7*C10*C4*C6*C8*L4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8*L3 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8*L5)*L6 + (-128*I*pi**7*C10*C6*C7*C8*L6 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7)*C8*L1 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7)*C8*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7)*C8*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7)*C8*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7)*C8*L5)*L7)*L8 + ((-128*I*pi**7*C1*C10*C2*C8 - 128*I*pi**7*C1*C10*C2*C9)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C9)*L1 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C9)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C9)*L1 + (-128*I*pi**7*C10*C2*C4*C8 - 128*I*pi**7*C10*C2*C4*C9)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C9)*L3)*L4 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C9)*L1 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C9)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C9)*L3 + ((-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C9)*L4)*L5 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C9)*L1 + (-128*I*pi**7*C10*C2*C6*C8 - 128*I*pi**7*C10*C2*C6*C9)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C9)*L3 + (-128*I*pi**7*C10*C4*C6*C8 - 128*I*pi**7*C10*C4*C6*C9)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C9)*L5)*L6 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7)*C8 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C8)*C9)*L1 + ((-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7)*C8 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 - 128*I*pi**7*C10*C2*C8)*C9)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7)*C8 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*C9)*L3 + ((-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7)*C8 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 - 128*I*pi**7*C10*C4*C8)*C9)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7)*C8 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*C9)*L5 + (-128*I*pi**7*C10*C6*C7*C8 + (-128*I*pi**7*C10*C6*C7 - 128*I*pi**7*C10*C6*C8)*C9)*L6)*L7 + (-128*I*pi**7*C10*C2*C8*C9*L2 - 128*I*pi**7*C10*C4*C8*C9*L4 - 128*I*pi**7*C10*C6*C8*C9*L6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C8*C9*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8*C9*L3 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8*C9*L5 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8*C9*L7)*L8)*L9)*ZL*ZS + (128*I*pi**7*C10*C2*C4*L1*L10*L2 + (128*I*pi**7*C2*C3*C4*L1*L2 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3)*C4*L1*L10)*L3)*L4 + ((128*I*pi**7*C10*C2*C4 + 128*I*pi**7*C10*C2*C5 + 128*I*pi**7*C10*C2*C6)*L1*L10*L2 + (((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3)*C4 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C5 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C6)*L1*L10 + (128*I*pi**7*C2*C3*C4 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C5 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C6)*L1*L2)*L3 + ((128*I*pi**7*C10*C4*C5 + 128*I*pi**7*C10*C4*C6)*L1*L10 + (128*I*pi**7*C2*C4*C5 + 128*I*pi**7*C2*C4*C6)*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C5 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C6)*L1*L3)*L4)*L5 + (128*I*pi**7*C10*C2*C6*L1*L10*L2 + ((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C6*L1*L10 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C6*L1*L2)*L3 + (128*I*pi**7*C10*C4*C6*L1*L10 + 128*I*pi**7*C2*C4*C6*L1*L2 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C6*L1*L3)*L4 + (128*I*pi**7*C4*C5*C6*L1*L4 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5)*C6*L1*L10 + (128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5)*C6*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5)*C6*L1*L3)*L5)*L6 + ((128*I*pi**7*C10*C2*C6 + 128*I*pi**7*C10*C2*C7 + 128*I*pi**7*C10*C2*C8)*L1*L10*L2 + (((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C6 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C7 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C8)*L1*L10 + ((128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C6 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C7 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C8)*L1*L2)*L3 + ((128*I*pi**7*C10*C4*C6 + 128*I*pi**7*C10*C4*C7 + 128*I*pi**7*C10*C4*C8)*L1*L10 + (128*I*pi**7*C2*C4*C6 + 128*I*pi**7*C2*C4*C7 + 128*I*pi**7*C2*C4*C8)*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C6 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C7 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C8)*L1*L3)*L4 + (((128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5)*C6 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C7 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C8)*L1*L10 + ((128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5)*C6 + (128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5 + 128*I*pi**7*C2*C6)*C7 + (128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5 + 128*I*pi**7*C2*C6)*C8)*L1*L2 + (((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5)*C6 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6)*C7 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6)*C8)*L1*L3 + (128*I*pi**7*C4*C5*C6 + (128*I*pi**7*C4*C5 + 128*I*pi**7*C4*C6)*C7 + (128*I*pi**7*C4*C5 + 128*I*pi**7*C4*C6)*C8)*L1*L4)*L5 + ((128*I*pi**7*C10*C6*C7 + 128*I*pi**7*C10*C6*C8)*L1*L10 + (128*I*pi**7*C2*C6*C7 + 128*I*pi**7*C2*C6*C8)*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6*C7 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6*C8)*L1*L3 + (128*I*pi**7*C4*C6*C7 + 128*I*pi**7*C4*C6*C8)*L1*L4 + ((128*I*pi**7*C4 + 128*I*pi**7*C5)*C6*C7 + (128*I*pi**7*C4 + 128*I*pi**7*C5)*C6*C8)*L1*L5)*L6)*L7 + (128*I*pi**7*C10*C2*C8*L1*L10*L2 + ((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C8*L1*L10 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C8*L1*L2)*L3 + (128*I*pi**7*C10*C4*C8*L1*L10 + 128*I*pi**7*C2*C4*C8*L1*L2 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C8*L1*L3)*L4 + ((128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C8*L1*L10 + (128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5 + 128*I*pi**7*C2*C6)*C8*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6)*C8*L1*L3 + (128*I*pi**7*C4*C5 + 128*I*pi**7*C4*C6)*C8*L1*L4)*L5 + (128*I*pi**7*C10*C6*C8*L1*L10 + 128*I*pi**7*C2*C6*C8*L1*L2 + 128*I*pi**7*C4*C6*C8*L1*L4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6*C8*L1*L3 + (128*I*pi**7*C4 + 128*I*pi**7*C5)*C6*C8*L1*L5)*L6 + (128*I*pi**7*C6*C7*C8*L1*L6 + (128*I*pi**7*C10*C6 + 128*I*pi**7*C10*C7)*C8*L1*L10 + (128*I*pi**7*C2*C6 + 128*I*pi**7*C2*C7)*C8*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C7)*C8*L1*L3 + (128*I*pi**7*C4*C6 + 128*I*pi**7*C4*C7)*C8*L1*L4 + ((128*I*pi**7*C4 + 128*I*pi**7*C5)*C6 + (128*I*pi**7*C4 + 128*I*pi**7*C5 + 128*I*pi**7*C6)*C7)*C8*L1*L5)*L7)*L8 + ((128*I*pi**7*C10*C2*C8 + 128*I*pi**7*C10*C2*C9)*L1*L10*L2 + (((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C8 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C9)*L1*L10 + (128*I*pi**7*C10*C2*C3 + 128*I*pi**7*C10*C2*C4 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C8 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4)*C9)*L1*L2)*L3 + ((128*I*pi**7*C10*C4*C8 + 128*I*pi**7*C10*C4*C9)*L1*L10 + (128*I*pi**7*C10*C2*C4 + 128*I*pi**7*C2*C4*C8 + 128*I*pi**7*C2*C4*C9)*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C8 + (128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C9 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3)*C4)*L1*L3)*L4 + (((128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C8 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C9)*L1*L10 + (128*I*pi**7*C10*C2*C4 + 128*I*pi**7*C10*C2*C5 + 128*I*pi**7*C10*C2*C6 + (128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5 + 128*I*pi**7*C2*C6)*C8 + (128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5 + 128*I*pi**7*C2*C6)*C9)*L1*L2 + ((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3)*C4 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C5 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C6 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6)*C8 + ((128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C5 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6)*C9)*L1*L3 + (128*I*pi**7*C10*C4*C5 + 128*I*pi**7*C10*C4*C6 + (128*I*pi**7*C4*C5 + 128*I*pi**7*C4*C6)*C8 + (128*I*pi**7*C4*C5 + 128*I*pi**7*C4*C6)*C9)*L1*L4)*L5 + ((128*I*pi**7*C10*C6*C8 + 128*I*pi**7*C10*C6*C9)*L1*L10 + (128*I*pi**7*C10*C2*C6 + 128*I*pi**7*C2*C6*C8 + 128*I*pi**7*C2*C6*C9)*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6*C8 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6*C9 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C6)*L1*L3 + (128*I*pi**7*C10*C4*C6 + 128*I*pi**7*C4*C6*C8 + 128*I*pi**7*C4*C6*C9)*L1*L4 + ((128*I*pi**7*C4 + 128*I*pi**7*C5)*C6*C8 + (128*I*pi**7*C4 + 128*I*pi**7*C5)*C6*C9 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5)*C6)*L1*L5)*L6 + (((128*I*pi**7*C10*C6 + 128*I*pi**7*C10*C7)*C8 + (128*I*pi**7*C10*C6 + 128*I*pi**7*C10*C7 + 128*I*pi**7*C10*C8)*C9)*L1*L10 + (128*I*pi**7*C10*C2*C6 + 128*I*pi**7*C10*C2*C7 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C2*C6 + 128*I*pi**7*C2*C7)*C8 + (128*I*pi**7*C2*C6 + 128*I*pi**7*C2*C7 + 128*I*pi**7*C2*C8)*C9)*L1*L2 + ((128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C6 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C7 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C7)*C8 + ((128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C6 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C7 + (128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C8)*C9)*L1*L3 + (128*I*pi**7*C10*C4*C6 + 128*I*pi**7*C10*C4*C7 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C4*C6 + 128*I*pi**7*C4*C7)*C8 + (128*I*pi**7*C4*C6 + 128*I*pi**7*C4*C7 + 128*I*pi**7*C4*C8)*C9)*L1*L4 + ((128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5)*C6 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C7 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + (128*I*pi**7*C10 + 128*I*pi**7*C4 + 128*I*pi**7*C5)*C6 + (128*I*pi**7*C4 + 128*I*pi**7*C5 + 128*I*pi**7*C6)*C7)*C8 + ((128*I*pi**7*C4 + 128*I*pi**7*C5)*C6 + (128*I*pi**7*C4 + 128*I*pi**7*C5 + 128*I*pi**7*C6)*C7 + (128*I*pi**7*C4 + 128*I*pi**7*C5 + 128*I*pi**7*C6)*C8)*C9)*L1*L5 + (128*I*pi**7*C10*C6*C7 + (128*I*pi**7*C10*C6 + 128*I*pi**7*C6*C7)*C8 + (128*I*pi**7*C6*C7 + 128*I*pi**7*C6*C8)*C9)*L1*L6)*L7 + (128*I*pi**7*C10*C8*C9*L1*L10 + (128*I*pi**7*C10*C2*C8 + 128*I*pi**7*C2*C8*C9)*L1*L2 + ((128*I*pi**7*C2 + 128*I*pi**7*C3 + 128*I*pi**7*C4)*C8*C9 + (128*I*pi**7*C10*C2 + 128*I*pi**7*C10*C3 + 128*I*pi**7*C10*C4)*C8)*L1*L3 + (128*I*pi**7*C10*C4*C8 + 128*I*pi**7*C4*C8*C9)*L1*L4 + ((128*I*pi**7*C4 + 128*I*pi**7*C5 + 128*I*pi**7*C6)*C8*C9 + (128*I*pi**7*C10*C4 + 128*I*pi**7*C10*C5 + 128*I*pi**7*C10*C6)*C8)*L1*L5 + (128*I*pi**7*C10*C6*C8 + 128*I*pi**7*C6*C8*C9)*L1*L6 + ((128*I*pi**7*C6 + 128*I*pi**7*C7)*C8*C9 + (128*I*pi**7*C10*C6 + 128*I*pi**7*C10*C7)*C8)*L1*L7)*L8)*L9)*freq**7 + 64*(((pi**6*C10*C2*C3 + pi**6*C10*C2*C4)*L1*L2*L3 + (pi**6*C10*C2*C4*L1*L2 + (pi**6*C10*C2 + pi**6*C10*C3)*C4*L1*L3)*L4 + ((pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L1*L3 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6)*L1*L4)*L5 + (pi**6*C10*C2*C6*L1*L2 + pi**6*C10*C4*C6*L1*L4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6*L1*L3 + (pi**6*C10*C4 + pi**6*C10*C5)*C6*L1*L5)*L6 + ((pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + pi**6*C10*C2*C8)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L1*L3 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + pi**6*C10*C4*C8)*L1*L4 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L1*L5 + (pi**6*C10*C6*C7 + pi**6*C10*C6*C8)*L1*L6)*L7 + (pi**6*C10*C2*C8*L1*L2 + pi**6*C10*C4*C8*L1*L4 + pi**6*C10*C6*C8*L1*L6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8*L1*L3 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8*L1*L5 + (pi**6*C10*C6 + pi**6*C10*C7)*C8*L1*L7)*L8 + (pi**6*C10*C8*C9*L1*L8 + (pi**6*C10*C2*C8 + pi**6*C10*C2*C9)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C9)*L1*L3 + (pi**6*C10*C4*C8 + pi**6*C10*C4*C9)*L1*L4 + ((pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C9)*L1*L5 + (pi**6*C10*C6*C8 + pi**6*C10*C6*C9)*L1*L6 + ((pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C6 + pi**6*C10*C7 + pi**6*C10*C8)*C9)*L1*L7)*L9)*ZL - (pi**6*C1*C10*C2*L1*L10*L2 + ((pi**6*C1*C10*C2 + (pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2)*C4)*L1*L10 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C10*C2*C3 + pi**6*C10*C2*C4)*L10)*L2)*L3 + ((pi**6*C1*C10 + pi**6*C10*C2)*C4*L1*L10 + (pi**6*C1*C2*C4*L1 + pi**6*C10*C2*C4*L10)*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1 + (pi**6*C10*C2 + pi**6*C10*C3)*C4*L10)*L3)*L4 + (((pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C10 + pi**6*C10*C2)*C5 + (pi**6*C1*C10 + pi**6*C10*C2)*C6)*L1*L10 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5 + pi**6*C1*C2*C6)*L1 + (pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6)*L10)*L2 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L10 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + pi**6*C2*C4)*C5 + (pi**6*C2*C3 + pi**6*C2*C4)*C6)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C5 + (pi**6*C1 + pi**6*C2)*C4*C6)*L1 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6)*L10 + (pi**6*C2*C4*C5 + pi**6*C2*C4*C6)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C5 + (pi**6*C2 + pi**6*C3)*C4*C6)*L3)*L4)*L5 + ((pi**6*C1*C10 + pi**6*C10*C2)*C6*L1*L10 + (pi**6*C1*C2*C6*L1 + pi**6*C10*C2*C6*L10)*L2 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6*L1 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6*L10 + (pi**6*C2*C3 + pi**6*C2*C4)*C6*L2)*L3 + (pi**6*C10*C4*C6*L10 + pi**6*C2*C4*C6*L2 + (pi**6*C1 + pi**6*C2)*C4*C6*L1 + (pi**6*C2 + pi**6*C3)*C4*C6*L3)*L4 + (pi**6*C4*C5*C6*L4 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5)*C6*L1 + (pi**6*C10*C4 + pi**6*C10*C5)*C6*L10 + (pi**6*C2*C4 + pi**6*C2*C5)*C6*L2 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6*L3)*L5)*L6 + (((pi**6*C1*C10 + pi**6*C10*C2)*C6 + (pi**6*C1*C10 + pi**6*C10*C2)*C7 + (pi**6*C1*C10 + pi**6*C10*C2)*C8)*L1*L10 + ((pi**6*C1*C2*C6 + pi**6*C1*C2*C7 + pi**6*C1*C2*C8)*L1 + (pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + pi**6*C10*C2*C8)*L10)*L2 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C7 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L10 + ((pi**6*C2*C3 + pi**6*C2*C4)*C6 + (pi**6*C2*C3 + pi**6*C2*C4)*C7 + (pi**6*C2*C3 + pi**6*C2*C4)*C8)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C6 + (pi**6*C1 + pi**6*C2)*C4*C7 + (pi**6*C1 + pi**6*C2)*C4*C8)*L1 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + pi**6*C10*C4*C8)*L10 + (pi**6*C2*C4*C6 + pi**6*C2*C4*C7 + pi**6*C2*C4*C8)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C6 + (pi**6*C2 + pi**6*C3)*C4*C7 + (pi**6*C2 + pi**6*C3)*C4*C8)*L3)*L4 + ((((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C7 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8)*L1 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L10 + ((pi**6*C2*C4 + pi**6*C2*C5)*C6 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C7 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8)*L2 + (((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C7 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8)*L3 + (pi**6*C4*C5*C6 + (pi**6*C4*C5 + pi**6*C4*C6)*C7 + (pi**6*C4*C5 + pi**6*C4*C6)*C8)*L4)*L5 + (((pi**6*C1 + pi**6*C2)*C6*C7 + (pi**6*C1 + pi**6*C2)*C6*C8)*L1 + (pi**6*C10*C6*C7 + pi**6*C10*C6*C8)*L10 + (pi**6*C2*C6*C7 + pi**6*C2*C6*C8)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C7 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8)*L3 + (pi**6*C4*C6*C7 + pi**6*C4*C6*C8)*L4 + ((pi**6*C4 + pi**6*C5)*C6*C7 + (pi**6*C4 + pi**6*C5)*C6*C8)*L5)*L6)*L7 + ((pi**6*C1*C10 + pi**6*C10*C2)*C8*L1*L10 + (pi**6*C1*C2*C8*L1 + pi**6*C10*C2*C8*L10)*L2 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8*L1 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8*L10 + (pi**6*C2*C3 + pi**6*C2*C4)*C8*L2)*L3 + (pi**6*C10*C4*C8*L10 + pi**6*C2*C4*C8*L2 + (pi**6*C1 + pi**6*C2)*C4*C8*L1 + (pi**6*C2 + pi**6*C3)*C4*C8*L3)*L4 + (((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8*L1 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8*L10 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8*L2 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8*L3 + (pi**6*C4*C5 + pi**6*C4*C6)*C8*L4)*L5 + (pi**6*C10*C6*C8*L10 + pi**6*C2*C6*C8*L2 + pi**6*C4*C6*C8*L4 + (pi**6*C1 + pi**6*C2)*C6*C8*L1 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8*L3 + (pi**6*C4 + pi**6*C5)*C6*C8*L5)*L6 + (pi**6*C6*C7*C8*L6 + ((pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7)*C8*L1 + (pi**6*C10*C6 + pi**6*C10*C7)*C8*L10 + (pi**6*C2*C6 + pi**6*C2*C7)*C8*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7)*C8*L3 + (pi**6*C4*C6 + pi**6*C4*C7)*C8*L4 + ((pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7)*C8*L5)*L7)*L8 + (((pi**6*C1*C10 + pi**6*C10*C2)*C8 + (pi**6*C1*C10 + pi**6*C10*C2)*C9)*L1*L10 + ((pi**6*C1*C10*C2 + pi**6*C1*C2*C8 + pi**6*C1*C2*C9)*L1 + (pi**6*C10*C2*C8 + pi**6*C10*C2*C9)*L10)*L2 + ((pi**6*C1*C10*C2 + (pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C9)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C9)*L10 + (pi**6*C10*C2*C3 + pi**6*C10*C2*C4 + (pi**6*C2*C3 + pi**6*C2*C4)*C8 + (pi**6*C2*C3 + pi**6*C2*C4)*C9)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C8 + (pi**6*C1 + pi**6*C2)*C4*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C4)*L1 + (pi**6*C10*C4*C8 + pi**6*C10*C4*C9)*L10 + (pi**6*C10*C2*C4 + pi**6*C2*C4*C8 + pi**6*C2*C4*C9)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C8 + (pi**6*C2 + pi**6*C3)*C4*C9 + (pi**6*C10*C2 + pi**6*C10*C3)*C4)*L3)*L4 + (((pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C10 + pi**6*C10*C2)*C5 + (pi**6*C1*C10 + pi**6*C10*C2)*C6 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C9)*L1 + ((pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C9)*L10 + (pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C9)*L2 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C9)*L3 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6 + (pi**6*C4*C5 + pi**6*C4*C6)*C8 + (pi**6*C4*C5 + pi**6*C4*C6)*C9)*L4)*L5 + (((pi**6*C1 + pi**6*C2)*C6*C8 + (pi**6*C1 + pi**6*C2)*C6*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C6)*L1 + (pi**6*C10*C6*C8 + pi**6*C10*C6*C9)*L10 + (pi**6*C10*C2*C6 + pi**6*C2*C6*C8 + pi**6*C2*C6*C9)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C9 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L3 + (pi**6*C10*C4*C6 + pi**6*C4*C6*C8 + pi**6*C4*C6*C9)*L4 + ((pi**6*C4 + pi**6*C5)*C6*C8 + (pi**6*C4 + pi**6*C5)*C6*C9 + (pi**6*C10*C4 + pi**6*C10*C5)*C6)*L5)*L6 + (((pi**6*C1*C10 + pi**6*C10*C2)*C6 + (pi**6*C1*C10 + pi**6*C10*C2)*C7 + (pi**6*C1*C10 + pi**6*C10*C2 + (pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7)*C8 + ((pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7 + (pi**6*C1 + pi**6*C2)*C8)*C9)*L1 + ((pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C6 + pi**6*C10*C7 + pi**6*C10*C8)*C9)*L10 + (pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + (pi**6*C10*C2 + pi**6*C2*C6 + pi**6*C2*C7)*C8 + (pi**6*C2*C6 + pi**6*C2*C7 + pi**6*C2*C8)*C9)*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7)*C8 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C8)*C9)*L3 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + (pi**6*C10*C4 + pi**6*C4*C6 + pi**6*C4*C7)*C8 + (pi**6*C4*C6 + pi**6*C4*C7 + pi**6*C4*C8)*C9)*L4 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + (pi**6*C10 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7)*C8 + ((pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C8)*C9)*L5 + (pi**6*C10*C6*C7 + (pi**6*C10*C6 + pi**6*C6*C7)*C8 + (pi**6*C6*C7 + pi**6*C6*C8)*C9)*L6)*L7 + (pi**6*C10*C8*C9*L10 + ((pi**6*C1 + pi**6*C2)*C8*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C8)*L1 + (pi**6*C10*C2*C8 + pi**6*C2*C8*C9)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C8*C9 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L3 + (pi**6*C10*C4*C8 + pi**6*C4*C8*C9)*L4 + ((pi**6*C4 + pi**6*C5 + pi**6*C6)*C8*C9 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L5 + (pi**6*C10*C6*C8 + pi**6*C6*C8*C9)*L6 + ((pi**6*C6 + pi**6*C7)*C8*C9 + (pi**6*C10*C6 + pi**6*C10*C7)*C8)*L7)*L8)*L9)*ZS)*freq**6 + (-32*I*pi**5*C10*C2*L1*L10*L2 + (32*I*pi**5*C1*C10*C2*L1*L2 + ((32*I*pi**5*C1*C10*C2 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C3 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4)*L1 + (32*I*pi**5*C10*C2*C3 + 32*I*pi**5*C10*C2*C4)*L2)*L3 + (32*I*pi**5*C10*C2*C4*L2 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3)*C4*L3)*L4 + (((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C5 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6)*L1 + (32*I*pi**5*C10*C2*C4 + 32*I*pi**5*C10*C2*C5 + 32*I*pi**5*C10*C2*C6)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3)*C4 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C5 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6)*L3 + (32*I*pi**5*C10*C4*C5 + 32*I*pi**5*C10*C4*C6)*L4)*L5 + (32*I*pi**5*C10*C2*C6*L2 + 32*I*pi**5*C10*C4*C6*L4 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5)*C6*L5)*L6 + (((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C7 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8)*L1 + (32*I*pi**5*C10*C2*C6 + 32*I*pi**5*C10*C2*C7 + 32*I*pi**5*C10*C2*C8)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C7 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8)*L3 + (32*I*pi**5*C10*C4*C6 + 32*I*pi**5*C10*C4*C7 + 32*I*pi**5*C10*C4*C8)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5)*C6 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C7 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8)*L5 + (32*I*pi**5*C10*C6*C7 + 32*I*pi**5*C10*C6*C8)*L6)*L7 + (32*I*pi**5*C10*C2*C8*L2 + 32*I*pi**5*C10*C4*C8*L4 + 32*I*pi**5*C10*C6*C8*L6 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8*L5 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7)*C8*L7)*L8 + (32*I*pi**5*C10*C8*C9*L8 + ((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C9)*L1 + (32*I*pi**5*C10*C2*C8 + 32*I*pi**5*C10*C2*C9)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C9)*L3 + (32*I*pi**5*C10*C4*C8 + 32*I*pi**5*C10*C4*C9)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C9)*L5 + (32*I*pi**5*C10*C6*C8 + 32*I*pi**5*C10*C6*C9)*L6 + ((32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7)*C8 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + 32*I*pi**5*C10*C8)*C9)*L7)*L9)*ZL*ZS + ((-32*I*pi**5*C10*C2 - 32*I*pi**5*C10*C3 - 32*I*pi**5*C10*C4)*L1*L10 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4)*L1*L2)*L3 + (-32*I*pi**5*C10*C4*L1*L10 - 32*I*pi**5*C2*C4*L1*L2 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1*L3)*L4 + ((-32*I*pi**5*C10*C4 - 32*I*pi**5*C10*C5 - 32*I*pi**5*C10*C6)*L1*L10 + (-32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5 - 32*I*pi**5*C2*C6)*L1*L2 + ((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6)*L1*L3 + (-32*I*pi**5*C4*C5 - 32*I*pi**5*C4*C6)*L1*L4)*L5 + (-32*I*pi**5*C10*C6*L1*L10 - 32*I*pi**5*C2*C6*L1*L2 - 32*I*pi**5*C4*C6*L1*L4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6*L1*L3 + (-32*I*pi**5*C4 - 32*I*pi**5*C5)*C6*L1*L5)*L6 + ((-32*I*pi**5*C10*C6 - 32*I*pi**5*C10*C7 - 32*I*pi**5*C10*C8)*L1*L10 + (-32*I*pi**5*C2*C6 - 32*I*pi**5*C2*C7 - 32*I*pi**5*C2*C8)*L1*L2 + ((-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C7 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C8)*L1*L3 + (-32*I*pi**5*C4*C6 - 32*I*pi**5*C4*C7 - 32*I*pi**5*C4*C8)*L1*L4 + ((-32*I*pi**5*C4 - 32*I*pi**5*C5)*C6 + (-32*I*pi**5*C4 - 32*I*pi**5*C5 - 32*I*pi**5*C6)*C7 + (-32*I*pi**5*C4 - 32*I*pi**5*C5 - 32*I*pi**5*C6)*C8)*L1*L5 + (-32*I*pi**5*C6*C7 - 32*I*pi**5*C6*C8)*L1*L6)*L7 + (-32*I*pi**5*C10*C8*L1*L10 - 32*I*pi**5*C2*C8*L1*L2 - 32*I*pi**5*C4*C8*L1*L4 - 32*I*pi**5*C6*C8*L1*L6 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C8*L1*L3 + (-32*I*pi**5*C4 - 32*I*pi**5*C5 - 32*I*pi**5*C6)*C8*L1*L5 + (-32*I*pi**5*C6 - 32*I*pi**5*C7)*C8*L1*L7)*L8 + ((-32*I*pi**5*C10*C8 - 32*I*pi**5*C10*C9)*L1*L10 + (-32*I*pi**5*C10*C2 - 32*I*pi**5*C2*C8 - 32*I*pi**5*C2*C9)*L1*L2 + (-32*I*pi**5*C10*C2 - 32*I*pi**5*C10*C3 - 32*I*pi**5*C10*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C8 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C9)*L1*L3 + (-32*I*pi**5*C10*C4 - 32*I*pi**5*C4*C8 - 32*I*pi**5*C4*C9)*L1*L4 + (-32*I*pi**5*C10*C4 - 32*I*pi**5*C10*C5 - 32*I*pi**5*C10*C6 + (-32*I*pi**5*C4 - 32*I*pi**5*C5 - 32*I*pi**5*C6)*C8 + (-32*I*pi**5*C4 - 32*I*pi**5*C5 - 32*I*pi**5*C6)*C9)*L1*L5 + (-32*I*pi**5*C10*C6 - 32*I*pi**5*C6*C8 - 32*I*pi**5*C6*C9)*L1*L6 + (-32*I*pi**5*C10*C6 - 32*I*pi**5*C10*C7 + (-32*I*pi**5*C10 - 32*I*pi**5*C6 - 32*I*pi**5*C7)*C8 + (-32*I*pi**5*C6 - 32*I*pi**5*C7 - 32*I*pi**5*C8)*C9)*L1*L7 + (-32*I*pi**5*C10*C8 - 32*I*pi**5*C8*C9)*L1*L8)*L9)*freq**5 - 16*((pi**4*C10*C2*L1*L2 + pi**4*C10*C4*L1*L4 + pi**4*C10*C6*L1*L6 + pi**4*C10*C8*L1*L8 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4)*L1*L3 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6)*L1*L5 + (pi**4*C10*C6 + pi**4*C10*C7 + pi**4*C10*C8)*L1*L7 + (pi**4*C10*C8 + pi**4*C10*C9)*L1*L9)*ZL - ((pi**4*C1*C10 + pi**4*C10*C2)*L1*L10 + (pi**4*C1*C2*L1 + pi**4*C10*C2*L10)*L2 + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4)*L10 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C10*C4*L10 + pi**4*C2*C4*L2 + (pi**4*C1 + pi**4*C2)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + (((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5 + (pi**4*C1 + pi**4*C2)*C6)*L1 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6)*L10 + (pi**4*C2*C4 + pi**4*C2*C5 + pi**4*C2*C6)*L2 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C6)*L3 + (pi**4*C4*C5 + pi**4*C4*C6)*L4)*L5 + (pi**4*C10*C6*L10 + pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + (pi**4*C1 + pi**4*C2)*C6*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C6*L3 + (pi**4*C4 + pi**4*C5)*C6*L5)*L6 + (((pi**4*C1 + pi**4*C2)*C6 + (pi**4*C1 + pi**4*C2)*C7 + (pi**4*C1 + pi**4*C2)*C8)*L1 + (pi**4*C10*C6 + pi**4*C10*C7 + pi**4*C10*C8)*L10 + (pi**4*C2*C6 + pi**4*C2*C7 + pi**4*C2*C8)*L2 + ((pi**4*C2 + pi**4*C3 + pi**4*C4)*C6 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C7 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8)*L3 + (pi**4*C4*C6 + pi**4*C4*C7 + pi**4*C4*C8)*L4 + ((pi**4*C4 + pi**4*C5)*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C7 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8)*L5 + (pi**4*C6*C7 + pi**4*C6*C8)*L6)*L7 + (pi**4*C10*C8*L10 + pi**4*C2*C8*L2 + pi**4*C4*C8*L4 + pi**4*C6*C8*L6 + (pi**4*C1 + pi**4*C2)*C8*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8*L3 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8*L5 + (pi**4*C6 + pi**4*C7)*C8*L7)*L8 + ((pi**4*C1*C10 + pi**4*C10*C2 + (pi**4*C1 + pi**4*C2)*C8 + (pi**4*C1 + pi**4*C2)*C9)*L1 + (pi**4*C10*C8 + pi**4*C10*C9)*L10 + (pi**4*C10*C2 + pi**4*C2*C8 + pi**4*C2*C9)*L2 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C9)*L3 + (pi**4*C10*C4 + pi**4*C4*C8 + pi**4*C4*C9)*L4 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C9)*L5 + (pi**4*C10*C6 + pi**4*C6*C8 + pi**4*C6*C9)*L6 + (pi**4*C10*C6 + pi**4*C10*C7 + (pi**4*C10 + pi**4*C6 + pi**4*C7)*C8 + (pi**4*C6 + pi**4*C7 + pi**4*C8)*C9)*L7 + (pi**4*C10*C8 + pi**4*C8*C9)*L8)*L9)*ZS)*freq**4 + (8*I*pi**3*C10*L1*L10 + 8*I*pi**3*C2*L1*L2 + 8*I*pi**3*C4*L1*L4 + 8*I*pi**3*C6*L1*L6 + 8*I*pi**3*C8*L1*L8 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L3 + (8*I*pi**3*C4 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*L1*L5 + (8*I*pi**3*C6 + 8*I*pi**3*C7 + 8*I*pi**3*C8)*L1*L7 + (8*I*pi**3*C10 + 8*I*pi**3*C8 + 8*I*pi**3*C9)*L1*L9 + (-8*I*pi**3*C10*C2*L2 - 8*I*pi**3*C10*C4*L4 - 8*I*pi**3*C10*C6*L6 - 8*I*pi**3*C10*C8*L8 + (-8*I*pi**3*C1*C10 - 8*I*pi**3*C10*C2)*L1 + (-8*I*pi**3*C10*C2 - 8*I*pi**3*C10*C3 - 8*I*pi**3*C10*C4)*L3 + (-8*I*pi**3*C10*C4 - 8*I*pi**3*C10*C5 - 8*I*pi**3*C10*C6)*L5 + (-8*I*pi**3*C10*C6 - 8*I*pi**3*C10*C7 - 8*I*pi**3*C10*C8)*L7 + (-8*I*pi**3*C10*C8 - 8*I*pi**3*C10*C9)*L9)*ZL*ZS)*freq**3 + 4*(pi**2*C10*L1*ZL - (pi**2*C10*L10 + pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + pi**2*C8*L8 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L3 + (pi**2*C4 + pi**2*C5 + pi**2*C6)*L5 + (pi**2*C6 + pi**2*C7 + pi**2*C8)*L7 + (pi**2*C10 + pi**2*C8 + pi**2*C9)*L9)*ZS)*freq**2 + (2*I*pi*C10*ZL*ZS - 2*I*pi*L1)*freq + ZS)/(1048576*pi**20*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZS*freq**20 + (-524288*I*pi**19*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS - 524288*I*pi**19*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9)*freq**19 - 262144*(pi**18*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8*L1*L10*L2*L3*L4*L5*L6*L7*L8 + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + pi**18*C1*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C8*C9*L1*L10*L2*L3*L4*L5*L6 + ((pi**18*C1*C10*C2*C3*C4*C5*C6 + (pi**18*C1*C10*C2*C3*C4*C5 + pi**18*C1*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L10*L2*L3*L4*L5 + (pi**18*C1*C10*C2*C3*C4*C6*C7*C8*C9*L1*L10*L2*L3*L4 + ((pi**18*C1*C10*C2*C3*C4 + (pi**18*C1*C10*C2*C3 + pi**18*C1*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L10*L2*L3 + (pi**18*C1*C10*C2*C4*C5*C6*C7*C8*C9*L1*L10*L2 + ((pi**18*C1*C10*C2 + (pi**18*C1*C10 + pi**18*C10*C2)*C3)*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**18*C10*C2*C3*C4*C5*C6*C7*C8*C9*L10 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9)*L1)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**18 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8*L1*L10*L2*L3*L4*L5*L6*L7*L8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5 + 131072*I*pi**17*C1*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (131072*I*pi**17*C1*C10*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((131072*I*pi**17*C1*C10*C2*C3*C4 + (131072*I*pi**17*C1*C10*C2*C3 + 131072*I*pi**17*C1*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (131072*I*pi**17*C1*C10*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8*C9*L2 + (131072*I*pi**17*C1*C10*C2 + (131072*I*pi**17*C1*C10 + 131072*I*pi**17*C10*C2)*C3)*C4*C5*C6*C7*C8*C9*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C8*C9*L1*L10*L2*L3*L4*L5*L6 + ((131072*I*pi**17*C10*C2*C3*C4*C5*C6 + (131072*I*pi**17*C10*C2*C3*C4*C5 + 131072*I*pi**17*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L10*L2*L3*L4*L5 + (131072*I*pi**17*C10*C2*C3*C4*C6*C7*C8*C9*L1*L10*L2*L3*L4 + ((131072*I*pi**17*C10*C2*C3*C4 + (131072*I*pi**17*C10*C2*C3 + 131072*I*pi**17*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L10*L2*L3 + (131072*I*pi**17*C10*C2*C4*C5*C6*C7*C8*C9*L1*L10*L2 + ((131072*I*pi**17*C10*C2 + 131072*I*pi**17*C10*C3)*C4*C5*C6*C7*C8*C9*L1*L10 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8 + 131072*I*pi**17*C2*C3*C4*C5*C6*C7*C8*C9)*L1*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**17 + 65536*((pi**16*C10*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**16*C10*C2*C3*C4*C5*C6*C7 + pi**16*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (pi**16*C10*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((pi**16*C10*C2*C3*C4*C5*C6 + (pi**16*C10*C2*C3*C4*C5 + pi**16*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (pi**16*C10*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((pi**16*C10*C2*C3*C4 + (pi**16*C10*C2*C3 + pi**16*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (pi**16*C10*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (pi**16*C10*C2 + pi**16*C10*C3)*C4*C5*C6*C7*C8*C9*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + pi**16*C1*C10*C2*C3*C4*C5*C6*C8)*L1*L10*L2*L3*L4*L5*L6*L7 + (pi**16*C1*C10*C2*C3*C4*C5*C6*C8*L1*L10*L2*L3*L4*L5*L6 + ((pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8*L1*L10*L2*L3*L4*L5 + (pi**16*C1*C10*C2*C3*C4*C6*C7*C8*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C5*C6*C7*C8*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C8*L1 + pi**16*C10*C2*C3*C4*C5*C6*C7*C8*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C8 + pi**16*C1*C10*C2*C3*C4*C5*C6*C9)*L1*L10*L2*L3*L4*L5*L6 + (((pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C8)*C9)*L1*L10*L2*L3*L4*L5 + ((pi**16*C1*C10*C2*C3*C4*C6*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C6*C7 + pi**16*C1*C10*C2*C3*C4*C6*C8)*C9)*L1*L10*L2*L3*L4 + (((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C4*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C4*C5*C6*C7 + pi**16*C1*C10*C2*C4*C5*C6*C8)*C9)*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C8)*C9)*L1*L10 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C6*C7)*C8 + (pi**16*C1*C2*C3*C4*C5*C6*C7 + pi**16*C1*C2*C3*C4*C5*C6*C8)*C9)*L1 + (pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**16*C10*C2*C3*C4*C5*C6*C7 + pi**16*C10*C2*C3*C4*C5*C6*C8)*C9)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C8*C9*L1*L10*L2*L3*L4*L5 + (pi**16*C1*C10*C2*C3*C4*C6*C8*C9*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C8*C9*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C5*C6*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C8*C9*L1*L10 + (pi**16*C10*C2*C3*C4*C5*C6*C8*C9*L10 + (pi**16*C1*C10*C2*C3*C4*C5*C6*C8 + pi**16*C1*C2*C3*C4*C5*C6*C8*C9)*L1)*L2)*L3)*L4)*L5)*L6 + ((pi**16*C1*C10*C2*C3*C4*C6 + pi**16*C1*C10*C2*C3*C4*C7)*C8*C9*L1*L10*L2*L3*L4 + (((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C6)*C7)*C8*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C4*C5*C6 + (pi**16*C1*C10*C2*C4*C5 + pi**16*C1*C10*C2*C4*C6)*C7)*C8*C9*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C6)*C7)*C8*C9*L1*L10 + ((pi**16*C10*C2*C3*C4*C5*C6 + (pi**16*C10*C2*C3*C4*C5 + pi**16*C10*C2*C3*C4*C6)*C7)*C8*C9*L10 + ((pi**16*C1*C2*C3*C4*C5*C6 + (pi**16*C1*C2*C3*C4*C5 + pi**16*C1*C2*C3*C4*C6)*C7)*C8*C9 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8)*L1)*L2)*L3)*L4)*L5 + ((pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C6*C7*C8*C9*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C6*C7*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C6*C7*C8*C9*L1*L10 + (pi**16*C10*C2*C3*C4*C6*C7*C8*C9*L10 + (pi**16*C1*C10*C2*C3*C4*C6*C7*C8 + pi**16*C1*C2*C3*C4*C6*C7*C8*C9)*L1)*L2)*L3)*L4 + ((pi**16*C1*C10*C2*C4 + pi**16*C1*C10*C2*C5)*C6*C7*C8*C9*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3 + (pi**16*C1*C10 + pi**16*C10*C2)*C4)*C5)*C6*C7*C8*C9*L1*L10 + ((pi**16*C10*C2*C3*C4 + (pi**16*C10*C2*C3 + pi**16*C10*C2*C4)*C5)*C6*C7*C8*C9*L10 + ((pi**16*C1*C2*C3*C4 + (pi**16*C1*C2*C3 + pi**16*C1*C2*C4)*C5)*C6*C7*C8*C9 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8)*L1)*L2)*L3 + ((pi**16*C1*C10 + pi**16*C10*C2)*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**16*C10*C2*C4*C5*C6*C7*C8*C9*L10 + (pi**16*C1*C10*C2*C4*C5*C6*C7*C8 + pi**16*C1*C2*C4*C5*C6*C7*C8*C9)*L1)*L2 + ((pi**16*C10*C2 + pi**16*C10*C3)*C4*C5*C6*C7*C8*C9*L10 + ((pi**16*C1*C2 + (pi**16*C1 + pi**16*C2)*C3)*C4*C5*C6*C7*C8*C9 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8)*L1 + (pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + pi**16*C2*C3*C4*C5*C6*C7*C8*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**16 + ((-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8)*L1*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7*C8*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7*C8*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7)*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7*C8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7 - 32768*I*pi**15*C1*C10*C2*C4*C5*C6*C8)*C9)*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7*C8 + ((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C8*C9*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8*C9*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C8*C9*L1)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C4*C5 - 32768*I*pi**15*C1*C10*C2*C4*C6)*C7)*C8*C9*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6 + ((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C6)*C7)*C8*C9*L1 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8*C9*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C6*C7*C8*C9*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8*C9*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C6*C7*C8*C9*L1)*L3)*L4 + ((-32768*I*pi**15*C1*C10*C2*C4 - 32768*I*pi**15*C1*C10*C2*C5)*C6*C7*C8*C9*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C4)*C5)*C6*C7*C8*C9*L1 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8*C9*L2)*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8*C9*L2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C4*C5*C6*C7*C8*C9*L1 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8*C9*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8*L1*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8*L1*L10*L2*L3*L4*L5 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8*L1*L10*L2*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8*L1*L10*L2 + (-32768*I*pi**15*C2*C3*C4*C5*C6*C7*C8*L1*L2 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8*L1*L10)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C9)*L1*L10*L2*L3*L4*L5*L6 + (((-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C8)*C9)*L1*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C6*C8)*C9)*L1*L10*L2*L3*L4 + (((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8 + ((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L10*L2*L3 + ((-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C4*C5*C6*C8)*C9)*L1*L10*L2 + (((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C8)*C9)*L1*L10 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 - 32768*I*pi**15*C2*C3*C4*C5*C6*C7)*C8 + (-32768*I*pi**15*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C2*C3*C4*C5*C6*C8)*C9)*L1*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C8*C9*L1*L10*L2*L3*L4*L5 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C8*C9*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C8*C9*L1*L10*L2*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C8*C9*L1*L10 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C2*C3*C4*C5*C6*C8*C9)*L1*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C10*C2*C3*C4*C6 - 32768*I*pi**15*C10*C2*C3*C4*C7)*C8*C9*L1*L10*L2*L3*L4 + (((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C6)*C7)*C8*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C10*C2*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C4*C5 - 32768*I*pi**15*C10*C2*C4*C6)*C7)*C8*C9*L1*L10*L2 + (((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C6)*C7)*C8*C9*L1*L10 + ((-32768*I*pi**15*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C2*C3*C4*C5 - 32768*I*pi**15*C2*C3*C4*C6)*C7)*C8*C9 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8)*L1*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C6*C7*C8*C9*L1*L10*L2*L3 + (-32768*I*pi**15*C10*C2*C4*C6*C7*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8 - 32768*I*pi**15*C2*C3*C4*C6*C7*C8*C9)*L1*L2)*L3)*L4 + ((-32768*I*pi**15*C10*C2*C4 - 32768*I*pi**15*C10*C2*C5)*C6*C7*C8*C9*L1*L10*L2 + (((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3 - 32768*I*pi**15*C10*C4)*C5)*C6*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C2*C3*C4 + (-32768*I*pi**15*C2*C3 - 32768*I*pi**15*C2*C4)*C5)*C6*C7*C8*C9 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8)*L1*L2)*L3 + (-32768*I*pi**15*C10*C4*C5*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8 - 32768*I*pi**15*C2*C4*C5*C6*C7*C8*C9)*L1*L2 + ((-32768*I*pi**15*C2 - 32768*I*pi**15*C3)*C4*C5*C6*C7*C8*C9 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8)*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**15 - 16384*(((pi**14*C10*C2*C3*C4*C5*C6*C7 + pi**14*C10*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (pi**14*C10*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (pi**14*C10*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (pi**14*C10*C2*C4*C5*C6*C7*C8*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C10*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((pi**14*C10*C2*C3*C4*C6*C7*C8 + (pi**14*C10*C2*C3*C4*C6*C7 + pi**14*C10*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((pi**14*C10*C2*C4*C5*C6*C7*C8 + (pi**14*C10*C2*C4*C5*C6*C7 + pi**14*C10*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + ((pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (pi**14*C10*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (pi**14*C10*C2*C4*C5*C6*C8*C9*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8*C9*L1*L3)*L4)*L5)*L6 + ((pi**14*C10*C2*C3*C4*C6 + pi**14*C10*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((pi**14*C10*C2*C4*C5*C6 + (pi**14*C10*C2*C4*C5 + pi**14*C10*C2*C4*C6)*C7)*C8*C9*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6)*C7)*C8*C9*L1*L3)*L4)*L5 + ((pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (pi**14*C10*C2*C4*C6*C7*C8*C9*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6*C7*C8*C9*L1*L3)*L4 + (pi**14*C10*C4*C5*C6*C7*C8*C9*L1*L4 + (pi**14*C10*C2*C4 + pi**14*C10*C2*C5)*C6*C7*C8*C9*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C10*C2 + pi**14*C10*C3 + pi**14*C10*C4)*C5)*C6*C7*C8*C9*L1*L3)*L5)*L6)*L7)*L8)*L9)*ZL + (pi**14*C1*C10*C2*C3*C4*C5*C6*L1*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8)*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C6*C7 + pi**14*C1*C10*C2*C3*C4*C6*C8)*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6*C7 + pi**14*C1*C10*C2*C4*C5*C6*C8)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + pi**14*C1*C2*C3*C4*C5*C6*C8)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C7 + pi**14*C10*C2*C3*C4*C5*C6*C8)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8*L1*L10*L2*L3*L4*L5 + (pi**14*C1*C10*C2*C3*C4*C6*C8*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C5*C6*C8*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C6*C8*L1 + pi**14*C10*C2*C3*C4*C5*C6*C8*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7)*C8*L1 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8*L10)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C6*C7*C8*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8*L1*L10 + (pi**14*C1*C2*C3*C4*C6*C7*C8*L1 + pi**14*C10*C2*C3*C4*C6*C7*C8*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8*L1*L10 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7*C8*L1 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8*L10)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8*L1*L10 + (pi**14*C1*C2*C4*C5*C6*C7*C8*L1 + pi**14*C10*C2*C4*C5*C6*C7*C8*L10)*L2 + (pi**14*C2*C3*C4*C5*C6*C7*C8*L2 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7*C8*L1 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8*L10)*L3)*L4)*L5)*L6)*L7)*L8 + (((pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C9)*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C6*C8 + pi**14*C1*C10*C2*C3*C4*C6*C9)*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C9)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6*C8 + pi**14*C1*C10*C2*C4*C5*C6*C9)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C6*C8 + pi**14*C1*C2*C3*C4*C5*C6*C9)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C10*C2*C3*C4*C5*C6*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7 + pi**14*C1*C10*C2*C3*C4*C8)*C9)*L1*L10*L2*L3*L4 + ((((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8 + (pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C8)*C9)*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C2*C3*C4*C5)*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C8)*C9)*L1 + ((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C8)*C9)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C6*C7*C8 + (pi**14*C1*C10*C2*C4*C6*C7 + pi**14*C1*C10*C2*C4*C6*C8)*C9)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C6*C7 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C2*C3*C4*C6*C7)*C8 + (pi**14*C1*C2*C3*C4*C6*C7 + pi**14*C1*C2*C3*C4*C6*C8)*C9)*L1 + (pi**14*C10*C2*C3*C4*C6*C7*C8 + (pi**14*C10*C2*C3*C4*C6*C7 + pi**14*C10*C2*C3*C4*C6*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C8)*C9)*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C8)*C9)*L1*L10 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C7 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6)*C8 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7 + (pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C8)*C9)*L1 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8)*C9)*L10)*L2)*L3 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C4*C5*C6*C7 + (pi**14*C1*C10*C2*C4*C5*C6 + pi**14*C1*C2*C4*C5*C6*C7)*C8 + (pi**14*C1*C2*C4*C5*C6*C7 + pi**14*C1*C2*C4*C5*C6*C8)*C9)*L1 + (pi**14*C10*C2*C4*C5*C6*C7*C8 + (pi**14*C10*C2*C4*C5*C6*C7 + pi**14*C10*C2*C4*C5*C6*C8)*C9)*L10)*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C7 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6)*C8 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8)*C9)*L10 + (pi**14*C10*C2*C3*C4*C5*C6*C7 + (pi**14*C10*C2*C3*C4*C5*C6 + pi**14*C2*C3*C4*C5*C6*C7)*C8 + (pi**14*C2*C3*C4*C5*C6*C7 + pi**14*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + (pi**14*C1*C10*C2*C3*C4*C8*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8*C9*L10 + ((pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C8*C9 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8)*L1)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C8*C9*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C6*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C8*C9*L1*L10 + (pi**14*C10*C2*C3*C4*C6*C8*C9*L10 + (pi**14*C1*C10*C2*C3*C4*C6*C8 + pi**14*C1*C2*C3*C4*C6*C8*C9)*L1)*L2)*L3)*L4 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8*C9*L10 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C8*C9 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8)*L1)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C8*C9*L1*L10 + (pi**14*C10*C2*C4*C5*C6*C8*C9*L10 + (pi**14*C1*C10*C2*C4*C5*C6*C8 + pi**14*C1*C2*C4*C5*C6*C8*C9)*L1)*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8*C9*L10 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C8*C9 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C2*C3*C4*C5*C6*C8*C9)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C7)*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C6 + pi**14*C1*C10*C2*C4*C7)*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C7)*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4*C6 + pi**14*C10*C2*C3*C4*C7)*C8*C9*L10 + ((pi**14*C1*C2*C3*C4*C6 + pi**14*C1*C2*C3*C4*C7)*C8*C9 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8)*L1)*L2)*L3)*L4 + (((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5 + pi**14*C1*C10*C2*C6)*C7)*C8*C9*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C6)*C7)*C8*C9*L1*L10 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6)*C7)*C8*C9*L10 + (((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6 + (pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C6)*C7)*C8*C9 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8)*L1)*L2)*L3 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C6)*C7)*C8*C9*L1*L10 + ((pi**14*C10*C2*C4*C5*C6 + (pi**14*C10*C2*C4*C5 + pi**14*C10*C2*C4*C6)*C7)*C8*C9*L10 + ((pi**14*C1*C2*C4*C5*C6 + (pi**14*C1*C2*C4*C5 + pi**14*C1*C2*C4*C6)*C7)*C8*C9 + (pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8)*L1)*L2 + (((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6)*C7)*C8*C9*L10 + (((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C6)*C7)*C8*C9 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8)*L1 + ((pi**14*C2*C3*C4*C5*C6 + (pi**14*C2*C3*C4*C5 + pi**14*C2*C3*C4*C6)*C7)*C8*C9 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8)*L2)*L3)*L4)*L5 + (pi**14*C1*C10*C2*C6*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C6*C7*C8*C9*L1*L10 + ((pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6*C7*C8*C9*L10 + ((pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C6*C7*C8*C9 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8)*L1)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C6*C7*C8*C9*L1*L10 + (pi**14*C10*C2*C4*C6*C7*C8*C9*L10 + (pi**14*C1*C10*C2*C4*C6*C7*C8 + pi**14*C1*C2*C4*C6*C7*C8*C9)*L1)*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C6*C7*C8*C9*L10 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C6*C7*C8*C9 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8)*L1 + (pi**14*C10*C2*C3*C4*C6*C7*C8 + pi**14*C2*C3*C4*C6*C7*C8*C9)*L2)*L3)*L4 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C5)*C6*C7*C8*C9*L1*L10 + ((pi**14*C10*C2*C4 + pi**14*C10*C2*C5)*C6*C7*C8*C9*L10 + ((pi**14*C1*C2*C4 + pi**14*C1*C2*C5)*C6*C7*C8*C9 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8)*L1)*L2 + (((pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C10*C2 + pi**14*C10*C3 + pi**14*C10*C4)*C5)*C6*C7*C8*C9*L10 + (((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2)*C4)*C5)*C6*C7*C8*C9 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8)*L1 + ((pi**14*C2*C3*C4 + (pi**14*C2*C3 + pi**14*C2*C4)*C5)*C6*C7*C8*C9 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8)*L2)*L3 + (pi**14*C10*C4*C5*C6*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C4*C5*C6*C7*C8*C9 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8)*L1 + (pi**14*C10*C2*C4*C5*C6*C7*C8 + pi**14*C2*C4*C5*C6*C7*C8*C9)*L2 + ((pi**14*C2 + pi**14*C3)*C4*C5*C6*C7*C8*C9 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**14 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*L1*L10*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7)*C8*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7)*C8*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7*C8*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C6*C7*C8*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7*C8*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7*C8*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7*C8*L1 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7*C8*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7*C8*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C1*C10*C2*C4*C5*C6*C9)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C9)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8 + 8192*I*pi**13*C10*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7)*C8 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C8)*C9)*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7)*C8 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C8)*C9)*L1 + ((8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C6*C7*C8 + (8192*I*pi**13*C1*C10*C2*C4*C6*C7 + 8192*I*pi**13*C1*C10*C2*C4*C6*C8)*C9)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C8)*C9)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7*C8 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C8)*C9)*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7*C8 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C8)*C9)*L1 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C8)*C9)*L1 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7*C8 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C4*C5*C6*C8)*C9)*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8*C9*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C8*C9*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C6*C8*C9*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8*C9*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C8*C9*L1)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8*C9*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8*C9*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C8*C9*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8*C9*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C6 + 8192*I*pi**13*C1*C10*C2*C4*C7)*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C7)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8*C9*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5 + 8192*I*pi**13*C1*C10*C2*C6)*C7)*C8*C9*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C6)*C7)*C8*C9*L1 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8*C9*L2)*L3 + (((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C6)*C7)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8*C9*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8*C9*L3)*L4)*L5 + (8192*I*pi**13*C1*C10*C2*C6*C7*C8*C9*L1*L2 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8*C9*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8*C9*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8*C9*L3)*L4 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8*C9*L4 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C5)*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8*C9*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8*C9*L3)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C6*C8)*L1*L10*L2*L3*L4 + (((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C4*C5*C6*C8)*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*L1*L10 + (8192*I*pi**13*C2*C3*C4*C5*C6*C7 + 8192*I*pi**13*C2*C3*C4*C5*C6*C8)*L1*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8*L1*L10*L2*L3*L4*L5 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8*L1*L10*L2*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8*L1*L10*L2 + (8192*I*pi**13*C2*C3*C4*C5*C6*C8*L1*L2 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8*L1*L10)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8*L1*L10*L2*L3*L4 + (((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8*L1*L10 + (8192*I*pi**13*C2*C3*C4*C5*C6 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C7)*C8*L1*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8*L1*L10*L2*L3 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8*L1*L10*L2 + (8192*I*pi**13*C2*C3*C4*C6*C7*C8*L1*L2 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8*L1*L10)*L3)*L4 + ((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8*L1*L10 + (8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C7*C8*L1*L2)*L3 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8*L1*L10 + 8192*I*pi**13*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + (((8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C9)*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C10*C2*C3*C4*C6*C9)*L1*L10*L2*L3*L4 + (((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C9)*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C10*C2*C4*C5*C6*C9)*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + 8192*I*pi**13*C2*C3*C4*C5*C6*C8 + 8192*I*pi**13*C2*C3*C4*C5*C6*C9)*L1*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7 + 8192*I*pi**13*C10*C2*C3*C4*C8)*C9)*L1*L10*L2*L3*L4 + ((((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C8)*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C8)*C9)*L1*L10*L2 + ((((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C8)*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + (8192*I*pi**13*C10*C2*C3*C4 + 8192*I*pi**13*C2*C3*C4*C5)*C6 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C7)*C8 + (8192*I*pi**13*C2*C3*C4*C5*C6 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C8)*C9)*L1*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C8)*C9)*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C6*C7*C8 + (8192*I*pi**13*C10*C2*C4*C6*C7 + 8192*I*pi**13*C10*C2*C4*C6*C8)*C9)*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C8)*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C2*C3*C4*C6*C7)*C8 + (8192*I*pi**13*C2*C3*C4*C6*C7 + 8192*I*pi**13*C2*C3*C4*C6*C8)*C9)*L1*L2)*L3)*L4 + (((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C8)*C9)*L1*L10*L2 + ((((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C8)*C9)*L1*L10 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + ((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6)*C8 + ((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C8)*C9)*L1*L2)*L3 + ((8192*I*pi**13*C10*C4*C5*C6*C7*C8 + (8192*I*pi**13*C10*C4*C5*C6*C7 + 8192*I*pi**13*C10*C4*C5*C6*C8)*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2*C4*C5*C6 + 8192*I*pi**13*C2*C4*C5*C6*C7)*C8 + (8192*I*pi**13*C2*C4*C5*C6*C7 + 8192*I*pi**13*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6)*C8 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + (8192*I*pi**13*C10*C2*C3*C4*C8*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C8*C9*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C8*C9 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*L1*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C8*C9*L1*L10*L2*L3 + (8192*I*pi**13*C10*C2*C4*C6*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C8*C9*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C2*C3*C4*C6*C8*C9)*L1*L2)*L3)*L4 + ((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C8*C9*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C8*C9 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*L1*L2)*L3 + (8192*I*pi**13*C10*C4*C5*C6*C8*C9*L1*L10 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C2*C4*C5*C6*C8*C9)*L1*L2 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C8*C9 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C7)*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C6 + 8192*I*pi**13*C10*C2*C4*C7)*C8*C9*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C7)*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3*C4*C6 + 8192*I*pi**13*C2*C3*C4*C7)*C8*C9 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8)*L1*L2)*L3)*L4 + (((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5 + 8192*I*pi**13*C10*C2*C6)*C7)*C8*C9*L1*L10*L2 + ((((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C6)*C7)*C8*C9*L1*L10 + (((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6 + (8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C6)*C7)*C8*C9 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8)*L1*L2)*L3 + ((8192*I*pi**13*C10*C4*C5*C6 + (8192*I*pi**13*C10*C4*C5 + 8192*I*pi**13*C10*C4*C6)*C7)*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C4*C5*C6 + (8192*I*pi**13*C2*C4*C5 + 8192*I*pi**13*C2*C4*C6)*C7)*C8*C9 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8)*L1*L2 + (((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C6)*C7)*C8*C9 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8)*L1*L3)*L4)*L5 + (8192*I*pi**13*C10*C2*C6*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C6*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C6*C7*C8*C9 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8)*L1*L2)*L3 + (8192*I*pi**13*C10*C4*C6*C7*C8*C9*L1*L10 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8 + 8192*I*pi**13*C2*C4*C6*C7*C8*C9)*L1*L2 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C6*C7*C8*C9 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8)*L1*L3)*L4 + ((8192*I*pi**13*C10*C4 + 8192*I*pi**13*C10*C5)*C6*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C4 + 8192*I*pi**13*C2*C5)*C6*C7*C8*C9 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8)*L1*L2 + (((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3 + 8192*I*pi**13*C4)*C5)*C6*C7*C8*C9 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8)*L1*L3 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8 + 8192*I*pi**13*C4*C5*C6*C7*C8*C9)*L1*L4)*L5)*L6)*L7)*L8)*L9)*freq**13 + 4096*((pi**12*C10*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((pi**12*C10*C2*C3*C4*C6*C7 + pi**12*C10*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6*C7 + pi**12*C10*C2*C4*C5*C6*C8)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (pi**12*C10*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8*L1*L2*L3 + (pi**12*C10*C2*C4*C5*C6*C8*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8*L1*L2*L3 + (pi**12*C10*C2*C4*C6*C7*C8*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8*L1*L3)*L4 + (pi**12*C10*C4*C5*C6*C7*C8*L1*L4 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + (((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C10*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C10*C2*C4*C5*C6*C9)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C9)*L1*L3)*L4)*L5)*L6 + (((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7 + pi**12*C10*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8)*C9)*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((pi**12*C10*C2*C4*C6*C7*C8 + (pi**12*C10*C2*C4*C6*C7 + pi**12*C10*C2*C4*C6*C8)*C9)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8)*C9)*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8)*C9)*L1*L3 + (pi**12*C10*C4*C5*C6*C7*C8 + (pi**12*C10*C4*C5*C6*C7 + pi**12*C10*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + (pi**12*C10*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8*C9*L1*L3)*L4)*L5 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8*C9*L1*L2*L3 + (pi**12*C10*C2*C4*C6*C8*C9*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8*C9*L1*L3)*L4 + (pi**12*C10*C4*C5*C6*C8*C9*L1*L4 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8*C9*L1*L3)*L5)*L6 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((pi**12*C10*C2*C4*C6 + pi**12*C10*C2*C4*C7)*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C7)*C8*C9*L1*L3)*L4 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5 + pi**12*C10*C2*C6)*C7)*C8*C9*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6)*C7)*C8*C9*L1*L3 + (pi**12*C10*C4*C5*C6 + (pi**12*C10*C4*C5 + pi**12*C10*C4*C6)*C7)*C8*C9*L1*L4)*L5 + (pi**12*C10*C2*C6*C7*C8*C9*L1*L2 + pi**12*C10*C4*C6*C7*C8*C9*L1*L4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6*C7*C8*C9*L1*L3 + (pi**12*C10*C4 + pi**12*C10*C5)*C6*C7*C8*C9*L1*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C10*C2*C3*C4*C6)*L1*L10*L2*L3*L4*L5 + (pi**12*C1*C10*C2*C3*C4*C6*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C5*C6*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C6*L1 + pi**12*C10*C2*C3*C4*C5*C6*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C10*C2*C3*C4*C7 + pi**12*C1*C10*C2*C3*C4*C8)*L1*L10*L2*L3*L4 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C7 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C5*C6 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C7 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C6 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8)*L1 + (pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6*C7 + pi**12*C1*C10*C2*C4*C6*C8)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8)*L1*L10 + ((pi**12*C1*C2*C3*C4*C6*C7 + pi**12*C1*C2*C3*C4*C6*C8)*L1 + (pi**12*C10*C2*C3*C4*C6*C7 + pi**12*C10*C2*C3*C4*C6*C8)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8)*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C7 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8)*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8)*L1*L10 + ((pi**12*C1*C2*C4*C5*C6*C7 + pi**12*C1*C2*C4*C5*C6*C8)*L1 + (pi**12*C10*C2*C4*C5*C6*C7 + pi**12*C10*C2*C4*C5*C6*C8)*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C7 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L10 + (pi**12*C2*C3*C4*C5*C6*C7 + pi**12*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + (pi**12*C1*C10*C2*C3*C4*C8*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8*L1 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8*L10)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C6*C8*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8*L1*L10 + (pi**12*C1*C2*C3*C4*C6*C8*L1 + pi**12*C10*C2*C3*C4*C6*C8*L10)*L2)*L3)*L4 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8*L1*L10 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8*L1 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8*L10)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8*L1*L10 + (pi**12*C1*C2*C4*C5*C6*C8*L1 + pi**12*C10*C2*C4*C5*C6*C8*L10)*L2 + (pi**12*C2*C3*C4*C5*C6*C8*L2 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8*L1 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8*L10)*L3)*L4)*L5)*L6 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8*L1*L10 + ((pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7)*C8*L1 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7)*C8*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8*L1*L10 + ((pi**12*C1*C2*C4*C5*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7)*C8*L1 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7)*C8*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8*L10 + (pi**12*C2*C3*C4*C5*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + (pi**12*C1*C10*C2*C6*C7*C8*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8*L1*L10 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7*C8*L1 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8*L10)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8*L1*L10 + (pi**12*C1*C2*C4*C6*C7*C8*L1 + pi**12*C10*C2*C4*C6*C7*C8*L10)*L2 + (pi**12*C2*C3*C4*C6*C7*C8*L2 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7*C8*L1 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8*L10)*L3)*L4 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8*L1*L10 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7*C8*L1 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7*C8*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8*L10 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (pi**12*C10*C4*C5*C6*C7*C8*L10 + pi**12*C2*C4*C5*C6*C7*C8*L2 + (pi**12*C1 + pi**12*C2)*C4*C5*C6*C7*C8*L1 + (pi**12*C2 + pi**12*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**12*C1*C10*C2*C3*C4*C8 + pi**12*C1*C10*C2*C3*C4*C9)*L1*L10*L2*L3*L4 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C10*C2*C3*C4*C6 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C9)*L1 + ((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C9)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6*C8 + pi**12*C1*C10*C2*C4*C6*C9)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C6*C8 + pi**12*C1*C2*C3*C4*C6*C9)*L1 + (pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C10*C2*C3*C4*C6*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C9 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6)*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C9)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C5*C6 + pi**12*C1*C2*C4*C5*C6*C8 + pi**12*C1*C2*C4*C5*C6*C9)*L1 + (pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C10*C2*C4*C5*C6*C9)*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C9)*L10 + (pi**12*C10*C2*C3*C4*C5*C6 + pi**12*C2*C3*C4*C5*C6*C8 + pi**12*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + ((((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7 + pi**12*C1*C10*C2*C4*C8)*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C10*C2*C3*C4*C7 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7)*C8 + (pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7 + pi**12*C1*C2*C3*C4*C8)*C9)*L1 + ((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7 + pi**12*C10*C2*C3*C4*C8)*C9)*L10)*L2)*L3)*L4 + ((((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C8)*C9)*L1*L10*L2 + (((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C7 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C2*C3)*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7)*C8 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C8)*C9)*L1 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8)*C9)*L10)*L2)*L3 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C5*C6 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C7 + (pi**12*C1*C10*C2*C4*C5 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C2*C4*C5)*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7)*C8 + (pi**12*C1*C2*C4*C5*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C8)*C9)*L1 + ((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8)*C9)*L10)*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4)*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7)*C8 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C8)*C9)*L1 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8)*C9)*L10 + (pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + (pi**12*C10*C2*C3*C4 + pi**12*C2*C3*C4*C5)*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7)*C8 + (pi**12*C2*C3*C4*C5*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C6*C7*C8 + (pi**12*C1*C10*C2*C6*C7 + pi**12*C1*C10*C2*C6*C8)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C7 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C8)*C9)*L1 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C6*C7 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C2*C4*C6*C7)*C8 + (pi**12*C1*C2*C4*C6*C7 + pi**12*C1*C2*C4*C6*C8)*C9)*L1 + (pi**12*C10*C2*C4*C6*C7*C8 + (pi**12*C10*C2*C4*C6*C7 + pi**12*C10*C2*C4*C6*C8)*C9)*L10)*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C8)*C9)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8)*C9)*L10 + (pi**12*C10*C2*C3*C4*C6*C7 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C2*C3*C4*C6*C7)*C8 + (pi**12*C2*C3*C4*C6*C7 + pi**12*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C7 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6)*C8 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7 + (pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C8)*C9)*L1 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8)*C9)*L10)*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C7 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6)*C8 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C8)*C9)*L1 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8)*C9)*L10 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6)*C8 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6)*C8 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C7 + (pi**12*C1 + pi**12*C2)*C4*C5*C6*C8)*C9)*L1 + (pi**12*C10*C4*C5*C6*C7*C8 + (pi**12*C10*C4*C5*C6*C7 + pi**12*C10*C4*C5*C6*C8)*C9)*L10 + (pi**12*C10*C2*C4*C5*C6*C7 + (pi**12*C10*C2*C4*C5*C6 + pi**12*C2*C4*C5*C6*C7)*C8 + (pi**12*C2*C4*C5*C6*C7 + pi**12*C2*C4*C5*C6*C8)*C9)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6)*C8 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C7 + (pi**12*C2 + pi**12*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C8*C9*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C8*C9*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C8*C9*L1*L10 + (pi**12*C10*C2*C3*C4*C8*C9*L10 + (pi**12*C1*C10*C2*C3*C4*C8 + pi**12*C1*C2*C3*C4*C8*C9)*L1)*L2)*L3)*L4 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C8*C9*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C8*C9*L1*L10 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8*C9*L10 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C8*C9 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8)*L1)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C8*C9*L1*L10 + ((pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8*C9*L10 + ((pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C8*C9 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8)*L1 + ((pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C8*C9 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (pi**12*C1*C10*C2*C6*C8*C9*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C8*C9*L1*L10 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8*C9*L10 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C8*C9 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8)*L1)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C8*C9*L1*L10 + (pi**12*C10*C2*C4*C6*C8*C9*L10 + (pi**12*C1*C10*C2*C4*C6*C8 + pi**12*C1*C2*C4*C6*C8*C9)*L1)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8*C9*L10 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C8*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8)*L1 + (pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C2*C3*C4*C6*C8*C9)*L2)*L3)*L4 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C8*C9*L1*L10 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8*C9*L10 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C8*C9 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8)*L1 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C8*C9 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L2)*L3 + (pi**12*C10*C4*C5*C6*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C8*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8)*L1 + (pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C2*C4*C5*C6*C8*C9)*L2 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C8*C9 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C6 + pi**12*C1*C10*C2*C7)*C8*C9*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C7)*C8*C9*L1*L10 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C7)*C8*C9*L10 + (((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C7)*C8*C9 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8)*L1)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C7)*C8*C9*L1*L10 + ((pi**12*C10*C2*C4*C6 + pi**12*C10*C2*C4*C7)*C8*C9*L10 + ((pi**12*C1*C2*C4*C6 + pi**12*C1*C2*C4*C7)*C8*C9 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C7)*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C7)*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8)*L1 + ((pi**12*C2*C3*C4*C6 + pi**12*C2*C3*C4*C7)*C8*C9 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8)*L2)*L3)*L4 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C6)*C7)*C8*C9*L1*L10 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5 + pi**12*C10*C2*C6)*C7)*C8*C9*L10 + (((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6 + (pi**12*C1*C2*C4 + pi**12*C1*C2*C5 + pi**12*C1*C2*C6)*C7)*C8*C9 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8)*L1)*L2 + ((((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6)*C7)*C8*C9*L10 + ((((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C6)*C7)*C8*C9 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8)*L1 + (((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5 + (pi**12*C2*C3 + pi**12*C2*C4)*C6)*C7)*C8*C9 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8)*L2)*L3 + ((pi**12*C10*C4*C5*C6 + (pi**12*C10*C4*C5 + pi**12*C10*C4*C6)*C7)*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C4*C5*C6 + ((pi**12*C1 + pi**12*C2)*C4*C5 + (pi**12*C1 + pi**12*C2)*C4*C6)*C7)*C8*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8)*L1 + ((pi**12*C2*C4*C5*C6 + (pi**12*C2*C4*C5 + pi**12*C2*C4*C6)*C7)*C8*C9 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8)*L2 + (((pi**12*C2 + pi**12*C3)*C4*C5*C6 + ((pi**12*C2 + pi**12*C3)*C4*C5 + (pi**12*C2 + pi**12*C3)*C4*C6)*C7)*C8*C9 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8)*L3)*L4)*L5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C6*C7*C8*C9*L1*L10 + (pi**12*C10*C2*C6*C7*C8*C9*L10 + (pi**12*C1*C10*C2*C6*C7*C8 + pi**12*C1*C2*C6*C7*C8*C9)*L1)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6*C7*C8*C9*L10 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C6*C7*C8*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8)*L1 + ((pi**12*C2*C3 + pi**12*C2*C4)*C6*C7*C8*C9 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8)*L2)*L3 + (pi**12*C10*C4*C6*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C4*C6*C7*C8*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8)*L1 + (pi**12*C10*C2*C4*C6*C7*C8 + pi**12*C2*C4*C6*C7*C8*C9)*L2 + ((pi**12*C2 + pi**12*C3)*C4*C6*C7*C8*C9 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8)*L3)*L4 + ((pi**12*C10*C4 + pi**12*C10*C5)*C6*C7*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C4 + (pi**12*C1 + pi**12*C2)*C5)*C6*C7*C8*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8)*L1 + ((pi**12*C2*C4 + pi**12*C2*C5)*C6*C7*C8*C9 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8)*L2 + (((pi**12*C2 + pi**12*C3)*C4 + (pi**12*C2 + pi**12*C3 + pi**12*C4)*C5)*C6*C7*C8*C9 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8)*L3 + (pi**12*C10*C4*C5*C6*C7*C8 + pi**12*C4*C5*C6*C7*C8*C9)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**12 + ((-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*L1*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 - 2048*I*pi**11*C1*C10*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (-2048*I*pi**11*C1*C10*C2*C3*C4*C6*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5)*C6*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C5*C6*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C5*C6*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C6 - 2048*I*pi**11*C1*C10*C2*C3*C4*C7 - 2048*I*pi**11*C1*C10*C2*C3*C4*C8)*L1*L2*L3*L4 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6*C7 - 2048*I*pi**11*C1*C10*C2*C4*C6*C8)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C7 - 2048*I*pi**11*C10*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8)*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C7 - 2048*I*pi**11*C10*C2*C4*C5*C6*C8)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (-2048*I*pi**11*C1*C10*C2*C3*C4*C8*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C6*C8*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C8*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C8*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7)*C8*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7)*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7)*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7)*C8*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7)*C8*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7)*C8*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7)*C8*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7)*C8*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (-2048*I*pi**11*C1*C10*C2*C6*C7*C8*L1*L2 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7*C8*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C7*C8*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7*C8*L3)*L4 + (-2048*I*pi**11*C10*C4*C5*C6*C7*C8*L4 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7*C8*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C8 - 2048*I*pi**11*C1*C10*C2*C3*C4*C9)*L1*L2*L3*L4 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C9)*L1*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C9)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6*C8 - 2048*I*pi**11*C1*C10*C2*C4*C6*C9)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C9)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C8 - 2048*I*pi**11*C10*C2*C3*C4*C6*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C9)*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C8 - 2048*I*pi**11*C10*C2*C4*C5*C6*C9)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C9)*L3)*L4)*L5)*L6 + ((((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C8)*C9)*L1*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7)*C8 + (-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7 - 2048*I*pi**11*C1*C10*C2*C4*C8)*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7)*C8 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 - 2048*I*pi**11*C10*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + ((((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C8)*C9)*L1*L2 + (((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7)*C8 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C8)*C9)*L1 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*C9)*L2)*L3 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7)*C8 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*C9)*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C6*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C6*C7 - 2048*I*pi**11*C1*C10*C2*C6*C8)*C9)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7*C8 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C8)*C9)*L1 + (-2048*I*pi**11*C10*C2*C4*C6*C7*C8 + (-2048*I*pi**11*C10*C2*C4*C6*C7 - 2048*I*pi**11*C10*C2*C4*C6*C8)*C9)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7*C8 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*C9)*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7*C8 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*C9)*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C7*C8 + (-2048*I*pi**11*C10*C4*C5*C6*C7 - 2048*I*pi**11*C10*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C8*C9*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C8*C9*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C8*C9*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C8*C9*L1)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C8*C9*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8*C9*L3)*L4)*L5 + (-2048*I*pi**11*C1*C10*C2*C6*C8*C9*L1*L2 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8*C9*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C8*C9*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8*C9*L3)*L4 + (-2048*I*pi**11*C10*C4*C5*C6*C8*C9*L4 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8*C9*L3)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C6 - 2048*I*pi**11*C1*C10*C2*C7)*C8*C9*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C7)*C8*C9*L1 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C7)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8*C9*L3)*L4 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C6)*C7)*C8*C9*L1 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8*C9*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8*C9*L3 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8*C9*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C7*C8*C9*L2 - 2048*I*pi**11*C10*C4*C6*C7*C8*C9*L4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C6*C7*C8*C9*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8*C9*L3 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8*C9*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (-2048*I*pi**11*C10*C2*C3*C4*C6*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*L1*L10*L2*L3 + (-2048*I*pi**11*C10*C2*C4*C5*C6*L1*L10*L2 + (-2048*I*pi**11*C2*C3*C4*C5*C6*L1*L2 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*L1*L10)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 - 2048*I*pi**11*C10*C2*C3*C4*C8)*L1*L10*L2*L3*L4 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C5*C6 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C7 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C8)*L1*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C6*C7 - 2048*I*pi**11*C10*C2*C4*C6*C8)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C6*C7 - 2048*I*pi**11*C2*C3*C4*C6*C8)*L1*L2)*L3)*L4 + (((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C7 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C8)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5*C6*C7 - 2048*I*pi**11*C10*C4*C5*C6*C8)*L1*L10 + (-2048*I*pi**11*C2*C4*C5*C6*C7 - 2048*I*pi**11*C2*C4*C5*C6*C8)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C7 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + (-2048*I*pi**11*C10*C2*C3*C4*C8*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C8*L1*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8*L1*L10*L2*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C8*L1*L10*L2 + (-2048*I*pi**11*C2*C3*C4*C6*C8*L1*L2 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8*L1*L10)*L3)*L4 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8*L1*L10 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C8*L1*L2)*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C8*L1*L10 - 2048*I*pi**11*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C7)*C8*L1*L2)*L3)*L4 + (((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C7)*C8*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8*L1*L10 + (-2048*I*pi**11*C2*C4*C5*C6 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C7)*C8*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C7*C8*L1*L10*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8*L1*L10 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C7*C8*L1*L2)*L3 + (-2048*I*pi**11*C10*C4*C6*C7*C8*L1*L10 - 2048*I*pi**11*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C7*C8*L1*L3)*L4 + (-2048*I*pi**11*C4*C5*C6*C7*C8*L1*L4 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8*L1*L10 + (-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C7*C8*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C10*C2*C3*C4*C8 - 2048*I*pi**11*C10*C2*C3*C4*C9)*L1*L10*L2*L3*L4 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C9)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C8 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C9)*L1*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C9)*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C6*C8 - 2048*I*pi**11*C10*C2*C4*C6*C9)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C6*C8 - 2048*I*pi**11*C2*C3*C4*C6*C9)*L1*L2)*L3)*L4 + (((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C9)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C9)*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C8 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C9 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5*C6*C8 - 2048*I*pi**11*C10*C4*C5*C6*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C5*C6 - 2048*I*pi**11*C2*C4*C5*C6*C8 - 2048*I*pi**11*C2*C4*C5*C6*C9)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C8 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C9 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6)*L1*L3)*L4)*L5)*L6 + ((((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C8)*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7 - 2048*I*pi**11*C10*C2*C4*C8)*C9)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C8)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 + (-2048*I*pi**11*C10*C2*C3*C4 - 2048*I*pi**11*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C7)*C8 + (-2048*I*pi**11*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C7 - 2048*I*pi**11*C2*C3*C4*C8)*C9)*L1*L2)*L3)*L4 + ((((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C8)*C9)*L1*L10*L2 + (((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C8)*C9)*L1*L10 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C2*C3)*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C7)*C8 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C7 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C8)*C9)*L1*L2)*L3 + (((-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C8)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C2*C4*C5)*C6 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C7)*C8 + (-2048*I*pi**11*C2*C4*C5*C6 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C7 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C8)*C9)*L1*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4)*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + ((-2048*I*pi**11*C10*C2*C6*C7*C8 + (-2048*I*pi**11*C10*C2*C6*C7 - 2048*I*pi**11*C10*C2*C6*C8)*C9)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C8)*C9)*L1*L10 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + ((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8 + ((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C7 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C8)*C9)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C6*C7*C8 + (-2048*I*pi**11*C10*C4*C6*C7 - 2048*I*pi**11*C10*C4*C6*C8)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C6*C7 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C2*C4*C6*C7)*C8 + (-2048*I*pi**11*C2*C4*C6*C7 - 2048*I*pi**11*C2*C4*C6*C8)*C9)*L1*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C7 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8 + ((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C8)*C9)*L1*L10 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + ((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6)*C8 + ((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C7 + (-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C8)*C9)*L1*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6)*C8 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C8)*C9)*L1*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C7 + (-2048*I*pi**11*C10*C4*C5*C6 - 2048*I*pi**11*C4*C5*C6*C7)*C8 + (-2048*I*pi**11*C4*C5*C6*C7 - 2048*I*pi**11*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C8*C9*L1*L10*L2*L3 + (-2048*I*pi**11*C10*C2*C4*C8*C9*L1*L10*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C8*C9*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C8 - 2048*I*pi**11*C2*C3*C4*C8*C9)*L1*L2)*L3)*L4 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C8*C9*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C8*C9 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C8*C9 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*L1*L2 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C8*C9 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C8*C9*L1*L10*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C8*C9 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*L1*L2)*L3 + (-2048*I*pi**11*C10*C4*C6*C8*C9*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C6*C8 - 2048*I*pi**11*C2*C4*C6*C8*C9)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C8*C9 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*L1*L3)*L4 + ((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C8*C9 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*L1*L2 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C8*C9 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*L1*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C8 - 2048*I*pi**11*C4*C5*C6*C8*C9)*L1*L4)*L5)*L6 + ((-2048*I*pi**11*C10*C2*C6 - 2048*I*pi**11*C10*C2*C7)*C8*C9*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C7)*C8*C9*L1*L10 + (((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C7)*C8*C9 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C6 - 2048*I*pi**11*C10*C4*C7)*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C4*C6 - 2048*I*pi**11*C2*C4*C7)*C8*C9 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8)*L1*L2 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C7)*C8*C9 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8)*L1*L3)*L4 + (((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5 - 2048*I*pi**11*C10*C6)*C7)*C8*C9*L1*L10 + (((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6 + (-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5 - 2048*I*pi**11*C2*C6)*C7)*C8*C9 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8)*L1*L2 + ((((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C6)*C7)*C8*C9 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8)*L1*L3 + ((-2048*I*pi**11*C4*C5*C6 + (-2048*I*pi**11*C4*C5 - 2048*I*pi**11*C4*C6)*C7)*C8*C9 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8)*L1*L4)*L5 + (-2048*I*pi**11*C10*C6*C7*C8*C9*L1*L10 + (-2048*I*pi**11*C10*C2*C6*C7*C8 - 2048*I*pi**11*C2*C6*C7*C8*C9)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C6*C7*C8*C9 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8)*L1*L3 + (-2048*I*pi**11*C10*C4*C6*C7*C8 - 2048*I*pi**11*C4*C6*C7*C8*C9)*L1*L4 + ((-2048*I*pi**11*C4 - 2048*I*pi**11*C5)*C6*C7*C8*C9 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8)*L1*L5)*L6)*L7)*L8)*L9)*freq**11 - 1024*(((pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (pi**10*C10*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6*L1*L2*L3 + (pi**10*C10*C2*C4*C5*C6*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + pi**10*C10*C2*C3*C4*C8)*L1*L2*L3*L4 + (((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L1*L2*L3 + ((pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L1*L2*L3 + ((pi**10*C10*C2*C4*C6*C7 + pi**10*C10*C2*C4*C6*C8)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L1*L3 + (pi**10*C10*C4*C5*C6*C7 + pi**10*C10*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (pi**10*C10*C2*C3*C4*C8*L1*L2*L3*L4 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8*L1*L2*L3 + ((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8*L1*L2*L3 + (pi**10*C10*C2*C4*C6*C8*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8*L1*L3)*L4 + (pi**10*C10*C4*C5*C6*C8*L1*L4 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8*L1*L2*L3 + ((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8*L1*L3 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8*L1*L4)*L5 + (pi**10*C10*C2*C6*C7*C8*L1*L2 + pi**10*C10*C4*C6*C7*C8*L1*L4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8*L1*L3 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + ((pi**10*C10*C2*C3*C4*C8 + pi**10*C10*C2*C3*C4*C9)*L1*L2*L3*L4 + (((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C9)*L1*L2*L3 + (((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C9)*L1*L2*L3 + ((pi**10*C10*C2*C4*C6*C8 + pi**10*C10*C2*C4*C6*C9)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C9)*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C9)*L1*L3 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C10*C4*C5*C6*C9)*L1*L4)*L5)*L6 + ((((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8)*C9)*L1*L2*L3 + (((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7 + pi**10*C10*C2*C4*C8)*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8)*C9)*L1*L2 + ((((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8)*C9)*L1*L3 + ((pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8)*C9)*L1*L4)*L5 + ((pi**10*C10*C2*C6*C7*C8 + (pi**10*C10*C2*C6*C7 + pi**10*C10*C2*C6*C8)*C9)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8)*C9)*L1*L3 + (pi**10*C10*C4*C6*C7*C8 + (pi**10*C10*C4*C6*C7 + pi**10*C10*C4*C6*C8)*C9)*L1*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8*C9*L1*L2*L3 + (pi**10*C10*C2*C4*C8*C9*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8*C9*L1*L3)*L4 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8*C9*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8*C9*L1*L3 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8*C9*L1*L4)*L5 + (pi**10*C10*C2*C6*C8*C9*L1*L2 + pi**10*C10*C4*C6*C8*C9*L1*L4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8*C9*L1*L3 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8*C9*L1*L5)*L6 + (pi**10*C10*C6*C7*C8*C9*L1*L6 + (pi**10*C10*C2*C6 + pi**10*C10*C2*C7)*C8*C9*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C7)*C8*C9*L1*L3 + (pi**10*C10*C4*C6 + pi**10*C10*C4*C7)*C8*C9*L1*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C4 + pi**10*C10*C5 + pi**10*C10*C6)*C7)*C8*C9*L1*L5)*L7)*L8)*L9)*ZL + (pi**10*C1*C10*C2*C3*C4*L1*L10*L2*L3*L4 + ((pi**10*C1*C10*C2*C3*C4 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C5 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C5 + pi**10*C1*C10*C2*C4*C6)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6)*L1*L10 + ((pi**10*C1*C2*C3*C4*C5 + pi**10*C1*C2*C3*C4*C6)*L1 + (pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6)*L10)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6*L1*L10*L2*L3 + (pi**10*C1*C10*C2*C4*C6*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6*L1*L10 + (pi**10*C1*C2*C3*C4*C6*L1 + pi**10*C10*C2*C3*C4*C6*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6*L1*L10 + ((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5)*C6*L1 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6*L10)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6*L1*L10 + (pi**10*C1*C2*C4*C5*C6*L1 + pi**10*C10*C2*C4*C5*C6*L10)*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5*C6*L1 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6*L10)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C7 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C10*C2*C4*C7 + pi**10*C1*C10*C2*C4*C8)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8)*L1*L10 + ((pi**10*C1*C2*C3*C4*C6 + pi**10*C1*C2*C3*C4*C7 + pi**10*C1*C2*C3*C4*C8)*L1 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + pi**10*C10*C2*C3*C4*C8)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C7 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8)*L1*L10 + (((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5)*C6 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C7 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8)*L1 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8)*L1*L10 + ((pi**10*C1*C2*C4*C5*C6 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C7 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8)*L1 + (pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L10 + (pi**10*C2*C3*C4*C5*C6 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C7 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C6*C7 + pi**10*C1*C10*C2*C6*C8)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8)*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C7 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8)*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8)*L1*L10 + ((pi**10*C1*C2*C4*C6*C7 + pi**10*C1*C2*C4*C6*C8)*L1 + (pi**10*C10*C2*C4*C6*C7 + pi**10*C10*C2*C4*C6*C8)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L10 + (pi**10*C2*C3*C4*C6*C7 + pi**10*C2*C3*C4*C6*C8)*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8)*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C7 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8)*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C7 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8)*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6*C7 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C8)*L1 + (pi**10*C10*C4*C5*C6*C7 + pi**10*C10*C4*C5*C6*C8)*L10 + (pi**10*C2*C4*C5*C6*C7 + pi**10*C2*C4*C5*C6*C8)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6*C7 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + ((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8*L1*L10*L2*L3 + (pi**10*C1*C10*C2*C4*C8*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8*L1*L10 + (pi**10*C1*C2*C3*C4*C8*L1 + pi**10*C10*C2*C3*C4*C8*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8*L1*L10 + ((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8*L1 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8*L1*L10 + ((pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8*L1 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8*L10 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + (pi**10*C1*C10*C2*C6*C8*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8*L1*L10 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8*L1 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8*L10)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8*L1*L10 + (pi**10*C1*C2*C4*C6*C8*L1 + pi**10*C10*C2*C4*C6*C8*L10)*L2 + (pi**10*C2*C3*C4*C6*C8*L2 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8*L1 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8*L10)*L3)*L4 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8*L1*L10 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8*L1 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8*L10 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8*L2)*L3 + (pi**10*C10*C4*C5*C6*C8*L10 + pi**10*C2*C4*C5*C6*C8*L2 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C8*L1 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7)*C8*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8*L1*L10 + ((pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7)*C8*L1 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7)*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8*L10 + (pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7)*C8*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7)*C8*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7)*C8*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7)*C8*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7)*C8*L1 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8*L10 + (pi**10*C2*C4*C5*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7)*C8*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8*L1*L10 + (pi**10*C1*C2*C6*C7*C8*L1 + pi**10*C10*C2*C6*C7*C8*L10)*L2 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7*C8*L1 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8*L10 + (pi**10*C2*C3 + pi**10*C2*C4)*C6*C7*C8*L2)*L3 + (pi**10*C10*C4*C6*C7*C8*L10 + pi**10*C2*C4*C6*C7*C8*L2 + (pi**10*C1 + pi**10*C2)*C4*C6*C7*C8*L1 + (pi**10*C2 + pi**10*C3)*C4*C6*C7*C8*L3)*L4 + (pi**10*C4*C5*C6*C7*C8*L4 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7*C8*L1 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8*L10 + (pi**10*C2*C4 + pi**10*C2*C5)*C6*C7*C8*L2 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C9)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C8 + pi**10*C1*C10*C2*C4*C9)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C9)*L1*L10 + ((pi**10*C1*C10*C2*C3*C4 + pi**10*C1*C2*C3*C4*C8 + pi**10*C1*C2*C3*C4*C9)*L1 + (pi**10*C10*C2*C3*C4*C8 + pi**10*C10*C2*C3*C4*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C9)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C3*C4 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C5 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C9)*L1 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C5 + pi**10*C1*C10*C2*C4*C6 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C9)*L1 + ((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C9)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C9)*L10 + (pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C6*C8 + pi**10*C1*C10*C2*C6*C9)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C9)*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C9 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6)*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C9)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C2*C4*C6*C8 + pi**10*C1*C2*C4*C6*C9)*L1 + (pi**10*C10*C2*C4*C6*C8 + pi**10*C10*C2*C4*C6*C9)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C9)*L10 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C6*C8 + pi**10*C2*C3*C4*C6*C9)*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C9)*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C9 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6)*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C9)*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C9)*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C9 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6)*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6*C8 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6)*L1 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C10*C4*C5*C6*C9)*L10 + (pi**10*C10*C2*C4*C5*C6 + pi**10*C2*C4*C5*C6*C8 + pi**10*C2*C4*C5*C6*C9)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6*C8 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C9 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7 + pi**10*C1*C10*C2*C8)*C9)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C8)*C9)*L1*L10 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C7 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7)*C8 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C8)*C9)*L1 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C8)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C10*C2*C4*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7)*C8 + (pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7 + pi**10*C1*C2*C4*C8)*C9)*L1 + ((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7 + pi**10*C10*C2*C4*C8)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C8)*C9)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8)*C9)*L10 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + (pi**10*C10*C2*C3*C4 + pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7)*C8 + (pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7 + pi**10*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + (((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C8)*C9)*L1*L10 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7)*C8 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C8)*C9)*L1 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8)*C9)*L10)*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C7 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + (pi**10*C1 + pi**10*C10)*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7)*C8 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C8)*C9)*L1 + ((((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8)*C9)*L10 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + (pi**10*C10*C2 + pi**10*C2*C3)*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7)*C8 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C8)*C9)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C4*C5*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C8)*C9)*L1 + ((pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8)*C9)*L10 + (pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + (pi**10*C10*C2*C4 + pi**10*C2*C4*C5)*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7)*C8 + (pi**10*C2*C4*C5*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C8)*C9)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4)*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7)*C8 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + (((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C6*C8)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C6*C7 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C2*C6*C7)*C8 + (pi**10*C1*C2*C6*C7 + pi**10*C1*C2*C6*C8)*C9)*L1 + (pi**10*C10*C2*C6*C7*C8 + (pi**10*C10*C2*C6*C7 + pi**10*C10*C2*C6*C8)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C8)*C9)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8)*C9)*L10 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C7 + (pi**10*C2*C3 + pi**10*C2*C4)*C6*C8)*C9)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C7 + ((pi**10*C1 + pi**10*C2)*C4*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8 + ((pi**10*C1 + pi**10*C2)*C4*C6*C7 + (pi**10*C1 + pi**10*C2)*C4*C6*C8)*C9)*L1 + (pi**10*C10*C4*C6*C7*C8 + (pi**10*C10*C4*C6*C7 + pi**10*C10*C4*C6*C8)*C9)*L10 + (pi**10*C10*C2*C4*C6*C7 + (pi**10*C10*C2*C4*C6 + pi**10*C2*C4*C6*C7)*C8 + (pi**10*C2*C4*C6*C7 + pi**10*C2*C4*C6*C8)*C9)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + ((pi**10*C2 + pi**10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C2 + pi**10*C3)*C4*C6*C7 + (pi**10*C2 + pi**10*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C7 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6)*C8 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C8)*C9)*L1 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8)*C9)*L10 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6)*C8 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C7 + (pi**10*C2*C4 + pi**10*C2*C5)*C6*C8)*C9)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6)*C8 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C8)*C9)*L3 + (pi**10*C10*C4*C5*C6*C7 + (pi**10*C10*C4*C5*C6 + pi**10*C4*C5*C6*C7)*C8 + (pi**10*C4*C5*C6*C7 + pi**10*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + (pi**10*C1*C10*C2*C8*C9*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C8*C9*L1*L10 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8*C9*L10 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C8*C9 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8)*L1)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C8*C9*L1*L10 + (pi**10*C10*C2*C4*C8*C9*L10 + (pi**10*C1*C10*C2*C4*C8 + pi**10*C1*C2*C4*C8*C9)*L1)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C8*C9*L10 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C8*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8)*L1 + (pi**10*C10*C2*C3*C4*C8 + pi**10*C2*C3*C4*C8*C9)*L2)*L3)*L4 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C8*C9*L1*L10 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8*C9*L10 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C8*C9 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8)*L1)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8*C9*L10 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C8*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8)*L1 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C8*C9 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L2)*L3 + ((pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8)*L1 + ((pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C8*C9 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C8*C9*L1*L10 + (pi**10*C10*C2*C6*C8*C9*L10 + (pi**10*C1*C10*C2*C6*C8 + pi**10*C1*C2*C6*C8*C9)*L1)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8*C9*L10 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C8*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8)*L1 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C8*C9 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L2)*L3 + (pi**10*C10*C4*C6*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C4*C6*C8*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8)*L1 + (pi**10*C10*C2*C4*C6*C8 + pi**10*C2*C4*C6*C8*C9)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C6*C8*C9 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L3)*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8)*L1 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C8*C9 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L3 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C4*C5*C6*C8*C9)*L4)*L5)*L6 + (((pi**10*C1*C10 + pi**10*C10*C2)*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C7)*C8*C9*L1*L10 + ((pi**10*C10*C2*C6 + pi**10*C10*C2*C7)*C8*C9*L10 + ((pi**10*C1*C2*C6 + pi**10*C1*C2*C7)*C8*C9 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8)*L1)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C7)*C8*C9*L10 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C7)*C8*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8)*L1 + (((pi**10*C2*C3 + pi**10*C2*C4)*C6 + (pi**10*C2*C3 + pi**10*C2*C4)*C7)*C8*C9 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8)*L2)*L3 + ((pi**10*C10*C4*C6 + pi**10*C10*C4*C7)*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4*C6 + (pi**10*C1 + pi**10*C2)*C4*C7)*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8)*L1 + ((pi**10*C2*C4*C6 + pi**10*C2*C4*C7)*C8*C9 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4*C6 + (pi**10*C2 + pi**10*C3)*C4*C7)*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8)*L3)*L4 + (((pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C4 + pi**10*C10*C5 + pi**10*C10*C6)*C7)*C8*C9*L10 + ((((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5 + (pi**10*C1 + pi**10*C2)*C6)*C7)*C8*C9 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8)*L1 + (((pi**10*C2*C4 + pi**10*C2*C5)*C6 + (pi**10*C2*C4 + pi**10*C2*C5 + pi**10*C2*C6)*C7)*C8*C9 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8)*L2 + ((((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C6)*C7)*C8*C9 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8)*L3 + ((pi**10*C4*C5*C6 + (pi**10*C4*C5 + pi**10*C4*C6)*C7)*C8*C9 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8)*L4)*L5 + (pi**10*C10*C6*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C6*C7*C8*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8)*L1 + (pi**10*C10*C2*C6*C7*C8 + pi**10*C2*C6*C7*C8*C9)*L2 + ((pi**10*C2 + pi**10*C3 + pi**10*C4)*C6*C7*C8*C9 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8)*L3 + (pi**10*C10*C4*C6*C7*C8 + pi**10*C4*C6*C7*C8*C9)*L4 + ((pi**10*C4 + pi**10*C5)*C6*C7*C8*C9 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**10 + (512*I*pi**9*C10*C2*C3*C4*L1*L10*L2*L3*L4 + (512*I*pi**9*C1*C10*C2*C3*C4*L1*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C4 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C5 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C5 + 512*I*pi**9*C1*C10*C2*C4*C6)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6)*L1 + (512*I*pi**9*C10*C2*C3*C4*C5 + 512*I*pi**9*C10*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6*L1*L2*L3 + (512*I*pi**9*C1*C10*C2*C4*C6*L1*L2 + (512*I*pi**9*C10*C2*C3*C4*C6*L2 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6*L1)*L3)*L4 + ((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5)*C6*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5)*C6*L1 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5)*C6*L2)*L3 + (512*I*pi**9*C10*C2*C4*C5*C6*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5*C6*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C7 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C6 + 512*I*pi**9*C1*C10*C2*C4*C7 + 512*I*pi**9*C1*C10*C2*C4*C8)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8)*L1 + (512*I*pi**9*C10*C2*C3*C4*C6 + 512*I*pi**9*C10*C2*C3*C4*C7 + 512*I*pi**9*C10*C2*C3*C4*C8)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5)*C6 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C7 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5)*C6 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C7 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8)*L1 + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5)*C6 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C7 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8)*L1 + (512*I*pi**9*C10*C2*C4*C5*C6 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C7 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C6*C7 + 512*I*pi**9*C1*C10*C2*C6*C8)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8)*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8)*L1 + (512*I*pi**9*C10*C2*C4*C6*C7 + 512*I*pi**9*C10*C2*C4*C6*C8)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8)*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8)*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8)*L3 + (512*I*pi**9*C10*C4*C5*C6*C7 + 512*I*pi**9*C10*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8*L1*L2*L3 + (512*I*pi**9*C1*C10*C2*C4*C8*L1*L2 + (512*I*pi**9*C10*C2*C3*C4*C8*L2 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8*L1)*L3)*L4 + ((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8*L1 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8*L1 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8*L3)*L4)*L5 + (512*I*pi**9*C1*C10*C2*C6*C8*L1*L2 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8*L1 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8*L2)*L3 + (512*I*pi**9*C10*C2*C4*C6*C8*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8*L3)*L4 + (512*I*pi**9*C10*C4*C5*C6*C8*L4 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8*L1 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8*L3)*L5)*L6 + ((512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7)*C8*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7)*C8*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7)*C8*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7)*C8*L1 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7)*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7)*C8*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7)*C8*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7)*C8*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7)*C8*L3 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7)*C8*L4)*L5 + (512*I*pi**9*C10*C2*C6*C7*C8*L2 + 512*I*pi**9*C10*C4*C6*C7*C8*L4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7*C8*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7*C8*L3 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + (((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C9)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C8 + 512*I*pi**9*C1*C10*C2*C4*C9)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C9)*L1 + (512*I*pi**9*C10*C2*C3*C4*C8 + 512*I*pi**9*C10*C2*C3*C4*C9)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C9)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C9)*L1 + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C9)*L1 + ((512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C9)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C6*C8 + 512*I*pi**9*C1*C10*C2*C6*C9)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C9)*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C9)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C9)*L1 + (512*I*pi**9*C10*C2*C4*C6*C8 + 512*I*pi**9*C10*C2*C4*C6*C9)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C9)*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C9)*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C9)*L3 + (512*I*pi**9*C10*C4*C5*C6*C8 + 512*I*pi**9*C10*C4*C5*C6*C9)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7)*C8 + (512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7 + 512*I*pi**9*C1*C10*C2*C8)*C9)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7)*C8 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C8)*C9)*L1 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7)*C8 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7)*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C8)*C9)*L1 + ((512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7)*C8 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + 512*I*pi**9*C10*C2*C4*C8)*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*C9)*L3)*L4 + (((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7)*C8 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C8)*C9)*L1 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7)*C8 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*C9)*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7)*C8 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*C9)*L3 + ((512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7)*C8 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*C9)*L4)*L5 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C8)*C9)*L1 + (512*I*pi**9*C10*C2*C6*C7*C8 + (512*I*pi**9*C10*C2*C6*C7 + 512*I*pi**9*C10*C2*C6*C8)*C9)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*C9)*L3 + (512*I*pi**9*C10*C4*C6*C7*C8 + (512*I*pi**9*C10*C4*C6*C7 + 512*I*pi**9*C10*C4*C6*C8)*C9)*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7*C8 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*C9)*L5)*L6)*L7 + (512*I*pi**9*C1*C10*C2*C8*C9*L1*L2 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C8*C9*L1 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8*C9*L2)*L3 + (512*I*pi**9*C10*C2*C4*C8*C9*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C8*C9*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8*C9*L3)*L4 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C8*C9*L1 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8*C9*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8*C9*L3 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8*C9*L4)*L5 + (512*I*pi**9*C10*C2*C6*C8*C9*L2 + 512*I*pi**9*C10*C4*C6*C8*C9*L4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C8*C9*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8*C9*L3 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8*C9*L5)*L6 + (512*I*pi**9*C10*C6*C7*C8*C9*L6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C7)*C8*C9*L1 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8*C9*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8*C9*L3 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8*C9*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8*C9*L5)*L7)*L8)*L9)*ZL*ZS + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*L1*L10*L2*L3 + ((512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*L1*L10 + (512*I*pi**9*C2*C3*C4*C5 + 512*I*pi**9*C2*C3*C4*C6)*L1*L2)*L3)*L4)*L5 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*L1*L10*L2*L3 + (512*I*pi**9*C10*C2*C4*C6*L1*L10*L2 + (512*I*pi**9*C2*C3*C4*C6*L1*L2 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*L1*L10)*L3)*L4 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*L1*L10 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5)*C6*L1*L2)*L3 + (512*I*pi**9*C10*C4*C5*C6*L1*L10 + 512*I*pi**9*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*L1*L10*L2*L3 + ((512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + 512*I*pi**9*C10*C2*C4*C8)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*L1*L10 + (512*I*pi**9*C2*C3*C4*C6 + 512*I*pi**9*C2*C3*C4*C7 + 512*I*pi**9*C2*C3*C4*C8)*L1*L2)*L3)*L4 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*L1*L10*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*L1*L10 + ((512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5)*C6 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C7 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C8)*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*L1*L10 + (512*I*pi**9*C2*C4*C5*C6 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C7 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C8)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + ((512*I*pi**9*C10*C2*C6*C7 + 512*I*pi**9*C10*C2*C6*C8)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C7 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C8)*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C6*C7 + 512*I*pi**9*C10*C4*C6*C8)*L1*L10 + (512*I*pi**9*C2*C4*C6*C7 + 512*I*pi**9*C2*C4*C6*C8)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C7 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C8)*L1*L3)*L4 + (((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C7 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C8)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C8)*L1*L3 + (512*I*pi**9*C4*C5*C6*C7 + 512*I*pi**9*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8*L1*L10*L2*L3 + (512*I*pi**9*C10*C2*C4*C8*L1*L10*L2 + (512*I*pi**9*C2*C3*C4*C8*L1*L2 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8*L1*L10)*L3)*L4 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8*L1*L10 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C8*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8*L1*L10 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C8*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + (512*I*pi**9*C10*C2*C6*C8*L1*L10*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8*L1*L10 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C8*L1*L2)*L3 + (512*I*pi**9*C10*C4*C6*C8*L1*L10 + 512*I*pi**9*C2*C4*C6*C8*L1*L2 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C8*L1*L3)*L4 + (512*I*pi**9*C4*C5*C6*C8*L1*L4 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8*L1*L10 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C8*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + ((512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C7)*C8*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8*L1*L10 + (512*I*pi**9*C2*C4*C6 + 512*I*pi**9*C2*C4*C7)*C8*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C7)*C8*L1*L3)*L4 + (((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C7)*C8*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C7)*C8*L1*L3 + (512*I*pi**9*C4*C5*C6 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C7)*C8*L1*L4)*L5 + (512*I*pi**9*C10*C6*C7*C8*L1*L10 + 512*I*pi**9*C2*C6*C7*C8*L1*L2 + 512*I*pi**9*C4*C6*C7*C8*L1*L4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C7*C8*L1*L3 + (512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C9)*L1*L10*L2*L3 + ((512*I*pi**9*C10*C2*C4*C8 + 512*I*pi**9*C10*C2*C4*C9)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C9)*L1*L10 + (512*I*pi**9*C10*C2*C3*C4 + 512*I*pi**9*C2*C3*C4*C8 + 512*I*pi**9*C2*C3*C4*C9)*L1*L2)*L3)*L4 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C9)*L1*L10*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C8 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C9)*L1*L2)*L3 + (((512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C8 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C9)*L1*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + ((512*I*pi**9*C10*C2*C6*C8 + 512*I*pi**9*C10*C2*C6*C9)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C9)*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C8 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C9 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C6*C8 + 512*I*pi**9*C10*C4*C6*C9)*L1*L10 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C2*C4*C6*C8 + 512*I*pi**9*C2*C4*C6*C9)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C8 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C9 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*L1*L3)*L4 + (((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C9)*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C8 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C9 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C9 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6)*L1*L3 + (512*I*pi**9*C10*C4*C5*C6 + 512*I*pi**9*C4*C5*C6*C8 + 512*I*pi**9*C4*C5*C6*C9)*L1*L4)*L5)*L6 + (((512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7 + 512*I*pi**9*C10*C2*C8)*C9)*L1*L10*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C8)*C9)*L1*L10 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C7)*C8 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C7 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C8)*C9)*L1*L2)*L3 + (((512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7 + 512*I*pi**9*C10*C4*C8)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C2*C4*C6 + 512*I*pi**9*C2*C4*C7)*C8 + (512*I*pi**9*C2*C4*C6 + 512*I*pi**9*C2*C4*C7 + 512*I*pi**9*C2*C4*C8)*C9)*L1*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4)*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C7 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C8)*C9)*L1*L10 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C7)*C8 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C7 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C8)*C9)*L1*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + (512*I*pi**9*C10 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C7)*C8 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C8)*C9)*L1*L3 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C4*C5)*C6 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C7)*C8 + (512*I*pi**9*C4*C5*C6 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C7 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C8)*C9)*L1*L4)*L5 + ((512*I*pi**9*C10*C6*C7*C8 + (512*I*pi**9*C10*C6*C7 + 512*I*pi**9*C10*C6*C8)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C6*C7 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C2*C6*C7)*C8 + (512*I*pi**9*C2*C6*C7 + 512*I*pi**9*C2*C6*C8)*C9)*L1*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C7 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C8)*C9)*L1*L3 + (512*I*pi**9*C10*C4*C6*C7 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C4*C6*C7)*C8 + (512*I*pi**9*C4*C6*C7 + 512*I*pi**9*C4*C6*C8)*C9)*L1*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + ((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6)*C8 + ((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C7 + (512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + (512*I*pi**9*C10*C2*C8*C9*L1*L10*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C8*C9*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C8*C9 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*L1*L2)*L3 + (512*I*pi**9*C10*C4*C8*C9*L1*L10 + (512*I*pi**9*C10*C2*C4*C8 + 512*I*pi**9*C2*C4*C8*C9)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C8*C9 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*L1*L3)*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C8*C9*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C8*C9 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C8*C9 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*L1*L3 + ((512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C8*C9 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*L1*L4)*L5 + (512*I*pi**9*C10*C6*C8*C9*L1*L10 + (512*I*pi**9*C10*C2*C6*C8 + 512*I*pi**9*C2*C6*C8*C9)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C8*C9 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*L1*L3 + (512*I*pi**9*C10*C4*C6*C8 + 512*I*pi**9*C4*C6*C8*C9)*L1*L4 + ((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C8*C9 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*L1*L5)*L6 + ((512*I*pi**9*C10*C6 + 512*I*pi**9*C10*C7)*C8*C9*L1*L10 + ((512*I*pi**9*C2*C6 + 512*I*pi**9*C2*C7)*C8*C9 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C7)*C8*C9 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8)*L1*L3 + ((512*I*pi**9*C4*C6 + 512*I*pi**9*C4*C7)*C8*C9 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8)*L1*L4 + (((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6 + (512*I*pi**9*C4 + 512*I*pi**9*C5 + 512*I*pi**9*C6)*C7)*C8*C9 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8)*L1*L5 + (512*I*pi**9*C10*C6*C7*C8 + 512*I*pi**9*C6*C7*C8*C9)*L1*L6)*L7)*L8)*L9)*freq**9 + 256*((pi**8*C10*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L1*L2*L3 + ((pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L1*L3)*L4)*L5 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6*L1*L2*L3 + (pi**8*C10*C2*C4*C6*L1*L2 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6*L1*L3)*L4 + (pi**8*C10*C4*C5*C6*L1*L4 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6*L1*L3)*L5)*L6 + (((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L1*L2*L3 + ((pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + pi**8*C10*C2*C4*C8)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L1*L3)*L4 + (((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L1*L3 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L1*L4)*L5 + ((pi**8*C10*C2*C6*C7 + pi**8*C10*C2*C6*C8)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L1*L3 + (pi**8*C10*C4*C6*C7 + pi**8*C10*C4*C6*C8)*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L1*L5)*L6)*L7 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8*L1*L2*L3 + (pi**8*C10*C2*C4*C8*L1*L2 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8*L1*L3)*L4 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8*L1*L3 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8*L1*L4)*L5 + (pi**8*C10*C2*C6*C8*L1*L2 + pi**8*C10*C4*C6*C8*L1*L4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8*L1*L3 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8*L1*L5)*L6 + (pi**8*C10*C6*C7*C8*L1*L6 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8*L1*L3 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8*L1*L5)*L7)*L8 + (((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C9)*L1*L2*L3 + ((pi**8*C10*C2*C4*C8 + pi**8*C10*C2*C4*C9)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C8 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C9)*L1*L3)*L4 + (((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C9)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C9)*L1*L3 + ((pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C9)*L1*L4)*L5 + ((pi**8*C10*C2*C6*C8 + pi**8*C10*C2*C6*C9)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C9)*L1*L3 + (pi**8*C10*C4*C6*C8 + pi**8*C10*C4*C6*C9)*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C8 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C9)*L1*L5)*L6 + (((pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7 + pi**8*C10*C2*C8)*C9)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8)*C9)*L1*L3 + ((pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7 + pi**8*C10*C4*C8)*C9)*L1*L4 + (((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8)*C9)*L1*L5 + (pi**8*C10*C6*C7*C8 + (pi**8*C10*C6*C7 + pi**8*C10*C6*C8)*C9)*L1*L6)*L7 + (pi**8*C10*C2*C8*C9*L1*L2 + pi**8*C10*C4*C8*C9*L1*L4 + pi**8*C10*C6*C8*C9*L1*L6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8*C9*L1*L3 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8*C9*L1*L5 + (pi**8*C10*C6 + pi**8*C10*C7)*C8*C9*L1*L7)*L8)*L9)*ZL + ((pi**8*C1*C10*C2*C3 + pi**8*C1*C10*C2*C4)*L1*L10*L2*L3 + (pi**8*C1*C10*C2*C4*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4*L1*L10 + (pi**8*C1*C2*C3*C4*L1 + pi**8*C10*C2*C3*C4*L10)*L2)*L3)*L4 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C10*C2*C5 + pi**8*C1*C10*C2*C6)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C5 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6)*L1*L10 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6)*L1 + (pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6)*L1*L10 + ((pi**8*C1*C2*C4*C5 + pi**8*C1*C2*C4*C6)*L1 + (pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L10 + (pi**8*C2*C3*C4*C5 + pi**8*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + (pi**8*C1*C10*C2*C6*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6*L1*L10 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6*L1 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6*L10)*L2)*L3 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6*L1*L10 + (pi**8*C1*C2*C4*C6*L1 + pi**8*C10*C2*C4*C6*L10)*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6*L1 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6*L10)*L3)*L4 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6*L1*L10 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6*L1 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5)*C6*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6*L10 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5)*C6*L2)*L3 + (pi**8*C10*C4*C5*C6*L10 + pi**8*C2*C4*C5*C6*L2 + (pi**8*C1 + pi**8*C2)*C4*C5*C6*L1 + (pi**8*C2 + pi**8*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C10*C2*C7 + pi**8*C1*C10*C2*C8)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C7 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8)*L1*L10 + (((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C7 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8)*L1 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C8)*L1*L10 + ((pi**8*C1*C2*C4*C6 + pi**8*C1*C2*C4*C7 + pi**8*C1*C2*C4*C8)*L1 + (pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + pi**8*C10*C2*C4*C8)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L10 + (pi**8*C2*C3*C4*C6 + pi**8*C2*C3*C4*C7 + pi**8*C2*C3*C4*C8)*L2)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8)*L1*L10 + (((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C7 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8)*L1 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L10)*L2 + ((((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5)*C6 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C7 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L10 + ((pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5)*C6 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C7 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C5*C6 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8)*L1 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L10 + (pi**8*C2*C4*C5*C6 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C7 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C5*C6 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C7 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8)*L3)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C8)*L1*L10 + ((pi**8*C1*C2*C6*C7 + pi**8*C1*C2*C6*C8)*L1 + (pi**8*C10*C2*C6*C7 + pi**8*C10*C2*C6*C8)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6*C7 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C8)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6*C7 + (pi**8*C1 + pi**8*C2)*C4*C6*C8)*L1 + (pi**8*C10*C4*C6*C7 + pi**8*C10*C4*C6*C8)*L10 + (pi**8*C2*C4*C6*C7 + pi**8*C2*C4*C6*C8)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6*C7 + (pi**8*C2 + pi**8*C3)*C4*C6*C8)*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C7 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8)*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6*C7 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C8)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C7 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8)*L3 + (pi**8*C4*C5*C6*C7 + pi**8*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + (pi**8*C1*C10*C2*C8*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8*L1*L10 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8*L1 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8*L10)*L2)*L3 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4*C8*L1*L10 + (pi**8*C1*C2*C4*C8*L1 + pi**8*C10*C2*C4*C8*L10)*L2 + (pi**8*C2*C3*C4*C8*L2 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8*L1 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8*L10)*L3)*L4 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8*L1*L10 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8*L1 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8*L10 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8*L1 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8*L10 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8*L3)*L4)*L5 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6*C8*L1*L10 + (pi**8*C1*C2*C6*C8*L1 + pi**8*C10*C2*C6*C8*L10)*L2 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8*L1 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8*L10 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C8*L2)*L3 + (pi**8*C10*C4*C6*C8*L10 + pi**8*C2*C4*C6*C8*L2 + (pi**8*C1 + pi**8*C2)*C4*C6*C8*L1 + (pi**8*C2 + pi**8*C3)*C4*C6*C8*L3)*L4 + (pi**8*C4*C5*C6*C8*L4 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8*L1 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8*L10 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8*L3)*L5)*L6 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8*L1*L10 + ((pi**8*C1*C2*C6 + pi**8*C1*C2*C7)*C8*L1 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7)*C8*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7)*C8*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7)*C8*L1 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8*L10 + (pi**8*C2*C4*C6 + pi**8*C2*C4*C7)*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7)*C8*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7)*C8*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7)*C8*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7)*C8*L3 + (pi**8*C4*C5*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7)*C8*L4)*L5 + (pi**8*C10*C6*C7*C8*L10 + pi**8*C2*C6*C7*C8*L2 + pi**8*C4*C6*C7*C8*L4 + (pi**8*C1 + pi**8*C2)*C6*C7*C8*L1 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7*C8*L3 + (pi**8*C4 + pi**8*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + ((pi**8*C1*C10*C2*C8 + pi**8*C1*C10*C2*C9)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C3 + pi**8*C1*C10*C2*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C9)*L1 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C9)*L1*L10 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C2*C4*C8 + pi**8*C1*C2*C4*C9)*L1 + (pi**8*C10*C2*C4*C8 + pi**8*C10*C2*C4*C9)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C8 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C9)*L10 + (pi**8*C10*C2*C3*C4 + pi**8*C2*C3*C4*C8 + pi**8*C2*C3*C4*C9)*L2)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C10*C2*C5 + pi**8*C1*C10*C2*C6 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C9)*L1 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C9)*L10)*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C5 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C9)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C9)*L10 + (pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C9)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C9)*L1 + ((pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C9)*L10 + (pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C9)*L3)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C9)*L1*L10 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C2*C6*C8 + pi**8*C1*C2*C6*C9)*L1 + (pi**8*C10*C2*C6*C8 + pi**8*C10*C2*C6*C9)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C9)*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6*C8 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C9 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6*C8 + (pi**8*C1 + pi**8*C2)*C4*C6*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6)*L1 + (pi**8*C10*C4*C6*C8 + pi**8*C10*C4*C6*C9)*L10 + (pi**8*C10*C2*C4*C6 + pi**8*C2*C4*C6*C8 + pi**8*C2*C4*C6*C9)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6*C8 + (pi**8*C2 + pi**8*C3)*C4*C6*C9 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6)*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C8 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C9)*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6*C8 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C9 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C9 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6)*L3 + (pi**8*C10*C4*C5*C6 + pi**8*C4*C5*C6*C8 + pi**8*C4*C5*C6*C9)*L4)*L5)*L6 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C8)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C10*C2*C7 + (pi**8*C1*C10*C2 + pi**8*C1*C2*C6 + pi**8*C1*C2*C7)*C8 + (pi**8*C1*C2*C6 + pi**8*C1*C2*C7 + pi**8*C1*C2*C8)*C9)*L1 + ((pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7 + pi**8*C10*C2*C8)*C9)*L10)*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C7 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7)*C8 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C8)*C9)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8)*C9)*L10 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7)*C8 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7 + (pi**8*C2*C3 + pi**8*C2*C4)*C8)*C9)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C7 + ((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8 + ((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7 + (pi**8*C1 + pi**8*C2)*C4*C8)*C9)*L1 + ((pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7 + pi**8*C10*C4*C8)*C9)*L10 + (pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + (pi**8*C10*C2*C4 + pi**8*C2*C4*C6 + pi**8*C2*C4*C7)*C8 + (pi**8*C2*C4*C6 + pi**8*C2*C4*C7 + pi**8*C2*C4*C8)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4)*C8 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7 + (pi**8*C2 + pi**8*C3)*C4*C8)*C9)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + (pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7)*C8 + (((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C8)*C9)*L1 + (((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8)*C9)*L10 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + (pi**8*C10*C2 + pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7)*C8 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C8)*C9)*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + (pi**8*C10 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7)*C8 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C8)*C9)*L3 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + (pi**8*C10*C4 + pi**8*C4*C5)*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7)*C8 + (pi**8*C4*C5*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7 + (pi**8*C4*C5 + pi**8*C4*C6)*C8)*C9)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C7 + ((pi**8*C1 + pi**8*C2)*C6*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8 + ((pi**8*C1 + pi**8*C2)*C6*C7 + (pi**8*C1 + pi**8*C2)*C6*C8)*C9)*L1 + (pi**8*C10*C6*C7*C8 + (pi**8*C10*C6*C7 + pi**8*C10*C6*C8)*C9)*L10 + (pi**8*C10*C2*C6*C7 + (pi**8*C10*C2*C6 + pi**8*C2*C6*C7)*C8 + (pi**8*C2*C6*C7 + pi**8*C2*C6*C8)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C8)*C9)*L3 + (pi**8*C10*C4*C6*C7 + (pi**8*C10*C4*C6 + pi**8*C4*C6*C7)*C8 + (pi**8*C4*C6*C7 + pi**8*C4*C6*C8)*C9)*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + ((pi**8*C4 + pi**8*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6)*C8 + ((pi**8*C4 + pi**8*C5)*C6*C7 + (pi**8*C4 + pi**8*C5)*C6*C8)*C9)*L5)*L6)*L7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C8*C9*L1*L10 + (pi**8*C10*C2*C8*C9*L10 + (pi**8*C1*C10*C2*C8 + pi**8*C1*C2*C8*C9)*L1)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8*C9*L10 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C8*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8)*L1 + ((pi**8*C2*C3 + pi**8*C2*C4)*C8*C9 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L2)*L3 + (pi**8*C10*C4*C8*C9*L10 + ((pi**8*C1 + pi**8*C2)*C4*C8*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C8)*L1 + (pi**8*C10*C2*C4*C8 + pi**8*C2*C4*C8*C9)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C8*C9 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L3)*L4 + ((pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8*C9*L10 + (((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C8*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8)*L1 + ((pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C8*C9 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C8*C9 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L3 + ((pi**8*C4*C5 + pi**8*C4*C6)*C8*C9 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L4)*L5 + (pi**8*C10*C6*C8*C9*L10 + ((pi**8*C1 + pi**8*C2)*C6*C8*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C8)*L1 + (pi**8*C10*C2*C6*C8 + pi**8*C2*C6*C8*C9)*L2 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C8*C9 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L3 + (pi**8*C10*C4*C6*C8 + pi**8*C4*C6*C8*C9)*L4 + ((pi**8*C4 + pi**8*C5)*C6*C8*C9 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L5)*L6 + ((pi**8*C10*C6 + pi**8*C10*C7)*C8*C9*L10 + (((pi**8*C1 + pi**8*C2)*C6 + (pi**8*C1 + pi**8*C2)*C7)*C8*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8)*L1 + ((pi**8*C2*C6 + pi**8*C2*C7)*C8*C9 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8)*L2 + (((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C7)*C8*C9 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8)*L3 + ((pi**8*C4*C6 + pi**8*C4*C7)*C8*C9 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8)*L4 + (((pi**8*C4 + pi**8*C5)*C6 + (pi**8*C4 + pi**8*C5 + pi**8*C6)*C7)*C8*C9 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8)*L5 + (pi**8*C10*C6*C7*C8 + pi**8*C6*C7*C8*C9)*L6)*L7)*L8)*L9)*ZS)*freq**8 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*L1*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 - 128*I*pi**7*C1*C10*C2*C4)*L1*L2*L3 + (-128*I*pi**7*C1*C10*C2*C4*L1*L2 + (-128*I*pi**7*C10*C2*C3*C4*L2 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3)*C4*L1)*L3)*L4 + ((-128*I*pi**7*C1*C10*C2*C4 - 128*I*pi**7*C1*C10*C2*C5 - 128*I*pi**7*C1*C10*C2*C6)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3)*C4 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C5 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6)*L1 + (-128*I*pi**7*C10*C2*C3*C4 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C5 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6)*L1 + (-128*I*pi**7*C10*C2*C4*C5 - 128*I*pi**7*C10*C2*C4*C6)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6)*L3)*L4)*L5 + (-128*I*pi**7*C1*C10*C2*C6*L1*L2 + ((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6*L1 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6*L2)*L3 + (-128*I*pi**7*C10*C2*C4*C6*L2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6*L3)*L4 + (-128*I*pi**7*C10*C4*C5*C6*L4 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5)*C6*L1 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5)*C6*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5)*C6*L3)*L5)*L6 + ((-128*I*pi**7*C1*C10*C2*C6 - 128*I*pi**7*C1*C10*C2*C7 - 128*I*pi**7*C1*C10*C2*C8)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C7 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8)*L1 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C7 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8)*L1 + (-128*I*pi**7*C10*C2*C4*C6 - 128*I*pi**7*C10*C2*C4*C7 - 128*I*pi**7*C10*C2*C4*C8)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8)*L3)*L4 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5)*C6 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C7 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8)*L1 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5)*C6 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C7 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5)*C6 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C7 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8)*L3 + (-128*I*pi**7*C10*C4*C5*C6 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C7 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8)*L4)*L5 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8)*L1 + (-128*I*pi**7*C10*C2*C6*C7 - 128*I*pi**7*C10*C2*C6*C8)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8)*L3 + (-128*I*pi**7*C10*C4*C6*C7 - 128*I*pi**7*C10*C4*C6*C8)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8)*L5)*L6)*L7 + (-128*I*pi**7*C1*C10*C2*C8*L1*L2 + ((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8*L1 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8*L2)*L3 + (-128*I*pi**7*C10*C2*C4*C8*L2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8*L3)*L4 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8*L1 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8*L3 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8*L4)*L5 + (-128*I*pi**7*C10*C2*C6*C8*L2 - 128*I*pi**7*C10*C4*C6*C8*L4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8*L3 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8*L5)*L6 + (-128*I*pi**7*C10*C6*C7*C8*L6 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7)*C8*L1 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7)*C8*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7)*C8*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7)*C8*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7)*C8*L5)*L7)*L8 + ((-128*I*pi**7*C1*C10*C2*C8 - 128*I*pi**7*C1*C10*C2*C9)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C9)*L1 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C9)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C9)*L1 + (-128*I*pi**7*C10*C2*C4*C8 - 128*I*pi**7*C10*C2*C4*C9)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C9)*L3)*L4 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C9)*L1 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C9)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C9)*L3 + ((-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C9)*L4)*L5 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C9)*L1 + (-128*I*pi**7*C10*C2*C6*C8 - 128*I*pi**7*C10*C2*C6*C9)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C9)*L3 + (-128*I*pi**7*C10*C4*C6*C8 - 128*I*pi**7*C10*C4*C6*C9)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C9)*L5)*L6 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7)*C8 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C8)*C9)*L1 + ((-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7)*C8 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 - 128*I*pi**7*C10*C2*C8)*C9)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7)*C8 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*C9)*L3 + ((-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7)*C8 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 - 128*I*pi**7*C10*C4*C8)*C9)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7)*C8 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*C9)*L5 + (-128*I*pi**7*C10*C6*C7*C8 + (-128*I*pi**7*C10*C6*C7 - 128*I*pi**7*C10*C6*C8)*C9)*L6)*L7 + (-128*I*pi**7*C10*C2*C8*C9*L2 - 128*I*pi**7*C10*C4*C8*C9*L4 - 128*I*pi**7*C10*C6*C8*C9*L6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C8*C9*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8*C9*L3 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8*C9*L5 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8*C9*L7)*L8)*L9)*ZL*ZS + (-128*I*pi**7*C10*C2*C4*L1*L10*L2 + (-128*I*pi**7*C2*C3*C4*L1*L2 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*L1*L10)*L3)*L4 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*L1*L10*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*L1*L10 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C5 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C6)*L1*L2)*L3 + ((-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*L1*L10 + (-128*I*pi**7*C2*C4*C5 - 128*I*pi**7*C2*C4*C6)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6)*L1*L3)*L4)*L5 + (-128*I*pi**7*C10*C2*C6*L1*L10*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*L1*L10 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C6*L1*L2)*L3 + (-128*I*pi**7*C10*C4*C6*L1*L10 - 128*I*pi**7*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6*L1*L3)*L4 + (-128*I*pi**7*C4*C5*C6*L1*L4 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*L1*L10 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5)*C6*L1*L3)*L5)*L6 + ((-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 - 128*I*pi**7*C10*C2*C8)*L1*L10*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*L1*L10 + ((-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C6 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C7 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C8)*L1*L2)*L3 + ((-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 - 128*I*pi**7*C10*C4*C8)*L1*L10 + (-128*I*pi**7*C2*C4*C6 - 128*I*pi**7*C2*C4*C7 - 128*I*pi**7*C2*C4*C8)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C7 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C8)*L1*L3)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*L1*L10 + ((-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C7 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C8)*L1*L2 + (((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5)*C6 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C7 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C8)*L1*L3 + (-128*I*pi**7*C4*C5*C6 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C7 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C8)*L1*L4)*L5 + ((-128*I*pi**7*C10*C6*C7 - 128*I*pi**7*C10*C6*C8)*L1*L10 + (-128*I*pi**7*C2*C6*C7 - 128*I*pi**7*C2*C6*C8)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C7 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C8)*L1*L3 + (-128*I*pi**7*C4*C6*C7 - 128*I*pi**7*C4*C6*C8)*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C7 + (-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C8)*L1*L5)*L6)*L7 + (-128*I*pi**7*C10*C2*C8*L1*L10*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8*L1*L10 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C8*L1*L2)*L3 + (-128*I*pi**7*C10*C4*C8*L1*L10 - 128*I*pi**7*C2*C4*C8*L1*L2 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C8*L1*L3)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8*L1*L10 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C8*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C8*L1*L3 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C8*L1*L4)*L5 + (-128*I*pi**7*C10*C6*C8*L1*L10 - 128*I*pi**7*C2*C6*C8*L1*L2 - 128*I*pi**7*C4*C6*C8*L1*L4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C8*L1*L3 + (-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C8*L1*L5)*L6 + (-128*I*pi**7*C6*C7*C8*L1*L6 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8*L1*L10 + (-128*I*pi**7*C2*C6 - 128*I*pi**7*C2*C7)*C8*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C7)*C8*L1*L3 + (-128*I*pi**7*C4*C6 - 128*I*pi**7*C4*C7)*C8*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C7)*C8*L1*L5)*L7)*L8 + ((-128*I*pi**7*C10*C2*C8 - 128*I*pi**7*C10*C2*C9)*L1*L10*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C8 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C9)*L1*L2)*L3 + ((-128*I*pi**7*C10*C4*C8 - 128*I*pi**7*C10*C4*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C2*C4*C8 - 128*I*pi**7*C2*C4*C9)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C8 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C9 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4)*L1*L3)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C8 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C9)*L1*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C8 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C9)*L1*L3 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C8 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C9)*L1*L4)*L5 + ((-128*I*pi**7*C10*C6*C8 - 128*I*pi**7*C10*C6*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C2*C6*C8 - 128*I*pi**7*C2*C6*C9)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C8 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C9 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*L1*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C4*C6*C8 - 128*I*pi**7*C4*C6*C9)*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C8 + (-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C9 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6)*L1*L5)*L6 + (((-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7 - 128*I*pi**7*C10*C8)*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C2*C6 - 128*I*pi**7*C2*C7)*C8 + (-128*I*pi**7*C2*C6 - 128*I*pi**7*C2*C7 - 128*I*pi**7*C2*C8)*C9)*L1*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C7)*C8 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C7 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C8)*C9)*L1*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C4*C6 - 128*I*pi**7*C4*C7)*C8 + (-128*I*pi**7*C4*C6 - 128*I*pi**7*C4*C7 - 128*I*pi**7*C4*C8)*C9)*L1*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 + (-128*I*pi**7*C10 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C7)*C8 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C7 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C8)*C9)*L1*L5 + (-128*I*pi**7*C10*C6*C7 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C6*C7)*C8 + (-128*I*pi**7*C6*C7 - 128*I*pi**7*C6*C8)*C9)*L1*L6)*L7 + (-128*I*pi**7*C10*C8*C9*L1*L10 + (-128*I*pi**7*C10*C2*C8 - 128*I*pi**7*C2*C8*C9)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C8*C9 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*L1*L3 + (-128*I*pi**7*C10*C4*C8 - 128*I*pi**7*C4*C8*C9)*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C8*C9 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*L1*L5 + (-128*I*pi**7*C10*C6*C8 - 128*I*pi**7*C6*C8*C9)*L1*L6 + ((-128*I*pi**7*C6 - 128*I*pi**7*C7)*C8*C9 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8)*L1*L7)*L8)*L9)*freq**7 - 64*(((pi**6*C10*C2*C3 + pi**6*C10*C2*C4)*L1*L2*L3 + (pi**6*C10*C2*C4*L1*L2 + (pi**6*C10*C2 + pi**6*C10*C3)*C4*L1*L3)*L4 + ((pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L1*L3 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6)*L1*L4)*L5 + (pi**6*C10*C2*C6*L1*L2 + pi**6*C10*C4*C6*L1*L4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6*L1*L3 + (pi**6*C10*C4 + pi**6*C10*C5)*C6*L1*L5)*L6 + ((pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + pi**6*C10*C2*C8)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L1*L3 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + pi**6*C10*C4*C8)*L1*L4 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L1*L5 + (pi**6*C10*C6*C7 + pi**6*C10*C6*C8)*L1*L6)*L7 + (pi**6*C10*C2*C8*L1*L2 + pi**6*C10*C4*C8*L1*L4 + pi**6*C10*C6*C8*L1*L6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8*L1*L3 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8*L1*L5 + (pi**6*C10*C6 + pi**6*C10*C7)*C8*L1*L7)*L8 + (pi**6*C10*C8*C9*L1*L8 + (pi**6*C10*C2*C8 + pi**6*C10*C2*C9)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C9)*L1*L3 + (pi**6*C10*C4*C8 + pi**6*C10*C4*C9)*L1*L4 + ((pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C9)*L1*L5 + (pi**6*C10*C6*C8 + pi**6*C10*C6*C9)*L1*L6 + ((pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C6 + pi**6*C10*C7 + pi**6*C10*C8)*C9)*L1*L7)*L9)*ZL + (pi**6*C1*C10*C2*L1*L10*L2 + ((pi**6*C1*C10*C2 + (pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2)*C4)*L1*L10 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C10*C2*C3 + pi**6*C10*C2*C4)*L10)*L2)*L3 + ((pi**6*C1*C10 + pi**6*C10*C2)*C4*L1*L10 + (pi**6*C1*C2*C4*L1 + pi**6*C10*C2*C4*L10)*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1 + (pi**6*C10*C2 + pi**6*C10*C3)*C4*L10)*L3)*L4 + (((pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C10 + pi**6*C10*C2)*C5 + (pi**6*C1*C10 + pi**6*C10*C2)*C6)*L1*L10 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5 + pi**6*C1*C2*C6)*L1 + (pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6)*L10)*L2 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L10 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + pi**6*C2*C4)*C5 + (pi**6*C2*C3 + pi**6*C2*C4)*C6)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C5 + (pi**6*C1 + pi**6*C2)*C4*C6)*L1 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6)*L10 + (pi**6*C2*C4*C5 + pi**6*C2*C4*C6)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C5 + (pi**6*C2 + pi**6*C3)*C4*C6)*L3)*L4)*L5 + ((pi**6*C1*C10 + pi**6*C10*C2)*C6*L1*L10 + (pi**6*C1*C2*C6*L1 + pi**6*C10*C2*C6*L10)*L2 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6*L1 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6*L10 + (pi**6*C2*C3 + pi**6*C2*C4)*C6*L2)*L3 + (pi**6*C10*C4*C6*L10 + pi**6*C2*C4*C6*L2 + (pi**6*C1 + pi**6*C2)*C4*C6*L1 + (pi**6*C2 + pi**6*C3)*C4*C6*L3)*L4 + (pi**6*C4*C5*C6*L4 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5)*C6*L1 + (pi**6*C10*C4 + pi**6*C10*C5)*C6*L10 + (pi**6*C2*C4 + pi**6*C2*C5)*C6*L2 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6*L3)*L5)*L6 + (((pi**6*C1*C10 + pi**6*C10*C2)*C6 + (pi**6*C1*C10 + pi**6*C10*C2)*C7 + (pi**6*C1*C10 + pi**6*C10*C2)*C8)*L1*L10 + ((pi**6*C1*C2*C6 + pi**6*C1*C2*C7 + pi**6*C1*C2*C8)*L1 + (pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + pi**6*C10*C2*C8)*L10)*L2 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C7 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L10 + ((pi**6*C2*C3 + pi**6*C2*C4)*C6 + (pi**6*C2*C3 + pi**6*C2*C4)*C7 + (pi**6*C2*C3 + pi**6*C2*C4)*C8)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C6 + (pi**6*C1 + pi**6*C2)*C4*C7 + (pi**6*C1 + pi**6*C2)*C4*C8)*L1 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + pi**6*C10*C4*C8)*L10 + (pi**6*C2*C4*C6 + pi**6*C2*C4*C7 + pi**6*C2*C4*C8)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C6 + (pi**6*C2 + pi**6*C3)*C4*C7 + (pi**6*C2 + pi**6*C3)*C4*C8)*L3)*L4 + ((((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C7 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8)*L1 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L10 + ((pi**6*C2*C4 + pi**6*C2*C5)*C6 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C7 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8)*L2 + (((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C7 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8)*L3 + (pi**6*C4*C5*C6 + (pi**6*C4*C5 + pi**6*C4*C6)*C7 + (pi**6*C4*C5 + pi**6*C4*C6)*C8)*L4)*L5 + (((pi**6*C1 + pi**6*C2)*C6*C7 + (pi**6*C1 + pi**6*C2)*C6*C8)*L1 + (pi**6*C10*C6*C7 + pi**6*C10*C6*C8)*L10 + (pi**6*C2*C6*C7 + pi**6*C2*C6*C8)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C7 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8)*L3 + (pi**6*C4*C6*C7 + pi**6*C4*C6*C8)*L4 + ((pi**6*C4 + pi**6*C5)*C6*C7 + (pi**6*C4 + pi**6*C5)*C6*C8)*L5)*L6)*L7 + ((pi**6*C1*C10 + pi**6*C10*C2)*C8*L1*L10 + (pi**6*C1*C2*C8*L1 + pi**6*C10*C2*C8*L10)*L2 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8*L1 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8*L10 + (pi**6*C2*C3 + pi**6*C2*C4)*C8*L2)*L3 + (pi**6*C10*C4*C8*L10 + pi**6*C2*C4*C8*L2 + (pi**6*C1 + pi**6*C2)*C4*C8*L1 + (pi**6*C2 + pi**6*C3)*C4*C8*L3)*L4 + (((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8*L1 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8*L10 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8*L2 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8*L3 + (pi**6*C4*C5 + pi**6*C4*C6)*C8*L4)*L5 + (pi**6*C10*C6*C8*L10 + pi**6*C2*C6*C8*L2 + pi**6*C4*C6*C8*L4 + (pi**6*C1 + pi**6*C2)*C6*C8*L1 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8*L3 + (pi**6*C4 + pi**6*C5)*C6*C8*L5)*L6 + (pi**6*C6*C7*C8*L6 + ((pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7)*C8*L1 + (pi**6*C10*C6 + pi**6*C10*C7)*C8*L10 + (pi**6*C2*C6 + pi**6*C2*C7)*C8*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7)*C8*L3 + (pi**6*C4*C6 + pi**6*C4*C7)*C8*L4 + ((pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7)*C8*L5)*L7)*L8 + (((pi**6*C1*C10 + pi**6*C10*C2)*C8 + (pi**6*C1*C10 + pi**6*C10*C2)*C9)*L1*L10 + ((pi**6*C1*C10*C2 + pi**6*C1*C2*C8 + pi**6*C1*C2*C9)*L1 + (pi**6*C10*C2*C8 + pi**6*C10*C2*C9)*L10)*L2 + ((pi**6*C1*C10*C2 + (pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C9)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C9)*L10 + (pi**6*C10*C2*C3 + pi**6*C10*C2*C4 + (pi**6*C2*C3 + pi**6*C2*C4)*C8 + (pi**6*C2*C3 + pi**6*C2*C4)*C9)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C8 + (pi**6*C1 + pi**6*C2)*C4*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C4)*L1 + (pi**6*C10*C4*C8 + pi**6*C10*C4*C9)*L10 + (pi**6*C10*C2*C4 + pi**6*C2*C4*C8 + pi**6*C2*C4*C9)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C8 + (pi**6*C2 + pi**6*C3)*C4*C9 + (pi**6*C10*C2 + pi**6*C10*C3)*C4)*L3)*L4 + (((pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C10 + pi**6*C10*C2)*C5 + (pi**6*C1*C10 + pi**6*C10*C2)*C6 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C9)*L1 + ((pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C9)*L10 + (pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C9)*L2 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C9)*L3 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6 + (pi**6*C4*C5 + pi**6*C4*C6)*C8 + (pi**6*C4*C5 + pi**6*C4*C6)*C9)*L4)*L5 + (((pi**6*C1 + pi**6*C2)*C6*C8 + (pi**6*C1 + pi**6*C2)*C6*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C6)*L1 + (pi**6*C10*C6*C8 + pi**6*C10*C6*C9)*L10 + (pi**6*C10*C2*C6 + pi**6*C2*C6*C8 + pi**6*C2*C6*C9)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C9 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L3 + (pi**6*C10*C4*C6 + pi**6*C4*C6*C8 + pi**6*C4*C6*C9)*L4 + ((pi**6*C4 + pi**6*C5)*C6*C8 + (pi**6*C4 + pi**6*C5)*C6*C9 + (pi**6*C10*C4 + pi**6*C10*C5)*C6)*L5)*L6 + (((pi**6*C1*C10 + pi**6*C10*C2)*C6 + (pi**6*C1*C10 + pi**6*C10*C2)*C7 + (pi**6*C1*C10 + pi**6*C10*C2 + (pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7)*C8 + ((pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7 + (pi**6*C1 + pi**6*C2)*C8)*C9)*L1 + ((pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C6 + pi**6*C10*C7 + pi**6*C10*C8)*C9)*L10 + (pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + (pi**6*C10*C2 + pi**6*C2*C6 + pi**6*C2*C7)*C8 + (pi**6*C2*C6 + pi**6*C2*C7 + pi**6*C2*C8)*C9)*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7)*C8 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C8)*C9)*L3 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + (pi**6*C10*C4 + pi**6*C4*C6 + pi**6*C4*C7)*C8 + (pi**6*C4*C6 + pi**6*C4*C7 + pi**6*C4*C8)*C9)*L4 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + (pi**6*C10 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7)*C8 + ((pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C8)*C9)*L5 + (pi**6*C10*C6*C7 + (pi**6*C10*C6 + pi**6*C6*C7)*C8 + (pi**6*C6*C7 + pi**6*C6*C8)*C9)*L6)*L7 + (pi**6*C10*C8*C9*L10 + ((pi**6*C1 + pi**6*C2)*C8*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C8)*L1 + (pi**6*C10*C2*C8 + pi**6*C2*C8*C9)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C8*C9 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L3 + (pi**6*C10*C4*C8 + pi**6*C4*C8*C9)*L4 + ((pi**6*C4 + pi**6*C5 + pi**6*C6)*C8*C9 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L5 + (pi**6*C10*C6*C8 + pi**6*C6*C8*C9)*L6 + ((pi**6*C6 + pi**6*C7)*C8*C9 + (pi**6*C10*C6 + pi**6*C10*C7)*C8)*L7)*L8)*L9)*ZS)*freq**6 + (32*I*pi**5*C10*C2*L1*L10*L2 + (32*I*pi**5*C1*C10*C2*L1*L2 + ((32*I*pi**5*C1*C10*C2 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C3 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4)*L1 + (32*I*pi**5*C10*C2*C3 + 32*I*pi**5*C10*C2*C4)*L2)*L3 + (32*I*pi**5*C10*C2*C4*L2 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3)*C4*L3)*L4 + (((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C5 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6)*L1 + (32*I*pi**5*C10*C2*C4 + 32*I*pi**5*C10*C2*C5 + 32*I*pi**5*C10*C2*C6)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3)*C4 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C5 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6)*L3 + (32*I*pi**5*C10*C4*C5 + 32*I*pi**5*C10*C4*C6)*L4)*L5 + (32*I*pi**5*C10*C2*C6*L2 + 32*I*pi**5*C10*C4*C6*L4 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5)*C6*L5)*L6 + (((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C7 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8)*L1 + (32*I*pi**5*C10*C2*C6 + 32*I*pi**5*C10*C2*C7 + 32*I*pi**5*C10*C2*C8)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C7 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8)*L3 + (32*I*pi**5*C10*C4*C6 + 32*I*pi**5*C10*C4*C7 + 32*I*pi**5*C10*C4*C8)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5)*C6 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C7 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8)*L5 + (32*I*pi**5*C10*C6*C7 + 32*I*pi**5*C10*C6*C8)*L6)*L7 + (32*I*pi**5*C10*C2*C8*L2 + 32*I*pi**5*C10*C4*C8*L4 + 32*I*pi**5*C10*C6*C8*L6 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8*L5 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7)*C8*L7)*L8 + (32*I*pi**5*C10*C8*C9*L8 + ((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C9)*L1 + (32*I*pi**5*C10*C2*C8 + 32*I*pi**5*C10*C2*C9)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C9)*L3 + (32*I*pi**5*C10*C4*C8 + 32*I*pi**5*C10*C4*C9)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C9)*L5 + (32*I*pi**5*C10*C6*C8 + 32*I*pi**5*C10*C6*C9)*L6 + ((32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7)*C8 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + 32*I*pi**5*C10*C8)*C9)*L7)*L9)*ZL*ZS + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*L1*L10 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2)*L3 + (32*I*pi**5*C10*C4*L1*L10 + 32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1*L3)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*L1*L10 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5 + 32*I*pi**5*C2*C6)*L1*L2 + ((32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6)*L1*L3 + (32*I*pi**5*C4*C5 + 32*I*pi**5*C4*C6)*L1*L4)*L5 + (32*I*pi**5*C10*C6*L1*L10 + 32*I*pi**5*C2*C6*L1*L2 + 32*I*pi**5*C4*C6*L1*L4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6*L1*L3 + (32*I*pi**5*C4 + 32*I*pi**5*C5)*C6*L1*L5)*L6 + ((32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + 32*I*pi**5*C10*C8)*L1*L10 + (32*I*pi**5*C2*C6 + 32*I*pi**5*C2*C7 + 32*I*pi**5*C2*C8)*L1*L2 + ((32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C7 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C8)*L1*L3 + (32*I*pi**5*C4*C6 + 32*I*pi**5*C4*C7 + 32*I*pi**5*C4*C8)*L1*L4 + ((32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C7 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C8)*L1*L5 + (32*I*pi**5*C6*C7 + 32*I*pi**5*C6*C8)*L1*L6)*L7 + (32*I*pi**5*C10*C8*L1*L10 + 32*I*pi**5*C2*C8*L1*L2 + 32*I*pi**5*C4*C8*L1*L4 + 32*I*pi**5*C6*C8*L1*L6 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C8*L1*L3 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C8*L1*L5 + (32*I*pi**5*C6 + 32*I*pi**5*C7)*C8*L1*L7)*L8 + ((32*I*pi**5*C10*C8 + 32*I*pi**5*C10*C9)*L1*L10 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C2*C8 + 32*I*pi**5*C2*C9)*L1*L2 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C8 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C9)*L1*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C4*C8 + 32*I*pi**5*C4*C9)*L1*L4 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C8 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C9)*L1*L5 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C6*C8 + 32*I*pi**5*C6*C9)*L1*L6 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + (32*I*pi**5*C10 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C8 + (32*I*pi**5*C6 + 32*I*pi**5*C7 + 32*I*pi**5*C8)*C9)*L1*L7 + (32*I*pi**5*C10*C8 + 32*I*pi**5*C8*C9)*L1*L8)*L9)*freq**5 + 16*((pi**4*C10*C2*L1*L2 + pi**4*C10*C4*L1*L4 + pi**4*C10*C6*L1*L6 + pi**4*C10*C8*L1*L8 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4)*L1*L3 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6)*L1*L5 + (pi**4*C10*C6 + pi**4*C10*C7 + pi**4*C10*C8)*L1*L7 + (pi**4*C10*C8 + pi**4*C10*C9)*L1*L9)*ZL + ((pi**4*C1*C10 + pi**4*C10*C2)*L1*L10 + (pi**4*C1*C2*L1 + pi**4*C10*C2*L10)*L2 + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4)*L10 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C10*C4*L10 + pi**4*C2*C4*L2 + (pi**4*C1 + pi**4*C2)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + (((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5 + (pi**4*C1 + pi**4*C2)*C6)*L1 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6)*L10 + (pi**4*C2*C4 + pi**4*C2*C5 + pi**4*C2*C6)*L2 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C6)*L3 + (pi**4*C4*C5 + pi**4*C4*C6)*L4)*L5 + (pi**4*C10*C6*L10 + pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + (pi**4*C1 + pi**4*C2)*C6*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C6*L3 + (pi**4*C4 + pi**4*C5)*C6*L5)*L6 + (((pi**4*C1 + pi**4*C2)*C6 + (pi**4*C1 + pi**4*C2)*C7 + (pi**4*C1 + pi**4*C2)*C8)*L1 + (pi**4*C10*C6 + pi**4*C10*C7 + pi**4*C10*C8)*L10 + (pi**4*C2*C6 + pi**4*C2*C7 + pi**4*C2*C8)*L2 + ((pi**4*C2 + pi**4*C3 + pi**4*C4)*C6 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C7 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8)*L3 + (pi**4*C4*C6 + pi**4*C4*C7 + pi**4*C4*C8)*L4 + ((pi**4*C4 + pi**4*C5)*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C7 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8)*L5 + (pi**4*C6*C7 + pi**4*C6*C8)*L6)*L7 + (pi**4*C10*C8*L10 + pi**4*C2*C8*L2 + pi**4*C4*C8*L4 + pi**4*C6*C8*L6 + (pi**4*C1 + pi**4*C2)*C8*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8*L3 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8*L5 + (pi**4*C6 + pi**4*C7)*C8*L7)*L8 + ((pi**4*C1*C10 + pi**4*C10*C2 + (pi**4*C1 + pi**4*C2)*C8 + (pi**4*C1 + pi**4*C2)*C9)*L1 + (pi**4*C10*C8 + pi**4*C10*C9)*L10 + (pi**4*C10*C2 + pi**4*C2*C8 + pi**4*C2*C9)*L2 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C9)*L3 + (pi**4*C10*C4 + pi**4*C4*C8 + pi**4*C4*C9)*L4 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C9)*L5 + (pi**4*C10*C6 + pi**4*C6*C8 + pi**4*C6*C9)*L6 + (pi**4*C10*C6 + pi**4*C10*C7 + (pi**4*C10 + pi**4*C6 + pi**4*C7)*C8 + (pi**4*C6 + pi**4*C7 + pi**4*C8)*C9)*L7 + (pi**4*C10*C8 + pi**4*C8*C9)*L8)*L9)*ZS)*freq**4 + (-8*I*pi**3*C10*L1*L10 - 8*I*pi**3*C2*L1*L2 - 8*I*pi**3*C4*L1*L4 - 8*I*pi**3*C6*L1*L6 - 8*I*pi**3*C8*L1*L8 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L3 + (-8*I*pi**3*C4 - 8*I*pi**3*C5 - 8*I*pi**3*C6)*L1*L5 + (-8*I*pi**3*C6 - 8*I*pi**3*C7 - 8*I*pi**3*C8)*L1*L7 + (-8*I*pi**3*C10 - 8*I*pi**3*C8 - 8*I*pi**3*C9)*L1*L9 + (-8*I*pi**3*C10*C2*L2 - 8*I*pi**3*C10*C4*L4 - 8*I*pi**3*C10*C6*L6 - 8*I*pi**3*C10*C8*L8 + (-8*I*pi**3*C1*C10 - 8*I*pi**3*C10*C2)*L1 + (-8*I*pi**3*C10*C2 - 8*I*pi**3*C10*C3 - 8*I*pi**3*C10*C4)*L3 + (-8*I*pi**3*C10*C4 - 8*I*pi**3*C10*C5 - 8*I*pi**3*C10*C6)*L5 + (-8*I*pi**3*C10*C6 - 8*I*pi**3*C10*C7 - 8*I*pi**3*C10*C8)*L7 + (-8*I*pi**3*C10*C8 - 8*I*pi**3*C10*C9)*L9)*ZL*ZS)*freq**3 - 4*(pi**2*C10*L1*ZL + (pi**2*C10*L10 + pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + pi**2*C8*L8 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L3 + (pi**2*C4 + pi**2*C5 + pi**2*C6)*L5 + (pi**2*C6 + pi**2*C7 + pi**2*C8)*L7 + (pi**2*C10 + pi**2*C8 + pi**2*C9)*L9)*ZS)*freq**2 + (2*I*pi*C10*ZL*ZS + 2*I*pi*L1)*freq + ZS)
                        S21 = -2048*pi**10*C10*C2*C4*C6*C8*L1*L3*L5*L7*L9*ZL*ZS*freq**10/((1048576*pi**20*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZS*freq**20 + (-524288*I*pi**19*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS - 524288*I*pi**19*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9)*freq**19 - 262144*(pi**18*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*ZL + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8*L1*L10*L2*L3*L4*L5*L6*L7*L8 + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + pi**18*C1*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C8*C9*L1*L10*L2*L3*L4*L5*L6 + ((pi**18*C1*C10*C2*C3*C4*C5*C6 + (pi**18*C1*C10*C2*C3*C4*C5 + pi**18*C1*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L10*L2*L3*L4*L5 + (pi**18*C1*C10*C2*C3*C4*C6*C7*C8*C9*L1*L10*L2*L3*L4 + ((pi**18*C1*C10*C2*C3*C4 + (pi**18*C1*C10*C2*C3 + pi**18*C1*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L10*L2*L3 + (pi**18*C1*C10*C2*C4*C5*C6*C7*C8*C9*L1*L10*L2 + ((pi**18*C1*C10*C2 + (pi**18*C1*C10 + pi**18*C10*C2)*C3)*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**18*C10*C2*C3*C4*C5*C6*C7*C8*C9*L10 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9)*L1)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**18 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8*L1*L10*L2*L3*L4*L5*L6*L7*L8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5 + 131072*I*pi**17*C1*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (131072*I*pi**17*C1*C10*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((131072*I*pi**17*C1*C10*C2*C3*C4 + (131072*I*pi**17*C1*C10*C2*C3 + 131072*I*pi**17*C1*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (131072*I*pi**17*C1*C10*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8*C9*L2 + (131072*I*pi**17*C1*C10*C2 + (131072*I*pi**17*C1*C10 + 131072*I*pi**17*C10*C2)*C3)*C4*C5*C6*C7*C8*C9*L1)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C8*C9*L1*L10*L2*L3*L4*L5*L6 + ((131072*I*pi**17*C10*C2*C3*C4*C5*C6 + (131072*I*pi**17*C10*C2*C3*C4*C5 + 131072*I*pi**17*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L10*L2*L3*L4*L5 + (131072*I*pi**17*C10*C2*C3*C4*C6*C7*C8*C9*L1*L10*L2*L3*L4 + ((131072*I*pi**17*C10*C2*C3*C4 + (131072*I*pi**17*C10*C2*C3 + 131072*I*pi**17*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L10*L2*L3 + (131072*I*pi**17*C10*C2*C4*C5*C6*C7*C8*C9*L1*L10*L2 + ((131072*I*pi**17*C10*C2 + 131072*I*pi**17*C10*C3)*C4*C5*C6*C7*C8*C9*L1*L10 + (131072*I*pi**17*C10*C2*C3*C4*C5*C6*C7*C8 + 131072*I*pi**17*C2*C3*C4*C5*C6*C7*C8*C9)*L1*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**17 + 65536*((pi**16*C10*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8 + ((pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**16*C10*C2*C3*C4*C5*C6*C7 + pi**16*C10*C2*C3*C4*C5*C6*C8)*C9)*L1*L2*L3*L4*L5*L6*L7 + (pi**16*C10*C2*C3*C4*C5*C6*C8*C9*L1*L2*L3*L4*L5*L6 + ((pi**16*C10*C2*C3*C4*C5*C6 + (pi**16*C10*C2*C3*C4*C5 + pi**16*C10*C2*C3*C4*C6)*C7)*C8*C9*L1*L2*L3*L4*L5 + (pi**16*C10*C2*C3*C4*C6*C7*C8*C9*L1*L2*L3*L4 + ((pi**16*C10*C2*C3*C4 + (pi**16*C10*C2*C3 + pi**16*C10*C2*C4)*C5)*C6*C7*C8*C9*L1*L2*L3 + (pi**16*C10*C2*C4*C5*C6*C7*C8*C9*L1*L2 + (pi**16*C10*C2 + pi**16*C10*C3)*C4*C5*C6*C7*C8*C9*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + pi**16*C1*C10*C2*C3*C4*C5*C6*C8)*L1*L10*L2*L3*L4*L5*L6*L7 + (pi**16*C1*C10*C2*C3*C4*C5*C6*C8*L1*L10*L2*L3*L4*L5*L6 + ((pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8*L1*L10*L2*L3*L4*L5 + (pi**16*C1*C10*C2*C3*C4*C6*C7*C8*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C5*C6*C7*C8*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C8*L1 + pi**16*C10*C2*C3*C4*C5*C6*C7*C8*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C8 + pi**16*C1*C10*C2*C3*C4*C5*C6*C9)*L1*L10*L2*L3*L4*L5*L6 + (((pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C8)*C9)*L1*L10*L2*L3*L4*L5 + ((pi**16*C1*C10*C2*C3*C4*C6*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C6*C7 + pi**16*C1*C10*C2*C3*C4*C6*C8)*C9)*L1*L10*L2*L3*L4 + (((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C4*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C4*C5*C6*C7 + pi**16*C1*C10*C2*C4*C5*C6*C8)*C9)*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C8)*C9)*L1*L10 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C6*C7)*C8 + (pi**16*C1*C2*C3*C4*C5*C6*C7 + pi**16*C1*C2*C3*C4*C5*C6*C8)*C9)*L1 + (pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**16*C10*C2*C3*C4*C5*C6*C7 + pi**16*C10*C2*C3*C4*C5*C6*C8)*C9)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C8*C9*L1*L10*L2*L3*L4*L5 + (pi**16*C1*C10*C2*C3*C4*C6*C8*C9*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C8*C9*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C5*C6*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C8*C9*L1*L10 + (pi**16*C10*C2*C3*C4*C5*C6*C8*C9*L10 + (pi**16*C1*C10*C2*C3*C4*C5*C6*C8 + pi**16*C1*C2*C3*C4*C5*C6*C8*C9)*L1)*L2)*L3)*L4)*L5)*L6 + ((pi**16*C1*C10*C2*C3*C4*C6 + pi**16*C1*C10*C2*C3*C4*C7)*C8*C9*L1*L10*L2*L3*L4 + (((pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C6)*C7)*C8*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C4*C5*C6 + (pi**16*C1*C10*C2*C4*C5 + pi**16*C1*C10*C2*C4*C6)*C7)*C8*C9*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C6)*C7)*C8*C9*L1*L10 + ((pi**16*C10*C2*C3*C4*C5*C6 + (pi**16*C10*C2*C3*C4*C5 + pi**16*C10*C2*C3*C4*C6)*C7)*C8*C9*L10 + ((pi**16*C1*C2*C3*C4*C5*C6 + (pi**16*C1*C2*C3*C4*C5 + pi**16*C1*C2*C3*C4*C6)*C7)*C8*C9 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C10*C2*C3*C4*C6)*C7)*C8)*L1)*L2)*L3)*L4)*L5 + ((pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C6*C7*C8*C9*L1*L10*L2*L3 + (pi**16*C1*C10*C2*C4*C6*C7*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C6*C7*C8*C9*L1*L10 + (pi**16*C10*C2*C3*C4*C6*C7*C8*C9*L10 + (pi**16*C1*C10*C2*C3*C4*C6*C7*C8 + pi**16*C1*C2*C3*C4*C6*C7*C8*C9)*L1)*L2)*L3)*L4 + ((pi**16*C1*C10*C2*C4 + pi**16*C1*C10*C2*C5)*C6*C7*C8*C9*L1*L10*L2 + (((pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3 + (pi**16*C1*C10 + pi**16*C10*C2)*C4)*C5)*C6*C7*C8*C9*L1*L10 + ((pi**16*C10*C2*C3*C4 + (pi**16*C10*C2*C3 + pi**16*C10*C2*C4)*C5)*C6*C7*C8*C9*L10 + ((pi**16*C1*C2*C3*C4 + (pi**16*C1*C2*C3 + pi**16*C1*C2*C4)*C5)*C6*C7*C8*C9 + (pi**16*C1*C10*C2*C3*C4 + (pi**16*C1*C10*C2*C3 + pi**16*C1*C10*C2*C4)*C5)*C6*C7*C8)*L1)*L2)*L3 + ((pi**16*C1*C10 + pi**16*C10*C2)*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**16*C10*C2*C4*C5*C6*C7*C8*C9*L10 + (pi**16*C1*C10*C2*C4*C5*C6*C7*C8 + pi**16*C1*C2*C4*C5*C6*C7*C8*C9)*L1)*L2 + ((pi**16*C10*C2 + pi**16*C10*C3)*C4*C5*C6*C7*C8*C9*L10 + ((pi**16*C1*C2 + (pi**16*C1 + pi**16*C2)*C3)*C4*C5*C6*C7*C8*C9 + (pi**16*C1*C10*C2 + (pi**16*C1*C10 + pi**16*C10*C2)*C3)*C4*C5*C6*C7*C8)*L1 + (pi**16*C10*C2*C3*C4*C5*C6*C7*C8 + pi**16*C2*C3*C4*C5*C6*C7*C8*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**16 + ((-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8)*L1*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7*C8*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7*C8*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7*C8*L1)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7)*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7*C8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C7 - 32768*I*pi**15*C1*C10*C2*C4*C5*C6*C8)*C9)*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7*C8 + ((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C10*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C5*C6*C8*C9*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8*C9*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6*C8*C9*L1)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5)*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C5 + (-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C4*C5 - 32768*I*pi**15*C1*C10*C2*C4*C6)*C7)*C8*C9*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5*C6 + ((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C5 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C6)*C7)*C8*C9*L1 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8*C9*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C10*C2*C3 - 32768*I*pi**15*C1*C10*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (-32768*I*pi**15*C1*C10*C2*C4*C6*C7*C8*C9*L1*L2 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8*C9*L2 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4*C6*C7*C8*C9*L1)*L3)*L4 + ((-32768*I*pi**15*C1*C10*C2*C4 - 32768*I*pi**15*C1*C10*C2*C5)*C6*C7*C8*C9*L1*L2 + (((-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3)*C4 + (-32768*I*pi**15*C1*C10*C2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C3 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C4)*C5)*C6*C7*C8*C9*L1 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8*C9*L2)*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8*C9*L2 + (-32768*I*pi**15*C1*C10 - 32768*I*pi**15*C10*C2)*C4*C5*C6*C7*C8*C9*L1 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8*C9*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8*L1*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8*L1*L10*L2*L3*L4*L5 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8*L1*L10*L2*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8*L1*L10*L2 + (-32768*I*pi**15*C2*C3*C4*C5*C6*C7*C8*L1*L2 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8*L1*L10)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C10*C2*C3*C4*C5*C6*C9)*L1*L10*L2*L3*L4*L5*L6 + (((-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C8)*C9)*L1*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7 - 32768*I*pi**15*C10*C2*C3*C4*C6*C8)*C9)*L1*L10*L2*L3*L4 + (((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8 + ((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L10*L2*L3 + ((-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7 - 32768*I*pi**15*C10*C2*C4*C5*C6*C8)*C9)*L1*L10*L2 + (((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C8)*C9)*L1*L10 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 - 32768*I*pi**15*C2*C3*C4*C5*C6*C7)*C8 + (-32768*I*pi**15*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C2*C3*C4*C5*C6*C8)*C9)*L1*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C8*C9*L1*L10*L2*L3*L4*L5 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C8*C9*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C8*C9*L1*L10*L2*L3 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C8*C9*L1*L10 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6*C8 - 32768*I*pi**15*C2*C3*C4*C5*C6*C8*C9)*L1*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C10*C2*C3*C4*C6 - 32768*I*pi**15*C10*C2*C3*C4*C7)*C8*C9*L1*L10*L2*L3*L4 + (((-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C6)*C7)*C8*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C10*C2*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C4*C5 - 32768*I*pi**15*C10*C2*C4*C6)*C7)*C8*C9*L1*L10*L2 + (((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C6)*C7)*C8*C9*L1*L10 + ((-32768*I*pi**15*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C2*C3*C4*C5 - 32768*I*pi**15*C2*C3*C4*C6)*C7)*C8*C9 + (-32768*I*pi**15*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C10*C2*C3*C4*C5 - 32768*I*pi**15*C10*C2*C3*C4*C6)*C7)*C8)*L1*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C6*C7*C8*C9*L1*L10*L2*L3 + (-32768*I*pi**15*C10*C2*C4*C6*C7*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C10*C2*C3*C4*C6*C7*C8 - 32768*I*pi**15*C2*C3*C4*C6*C7*C8*C9)*L1*L2)*L3)*L4 + ((-32768*I*pi**15*C10*C2*C4 - 32768*I*pi**15*C10*C2*C5)*C6*C7*C8*C9*L1*L10*L2 + (((-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3 - 32768*I*pi**15*C10*C4)*C5)*C6*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C2*C3*C4 + (-32768*I*pi**15*C2*C3 - 32768*I*pi**15*C2*C4)*C5)*C6*C7*C8*C9 + (-32768*I*pi**15*C10*C2*C3*C4 + (-32768*I*pi**15*C10*C2*C3 - 32768*I*pi**15*C10*C2*C4)*C5)*C6*C7*C8)*L1*L2)*L3 + (-32768*I*pi**15*C10*C4*C5*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C10*C2*C4*C5*C6*C7*C8 - 32768*I*pi**15*C2*C4*C5*C6*C7*C8*C9)*L1*L2 + ((-32768*I*pi**15*C2 - 32768*I*pi**15*C3)*C4*C5*C6*C7*C8*C9 + (-32768*I*pi**15*C10*C2 - 32768*I*pi**15*C10*C3)*C4*C5*C6*C7*C8)*L1*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**15 - 16384*(((pi**14*C10*C2*C3*C4*C5*C6*C7 + pi**14*C10*C2*C3*C4*C5*C6*C8)*L1*L2*L3*L4*L5*L6*L7 + (pi**14*C10*C2*C3*C4*C5*C6*C8*L1*L2*L3*L4*L5*L6 + ((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8*L1*L2*L3*L4*L5 + (pi**14*C10*C2*C3*C4*C6*C7*C8*L1*L2*L3*L4 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8*L1*L2*L3 + (pi**14*C10*C2*C4*C5*C6*C7*C8*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C10*C2*C3*C4*C5*C6*C9)*L1*L2*L3*L4*L5*L6 + (((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8)*C9)*L1*L2*L3*L4*L5 + ((pi**14*C10*C2*C3*C4*C6*C7*C8 + (pi**14*C10*C2*C3*C4*C6*C7 + pi**14*C10*C2*C3*C4*C6*C8)*C9)*L1*L2*L3*L4 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8)*C9)*L1*L2*L3 + ((pi**14*C10*C2*C4*C5*C6*C7*C8 + (pi**14*C10*C2*C4*C5*C6*C7 + pi**14*C10*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + ((pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8*C9*L1*L2*L3*L4*L5 + (pi**14*C10*C2*C3*C4*C6*C8*C9*L1*L2*L3*L4 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8*C9*L1*L2*L3 + (pi**14*C10*C2*C4*C5*C6*C8*C9*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8*C9*L1*L3)*L4)*L5)*L6 + ((pi**14*C10*C2*C3*C4*C6 + pi**14*C10*C2*C3*C4*C7)*C8*C9*L1*L2*L3*L4 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6)*C7)*C8*C9*L1*L2*L3 + ((pi**14*C10*C2*C4*C5*C6 + (pi**14*C10*C2*C4*C5 + pi**14*C10*C2*C4*C6)*C7)*C8*C9*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6)*C7)*C8*C9*L1*L3)*L4)*L5 + ((pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6*C7*C8*C9*L1*L2*L3 + (pi**14*C10*C2*C4*C6*C7*C8*C9*L1*L2 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6*C7*C8*C9*L1*L3)*L4 + (pi**14*C10*C4*C5*C6*C7*C8*C9*L1*L4 + (pi**14*C10*C2*C4 + pi**14*C10*C2*C5)*C6*C7*C8*C9*L1*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C10*C2 + pi**14*C10*C3 + pi**14*C10*C4)*C5)*C6*C7*C8*C9*L1*L3)*L5)*L6)*L7)*L8)*L9)*ZL + (pi**14*C1*C10*C2*C3*C4*C5*C6*L1*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8)*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C6*C7 + pi**14*C1*C10*C2*C3*C4*C6*C8)*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6*C7 + pi**14*C1*C10*C2*C4*C5*C6*C8)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + pi**14*C1*C2*C3*C4*C5*C6*C8)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C7 + pi**14*C10*C2*C3*C4*C5*C6*C8)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8*L1*L10*L2*L3*L4*L5 + (pi**14*C1*C10*C2*C3*C4*C6*C8*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C5*C6*C8*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C6*C8*L1 + pi**14*C10*C2*C3*C4*C5*C6*C8*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7)*C8*L1 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8*L10)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C6*C7*C8*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8*L1*L10 + (pi**14*C1*C2*C3*C4*C6*C7*C8*L1 + pi**14*C10*C2*C3*C4*C6*C7*C8*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8*L1*L10 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7*C8*L1 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8*L10)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8*L1*L10 + (pi**14*C1*C2*C4*C5*C6*C7*C8*L1 + pi**14*C10*C2*C4*C5*C6*C7*C8*L10)*L2 + (pi**14*C2*C3*C4*C5*C6*C7*C8*L2 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7*C8*L1 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8*L10)*L3)*L4)*L5)*L6)*L7)*L8 + (((pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C9)*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C6*C8 + pi**14*C1*C10*C2*C3*C4*C6*C9)*L1*L10*L2*L3*L4 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C9)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5*C6*C8 + pi**14*C1*C10*C2*C4*C5*C6*C9)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C6*C8 + pi**14*C1*C2*C3*C4*C5*C6*C9)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C10*C2*C3*C4*C5*C6*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7 + pi**14*C1*C10*C2*C3*C4*C8)*C9)*L1*L10*L2*L3*L4 + ((((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8 + (pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C8)*C9)*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C5*C6 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C2*C3*C4*C5)*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C8)*C9)*L1 + ((pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C8)*C9)*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C6*C7*C8 + (pi**14*C1*C10*C2*C4*C6*C7 + pi**14*C1*C10*C2*C4*C6*C8)*C9)*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C3*C4*C6*C7 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C2*C3*C4*C6*C7)*C8 + (pi**14*C1*C2*C3*C4*C6*C7 + pi**14*C1*C2*C3*C4*C6*C8)*C9)*L1 + (pi**14*C10*C2*C3*C4*C6*C7*C8 + (pi**14*C10*C2*C3*C4*C6*C7 + pi**14*C10*C2*C3*C4*C6*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C8)*C9)*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C8)*C9)*L1*L10 + (((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C7 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6)*C8 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C7 + (pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C8)*C9)*L1 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8)*C9)*L10)*L2)*L3 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C8)*C9)*L1*L10 + ((pi**14*C1*C10*C2*C4*C5*C6*C7 + (pi**14*C1*C10*C2*C4*C5*C6 + pi**14*C1*C2*C4*C5*C6*C7)*C8 + (pi**14*C1*C2*C4*C5*C6*C7 + pi**14*C1*C2*C4*C5*C6*C8)*C9)*L1 + (pi**14*C10*C2*C4*C5*C6*C7*C8 + (pi**14*C10*C2*C4*C5*C6*C7 + pi**14*C10*C2*C4*C5*C6*C8)*C9)*L10)*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C7 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6)*C8 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C7 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C8)*C9)*L1 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8)*C9)*L10 + (pi**14*C10*C2*C3*C4*C5*C6*C7 + (pi**14*C10*C2*C3*C4*C5*C6 + pi**14*C2*C3*C4*C5*C6*C7)*C8 + (pi**14*C2*C3*C4*C5*C6*C7 + pi**14*C2*C3*C4*C5*C6*C8)*C9)*L2)*L3)*L4)*L5)*L6)*L7 + (pi**14*C1*C10*C2*C3*C4*C8*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C8*C9*L10 + ((pi**14*C1*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C6)*C8*C9 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C10*C2*C3*C4*C6)*C8)*L1)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C8*C9*L1*L10*L2*L3 + (pi**14*C1*C10*C2*C4*C6*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C8*C9*L1*L10 + (pi**14*C10*C2*C3*C4*C6*C8*C9*L10 + (pi**14*C1*C10*C2*C3*C4*C6*C8 + pi**14*C1*C2*C3*C4*C6*C8*C9)*L1)*L2)*L3)*L4 + ((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C8*C9*L10 + ((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6*C8*C9 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6*C8)*L1)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C8*C9*L1*L10 + (pi**14*C10*C2*C4*C5*C6*C8*C9*L10 + (pi**14*C1*C10*C2*C4*C5*C6*C8 + pi**14*C1*C2*C4*C5*C6*C8*C9)*L1)*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C8*C9*L10 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6*C8*C9 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6*C8)*L1 + (pi**14*C10*C2*C3*C4*C5*C6*C8 + pi**14*C2*C3*C4*C5*C6*C8*C9)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C7)*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C4*C6 + pi**14*C1*C10*C2*C4*C7)*C8*C9*L1*L10*L2 + (((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C7)*C8*C9*L1*L10 + ((pi**14*C10*C2*C3*C4*C6 + pi**14*C10*C2*C3*C4*C7)*C8*C9*L10 + ((pi**14*C1*C2*C3*C4*C6 + pi**14*C1*C2*C3*C4*C7)*C8*C9 + (pi**14*C1*C10*C2*C3*C4*C6 + pi**14*C1*C10*C2*C3*C4*C7)*C8)*L1)*L2)*L3)*L4 + (((pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5 + pi**14*C1*C10*C2*C6)*C7)*C8*C9*L1*L10*L2 + ((((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C6)*C7)*C8*C9*L1*L10 + (((pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6)*C7)*C8*C9*L10 + (((pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5)*C6 + (pi**14*C1*C2*C3*C4 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C5 + (pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C6)*C7)*C8*C9 + ((pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C5 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6)*C7)*C8)*L1)*L2)*L3 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C5 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C6)*C7)*C8*C9*L1*L10 + ((pi**14*C10*C2*C4*C5*C6 + (pi**14*C10*C2*C4*C5 + pi**14*C10*C2*C4*C6)*C7)*C8*C9*L10 + ((pi**14*C1*C2*C4*C5*C6 + (pi**14*C1*C2*C4*C5 + pi**14*C1*C2*C4*C6)*C7)*C8*C9 + (pi**14*C1*C10*C2*C4*C5*C6 + (pi**14*C1*C10*C2*C4*C5 + pi**14*C1*C10*C2*C4*C6)*C7)*C8)*L1)*L2 + (((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C5 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C6)*C7)*C8*C9*L10 + (((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C5 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C6)*C7)*C8*C9 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5*C6 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C5 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6)*C7)*C8)*L1 + ((pi**14*C2*C3*C4*C5*C6 + (pi**14*C2*C3*C4*C5 + pi**14*C2*C3*C4*C6)*C7)*C8*C9 + (pi**14*C10*C2*C3*C4*C5*C6 + (pi**14*C10*C2*C3*C4*C5 + pi**14*C10*C2*C3*C4*C6)*C7)*C8)*L2)*L3)*L4)*L5 + (pi**14*C1*C10*C2*C6*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C6*C7*C8*C9*L1*L10 + ((pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C6*C7*C8*C9*L10 + ((pi**14*C1*C2*C3 + pi**14*C1*C2*C4)*C6*C7*C8*C9 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C10*C2*C4)*C6*C7*C8)*L1)*L2)*L3 + ((pi**14*C1*C10 + pi**14*C10*C2)*C4*C6*C7*C8*C9*L1*L10 + (pi**14*C10*C2*C4*C6*C7*C8*C9*L10 + (pi**14*C1*C10*C2*C4*C6*C7*C8 + pi**14*C1*C2*C4*C6*C7*C8*C9)*L1)*L2 + ((pi**14*C10*C2 + pi**14*C10*C3)*C4*C6*C7*C8*C9*L10 + ((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4*C6*C7*C8*C9 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4*C6*C7*C8)*L1 + (pi**14*C10*C2*C3*C4*C6*C7*C8 + pi**14*C2*C3*C4*C6*C7*C8*C9)*L2)*L3)*L4 + (((pi**14*C1*C10 + pi**14*C10*C2)*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C5)*C6*C7*C8*C9*L1*L10 + ((pi**14*C10*C2*C4 + pi**14*C10*C2*C5)*C6*C7*C8*C9*L10 + ((pi**14*C1*C2*C4 + pi**14*C1*C2*C5)*C6*C7*C8*C9 + (pi**14*C1*C10*C2*C4 + pi**14*C1*C10*C2*C5)*C6*C7*C8)*L1)*L2 + (((pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C10*C2 + pi**14*C10*C3 + pi**14*C10*C4)*C5)*C6*C7*C8*C9*L10 + (((pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3)*C4 + (pi**14*C1*C2 + (pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2)*C4)*C5)*C6*C7*C8*C9 + ((pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3)*C4 + (pi**14*C1*C10*C2 + (pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2)*C4)*C5)*C6*C7*C8)*L1 + ((pi**14*C2*C3*C4 + (pi**14*C2*C3 + pi**14*C2*C4)*C5)*C6*C7*C8*C9 + (pi**14*C10*C2*C3*C4 + (pi**14*C10*C2*C3 + pi**14*C10*C2*C4)*C5)*C6*C7*C8)*L2)*L3 + (pi**14*C10*C4*C5*C6*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C4*C5*C6*C7*C8*C9 + (pi**14*C1*C10 + pi**14*C10*C2)*C4*C5*C6*C7*C8)*L1 + (pi**14*C10*C2*C4*C5*C6*C7*C8 + pi**14*C2*C4*C5*C6*C7*C8*C9)*L2 + ((pi**14*C2 + pi**14*C3)*C4*C5*C6*C7*C8*C9 + (pi**14*C10*C2 + pi**14*C10*C3)*C4*C5*C6*C7*C8)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**14 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*L1*L10*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8*L1)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7)*C8*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7)*C8*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7*C8*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C6*C7*C8*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7*C8*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7*C8*L1)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7*C8*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7*C8*L1 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7*C8*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7*C8*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C1*C10*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C1*C10*C2*C4*C5*C6*C9)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C8 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6*C9)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6*C8 + 8192*I*pi**13*C10*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7)*C8 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C4*C5*C6 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C8)*C9)*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7)*C8 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C7 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C8)*C9)*L1 + ((8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C6*C7*C8 + (8192*I*pi**13*C1*C10*C2*C4*C6*C7 + 8192*I*pi**13*C1*C10*C2*C4*C6*C8)*C9)*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C7 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C8)*C9)*L1 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7*C8 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C7 + (8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C8)*C9)*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7*C8 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C7 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C8)*C9)*L1 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C8)*C9)*L1 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7*C8 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C4*C5*C6*C8)*C9)*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C5 + 8192*I*pi**13*C1*C10*C2*C4*C6)*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8*C9*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6*C8*C9*L1*L2*L3 + (8192*I*pi**13*C1*C10*C2*C4*C6*C8*C9*L1*L2 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8*C9*L2 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6*C8*C9*L1)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8*C9*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8*C9*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6*C8*C9*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8*C9*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C6 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C10*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C4*C6 + 8192*I*pi**13*C1*C10*C2*C4*C7)*C8*C9*L1*L2 + (((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C6 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4*C7)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8*C9*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C4 + 8192*I*pi**13*C1*C10*C2*C5 + 8192*I*pi**13*C1*C10*C2*C6)*C7)*C8*C9*L1*L2 + ((((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5)*C6 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C5 + (8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C6)*C7)*C8*C9*L1 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8*C9*L2)*L3 + (((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5*C6 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C5 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C6)*C7)*C8*C9*L1 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8*C9*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8*C9*L3)*L4)*L5 + (8192*I*pi**13*C1*C10*C2*C6*C7*C8*C9*L1*L2 + ((8192*I*pi**13*C1*C10*C2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C3 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4)*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8*C9*L2)*L3 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8*C9*L2 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8*C9*L3)*L4 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8*C9*L4 + ((8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C4 + (8192*I*pi**13*C1*C10 + 8192*I*pi**13*C10*C2)*C5)*C6*C7*C8*C9*L1 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8*C9*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8*C9*L3)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C10*C2*C3*C4*C6*C7 + 8192*I*pi**13*C10*C2*C3*C4*C6*C8)*L1*L10*L2*L3*L4 + (((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5*C6*C7 + 8192*I*pi**13*C10*C2*C4*C5*C6*C8)*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*L1*L10 + (8192*I*pi**13*C2*C3*C4*C5*C6*C7 + 8192*I*pi**13*C2*C3*C4*C5*C6*C8)*L1*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8*L1*L10*L2*L3*L4*L5 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8*L1*L10*L2*L3 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8*L1*L10*L2 + (8192*I*pi**13*C2*C3*C4*C5*C6*C8*L1*L2 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8*L1*L10)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8*L1*L10*L2*L3*L4 + (((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8*L1*L10 + (8192*I*pi**13*C2*C3*C4*C5*C6 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C7)*C8*L1*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8*L1*L10*L2*L3 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8*L1*L10*L2 + (8192*I*pi**13*C2*C3*C4*C6*C7*C8*L1*L2 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8*L1*L10)*L3)*L4 + ((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8*L1*L10 + (8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C7*C8*L1*L2)*L3 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8*L1*L10 + 8192*I*pi**13*C2*C4*C5*C6*C7*C8*L1*L2 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C7*C8*L1*L3)*L4)*L5)*L6)*L7)*L8 + (((8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C9)*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C10*C2*C3*C4*C6*C9)*L1*L10*L2*L3*L4 + (((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C9)*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C10*C2*C4*C5*C6*C9)*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + 8192*I*pi**13*C2*C3*C4*C5*C6*C8 + 8192*I*pi**13*C2*C3*C4*C5*C6*C9)*L1*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7 + 8192*I*pi**13*C10*C2*C3*C4*C8)*C9)*L1*L10*L2*L3*L4 + ((((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C8)*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C8)*C9)*L1*L10*L2 + ((((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C8)*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C5*C6 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C10*C2*C3*C4*C5 + (8192*I*pi**13*C10*C2*C3*C4 + 8192*I*pi**13*C2*C3*C4*C5)*C6 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C7)*C8 + (8192*I*pi**13*C2*C3*C4*C5*C6 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C7 + (8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C8)*C9)*L1*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C8)*C9)*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C6*C7*C8 + (8192*I*pi**13*C10*C2*C4*C6*C7 + 8192*I*pi**13*C10*C2*C4*C6*C8)*C9)*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C8)*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C2*C3*C4*C6*C7)*C8 + (8192*I*pi**13*C2*C3*C4*C6*C7 + 8192*I*pi**13*C2*C3*C4*C6*C8)*C9)*L1*L2)*L3)*L4 + (((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8 + ((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C8)*C9)*L1*L10*L2 + ((((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C8)*C9)*L1*L10 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C7 + ((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6)*C8 + ((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C7 + (8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C8)*C9)*L1*L2)*L3 + ((8192*I*pi**13*C10*C4*C5*C6*C7*C8 + (8192*I*pi**13*C10*C4*C5*C6*C7 + 8192*I*pi**13*C10*C4*C5*C6*C8)*C9)*L1*L10 + (8192*I*pi**13*C10*C2*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2*C4*C5*C6 + 8192*I*pi**13*C2*C4*C5*C6*C7)*C8 + (8192*I*pi**13*C2*C4*C5*C6*C7 + 8192*I*pi**13*C2*C4*C5*C6*C8)*C9)*L1*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C7 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6)*C8 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C7 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C8)*C9)*L1*L3)*L4)*L5)*L6)*L7 + (8192*I*pi**13*C10*C2*C3*C4*C8*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C8*C9*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3*C4*C5 + 8192*I*pi**13*C2*C3*C4*C6)*C8*C9 + (8192*I*pi**13*C10*C2*C3*C4*C5 + 8192*I*pi**13*C10*C2*C3*C4*C6)*C8)*L1*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C8*C9*L1*L10*L2*L3 + (8192*I*pi**13*C10*C2*C4*C6*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C8*C9*L1*L10 + (8192*I*pi**13*C10*C2*C3*C4*C6*C8 + 8192*I*pi**13*C2*C3*C4*C6*C8*C9)*L1*L2)*L3)*L4 + ((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C8*C9*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6*C8*C9 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6*C8)*L1*L2)*L3 + (8192*I*pi**13*C10*C4*C5*C6*C8*C9*L1*L10 + (8192*I*pi**13*C10*C2*C4*C5*C6*C8 + 8192*I*pi**13*C2*C4*C5*C6*C8*C9)*L1*L2 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6*C8*C9 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C7)*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C10*C2*C4*C6 + 8192*I*pi**13*C10*C2*C4*C7)*C8*C9*L1*L10*L2 + (((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C7)*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3*C4*C6 + 8192*I*pi**13*C2*C3*C4*C7)*C8*C9 + (8192*I*pi**13*C10*C2*C3*C4*C6 + 8192*I*pi**13*C10*C2*C3*C4*C7)*C8)*L1*L2)*L3)*L4 + (((8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5 + 8192*I*pi**13*C10*C2*C6)*C7)*C8*C9*L1*L10*L2 + ((((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C6)*C7)*C8*C9*L1*L10 + (((8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5)*C6 + (8192*I*pi**13*C2*C3*C4 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C5 + (8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C6)*C7)*C8*C9 + ((8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5)*C6 + (8192*I*pi**13*C10*C2*C3*C4 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C5 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6)*C7)*C8)*L1*L2)*L3 + ((8192*I*pi**13*C10*C4*C5*C6 + (8192*I*pi**13*C10*C4*C5 + 8192*I*pi**13*C10*C4*C6)*C7)*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C4*C5*C6 + (8192*I*pi**13*C2*C4*C5 + 8192*I*pi**13*C2*C4*C6)*C7)*C8*C9 + (8192*I*pi**13*C10*C2*C4*C5*C6 + (8192*I*pi**13*C10*C2*C4*C5 + 8192*I*pi**13*C10*C2*C4*C6)*C7)*C8)*L1*L2 + (((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5*C6 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C5 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C6)*C7)*C8*C9 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5*C6 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C5 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6)*C7)*C8)*L1*L3)*L4)*L5 + (8192*I*pi**13*C10*C2*C6*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C6*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C3 + 8192*I*pi**13*C2*C4)*C6*C7*C8*C9 + (8192*I*pi**13*C10*C2*C3 + 8192*I*pi**13*C10*C2*C4)*C6*C7*C8)*L1*L2)*L3 + (8192*I*pi**13*C10*C4*C6*C7*C8*C9*L1*L10 + (8192*I*pi**13*C10*C2*C4*C6*C7*C8 + 8192*I*pi**13*C2*C4*C6*C7*C8*C9)*L1*L2 + ((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4*C6*C7*C8*C9 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4*C6*C7*C8)*L1*L3)*L4 + ((8192*I*pi**13*C10*C4 + 8192*I*pi**13*C10*C5)*C6*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C2*C4 + 8192*I*pi**13*C2*C5)*C6*C7*C8*C9 + (8192*I*pi**13*C10*C2*C4 + 8192*I*pi**13*C10*C2*C5)*C6*C7*C8)*L1*L2 + (((8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4 + (8192*I*pi**13*C2 + 8192*I*pi**13*C3 + 8192*I*pi**13*C4)*C5)*C6*C7*C8*C9 + ((8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3)*C4 + (8192*I*pi**13*C10*C2 + 8192*I*pi**13*C10*C3 + 8192*I*pi**13*C10*C4)*C5)*C6*C7*C8)*L1*L3 + (8192*I*pi**13*C10*C4*C5*C6*C7*C8 + 8192*I*pi**13*C4*C5*C6*C7*C8*C9)*L1*L4)*L5)*L6)*L7)*L8)*L9)*freq**13 + 4096*((pi**12*C10*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6 + ((pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L1*L2*L3*L4*L5 + ((pi**12*C10*C2*C3*C4*C6*C7 + pi**12*C10*C2*C3*C4*C6*C8)*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6*C7 + pi**12*C10*C2*C4*C5*C6*C8)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + ((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8*L1*L2*L3*L4*L5 + (pi**12*C10*C2*C3*C4*C6*C8*L1*L2*L3*L4 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8*L1*L2*L3 + (pi**12*C10*C2*C4*C5*C6*C8*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + ((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8*L1*L2*L3 + (pi**12*C10*C2*C4*C6*C7*C8*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8*L1*L3)*L4 + (pi**12*C10*C4*C5*C6*C7*C8*L1*L4 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + (((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C9)*L1*L2*L3*L4*L5 + ((pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C10*C2*C3*C4*C6*C9)*L1*L2*L3*L4 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C9)*L1*L2*L3 + ((pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C10*C2*C4*C5*C6*C9)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C9)*L1*L3)*L4)*L5)*L6 + (((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7 + pi**12*C10*C2*C3*C4*C8)*C9)*L1*L2*L3*L4 + ((((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8)*C9)*L1*L2*L3 + (((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8)*C9)*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8)*C9)*L1*L2*L3 + ((pi**12*C10*C2*C4*C6*C7*C8 + (pi**12*C10*C2*C4*C6*C7 + pi**12*C10*C2*C4*C6*C8)*C9)*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8)*C9)*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8)*C9)*L1*L3 + (pi**12*C10*C4*C5*C6*C7*C8 + (pi**12*C10*C4*C5*C6*C7 + pi**12*C10*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + (pi**12*C10*C2*C3*C4*C8*C9*L1*L2*L3*L4 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8*C9*L1*L2*L3 + ((pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8*C9*L1*L3)*L4)*L5 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8*C9*L1*L2*L3 + (pi**12*C10*C2*C4*C6*C8*C9*L1*L2 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8*C9*L1*L3)*L4 + (pi**12*C10*C4*C5*C6*C8*C9*L1*L4 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8*C9*L1*L3)*L5)*L6 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C7)*C8*C9*L1*L2*L3 + ((pi**12*C10*C2*C4*C6 + pi**12*C10*C2*C4*C7)*C8*C9*L1*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C7)*C8*C9*L1*L3)*L4 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5 + pi**12*C10*C2*C6)*C7)*C8*C9*L1*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6)*C7)*C8*C9*L1*L3 + (pi**12*C10*C4*C5*C6 + (pi**12*C10*C4*C5 + pi**12*C10*C4*C6)*C7)*C8*C9*L1*L4)*L5 + (pi**12*C10*C2*C6*C7*C8*C9*L1*L2 + pi**12*C10*C4*C6*C7*C8*C9*L1*L4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6*C7*C8*C9*L1*L3 + (pi**12*C10*C4 + pi**12*C10*C5)*C6*C7*C8*C9*L1*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C10*C2*C3*C4*C6)*L1*L10*L2*L3*L4*L5 + (pi**12*C1*C10*C2*C3*C4*C6*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C5*C6*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C6*L1 + pi**12*C10*C2*C3*C4*C5*C6*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C10*C2*C3*C4*C7 + pi**12*C1*C10*C2*C3*C4*C8)*L1*L10*L2*L3*L4 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C7 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C5*C6 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C7 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C6 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8)*L1 + (pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6*C7 + pi**12*C1*C10*C2*C4*C6*C8)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8)*L1*L10 + ((pi**12*C1*C2*C3*C4*C6*C7 + pi**12*C1*C2*C3*C4*C6*C8)*L1 + (pi**12*C10*C2*C3*C4*C6*C7 + pi**12*C10*C2*C3*C4*C6*C8)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8)*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C7 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8)*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8)*L1*L10 + ((pi**12*C1*C2*C4*C5*C6*C7 + pi**12*C1*C2*C4*C5*C6*C8)*L1 + (pi**12*C10*C2*C4*C5*C6*C7 + pi**12*C10*C2*C4*C5*C6*C8)*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C7 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L10 + (pi**12*C2*C3*C4*C5*C6*C7 + pi**12*C2*C3*C4*C5*C6*C8)*L2)*L3)*L4)*L5)*L6)*L7 + (pi**12*C1*C10*C2*C3*C4*C8*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8*L1 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8*L10)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C6*C8*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8*L1*L10 + (pi**12*C1*C2*C3*C4*C6*C8*L1 + pi**12*C10*C2*C3*C4*C6*C8*L10)*L2)*L3)*L4 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8*L1*L10 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8*L1 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8*L10)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8*L1*L10 + (pi**12*C1*C2*C4*C5*C6*C8*L1 + pi**12*C10*C2*C4*C5*C6*C8*L10)*L2 + (pi**12*C2*C3*C4*C5*C6*C8*L2 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8*L1 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8*L10)*L3)*L4)*L5)*L6 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8*L1*L10 + ((pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7)*C8*L1 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7)*C8*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8*L1*L10 + ((pi**12*C1*C2*C4*C5*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7)*C8*L1 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7)*C8*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8*L10 + (pi**12*C2*C3*C4*C5*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7)*C8*L2)*L3)*L4)*L5 + (pi**12*C1*C10*C2*C6*C7*C8*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8*L1*L10 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7*C8*L1 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8*L10)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8*L1*L10 + (pi**12*C1*C2*C4*C6*C7*C8*L1 + pi**12*C10*C2*C4*C6*C7*C8*L10)*L2 + (pi**12*C2*C3*C4*C6*C7*C8*L2 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7*C8*L1 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8*L10)*L3)*L4 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8*L1*L10 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7*C8*L1 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7*C8*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8*L10 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7*C8*L2)*L3 + (pi**12*C10*C4*C5*C6*C7*C8*L10 + pi**12*C2*C4*C5*C6*C7*C8*L2 + (pi**12*C1 + pi**12*C2)*C4*C5*C6*C7*C8*L1 + (pi**12*C2 + pi**12*C3)*C4*C5*C6*C7*C8*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**12*C1*C10*C2*C3*C4*C8 + pi**12*C1*C10*C2*C3*C4*C9)*L1*L10*L2*L3*L4 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C10*C2*C3*C4*C6 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C8 + (pi**12*C1*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C6)*C9)*L1 + ((pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C9)*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C4*C6*C8 + pi**12*C1*C10*C2*C4*C6*C9)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C6*C8 + pi**12*C1*C2*C3*C4*C6*C9)*L1 + (pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C10*C2*C3*C4*C6*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C8 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6*C9 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6)*L1 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C9)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C5*C6 + pi**12*C1*C2*C4*C5*C6*C8 + pi**12*C1*C2*C4*C5*C6*C9)*L1 + (pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C10*C2*C4*C5*C6*C9)*L10)*L2 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C8 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C9)*L10 + (pi**12*C10*C2*C3*C4*C5*C6 + pi**12*C2*C3*C4*C5*C6*C8 + pi**12*C2*C3*C4*C5*C6*C9)*L2)*L3)*L4)*L5)*L6 + ((((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7 + pi**12*C1*C10*C2*C4*C8)*C9)*L1*L10*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C3*C4*C6 + pi**12*C1*C10*C2*C3*C4*C7 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7)*C8 + (pi**12*C1*C2*C3*C4*C6 + pi**12*C1*C2*C3*C4*C7 + pi**12*C1*C2*C3*C4*C8)*C9)*L1 + ((pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7 + pi**12*C10*C2*C3*C4*C8)*C9)*L10)*L2)*L3)*L4 + ((((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C8)*C9)*L1*L10*L2 + (((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C7 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C2*C3)*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7)*C8 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5)*C6 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C7 + (pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C8)*C9)*L1 + (((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8)*C9)*L10)*L2)*L3 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C5*C6 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C7 + (pi**12*C1*C10*C2*C4*C5 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C2*C4*C5)*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7)*C8 + (pi**12*C1*C2*C4*C5*C6 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C7 + (pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C8)*C9)*L1 + ((pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8)*C9)*L10)*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4)*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7)*C8 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C8)*C9)*L1 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8)*C9)*L10 + (pi**12*C10*C2*C3*C4*C5*C6 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C7 + (pi**12*C10*C2*C3*C4*C5 + (pi**12*C10*C2*C3*C4 + pi**12*C2*C3*C4*C5)*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7)*C8 + (pi**12*C2*C3*C4*C5*C6 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C7 + (pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C8)*C9)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C6*C7*C8 + (pi**12*C1*C10*C2*C6*C7 + pi**12*C1*C10*C2*C6*C8)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C7 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C7 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C8)*C9)*L1 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C8)*C9)*L1*L10 + ((pi**12*C1*C10*C2*C4*C6*C7 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C2*C4*C6*C7)*C8 + (pi**12*C1*C2*C4*C6*C7 + pi**12*C1*C2*C4*C6*C8)*C9)*L1 + (pi**12*C10*C2*C4*C6*C7*C8 + (pi**12*C10*C2*C4*C6*C7 + pi**12*C10*C2*C4*C6*C8)*C9)*L10)*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C7 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C8)*C9)*L1 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8)*C9)*L10 + (pi**12*C10*C2*C3*C4*C6*C7 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C2*C3*C4*C6*C7)*C8 + (pi**12*C2*C3*C4*C6*C7 + pi**12*C2*C3*C4*C6*C8)*C9)*L2)*L3)*L4 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C8)*C9)*L1*L10 + (((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C7 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6)*C8 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C7 + (pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C8)*C9)*L1 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8)*C9)*L10)*L2 + ((((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C7 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6)*C8 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C7 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C8)*C9)*L1 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8)*C9)*L10 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C7 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6)*C8 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C7 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C8)*C9)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6)*C8 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C7 + (pi**12*C1 + pi**12*C2)*C4*C5*C6*C8)*C9)*L1 + (pi**12*C10*C4*C5*C6*C7*C8 + (pi**12*C10*C4*C5*C6*C7 + pi**12*C10*C4*C5*C6*C8)*C9)*L10 + (pi**12*C10*C2*C4*C5*C6*C7 + (pi**12*C10*C2*C4*C5*C6 + pi**12*C2*C4*C5*C6*C7)*C8 + (pi**12*C2*C4*C5*C6*C7 + pi**12*C2*C4*C5*C6*C8)*C9)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C7 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C7 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6)*C8 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C7 + (pi**12*C2 + pi**12*C3)*C4*C5*C6*C8)*C9)*L3)*L4)*L5)*L6)*L7 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C8*C9*L1*L10*L2*L3 + (pi**12*C1*C10*C2*C4*C8*C9*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C8*C9*L1*L10 + (pi**12*C10*C2*C3*C4*C8*C9*L10 + (pi**12*C1*C10*C2*C3*C4*C8 + pi**12*C1*C2*C3*C4*C8*C9)*L1)*L2)*L3)*L4 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C8*C9*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C8*C9*L1*L10 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C8*C9*L10 + ((pi**12*C1*C2*C3*C4 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C5 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6)*C8*C9 + (pi**12*C1*C10*C2*C3*C4 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C5 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6)*C8)*L1)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C8*C9*L1*L10 + ((pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C8*C9*L10 + ((pi**12*C1*C2*C4*C5 + pi**12*C1*C2*C4*C6)*C8*C9 + (pi**12*C1*C10*C2*C4*C5 + pi**12*C1*C10*C2*C4*C6)*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6)*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6)*C8)*L1 + ((pi**12*C2*C3*C4*C5 + pi**12*C2*C3*C4*C6)*C8*C9 + (pi**12*C10*C2*C3*C4*C5 + pi**12*C10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (pi**12*C1*C10*C2*C6*C8*C9*L1*L10*L2 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C8*C9*L1*L10 + ((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C8*C9*L10 + ((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6*C8*C9 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6*C8)*L1)*L2)*L3 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C8*C9*L1*L10 + (pi**12*C10*C2*C4*C6*C8*C9*L10 + (pi**12*C1*C10*C2*C4*C6*C8 + pi**12*C1*C2*C4*C6*C8*C9)*L1)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C8*C9*L10 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6*C8*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6*C8)*L1 + (pi**12*C10*C2*C3*C4*C6*C8 + pi**12*C2*C3*C4*C6*C8*C9)*L2)*L3)*L4 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C8*C9*L1*L10 + ((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C8*C9*L10 + ((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6*C8*C9 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6*C8)*L1 + ((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6*C8*C9 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6*C8)*L2)*L3 + (pi**12*C10*C4*C5*C6*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C4*C5*C6*C8*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6*C8)*L1 + (pi**12*C10*C2*C4*C5*C6*C8 + pi**12*C2*C4*C5*C6*C8*C9)*L2 + ((pi**12*C2 + pi**12*C3)*C4*C5*C6*C8*C9 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C6 + pi**12*C1*C10*C2*C7)*C8*C9*L1*L10*L2 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C7)*C8*C9*L1*L10 + (((pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C7)*C8*C9*L10 + (((pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C6 + (pi**12*C1*C2*C3 + pi**12*C1*C2*C4)*C7)*C8*C9 + ((pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C10*C2*C4)*C7)*C8)*L1)*L2)*L3 + (((pi**12*C1*C10 + pi**12*C10*C2)*C4*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C7)*C8*C9*L1*L10 + ((pi**12*C10*C2*C4*C6 + pi**12*C10*C2*C4*C7)*C8*C9*L10 + ((pi**12*C1*C2*C4*C6 + pi**12*C1*C2*C4*C7)*C8*C9 + (pi**12*C1*C10*C2*C4*C6 + pi**12*C1*C10*C2*C4*C7)*C8)*L1)*L2 + (((pi**12*C10*C2 + pi**12*C10*C3)*C4*C6 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C7)*C8*C9*L10 + (((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C6 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4*C7)*C8*C9 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C6 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4*C7)*C8)*L1 + ((pi**12*C2*C3*C4*C6 + pi**12*C2*C3*C4*C7)*C8*C9 + (pi**12*C10*C2*C3*C4*C6 + pi**12*C10*C2*C3*C4*C7)*C8)*L2)*L3)*L4 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C6)*C7)*C8*C9*L1*L10 + (((pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5 + pi**12*C10*C2*C6)*C7)*C8*C9*L10 + (((pi**12*C1*C2*C4 + pi**12*C1*C2*C5)*C6 + (pi**12*C1*C2*C4 + pi**12*C1*C2*C5 + pi**12*C1*C2*C6)*C7)*C8*C9 + ((pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5)*C6 + (pi**12*C1*C10*C2*C4 + pi**12*C1*C10*C2*C5 + pi**12*C1*C10*C2*C6)*C7)*C8)*L1)*L2 + ((((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6)*C7)*C8*C9*L10 + ((((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5)*C6 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3)*C4 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C5 + (pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C6)*C7)*C8*C9 + (((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5)*C6 + ((pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C5 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6)*C7)*C8)*L1 + (((pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5)*C6 + (pi**12*C2*C3*C4 + (pi**12*C2*C3 + pi**12*C2*C4)*C5 + (pi**12*C2*C3 + pi**12*C2*C4)*C6)*C7)*C8*C9 + ((pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5)*C6 + (pi**12*C10*C2*C3*C4 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C5 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6)*C7)*C8)*L2)*L3 + ((pi**12*C10*C4*C5*C6 + (pi**12*C10*C4*C5 + pi**12*C10*C4*C6)*C7)*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C4*C5*C6 + ((pi**12*C1 + pi**12*C2)*C4*C5 + (pi**12*C1 + pi**12*C2)*C4*C6)*C7)*C8*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6)*C7)*C8)*L1 + ((pi**12*C2*C4*C5*C6 + (pi**12*C2*C4*C5 + pi**12*C2*C4*C6)*C7)*C8*C9 + (pi**12*C10*C2*C4*C5*C6 + (pi**12*C10*C2*C4*C5 + pi**12*C10*C2*C4*C6)*C7)*C8)*L2 + (((pi**12*C2 + pi**12*C3)*C4*C5*C6 + ((pi**12*C2 + pi**12*C3)*C4*C5 + (pi**12*C2 + pi**12*C3)*C4*C6)*C7)*C8*C9 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5*C6 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4*C5 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6)*C7)*C8)*L3)*L4)*L5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C6*C7*C8*C9*L1*L10 + (pi**12*C10*C2*C6*C7*C8*C9*L10 + (pi**12*C1*C10*C2*C6*C7*C8 + pi**12*C1*C2*C6*C7*C8*C9)*L1)*L2 + ((pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C6*C7*C8*C9*L10 + ((pi**12*C1*C2 + (pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2)*C4)*C6*C7*C8*C9 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2)*C4)*C6*C7*C8)*L1 + ((pi**12*C2*C3 + pi**12*C2*C4)*C6*C7*C8*C9 + (pi**12*C10*C2*C3 + pi**12*C10*C2*C4)*C6*C7*C8)*L2)*L3 + (pi**12*C10*C4*C6*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C4*C6*C7*C8*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C4*C6*C7*C8)*L1 + (pi**12*C10*C2*C4*C6*C7*C8 + pi**12*C2*C4*C6*C7*C8*C9)*L2 + ((pi**12*C2 + pi**12*C3)*C4*C6*C7*C8*C9 + (pi**12*C10*C2 + pi**12*C10*C3)*C4*C6*C7*C8)*L3)*L4 + ((pi**12*C10*C4 + pi**12*C10*C5)*C6*C7*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C4 + (pi**12*C1 + pi**12*C2)*C5)*C6*C7*C8*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C5)*C6*C7*C8)*L1 + ((pi**12*C2*C4 + pi**12*C2*C5)*C6*C7*C8*C9 + (pi**12*C10*C2*C4 + pi**12*C10*C2*C5)*C6*C7*C8)*L2 + (((pi**12*C2 + pi**12*C3)*C4 + (pi**12*C2 + pi**12*C3 + pi**12*C4)*C5)*C6*C7*C8*C9 + ((pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C10*C2 + pi**12*C10*C3 + pi**12*C10*C4)*C5)*C6*C7*C8)*L3 + (pi**12*C10*C4*C5*C6*C7*C8 + pi**12*C4*C5*C6*C7*C8*C9)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**12 + ((-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*L1*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 - 2048*I*pi**11*C1*C10*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (-2048*I*pi**11*C1*C10*C2*C3*C4*C6*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5)*C6*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C5*C6*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C5*C6*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5*C6*L1)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C6 - 2048*I*pi**11*C1*C10*C2*C3*C4*C7 - 2048*I*pi**11*C1*C10*C2*C3*C4*C8)*L1*L2*L3*L4 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6*C7 - 2048*I*pi**11*C1*C10*C2*C4*C6*C8)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C7 - 2048*I*pi**11*C10*C2*C3*C4*C6*C8)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8)*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C7 - 2048*I*pi**11*C10*C2*C4*C5*C6*C8)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + (-2048*I*pi**11*C1*C10*C2*C3*C4*C8*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C6*C8*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C8*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8*L1)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C8*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7)*C8*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7)*C8*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7)*C8*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7)*C8*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7)*C8*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7)*C8*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7)*C8*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7)*C8*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7)*C8*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + (-2048*I*pi**11*C1*C10*C2*C6*C7*C8*L1*L2 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7*C8*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C7*C8*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7*C8*L3)*L4 + (-2048*I*pi**11*C10*C4*C5*C6*C7*C8*L4 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7*C8*L1 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7*C8*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C8 - 2048*I*pi**11*C1*C10*C2*C3*C4*C9)*L1*L2*L3*L4 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C4 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6)*C9)*L1*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C8 + (-2048*I*pi**11*C1*C10*C2*C4*C5 - 2048*I*pi**11*C1*C10*C2*C4*C6)*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C8 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C8 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6*C9)*L1*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C4*C6*C8 - 2048*I*pi**11*C1*C10*C2*C4*C6*C9)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C8 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6*C9)*L1 + (-2048*I*pi**11*C10*C2*C3*C4*C6*C8 - 2048*I*pi**11*C10*C2*C3*C4*C6*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C8 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C8 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C8 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6*C9)*L1 + (-2048*I*pi**11*C10*C2*C4*C5*C6*C8 - 2048*I*pi**11*C10*C2*C4*C5*C6*C9)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C8 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*C9)*L3)*L4)*L5)*L6 + ((((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C7 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C8)*C9)*L1*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7)*C8 + (-2048*I*pi**11*C1*C10*C2*C4*C6 - 2048*I*pi**11*C1*C10*C2*C4*C7 - 2048*I*pi**11*C1*C10*C2*C4*C8)*C9)*L1*L2 + ((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7)*C8 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 - 2048*I*pi**11*C10*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + ((((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C8)*C9)*L1*L2 + (((((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7)*C8 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5)*C6 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C8)*C9)*L1 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*C9)*L2)*L3 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C7 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7)*C8 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*C9)*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C6*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C6*C7 - 2048*I*pi**11*C1*C10*C2*C6*C8)*C9)*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7*C8 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C7 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7*C8 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C7 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C8)*C9)*L1 + (-2048*I*pi**11*C10*C2*C4*C6*C7*C8 + (-2048*I*pi**11*C10*C2*C4*C6*C7 - 2048*I*pi**11*C10*C2*C4*C6*C8)*C9)*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7*C8 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C7 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C8)*C9)*L1 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*C9)*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7*C8 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*C9)*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C7*C8 + (-2048*I*pi**11*C10*C4*C5*C6*C7 - 2048*I*pi**11*C10*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C10*C2*C4)*C8*C9*L1*L2*L3 + (-2048*I*pi**11*C1*C10*C2*C4*C8*C9*L1*L2 + (-2048*I*pi**11*C10*C2*C3*C4*C8*C9*L2 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4*C8*C9*L1)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2*C4 - 2048*I*pi**11*C1*C10*C2*C5 - 2048*I*pi**11*C1*C10*C2*C6)*C8*C9*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8*C9*L3)*L4)*L5 + (-2048*I*pi**11*C1*C10*C2*C6*C8*C9*L1*L2 + ((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8*C9*L2)*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C8*C9*L2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8*C9*L3)*L4 + (-2048*I*pi**11*C10*C4*C5*C6*C8*C9*L4 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8*C9*L3)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C6 - 2048*I*pi**11*C1*C10*C2*C7)*C8*C9*L1*L2 + (((-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C6 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C3 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4)*C7)*C8*C9*L1 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C6 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4*C7)*C8*C9*L1 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8*C9*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8*C9*L3)*L4 + ((((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5)*C6 + ((-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C5 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C6)*C7)*C8*C9*L1 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8*C9*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8*C9*L3 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8*C9*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C7*C8*C9*L2 - 2048*I*pi**11*C10*C4*C6*C7*C8*C9*L4 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C10*C2)*C6*C7*C8*C9*L1 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8*C9*L3 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8*C9*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (-2048*I*pi**11*C10*C2*C3*C4*C6*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6*L1*L10*L2*L3 + (-2048*I*pi**11*C10*C2*C4*C5*C6*L1*L10*L2 + (-2048*I*pi**11*C2*C3*C4*C5*C6*L1*L2 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6*L1*L10)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 - 2048*I*pi**11*C10*C2*C3*C4*C8)*L1*L10*L2*L3*L4 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C5*C6 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C7 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C8)*L1*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C6*C7 - 2048*I*pi**11*C10*C2*C4*C6*C8)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C6*C7 - 2048*I*pi**11*C2*C3*C4*C6*C8)*L1*L2)*L3)*L4 + (((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C7 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C8)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5*C6*C7 - 2048*I*pi**11*C10*C4*C5*C6*C8)*L1*L10 + (-2048*I*pi**11*C2*C4*C5*C6*C7 - 2048*I*pi**11*C2*C4*C5*C6*C8)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C7 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C8)*L1*L3)*L4)*L5)*L6)*L7 + (-2048*I*pi**11*C10*C2*C3*C4*C8*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C8*L1*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8*L1*L10*L2*L3 + (-2048*I*pi**11*C10*C2*C4*C6*C8*L1*L10*L2 + (-2048*I*pi**11*C2*C3*C4*C6*C8*L1*L2 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8*L1*L10)*L3)*L4 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8*L1*L10 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C8*L1*L2)*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C8*L1*L10 - 2048*I*pi**11*C2*C4*C5*C6*C8*L1*L2 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C8*L1*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8*L1*L10 + (-2048*I*pi**11*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C7)*C8*L1*L2)*L3)*L4 + (((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C7)*C8*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8*L1*L10 + (-2048*I*pi**11*C2*C4*C5*C6 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C7)*C8*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C7)*C8*L1*L3)*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C7*C8*L1*L10*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8*L1*L10 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C7*C8*L1*L2)*L3 + (-2048*I*pi**11*C10*C4*C6*C7*C8*L1*L10 - 2048*I*pi**11*C2*C4*C6*C7*C8*L1*L2 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C7*C8*L1*L3)*L4 + (-2048*I*pi**11*C4*C5*C6*C7*C8*L1*L4 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8*L1*L10 + (-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C7*C8*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C7*C8*L1*L3)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C10*C2*C3*C4*C8 - 2048*I*pi**11*C10*C2*C3*C4*C9)*L1*L10*L2*L3*L4 + (((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C9)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C5 - 2048*I*pi**11*C10*C2*C3*C4*C6 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C8 + (-2048*I*pi**11*C2*C3*C4*C5 - 2048*I*pi**11*C2*C3*C4*C6)*C9)*L1*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C9)*L1*L10*L2*L3 + ((-2048*I*pi**11*C10*C2*C4*C6*C8 - 2048*I*pi**11*C10*C2*C4*C6*C9)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C6*C8 - 2048*I*pi**11*C2*C3*C4*C6*C9)*L1*L2)*L3)*L4 + (((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C9)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C9)*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C8 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6*C9 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5*C6*C8 - 2048*I*pi**11*C10*C4*C5*C6*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C5*C6 - 2048*I*pi**11*C2*C4*C5*C6*C8 - 2048*I*pi**11*C2*C4*C5*C6*C9)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C8 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6*C9 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6)*L1*L3)*L4)*L5)*L6 + ((((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C8)*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7 - 2048*I*pi**11*C10*C2*C4*C8)*C9)*L1*L10*L2 + ((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C8)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C6 - 2048*I*pi**11*C10*C2*C3*C4*C7 + (-2048*I*pi**11*C10*C2*C3*C4 - 2048*I*pi**11*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C7)*C8 + (-2048*I*pi**11*C2*C3*C4*C6 - 2048*I*pi**11*C2*C3*C4*C7 - 2048*I*pi**11*C2*C3*C4*C8)*C9)*L1*L2)*L3)*L4 + ((((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C8)*C9)*L1*L10*L2 + (((((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C8)*C9)*L1*L10 + ((-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5)*C6 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C7 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C2*C3)*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C7)*C8 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5)*C6 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C7 + (-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C8)*C9)*L1*L2)*L3 + (((-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C8)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C5*C6 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C7 + (-2048*I*pi**11*C10*C2*C4*C5 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C2*C4*C5)*C6 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C7)*C8 + (-2048*I*pi**11*C2*C4*C5*C6 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C7 + (-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C8)*C9)*L1*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4)*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C7)*C8 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C7 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C8)*C9)*L1*L3)*L4)*L5 + ((-2048*I*pi**11*C10*C2*C6*C7*C8 + (-2048*I*pi**11*C10*C2*C6*C7 - 2048*I*pi**11*C10*C2*C6*C8)*C9)*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C8)*C9)*L1*L10 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C7 + ((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C7 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8 + ((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C7 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C8)*C9)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C6*C7*C8 + (-2048*I*pi**11*C10*C4*C6*C7 - 2048*I*pi**11*C10*C4*C6*C8)*C9)*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C6*C7 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C2*C4*C6*C7)*C8 + (-2048*I*pi**11*C2*C4*C6*C7 - 2048*I*pi**11*C2*C4*C6*C8)*C9)*L1*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C7 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C7 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C7 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C8)*C9)*L1*L3)*L4 + (((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8 + ((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C8)*C9)*L1*L10 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C7 + ((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C7 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6)*C8 + ((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C7 + (-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C8)*C9)*L1*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C7 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6)*C8 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C7 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C8)*C9)*L1*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C7 + (-2048*I*pi**11*C10*C4*C5*C6 - 2048*I*pi**11*C4*C5*C6*C7)*C8 + (-2048*I*pi**11*C4*C5*C6*C7 - 2048*I*pi**11*C4*C5*C6*C8)*C9)*L1*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C8*C9*L1*L10*L2*L3 + (-2048*I*pi**11*C10*C2*C4*C8*C9*L1*L10*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C8*C9*L1*L10 + (-2048*I*pi**11*C10*C2*C3*C4*C8 - 2048*I*pi**11*C2*C3*C4*C8*C9)*L1*L2)*L3)*L4 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C8*C9*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C3*C4 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C5 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6)*C8*C9 + (-2048*I*pi**11*C10*C2*C3*C4 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C5 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6)*C8)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C4*C5 - 2048*I*pi**11*C2*C4*C6)*C8*C9 + (-2048*I*pi**11*C10*C2*C4*C5 - 2048*I*pi**11*C10*C2*C4*C6)*C8)*L1*L2 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6)*C8*C9 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (-2048*I*pi**11*C10*C2*C6*C8*C9*L1*L10*L2 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6*C8*C9 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6*C8)*L1*L2)*L3 + (-2048*I*pi**11*C10*C4*C6*C8*C9*L1*L10 + (-2048*I*pi**11*C10*C2*C4*C6*C8 - 2048*I*pi**11*C2*C4*C6*C8*C9)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6*C8*C9 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6*C8)*L1*L3)*L4 + ((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6*C8*C9 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6*C8)*L1*L2 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6*C8*C9 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6*C8)*L1*L3 + (-2048*I*pi**11*C10*C4*C5*C6*C8 - 2048*I*pi**11*C4*C5*C6*C8*C9)*L1*L4)*L5)*L6 + ((-2048*I*pi**11*C10*C2*C6 - 2048*I*pi**11*C10*C2*C7)*C8*C9*L1*L10*L2 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C7)*C8*C9*L1*L10 + (((-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C6 + (-2048*I*pi**11*C2*C3 - 2048*I*pi**11*C2*C4)*C7)*C8*C9 + ((-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C6 + (-2048*I*pi**11*C10*C2*C3 - 2048*I*pi**11*C10*C2*C4)*C7)*C8)*L1*L2)*L3 + ((-2048*I*pi**11*C10*C4*C6 - 2048*I*pi**11*C10*C4*C7)*C8*C9*L1*L10 + ((-2048*I*pi**11*C2*C4*C6 - 2048*I*pi**11*C2*C4*C7)*C8*C9 + (-2048*I*pi**11*C10*C2*C4*C6 - 2048*I*pi**11*C10*C2*C4*C7)*C8)*L1*L2 + (((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C6 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4*C7)*C8*C9 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C6 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4*C7)*C8)*L1*L3)*L4 + (((-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5 - 2048*I*pi**11*C10*C6)*C7)*C8*C9*L1*L10 + (((-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5)*C6 + (-2048*I*pi**11*C2*C4 - 2048*I*pi**11*C2*C5 - 2048*I*pi**11*C2*C6)*C7)*C8*C9 + ((-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5)*C6 + (-2048*I*pi**11*C10*C2*C4 - 2048*I*pi**11*C10*C2*C5 - 2048*I*pi**11*C10*C2*C6)*C7)*C8)*L1*L2 + ((((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5)*C6 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5 + (-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C6)*C7)*C8*C9 + (((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5)*C6 + ((-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3)*C4 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C5 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6)*C7)*C8)*L1*L3 + ((-2048*I*pi**11*C4*C5*C6 + (-2048*I*pi**11*C4*C5 - 2048*I*pi**11*C4*C6)*C7)*C8*C9 + (-2048*I*pi**11*C10*C4*C5*C6 + (-2048*I*pi**11*C10*C4*C5 - 2048*I*pi**11*C10*C4*C6)*C7)*C8)*L1*L4)*L5 + (-2048*I*pi**11*C10*C6*C7*C8*C9*L1*L10 + (-2048*I*pi**11*C10*C2*C6*C7*C8 - 2048*I*pi**11*C2*C6*C7*C8*C9)*L1*L2 + ((-2048*I*pi**11*C2 - 2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C6*C7*C8*C9 + (-2048*I*pi**11*C10*C2 - 2048*I*pi**11*C10*C3 - 2048*I*pi**11*C10*C4)*C6*C7*C8)*L1*L3 + (-2048*I*pi**11*C10*C4*C6*C7*C8 - 2048*I*pi**11*C4*C6*C7*C8*C9)*L1*L4 + ((-2048*I*pi**11*C4 - 2048*I*pi**11*C5)*C6*C7*C8*C9 + (-2048*I*pi**11*C10*C4 - 2048*I*pi**11*C10*C5)*C6*C7*C8)*L1*L5)*L6)*L7)*L8)*L9)*freq**11 - 1024*(((pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6)*L1*L2*L3*L4*L5 + (pi**10*C10*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6*L1*L2*L3 + (pi**10*C10*C2*C4*C5*C6*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + ((pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + pi**10*C10*C2*C3*C4*C8)*L1*L2*L3*L4 + (((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L1*L2*L3 + ((pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L1*L2*L3 + ((pi**10*C10*C2*C4*C6*C7 + pi**10*C10*C2*C4*C6*C8)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L1*L3 + (pi**10*C10*C4*C5*C6*C7 + pi**10*C10*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + (pi**10*C10*C2*C3*C4*C8*L1*L2*L3*L4 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8*L1*L2*L3 + ((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8*L1*L2*L3 + (pi**10*C10*C2*C4*C6*C8*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8*L1*L3)*L4 + (pi**10*C10*C4*C5*C6*C8*L1*L4 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8*L1*L2*L3 + ((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8*L1*L3 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8*L1*L4)*L5 + (pi**10*C10*C2*C6*C7*C8*L1*L2 + pi**10*C10*C4*C6*C7*C8*L1*L4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8*L1*L3 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + ((pi**10*C10*C2*C3*C4*C8 + pi**10*C10*C2*C3*C4*C9)*L1*L2*L3*L4 + (((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C9)*L1*L2*L3 + (((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C9)*L1*L2*L3 + ((pi**10*C10*C2*C4*C6*C8 + pi**10*C10*C2*C4*C6*C9)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C9)*L1*L3)*L4 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C9)*L1*L3 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C10*C4*C5*C6*C9)*L1*L4)*L5)*L6 + ((((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8)*C9)*L1*L2*L3 + (((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7 + pi**10*C10*C2*C4*C8)*C9)*L1*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8)*C9)*L1*L2 + ((((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8)*C9)*L1*L3 + ((pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8)*C9)*L1*L4)*L5 + ((pi**10*C10*C2*C6*C7*C8 + (pi**10*C10*C2*C6*C7 + pi**10*C10*C2*C6*C8)*C9)*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8)*C9)*L1*L3 + (pi**10*C10*C4*C6*C7*C8 + (pi**10*C10*C4*C6*C7 + pi**10*C10*C4*C6*C8)*C9)*L1*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8*C9*L1*L2*L3 + (pi**10*C10*C2*C4*C8*C9*L1*L2 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8*C9*L1*L3)*L4 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8*C9*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8*C9*L1*L3 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8*C9*L1*L4)*L5 + (pi**10*C10*C2*C6*C8*C9*L1*L2 + pi**10*C10*C4*C6*C8*C9*L1*L4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8*C9*L1*L3 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8*C9*L1*L5)*L6 + (pi**10*C10*C6*C7*C8*C9*L1*L6 + (pi**10*C10*C2*C6 + pi**10*C10*C2*C7)*C8*C9*L1*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C7)*C8*C9*L1*L3 + (pi**10*C10*C4*C6 + pi**10*C10*C4*C7)*C8*C9*L1*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C4 + pi**10*C10*C5 + pi**10*C10*C6)*C7)*C8*C9*L1*L5)*L7)*L8)*L9)*ZL + (pi**10*C1*C10*C2*C3*C4*L1*L10*L2*L3*L4 + ((pi**10*C1*C10*C2*C3*C4 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C5 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C5 + pi**10*C1*C10*C2*C4*C6)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6)*L1*L10 + ((pi**10*C1*C2*C3*C4*C5 + pi**10*C1*C2*C3*C4*C6)*L1 + (pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6)*L10)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6*L1*L10*L2*L3 + (pi**10*C1*C10*C2*C4*C6*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6*L1*L10 + (pi**10*C1*C2*C3*C4*C6*L1 + pi**10*C10*C2*C3*C4*C6*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6*L1*L10 + ((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5)*C6*L1 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6*L10)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6*L1*L10 + (pi**10*C1*C2*C4*C5*C6*L1 + pi**10*C10*C2*C4*C5*C6*L10)*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5*C6*L1 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6*L10)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C7 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C10*C2*C4*C7 + pi**10*C1*C10*C2*C4*C8)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8)*L1*L10 + ((pi**10*C1*C2*C3*C4*C6 + pi**10*C1*C2*C3*C4*C7 + pi**10*C1*C2*C3*C4*C8)*L1 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + pi**10*C10*C2*C3*C4*C8)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C7 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8)*L1*L10 + (((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5)*C6 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C7 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8)*L1 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8)*L1*L10 + ((pi**10*C1*C2*C4*C5*C6 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C7 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8)*L1 + (pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L10 + (pi**10*C2*C3*C4*C5*C6 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C7 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C6*C7 + pi**10*C1*C10*C2*C6*C8)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8)*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C7 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8)*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8)*L1*L10 + ((pi**10*C1*C2*C4*C6*C7 + pi**10*C1*C2*C4*C6*C8)*L1 + (pi**10*C10*C2*C4*C6*C7 + pi**10*C10*C2*C4*C6*C8)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L10 + (pi**10*C2*C3*C4*C6*C7 + pi**10*C2*C3*C4*C6*C8)*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8)*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C7 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8)*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C7 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8)*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6*C7 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C8)*L1 + (pi**10*C10*C4*C5*C6*C7 + pi**10*C10*C4*C5*C6*C8)*L10 + (pi**10*C2*C4*C5*C6*C7 + pi**10*C2*C4*C5*C6*C8)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6*C7 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C8)*L3)*L4)*L5)*L6)*L7 + ((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8*L1*L10*L2*L3 + (pi**10*C1*C10*C2*C4*C8*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8*L1*L10 + (pi**10*C1*C2*C3*C4*C8*L1 + pi**10*C10*C2*C3*C4*C8*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8*L1*L10 + ((pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8*L1 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8*L1*L10 + ((pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8*L1 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8*L10 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8*L2)*L3)*L4)*L5 + (pi**10*C1*C10*C2*C6*C8*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8*L1*L10 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8*L1 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8*L10)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8*L1*L10 + (pi**10*C1*C2*C4*C6*C8*L1 + pi**10*C10*C2*C4*C6*C8*L10)*L2 + (pi**10*C2*C3*C4*C6*C8*L2 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8*L1 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8*L10)*L3)*L4 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8*L1*L10 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8*L1 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8*L10 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8*L2)*L3 + (pi**10*C10*C4*C5*C6*C8*L10 + pi**10*C2*C4*C5*C6*C8*L2 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C8*L1 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C8*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7)*C8*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8*L1*L10 + ((pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7)*C8*L1 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7)*C8*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8*L10 + (pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7)*C8*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7)*C8*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7)*C8*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7)*C8*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7)*C8*L1 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8*L10 + (pi**10*C2*C4*C5*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7)*C8*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7)*C8*L3)*L4)*L5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8*L1*L10 + (pi**10*C1*C2*C6*C7*C8*L1 + pi**10*C10*C2*C6*C7*C8*L10)*L2 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7*C8*L1 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8*L10 + (pi**10*C2*C3 + pi**10*C2*C4)*C6*C7*C8*L2)*L3 + (pi**10*C10*C4*C6*C7*C8*L10 + pi**10*C2*C4*C6*C7*C8*L2 + (pi**10*C1 + pi**10*C2)*C4*C6*C7*C8*L1 + (pi**10*C2 + pi**10*C3)*C4*C6*C7*C8*L3)*L4 + (pi**10*C4*C5*C6*C7*C8*L4 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7*C8*L1 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8*L10 + (pi**10*C2*C4 + pi**10*C2*C5)*C6*C7*C8*L2 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7*C8*L3)*L5)*L6)*L7)*L8 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C9)*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C4*C8 + pi**10*C1*C10*C2*C4*C9)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C9)*L1*L10 + ((pi**10*C1*C10*C2*C3*C4 + pi**10*C1*C2*C3*C4*C8 + pi**10*C1*C2*C3*C4*C9)*L1 + (pi**10*C10*C2*C3*C4*C8 + pi**10*C10*C2*C3*C4*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C9)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C3*C4 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C5 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C8 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C5 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6)*C9)*L1 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C5 + pi**10*C1*C10*C2*C4*C6 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C8 + (pi**10*C1*C2*C4*C5 + pi**10*C1*C2*C4*C6)*C9)*L1 + ((pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6)*C9)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C9)*L10 + (pi**10*C10*C2*C3*C4*C5 + pi**10*C10*C2*C3*C4*C6 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C8 + (pi**10*C2*C3*C4*C5 + pi**10*C2*C3*C4*C6)*C9)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C6*C8 + pi**10*C1*C10*C2*C6*C9)*L1*L10*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C9)*L1*L10 + (((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C8 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6*C9 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6)*L1 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C9)*L10)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C2*C4*C6*C8 + pi**10*C1*C2*C4*C6*C9)*L1 + (pi**10*C10*C2*C4*C6*C8 + pi**10*C10*C2*C4*C6*C9)*L10)*L2 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C8 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C9)*L10 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C6*C8 + pi**10*C2*C3*C4*C6*C9)*L2)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C9)*L1*L10 + (((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C8 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6*C9 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6)*L1 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C9)*L10)*L2 + ((((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C9)*L10 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C8 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6*C9 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6)*L2)*L3 + (((pi**10*C1 + pi**10*C2)*C4*C5*C6*C8 + (pi**10*C1 + pi**10*C2)*C4*C5*C6*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6)*L1 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C10*C4*C5*C6*C9)*L10 + (pi**10*C10*C2*C4*C5*C6 + pi**10*C2*C4*C5*C6*C8 + pi**10*C2*C4*C5*C6*C9)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6*C8 + (pi**10*C2 + pi**10*C3)*C4*C5*C6*C9 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7 + pi**10*C1*C10*C2*C8)*C9)*L1*L10*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C8)*C9)*L1*L10 + (((pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C6 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C7 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7)*C8 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C6 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C7 + (pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C8)*C9)*L1 + (((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C8)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C4*C6 + pi**10*C1*C10*C2*C4*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7)*C8 + (pi**10*C1*C2*C4*C6 + pi**10*C1*C2*C4*C7 + pi**10*C1*C2*C4*C8)*C9)*L1 + ((pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7 + pi**10*C10*C2*C4*C8)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C8)*C9)*L1 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C8)*C9)*L10 + (pi**10*C10*C2*C3*C4*C6 + pi**10*C10*C2*C3*C4*C7 + (pi**10*C10*C2*C3*C4 + pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7)*C8 + (pi**10*C2*C3*C4*C6 + pi**10*C2*C3*C4*C7 + pi**10*C2*C3*C4*C8)*C9)*L2)*L3)*L4 + (((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C8)*C9)*L1*L10 + (((pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5)*C6 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C7 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7)*C8 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5)*C6 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C7 + (pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C8)*C9)*L1 + (((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8)*C9)*L10)*L2 + ((((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5)*C6 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C7 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + (pi**10*C1 + pi**10*C10)*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7)*C8 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5)*C6 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C8)*C9)*L1 + ((((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8)*C9)*L10 + ((pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5)*C6 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C7 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + (pi**10*C10*C2 + pi**10*C2*C3)*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7)*C8 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5)*C6 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C7 + (pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C8)*C9)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C4*C5*C6 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C8)*C9)*L1 + ((pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8)*C9)*L10 + (pi**10*C10*C2*C4*C5*C6 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C7 + (pi**10*C10*C2*C4*C5 + (pi**10*C10*C2*C4 + pi**10*C2*C4*C5)*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7)*C8 + (pi**10*C2*C4*C5*C6 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C7 + (pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C8)*C9)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4)*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7)*C8 + ((pi**10*C2 + pi**10*C3)*C4*C5*C6 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C7 + ((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C8)*C9)*L3)*L4)*L5 + (((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C6*C8)*C9)*L1*L10 + ((pi**10*C1*C10*C2*C6*C7 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C2*C6*C7)*C8 + (pi**10*C1*C2*C6*C7 + pi**10*C1*C2*C6*C8)*C9)*L1 + (pi**10*C10*C2*C6*C7*C8 + (pi**10*C10*C2*C6*C7 + pi**10*C10*C2*C6*C8)*C9)*L10)*L2 + (((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C7 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C7 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C8)*C9)*L1 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8)*C9)*L10 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C7 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C7 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C7 + (pi**10*C2*C3 + pi**10*C2*C4)*C6*C8)*C9)*L2)*L3 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C7 + ((pi**10*C1 + pi**10*C2)*C4*C6*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8 + ((pi**10*C1 + pi**10*C2)*C4*C6*C7 + (pi**10*C1 + pi**10*C2)*C4*C6*C8)*C9)*L1 + (pi**10*C10*C4*C6*C7*C8 + (pi**10*C10*C4*C6*C7 + pi**10*C10*C4*C6*C8)*C9)*L10 + (pi**10*C10*C2*C4*C6*C7 + (pi**10*C10*C2*C4*C6 + pi**10*C2*C4*C6*C7)*C8 + (pi**10*C2*C4*C6*C7 + pi**10*C2*C4*C6*C8)*C9)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C7 + ((pi**10*C2 + pi**10*C3)*C4*C6*C7 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8 + ((pi**10*C2 + pi**10*C3)*C4*C6*C7 + (pi**10*C2 + pi**10*C3)*C4*C6*C8)*C9)*L3)*L4 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C7 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6)*C8 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C7 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C8)*C9)*L1 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C7 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C8)*C9)*L10 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C7 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C7 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6)*C8 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C7 + (pi**10*C2*C4 + pi**10*C2*C5)*C6*C8)*C9)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C7 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6)*C8 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C7 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C8)*C9)*L3 + (pi**10*C10*C4*C5*C6*C7 + (pi**10*C10*C4*C5*C6 + pi**10*C4*C5*C6*C7)*C8 + (pi**10*C4*C5*C6*C7 + pi**10*C4*C5*C6*C8)*C9)*L4)*L5)*L6)*L7 + (pi**10*C1*C10*C2*C8*C9*L1*L10*L2 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C8*C9*L1*L10 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C8*C9*L10 + ((pi**10*C1*C2*C3 + pi**10*C1*C2*C4)*C8*C9 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C10*C2*C4)*C8)*L1)*L2)*L3 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C8*C9*L1*L10 + (pi**10*C10*C2*C4*C8*C9*L10 + (pi**10*C1*C10*C2*C4*C8 + pi**10*C1*C2*C4*C8*C9)*L1)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C8*C9*L10 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4*C8*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4*C8)*L1 + (pi**10*C10*C2*C3*C4*C8 + pi**10*C2*C3*C4*C8*C9)*L2)*L3)*L4 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C8*C9*L1*L10 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C8*C9*L10 + ((pi**10*C1*C2*C4 + pi**10*C1*C2*C5 + pi**10*C1*C2*C6)*C8*C9 + (pi**10*C1*C10*C2*C4 + pi**10*C1*C10*C2*C5 + pi**10*C1*C10*C2*C6)*C8)*L1)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C8*C9*L10 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3)*C4 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C5 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6)*C8*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C4 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C5 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6)*C8)*L1 + ((pi**10*C2*C3*C4 + (pi**10*C2*C3 + pi**10*C2*C4)*C5 + (pi**10*C2*C3 + pi**10*C2*C4)*C6)*C8*C9 + (pi**10*C10*C2*C3*C4 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C5 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6)*C8)*L2)*L3 + ((pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4*C5 + (pi**10*C1 + pi**10*C2)*C4*C6)*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6)*C8)*L1 + ((pi**10*C2*C4*C5 + pi**10*C2*C4*C6)*C8*C9 + (pi**10*C10*C2*C4*C5 + pi**10*C10*C2*C4*C6)*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4*C5 + (pi**10*C2 + pi**10*C3)*C4*C6)*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C5 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C6*C8*C9*L1*L10 + (pi**10*C10*C2*C6*C8*C9*L10 + (pi**10*C1*C10*C2*C6*C8 + pi**10*C1*C2*C6*C8*C9)*L1)*L2 + ((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C8*C9*L10 + ((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6*C8*C9 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6*C8)*L1 + ((pi**10*C2*C3 + pi**10*C2*C4)*C6*C8*C9 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6*C8)*L2)*L3 + (pi**10*C10*C4*C6*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C4*C6*C8*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C6*C8)*L1 + (pi**10*C10*C2*C4*C6*C8 + pi**10*C2*C4*C6*C8*C9)*L2 + ((pi**10*C2 + pi**10*C3)*C4*C6*C8*C9 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C6*C8)*L3)*L4 + ((pi**10*C10*C4 + pi**10*C10*C5)*C6*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6*C8)*L1 + ((pi**10*C2*C4 + pi**10*C2*C5)*C6*C8*C9 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6*C8)*L3 + (pi**10*C10*C4*C5*C6*C8 + pi**10*C4*C5*C6*C8*C9)*L4)*L5)*L6 + (((pi**10*C1*C10 + pi**10*C10*C2)*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C7)*C8*C9*L1*L10 + ((pi**10*C10*C2*C6 + pi**10*C10*C2*C7)*C8*C9*L10 + ((pi**10*C1*C2*C6 + pi**10*C1*C2*C7)*C8*C9 + (pi**10*C1*C10*C2*C6 + pi**10*C1*C10*C2*C7)*C8)*L1)*L2 + (((pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C7)*C8*C9*L10 + (((pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C6 + (pi**10*C1*C2 + (pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2)*C4)*C7)*C8*C9 + ((pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C6 + (pi**10*C1*C10*C2 + (pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2)*C4)*C7)*C8)*L1 + (((pi**10*C2*C3 + pi**10*C2*C4)*C6 + (pi**10*C2*C3 + pi**10*C2*C4)*C7)*C8*C9 + ((pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C6 + (pi**10*C10*C2*C3 + pi**10*C10*C2*C4)*C7)*C8)*L2)*L3 + ((pi**10*C10*C4*C6 + pi**10*C10*C4*C7)*C8*C9*L10 + (((pi**10*C1 + pi**10*C2)*C4*C6 + (pi**10*C1 + pi**10*C2)*C4*C7)*C8*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C4*C7)*C8)*L1 + ((pi**10*C2*C4*C6 + pi**10*C2*C4*C7)*C8*C9 + (pi**10*C10*C2*C4*C6 + pi**10*C10*C2*C4*C7)*C8)*L2 + (((pi**10*C2 + pi**10*C3)*C4*C6 + (pi**10*C2 + pi**10*C3)*C4*C7)*C8*C9 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4*C6 + (pi**10*C10*C2 + pi**10*C10*C3)*C4*C7)*C8)*L3)*L4 + (((pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C4 + pi**10*C10*C5 + pi**10*C10*C6)*C7)*C8*C9*L10 + ((((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C4 + (pi**10*C1 + pi**10*C2)*C5 + (pi**10*C1 + pi**10*C2)*C6)*C7)*C8*C9 + (((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C6)*C7)*C8)*L1 + (((pi**10*C2*C4 + pi**10*C2*C5)*C6 + (pi**10*C2*C4 + pi**10*C2*C5 + pi**10*C2*C6)*C7)*C8*C9 + ((pi**10*C10*C2*C4 + pi**10*C10*C2*C5)*C6 + (pi**10*C10*C2*C4 + pi**10*C10*C2*C5 + pi**10*C10*C2*C6)*C7)*C8)*L2 + ((((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5)*C6 + ((pi**10*C2 + pi**10*C3)*C4 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C5 + (pi**10*C2 + pi**10*C3 + pi**10*C4)*C6)*C7)*C8*C9 + (((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5)*C6 + ((pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6)*C7)*C8)*L3 + ((pi**10*C4*C5*C6 + (pi**10*C4*C5 + pi**10*C4*C6)*C7)*C8*C9 + (pi**10*C10*C4*C5*C6 + (pi**10*C10*C4*C5 + pi**10*C10*C4*C6)*C7)*C8)*L4)*L5 + (pi**10*C10*C6*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C6*C7*C8*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C6*C7*C8)*L1 + (pi**10*C10*C2*C6*C7*C8 + pi**10*C2*C6*C7*C8*C9)*L2 + ((pi**10*C2 + pi**10*C3 + pi**10*C4)*C6*C7*C8*C9 + (pi**10*C10*C2 + pi**10*C10*C3 + pi**10*C10*C4)*C6*C7*C8)*L3 + (pi**10*C10*C4*C6*C7*C8 + pi**10*C4*C6*C7*C8*C9)*L4 + ((pi**10*C4 + pi**10*C5)*C6*C7*C8*C9 + (pi**10*C10*C4 + pi**10*C10*C5)*C6*C7*C8)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**10 + (512*I*pi**9*C10*C2*C3*C4*L1*L10*L2*L3*L4 + (512*I*pi**9*C1*C10*C2*C3*C4*L1*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C4 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C5 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C5 + 512*I*pi**9*C1*C10*C2*C4*C6)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6)*L1 + (512*I*pi**9*C10*C2*C3*C4*C5 + 512*I*pi**9*C10*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6*L1*L2*L3 + (512*I*pi**9*C1*C10*C2*C4*C6*L1*L2 + (512*I*pi**9*C10*C2*C3*C4*C6*L2 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6*L1)*L3)*L4 + ((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5)*C6*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5)*C6*L1 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5)*C6*L2)*L3 + (512*I*pi**9*C10*C2*C4*C5*C6*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5*C6*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C6 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C7 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C6 + 512*I*pi**9*C1*C10*C2*C4*C7 + 512*I*pi**9*C1*C10*C2*C4*C8)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8)*L1 + (512*I*pi**9*C10*C2*C3*C4*C6 + 512*I*pi**9*C10*C2*C3*C4*C7 + 512*I*pi**9*C10*C2*C3*C4*C8)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5)*C6 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C7 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5)*C6 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C7 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8)*L1 + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5)*C6 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C7 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8)*L1 + (512*I*pi**9*C10*C2*C4*C5*C6 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C7 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C6*C7 + 512*I*pi**9*C1*C10*C2*C6*C8)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8)*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8)*L1 + (512*I*pi**9*C10*C2*C4*C6*C7 + 512*I*pi**9*C10*C2*C4*C6*C8)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8)*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8)*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8)*L3 + (512*I*pi**9*C10*C4*C5*C6*C7 + 512*I*pi**9*C10*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + ((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8*L1*L2*L3 + (512*I*pi**9*C1*C10*C2*C4*C8*L1*L2 + (512*I*pi**9*C10*C2*C3*C4*C8*L2 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8*L1)*L3)*L4 + ((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8*L1 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8*L1 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8*L3)*L4)*L5 + (512*I*pi**9*C1*C10*C2*C6*C8*L1*L2 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8*L1 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8*L2)*L3 + (512*I*pi**9*C10*C2*C4*C6*C8*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8*L3)*L4 + (512*I*pi**9*C10*C4*C5*C6*C8*L4 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8*L1 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8*L3)*L5)*L6 + ((512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7)*C8*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7)*C8*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7)*C8*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7)*C8*L1 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7)*C8*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7)*C8*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7)*C8*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7)*C8*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7)*C8*L3 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7)*C8*L4)*L5 + (512*I*pi**9*C10*C2*C6*C7*C8*L2 + 512*I*pi**9*C10*C4*C6*C7*C8*L4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7*C8*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7*C8*L3 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + (((512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C8 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C10*C2*C4)*C9)*L1*L2*L3 + ((512*I*pi**9*C1*C10*C2*C4*C8 + 512*I*pi**9*C1*C10*C2*C4*C9)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C8 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4*C9)*L1 + (512*I*pi**9*C10*C2*C3*C4*C8 + 512*I*pi**9*C10*C2*C3*C4*C9)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C8 + (512*I*pi**9*C1*C10*C2*C4 + 512*I*pi**9*C1*C10*C2*C5 + 512*I*pi**9*C1*C10*C2*C6)*C9)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C8 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3)*C4 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C5 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6)*C9)*L1 + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C8 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6)*C9)*L1 + ((512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C8 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*C9)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C6*C8 + 512*I*pi**9*C1*C10*C2*C6*C9)*L1*L2 + (((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C8 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6*C9)*L1 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C8 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*C9)*L2)*L3 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C8 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6*C9)*L1 + (512*I*pi**9*C10*C2*C4*C6*C8 + 512*I*pi**9*C10*C2*C4*C6*C9)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*C9)*L3)*L4 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6*C9)*L1 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C8 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*C9)*L3 + (512*I*pi**9*C10*C4*C5*C6*C8 + 512*I*pi**9*C10*C4*C5*C6*C9)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7)*C8 + (512*I*pi**9*C1*C10*C2*C6 + 512*I*pi**9*C1*C10*C2*C7 + 512*I*pi**9*C1*C10*C2*C8)*C9)*L1*L2 + ((((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7)*C8 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C6 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C7 + (512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C8)*C9)*L1 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7)*C8 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7)*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C8)*C9)*L1 + ((512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7)*C8 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + 512*I*pi**9*C10*C2*C4*C8)*C9)*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*C9)*L3)*L4 + (((((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7)*C8 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5)*C6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C7 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C8)*C9)*L1 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7)*C8 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*C9)*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7)*C8 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*C9)*L3 + ((512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7)*C8 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*C9)*L4)*L5 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7*C8 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C7 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C8)*C9)*L1 + (512*I*pi**9*C10*C2*C6*C7*C8 + (512*I*pi**9*C10*C2*C6*C7 + 512*I*pi**9*C10*C2*C6*C8)*C9)*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*C9)*L3 + (512*I*pi**9*C10*C4*C6*C7*C8 + (512*I*pi**9*C10*C4*C6*C7 + 512*I*pi**9*C10*C4*C6*C8)*C9)*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7*C8 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*C9)*L5)*L6)*L7 + (512*I*pi**9*C1*C10*C2*C8*C9*L1*L2 + ((512*I*pi**9*C1*C10*C2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C3 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4)*C8*C9*L1 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8*C9*L2)*L3 + (512*I*pi**9*C10*C2*C4*C8*C9*L2 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4*C8*C9*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8*C9*L3)*L4 + (((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C5 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6)*C8*C9*L1 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8*C9*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8*C9*L3 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8*C9*L4)*L5 + (512*I*pi**9*C10*C2*C6*C8*C9*L2 + 512*I*pi**9*C10*C4*C6*C8*C9*L4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6*C8*C9*L1 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8*C9*L3 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8*C9*L5)*L6 + (512*I*pi**9*C10*C6*C7*C8*C9*L6 + ((512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C6 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C10*C2)*C7)*C8*C9*L1 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8*C9*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8*C9*L3 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8*C9*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8*C9*L5)*L7)*L8)*L9)*ZL*ZS + ((512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*L1*L10*L2*L3 + ((512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*L1*L10 + (512*I*pi**9*C2*C3*C4*C5 + 512*I*pi**9*C2*C3*C4*C6)*L1*L2)*L3)*L4)*L5 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6*L1*L10*L2*L3 + (512*I*pi**9*C10*C2*C4*C6*L1*L10*L2 + (512*I*pi**9*C2*C3*C4*C6*L1*L2 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6*L1*L10)*L3)*L4 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6*L1*L10 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5)*C6*L1*L2)*L3 + (512*I*pi**9*C10*C4*C5*C6*L1*L10 + 512*I*pi**9*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5*C6*L1*L3)*L4)*L5)*L6 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*L1*L10*L2*L3 + ((512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + 512*I*pi**9*C10*C2*C4*C8)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*L1*L10 + (512*I*pi**9*C2*C3*C4*C6 + 512*I*pi**9*C2*C3*C4*C7 + 512*I*pi**9*C2*C3*C4*C8)*L1*L2)*L3)*L4 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*L1*L10*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*L1*L10 + ((512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5)*C6 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C7 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C8)*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*L1*L10 + (512*I*pi**9*C2*C4*C5*C6 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C7 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C8)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C8)*L1*L3)*L4)*L5 + ((512*I*pi**9*C10*C2*C6*C7 + 512*I*pi**9*C10*C2*C6*C8)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C7 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C8)*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C6*C7 + 512*I*pi**9*C10*C4*C6*C8)*L1*L10 + (512*I*pi**9*C2*C4*C6*C7 + 512*I*pi**9*C2*C4*C6*C8)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C7 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C8)*L1*L3)*L4 + (((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C7 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C8)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C8)*L1*L3 + (512*I*pi**9*C4*C5*C6*C7 + 512*I*pi**9*C4*C5*C6*C8)*L1*L4)*L5)*L6)*L7 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8*L1*L10*L2*L3 + (512*I*pi**9*C10*C2*C4*C8*L1*L10*L2 + (512*I*pi**9*C2*C3*C4*C8*L1*L2 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8*L1*L10)*L3)*L4 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8*L1*L10 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C8*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8*L1*L10 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C8*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C8*L1*L3)*L4)*L5 + (512*I*pi**9*C10*C2*C6*C8*L1*L10*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8*L1*L10 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C8*L1*L2)*L3 + (512*I*pi**9*C10*C4*C6*C8*L1*L10 + 512*I*pi**9*C2*C4*C6*C8*L1*L2 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C8*L1*L3)*L4 + (512*I*pi**9*C4*C5*C6*C8*L1*L4 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8*L1*L10 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C8*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C8*L1*L3)*L5)*L6 + ((512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C7)*C8*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8*L1*L10 + (512*I*pi**9*C2*C4*C6 + 512*I*pi**9*C2*C4*C7)*C8*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C7)*C8*L1*L3)*L4 + (((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C7)*C8*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C7)*C8*L1*L3 + (512*I*pi**9*C4*C5*C6 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C7)*C8*L1*L4)*L5 + (512*I*pi**9*C10*C6*C7*C8*L1*L10 + 512*I*pi**9*C2*C6*C7*C8*L1*L2 + 512*I*pi**9*C4*C6*C7*C8*L1*L4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C7*C8*L1*L3 + (512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C7*C8*L1*L5)*L6)*L7)*L8 + (((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C9)*L1*L10*L2*L3 + ((512*I*pi**9*C10*C2*C4*C8 + 512*I*pi**9*C10*C2*C4*C9)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C9)*L1*L10 + (512*I*pi**9*C10*C2*C3*C4 + 512*I*pi**9*C2*C3*C4*C8 + 512*I*pi**9*C2*C3*C4*C9)*L1*L2)*L3)*L4 + (((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C9)*L1*L10*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C3*C4 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C5 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C8 + (512*I*pi**9*C2*C3*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C5 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6)*C9)*L1*L2)*L3 + (((512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C4*C5 + 512*I*pi**9*C10*C2*C4*C6 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C8 + (512*I*pi**9*C2*C4*C5 + 512*I*pi**9*C2*C4*C6)*C9)*L1*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6)*C9)*L1*L3)*L4)*L5 + ((512*I*pi**9*C10*C2*C6*C8 + 512*I*pi**9*C10*C2*C6*C9)*L1*L10*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C9)*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C8 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6*C9 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6)*L1*L2)*L3 + ((512*I*pi**9*C10*C4*C6*C8 + 512*I*pi**9*C10*C4*C6*C9)*L1*L10 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C2*C4*C6*C8 + 512*I*pi**9*C2*C4*C6*C9)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C8 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6*C9 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6)*L1*L3)*L4 + (((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C9)*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C8 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6*C9 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6*C9 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6)*L1*L3 + (512*I*pi**9*C10*C4*C5*C6 + 512*I*pi**9*C4*C5*C6*C8 + 512*I*pi**9*C4*C5*C6*C9)*L1*L4)*L5)*L6 + (((512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7 + 512*I*pi**9*C10*C2*C8)*C9)*L1*L10*L2 + ((((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C8)*C9)*L1*L10 + ((512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C6 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C7 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C7)*C8 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C6 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C7 + (512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C8)*C9)*L1*L2)*L3 + (((512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7 + 512*I*pi**9*C10*C4*C8)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C4*C6 + 512*I*pi**9*C10*C2*C4*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C2*C4*C6 + 512*I*pi**9*C2*C4*C7)*C8 + (512*I*pi**9*C2*C4*C6 + 512*I*pi**9*C2*C4*C7 + 512*I*pi**9*C2*C4*C8)*C9)*L1*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4)*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C7 + (512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C8)*C9)*L1*L3)*L4 + ((((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C8)*C9)*L1*L10 + ((512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5)*C6 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C7 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C7)*C8 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5)*C6 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C7 + (512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C8)*C9)*L1*L2 + (((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5)*C6 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C7 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + (512*I*pi**9*C10 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C7)*C8 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5)*C6 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C8)*C9)*L1*L3 + (512*I*pi**9*C10*C4*C5*C6 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C7 + (512*I*pi**9*C10*C4*C5 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C4*C5)*C6 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C7)*C8 + (512*I*pi**9*C4*C5*C6 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C7 + (512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C8)*C9)*L1*L4)*L5 + ((512*I*pi**9*C10*C6*C7*C8 + (512*I*pi**9*C10*C6*C7 + 512*I*pi**9*C10*C6*C8)*C9)*L1*L10 + (512*I*pi**9*C10*C2*C6*C7 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C2*C6*C7)*C8 + (512*I*pi**9*C2*C6*C7 + 512*I*pi**9*C2*C6*C8)*C9)*L1*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C7 + ((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C7 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8 + ((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C7 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C8)*C9)*L1*L3 + (512*I*pi**9*C10*C4*C6*C7 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C4*C6*C7)*C8 + (512*I*pi**9*C4*C6*C7 + 512*I*pi**9*C4*C6*C8)*C9)*L1*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C7 + ((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C7 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6)*C8 + ((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C7 + (512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C8)*C9)*L1*L5)*L6)*L7 + (512*I*pi**9*C10*C2*C8*C9*L1*L10*L2 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C8*C9*L1*L10 + ((512*I*pi**9*C2*C3 + 512*I*pi**9*C2*C4)*C8*C9 + (512*I*pi**9*C10*C2*C3 + 512*I*pi**9*C10*C2*C4)*C8)*L1*L2)*L3 + (512*I*pi**9*C10*C4*C8*C9*L1*L10 + (512*I*pi**9*C10*C2*C4*C8 + 512*I*pi**9*C2*C4*C8*C9)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C8*C9 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4*C8)*L1*L3)*L4 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C8*C9*L1*L10 + ((512*I*pi**9*C2*C4 + 512*I*pi**9*C2*C5 + 512*I*pi**9*C2*C6)*C8*C9 + (512*I*pi**9*C10*C2*C4 + 512*I*pi**9*C10*C2*C5 + 512*I*pi**9*C10*C2*C6)*C8)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6)*C8*C9 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3)*C4 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C5 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6)*C8)*L1*L3 + ((512*I*pi**9*C4*C5 + 512*I*pi**9*C4*C6)*C8*C9 + (512*I*pi**9*C10*C4*C5 + 512*I*pi**9*C10*C4*C6)*C8)*L1*L4)*L5 + (512*I*pi**9*C10*C6*C8*C9*L1*L10 + (512*I*pi**9*C10*C2*C6*C8 + 512*I*pi**9*C2*C6*C8*C9)*L1*L2 + ((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6*C8*C9 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6*C8)*L1*L3 + (512*I*pi**9*C10*C4*C6*C8 + 512*I*pi**9*C4*C6*C8*C9)*L1*L4 + ((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6*C8*C9 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6*C8)*L1*L5)*L6 + ((512*I*pi**9*C10*C6 + 512*I*pi**9*C10*C7)*C8*C9*L1*L10 + ((512*I*pi**9*C2*C6 + 512*I*pi**9*C2*C7)*C8*C9 + (512*I*pi**9*C10*C2*C6 + 512*I*pi**9*C10*C2*C7)*C8)*L1*L2 + (((512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C6 + (512*I*pi**9*C2 + 512*I*pi**9*C3 + 512*I*pi**9*C4)*C7)*C8*C9 + ((512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C6 + (512*I*pi**9*C10*C2 + 512*I*pi**9*C10*C3 + 512*I*pi**9*C10*C4)*C7)*C8)*L1*L3 + ((512*I*pi**9*C4*C6 + 512*I*pi**9*C4*C7)*C8*C9 + (512*I*pi**9*C10*C4*C6 + 512*I*pi**9*C10*C4*C7)*C8)*L1*L4 + (((512*I*pi**9*C4 + 512*I*pi**9*C5)*C6 + (512*I*pi**9*C4 + 512*I*pi**9*C5 + 512*I*pi**9*C6)*C7)*C8*C9 + ((512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5)*C6 + (512*I*pi**9*C10*C4 + 512*I*pi**9*C10*C5 + 512*I*pi**9*C10*C6)*C7)*C8)*L1*L5 + (512*I*pi**9*C10*C6*C7*C8 + 512*I*pi**9*C6*C7*C8*C9)*L1*L6)*L7)*L8)*L9)*freq**9 + 256*((pi**8*C10*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L1*L2*L3 + ((pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L1*L3)*L4)*L5 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6*L1*L2*L3 + (pi**8*C10*C2*C4*C6*L1*L2 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6*L1*L3)*L4 + (pi**8*C10*C4*C5*C6*L1*L4 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6*L1*L3)*L5)*L6 + (((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L1*L2*L3 + ((pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + pi**8*C10*C2*C4*C8)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L1*L3)*L4 + (((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L1*L3 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L1*L4)*L5 + ((pi**8*C10*C2*C6*C7 + pi**8*C10*C2*C6*C8)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L1*L3 + (pi**8*C10*C4*C6*C7 + pi**8*C10*C4*C6*C8)*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L1*L5)*L6)*L7 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8*L1*L2*L3 + (pi**8*C10*C2*C4*C8*L1*L2 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8*L1*L3)*L4 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8*L1*L3 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8*L1*L4)*L5 + (pi**8*C10*C2*C6*C8*L1*L2 + pi**8*C10*C4*C6*C8*L1*L4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8*L1*L3 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8*L1*L5)*L6 + (pi**8*C10*C6*C7*C8*L1*L6 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8*L1*L3 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8*L1*L5)*L7)*L8 + (((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C9)*L1*L2*L3 + ((pi**8*C10*C2*C4*C8 + pi**8*C10*C2*C4*C9)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C8 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C9)*L1*L3)*L4 + (((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C9)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C9)*L1*L3 + ((pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C9)*L1*L4)*L5 + ((pi**8*C10*C2*C6*C8 + pi**8*C10*C2*C6*C9)*L1*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C9)*L1*L3 + (pi**8*C10*C4*C6*C8 + pi**8*C10*C4*C6*C9)*L1*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C8 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C9)*L1*L5)*L6 + (((pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7 + pi**8*C10*C2*C8)*C9)*L1*L2 + (((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8)*C9)*L1*L3 + ((pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7 + pi**8*C10*C4*C8)*C9)*L1*L4 + (((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8)*C9)*L1*L5 + (pi**8*C10*C6*C7*C8 + (pi**8*C10*C6*C7 + pi**8*C10*C6*C8)*C9)*L1*L6)*L7 + (pi**8*C10*C2*C8*C9*L1*L2 + pi**8*C10*C4*C8*C9*L1*L4 + pi**8*C10*C6*C8*C9*L1*L6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8*C9*L1*L3 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8*C9*L1*L5 + (pi**8*C10*C6 + pi**8*C10*C7)*C8*C9*L1*L7)*L8)*L9)*ZL + ((pi**8*C1*C10*C2*C3 + pi**8*C1*C10*C2*C4)*L1*L10*L2*L3 + (pi**8*C1*C10*C2*C4*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4*L1*L10 + (pi**8*C1*C2*C3*C4*L1 + pi**8*C10*C2*C3*C4*L10)*L2)*L3)*L4 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C10*C2*C5 + pi**8*C1*C10*C2*C6)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C5 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6)*L1*L10 + ((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6)*L1 + (pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6)*L1*L10 + ((pi**8*C1*C2*C4*C5 + pi**8*C1*C2*C4*C6)*L1 + (pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L10 + (pi**8*C2*C3*C4*C5 + pi**8*C2*C3*C4*C6)*L2)*L3)*L4)*L5 + (pi**8*C1*C10*C2*C6*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6*L1*L10 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6*L1 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6*L10)*L2)*L3 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6*L1*L10 + (pi**8*C1*C2*C4*C6*L1 + pi**8*C10*C2*C4*C6*L10)*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6*L1 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6*L10)*L3)*L4 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6*L1*L10 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6*L1 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5)*C6*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6*L10 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5)*C6*L2)*L3 + (pi**8*C10*C4*C5*C6*L10 + pi**8*C2*C4*C5*C6*L2 + (pi**8*C1 + pi**8*C2)*C4*C5*C6*L1 + (pi**8*C2 + pi**8*C3)*C4*C5*C6*L3)*L4)*L5)*L6 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C10*C2*C7 + pi**8*C1*C10*C2*C8)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C7 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8)*L1*L10 + (((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C6 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C7 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8)*L1 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C8)*L1*L10 + ((pi**8*C1*C2*C4*C6 + pi**8*C1*C2*C4*C7 + pi**8*C1*C2*C4*C8)*L1 + (pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + pi**8*C10*C2*C4*C8)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L10 + (pi**8*C2*C3*C4*C6 + pi**8*C2*C3*C4*C7 + pi**8*C2*C3*C4*C8)*L2)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8)*L1*L10 + (((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C7 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8)*L1 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L10)*L2 + ((((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5)*C6 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C7 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L10 + ((pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5)*C6 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C7 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C5*C6 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8)*L1 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L10 + (pi**8*C2*C4*C5*C6 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C7 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C5*C6 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C7 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8)*L3)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C8)*L1*L10 + ((pi**8*C1*C2*C6*C7 + pi**8*C1*C2*C6*C8)*L1 + (pi**8*C10*C2*C6*C7 + pi**8*C10*C2*C6*C8)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6*C7 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C8)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6*C7 + (pi**8*C1 + pi**8*C2)*C4*C6*C8)*L1 + (pi**8*C10*C4*C6*C7 + pi**8*C10*C4*C6*C8)*L10 + (pi**8*C2*C4*C6*C7 + pi**8*C2*C4*C6*C8)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6*C7 + (pi**8*C2 + pi**8*C3)*C4*C6*C8)*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C7 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8)*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6*C7 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C8)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C7 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8)*L3 + (pi**8*C4*C5*C6*C7 + pi**8*C4*C5*C6*C8)*L4)*L5)*L6)*L7 + (pi**8*C1*C10*C2*C8*L1*L10*L2 + ((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8*L1*L10 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8*L1 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8*L10)*L2)*L3 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4*C8*L1*L10 + (pi**8*C1*C2*C4*C8*L1 + pi**8*C10*C2*C4*C8*L10)*L2 + (pi**8*C2*C3*C4*C8*L2 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8*L1 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8*L10)*L3)*L4 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8*L1*L10 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8*L1 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8*L10 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8*L1 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8*L10 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8*L3)*L4)*L5 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6*C8*L1*L10 + (pi**8*C1*C2*C6*C8*L1 + pi**8*C10*C2*C6*C8*L10)*L2 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8*L1 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8*L10 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C8*L2)*L3 + (pi**8*C10*C4*C6*C8*L10 + pi**8*C2*C4*C6*C8*L2 + (pi**8*C1 + pi**8*C2)*C4*C6*C8*L1 + (pi**8*C2 + pi**8*C3)*C4*C6*C8*L3)*L4 + (pi**8*C4*C5*C6*C8*L4 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8*L1 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8*L10 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8*L3)*L5)*L6 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8*L1*L10 + ((pi**8*C1*C2*C6 + pi**8*C1*C2*C7)*C8*L1 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7)*C8*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7)*C8*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7)*C8*L1 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8*L10 + (pi**8*C2*C4*C6 + pi**8*C2*C4*C7)*C8*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7)*C8*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7)*C8*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7)*C8*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7)*C8*L3 + (pi**8*C4*C5*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7)*C8*L4)*L5 + (pi**8*C10*C6*C7*C8*L10 + pi**8*C2*C6*C7*C8*L2 + pi**8*C4*C6*C7*C8*L4 + (pi**8*C1 + pi**8*C2)*C6*C7*C8*L1 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7*C8*L3 + (pi**8*C4 + pi**8*C5)*C6*C7*C8*L5)*L6)*L7)*L8 + ((pi**8*C1*C10*C2*C8 + pi**8*C1*C10*C2*C9)*L1*L10*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C3 + pi**8*C1*C10*C2*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C8 + (pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C9)*L1 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C9)*L1*L10 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C2*C4*C8 + pi**8*C1*C2*C4*C9)*L1 + (pi**8*C10*C2*C4*C8 + pi**8*C10*C2*C4*C9)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C8 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C8 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C9)*L10 + (pi**8*C10*C2*C3*C4 + pi**8*C2*C3*C4*C8 + pi**8*C2*C3*C4*C9)*L2)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C4 + pi**8*C1*C10*C2*C5 + pi**8*C1*C10*C2*C6 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C8 + (pi**8*C1*C2*C4 + pi**8*C1*C2*C5 + pi**8*C1*C2*C6)*C9)*L1 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C9)*L10)*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C4 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C5 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C8 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C5 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6)*C9)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C9)*L10 + (pi**8*C10*C2*C3*C4 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C5 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C8 + (pi**8*C2*C3*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C5 + (pi**8*C2*C3 + pi**8*C2*C4)*C6)*C9)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C8 + ((pi**8*C1 + pi**8*C2)*C4*C5 + (pi**8*C1 + pi**8*C2)*C4*C6)*C9)*L1 + ((pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C9)*L10 + (pi**8*C10*C2*C4*C5 + pi**8*C10*C2*C4*C6 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C8 + (pi**8*C2*C4*C5 + pi**8*C2*C4*C6)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C5 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C8 + ((pi**8*C2 + pi**8*C3)*C4*C5 + (pi**8*C2 + pi**8*C3)*C4*C6)*C9)*L3)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C9)*L1*L10 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C2*C6*C8 + pi**8*C1*C2*C6*C9)*L1 + (pi**8*C10*C2*C6*C8 + pi**8*C10*C2*C6*C9)*L10)*L2 + (((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C8 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6)*L1 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C9)*L10 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6*C8 + (pi**8*C2*C3 + pi**8*C2*C4)*C6*C9 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6)*L2)*L3 + (((pi**8*C1 + pi**8*C2)*C4*C6*C8 + (pi**8*C1 + pi**8*C2)*C4*C6*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C6)*L1 + (pi**8*C10*C4*C6*C8 + pi**8*C10*C4*C6*C9)*L10 + (pi**8*C10*C2*C4*C6 + pi**8*C2*C4*C6*C8 + pi**8*C2*C4*C6*C9)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C6*C8 + (pi**8*C2 + pi**8*C3)*C4*C6*C9 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C6)*L3)*L4 + ((((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C8 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6)*L1 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C8 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C9)*L10 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6*C8 + (pi**8*C2*C4 + pi**8*C2*C5)*C6*C9 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C8 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6*C9 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6)*L3 + (pi**8*C10*C4*C5*C6 + pi**8*C4*C5*C6*C8 + pi**8*C4*C5*C6*C9)*L4)*L5)*L6 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C8)*C9)*L1*L10 + ((pi**8*C1*C10*C2*C6 + pi**8*C1*C10*C2*C7 + (pi**8*C1*C10*C2 + pi**8*C1*C2*C6 + pi**8*C1*C2*C7)*C8 + (pi**8*C1*C2*C6 + pi**8*C1*C2*C7 + pi**8*C1*C2*C8)*C9)*L1 + ((pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7 + pi**8*C10*C2*C8)*C9)*L10)*L2 + (((pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C6 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C7 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7)*C8 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C6 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C7 + (pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C8)*C9)*L1 + (((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8)*C9)*L10 + ((pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C6 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C7 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4 + (pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7)*C8 + ((pi**8*C2*C3 + pi**8*C2*C4)*C6 + (pi**8*C2*C3 + pi**8*C2*C4)*C7 + (pi**8*C2*C3 + pi**8*C2*C4)*C8)*C9)*L2)*L3 + (((pi**8*C1*C10 + pi**8*C10*C2)*C4*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C7 + ((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8 + ((pi**8*C1 + pi**8*C2)*C4*C6 + (pi**8*C1 + pi**8*C2)*C4*C7 + (pi**8*C1 + pi**8*C2)*C4*C8)*C9)*L1 + ((pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7 + pi**8*C10*C4*C8)*C9)*L10 + (pi**8*C10*C2*C4*C6 + pi**8*C10*C2*C4*C7 + (pi**8*C10*C2*C4 + pi**8*C2*C4*C6 + pi**8*C2*C4*C7)*C8 + (pi**8*C2*C4*C6 + pi**8*C2*C4*C7 + pi**8*C2*C4*C8)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4*C6 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C7 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7 + (pi**8*C10*C2 + pi**8*C10*C3)*C4)*C8 + ((pi**8*C2 + pi**8*C3)*C4*C6 + (pi**8*C2 + pi**8*C3)*C4*C7 + (pi**8*C2 + pi**8*C3)*C4*C8)*C9)*L3)*L4 + ((((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + (pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7)*C8 + (((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C8)*C9)*L1 + (((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8)*C9)*L10 + ((pi**8*C10*C2*C4 + pi**8*C10*C2*C5)*C6 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C7 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + (pi**8*C10*C2 + pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7)*C8 + ((pi**8*C2*C4 + pi**8*C2*C5)*C6 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C7 + (pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C8)*C9)*L2 + (((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5)*C6 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C7 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + (pi**8*C10 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7)*C8 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5)*C6 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C7 + ((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C8)*C9)*L3 + (pi**8*C10*C4*C5*C6 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C7 + (pi**8*C10*C4*C5 + (pi**8*C10*C4 + pi**8*C4*C5)*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7)*C8 + (pi**8*C4*C5*C6 + (pi**8*C4*C5 + pi**8*C4*C6)*C7 + (pi**8*C4*C5 + pi**8*C4*C6)*C8)*C9)*L4)*L5 + (((pi**8*C1*C10 + pi**8*C10*C2)*C6*C7 + ((pi**8*C1 + pi**8*C2)*C6*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8 + ((pi**8*C1 + pi**8*C2)*C6*C7 + (pi**8*C1 + pi**8*C2)*C6*C8)*C9)*L1 + (pi**8*C10*C6*C7*C8 + (pi**8*C10*C6*C7 + pi**8*C10*C6*C8)*C9)*L10 + (pi**8*C10*C2*C6*C7 + (pi**8*C10*C2*C6 + pi**8*C2*C6*C7)*C8 + (pi**8*C2*C6*C7 + pi**8*C2*C6*C8)*C9)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C7 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C7 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C8)*C9)*L3 + (pi**8*C10*C4*C6*C7 + (pi**8*C10*C4*C6 + pi**8*C4*C6*C7)*C8 + (pi**8*C4*C6*C7 + pi**8*C4*C6*C8)*C9)*L4 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6*C7 + ((pi**8*C4 + pi**8*C5)*C6*C7 + (pi**8*C10*C4 + pi**8*C10*C5)*C6)*C8 + ((pi**8*C4 + pi**8*C5)*C6*C7 + (pi**8*C4 + pi**8*C5)*C6*C8)*C9)*L5)*L6)*L7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C8*C9*L1*L10 + (pi**8*C10*C2*C8*C9*L10 + (pi**8*C1*C10*C2*C8 + pi**8*C1*C2*C8*C9)*L1)*L2 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C8*C9*L10 + ((pi**8*C1*C2 + (pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2)*C4)*C8*C9 + (pi**8*C1*C10*C2 + (pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2)*C4)*C8)*L1 + ((pi**8*C2*C3 + pi**8*C2*C4)*C8*C9 + (pi**8*C10*C2*C3 + pi**8*C10*C2*C4)*C8)*L2)*L3 + (pi**8*C10*C4*C8*C9*L10 + ((pi**8*C1 + pi**8*C2)*C4*C8*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C4*C8)*L1 + (pi**8*C10*C2*C4*C8 + pi**8*C2*C4*C8*C9)*L2 + ((pi**8*C2 + pi**8*C3)*C4*C8*C9 + (pi**8*C10*C2 + pi**8*C10*C3)*C4*C8)*L3)*L4 + ((pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C8*C9*L10 + (((pi**8*C1 + pi**8*C2)*C4 + (pi**8*C1 + pi**8*C2)*C5 + (pi**8*C1 + pi**8*C2)*C6)*C8*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C6)*C8)*L1 + ((pi**8*C2*C4 + pi**8*C2*C5 + pi**8*C2*C6)*C8*C9 + (pi**8*C10*C2*C4 + pi**8*C10*C2*C5 + pi**8*C10*C2*C6)*C8)*L2 + (((pi**8*C2 + pi**8*C3)*C4 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C6)*C8*C9 + ((pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6)*C8)*L3 + ((pi**8*C4*C5 + pi**8*C4*C6)*C8*C9 + (pi**8*C10*C4*C5 + pi**8*C10*C4*C6)*C8)*L4)*L5 + (pi**8*C10*C6*C8*C9*L10 + ((pi**8*C1 + pi**8*C2)*C6*C8*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C6*C8)*L1 + (pi**8*C10*C2*C6*C8 + pi**8*C2*C6*C8*C9)*L2 + ((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6*C8*C9 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6*C8)*L3 + (pi**8*C10*C4*C6*C8 + pi**8*C4*C6*C8*C9)*L4 + ((pi**8*C4 + pi**8*C5)*C6*C8*C9 + (pi**8*C10*C4 + pi**8*C10*C5)*C6*C8)*L5)*L6 + ((pi**8*C10*C6 + pi**8*C10*C7)*C8*C9*L10 + (((pi**8*C1 + pi**8*C2)*C6 + (pi**8*C1 + pi**8*C2)*C7)*C8*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C7)*C8)*L1 + ((pi**8*C2*C6 + pi**8*C2*C7)*C8*C9 + (pi**8*C10*C2*C6 + pi**8*C10*C2*C7)*C8)*L2 + (((pi**8*C2 + pi**8*C3 + pi**8*C4)*C6 + (pi**8*C2 + pi**8*C3 + pi**8*C4)*C7)*C8*C9 + ((pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C6 + (pi**8*C10*C2 + pi**8*C10*C3 + pi**8*C10*C4)*C7)*C8)*L3 + ((pi**8*C4*C6 + pi**8*C4*C7)*C8*C9 + (pi**8*C10*C4*C6 + pi**8*C10*C4*C7)*C8)*L4 + (((pi**8*C4 + pi**8*C5)*C6 + (pi**8*C4 + pi**8*C5 + pi**8*C6)*C7)*C8*C9 + ((pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C4 + pi**8*C10*C5 + pi**8*C10*C6)*C7)*C8)*L5 + (pi**8*C10*C6*C7*C8 + pi**8*C6*C7*C8*C9)*L6)*L7)*L8)*L9)*ZS)*freq**8 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*L1*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 - 128*I*pi**7*C1*C10*C2*C4)*L1*L2*L3 + (-128*I*pi**7*C1*C10*C2*C4*L1*L2 + (-128*I*pi**7*C10*C2*C3*C4*L2 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3)*C4*L1)*L3)*L4 + ((-128*I*pi**7*C1*C10*C2*C4 - 128*I*pi**7*C1*C10*C2*C5 - 128*I*pi**7*C1*C10*C2*C6)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3)*C4 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C5 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6)*L1 + (-128*I*pi**7*C10*C2*C3*C4 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C5 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6)*L1 + (-128*I*pi**7*C10*C2*C4*C5 - 128*I*pi**7*C10*C2*C4*C6)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6)*L3)*L4)*L5 + (-128*I*pi**7*C1*C10*C2*C6*L1*L2 + ((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6*L1 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6*L2)*L3 + (-128*I*pi**7*C10*C2*C4*C6*L2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6*L3)*L4 + (-128*I*pi**7*C10*C4*C5*C6*L4 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5)*C6*L1 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5)*C6*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5)*C6*L3)*L5)*L6 + ((-128*I*pi**7*C1*C10*C2*C6 - 128*I*pi**7*C1*C10*C2*C7 - 128*I*pi**7*C1*C10*C2*C8)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C6 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C7 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8)*L1 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C6 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C7 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8)*L1 + (-128*I*pi**7*C10*C2*C4*C6 - 128*I*pi**7*C10*C2*C4*C7 - 128*I*pi**7*C10*C2*C4*C8)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8)*L3)*L4 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5)*C6 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C7 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8)*L1 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5)*C6 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C7 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5)*C6 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C7 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8)*L3 + (-128*I*pi**7*C10*C4*C5*C6 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C7 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8)*L4)*L5 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8)*L1 + (-128*I*pi**7*C10*C2*C6*C7 - 128*I*pi**7*C10*C2*C6*C8)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8)*L3 + (-128*I*pi**7*C10*C4*C6*C7 - 128*I*pi**7*C10*C4*C6*C8)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8)*L5)*L6)*L7 + (-128*I*pi**7*C1*C10*C2*C8*L1*L2 + ((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8*L1 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8*L2)*L3 + (-128*I*pi**7*C10*C2*C4*C8*L2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8*L3)*L4 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8*L1 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8*L3 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8*L4)*L5 + (-128*I*pi**7*C10*C2*C6*C8*L2 - 128*I*pi**7*C10*C4*C6*C8*L4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8*L3 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8*L5)*L6 + (-128*I*pi**7*C10*C6*C7*C8*L6 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7)*C8*L1 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7)*C8*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7)*C8*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7)*C8*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7)*C8*L5)*L7)*L8 + ((-128*I*pi**7*C1*C10*C2*C8 - 128*I*pi**7*C1*C10*C2*C9)*L1*L2 + (((-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C8 + (-128*I*pi**7*C1*C10*C2 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C3 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4)*C9)*L1 + ((-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C8 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4)*C9)*L2)*L3 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C8 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4*C9)*L1 + (-128*I*pi**7*C10*C2*C4*C8 - 128*I*pi**7*C10*C2*C4*C9)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*C9)*L3)*L4 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C8 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C4 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C5 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6)*C9)*L1 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C8 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*C9)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C8 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*C9)*L3 + ((-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C8 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*C9)*L4)*L5 + (((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C8 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6*C9)*L1 + (-128*I*pi**7*C10*C2*C6*C8 - 128*I*pi**7*C10*C2*C6*C9)*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*C9)*L3 + (-128*I*pi**7*C10*C4*C6*C8 - 128*I*pi**7*C10*C4*C6*C9)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C8 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*C9)*L5)*L6 + ((((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7)*C8 + ((-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C7 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C8)*C9)*L1 + ((-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7)*C8 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 - 128*I*pi**7*C10*C2*C8)*C9)*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7)*C8 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*C9)*L3 + ((-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7)*C8 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 - 128*I*pi**7*C10*C4*C8)*C9)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7)*C8 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*C9)*L5 + (-128*I*pi**7*C10*C6*C7*C8 + (-128*I*pi**7*C10*C6*C7 - 128*I*pi**7*C10*C6*C8)*C9)*L6)*L7 + (-128*I*pi**7*C10*C2*C8*C9*L2 - 128*I*pi**7*C10*C4*C8*C9*L4 - 128*I*pi**7*C10*C6*C8*C9*L6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C10*C2)*C8*C9*L1 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8*C9*L3 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8*C9*L5 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8*C9*L7)*L8)*L9)*ZL*ZS + (-128*I*pi**7*C10*C2*C4*L1*L10*L2 + (-128*I*pi**7*C2*C3*C4*L1*L2 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4*L1*L10)*L3)*L4 + ((-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6)*L1*L10*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*L1*L10 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C5 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C6)*L1*L2)*L3 + ((-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6)*L1*L10 + (-128*I*pi**7*C2*C4*C5 - 128*I*pi**7*C2*C4*C6)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6)*L1*L3)*L4)*L5 + (-128*I*pi**7*C10*C2*C6*L1*L10*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6*L1*L10 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C6*L1*L2)*L3 + (-128*I*pi**7*C10*C4*C6*L1*L10 - 128*I*pi**7*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6*L1*L3)*L4 + (-128*I*pi**7*C4*C5*C6*L1*L4 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6*L1*L10 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5)*C6*L1*L3)*L5)*L6 + ((-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 - 128*I*pi**7*C10*C2*C8)*L1*L10*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*L1*L10 + ((-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C6 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C7 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C8)*L1*L2)*L3 + ((-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 - 128*I*pi**7*C10*C4*C8)*L1*L10 + (-128*I*pi**7*C2*C4*C6 - 128*I*pi**7*C2*C4*C7 - 128*I*pi**7*C2*C4*C8)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C7 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C8)*L1*L3)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*L1*L10 + ((-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C7 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C8)*L1*L2 + (((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5)*C6 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C7 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C8)*L1*L3 + (-128*I*pi**7*C4*C5*C6 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C7 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C8)*L1*L4)*L5 + ((-128*I*pi**7*C10*C6*C7 - 128*I*pi**7*C10*C6*C8)*L1*L10 + (-128*I*pi**7*C2*C6*C7 - 128*I*pi**7*C2*C6*C8)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C7 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C8)*L1*L3 + (-128*I*pi**7*C4*C6*C7 - 128*I*pi**7*C4*C6*C8)*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C7 + (-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C8)*L1*L5)*L6)*L7 + (-128*I*pi**7*C10*C2*C8*L1*L10*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8*L1*L10 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C8*L1*L2)*L3 + (-128*I*pi**7*C10*C4*C8*L1*L10 - 128*I*pi**7*C2*C4*C8*L1*L2 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C8*L1*L3)*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8*L1*L10 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C8*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C8*L1*L3 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C8*L1*L4)*L5 + (-128*I*pi**7*C10*C6*C8*L1*L10 - 128*I*pi**7*C2*C6*C8*L1*L2 - 128*I*pi**7*C4*C6*C8*L1*L4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C8*L1*L3 + (-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C8*L1*L5)*L6 + (-128*I*pi**7*C6*C7*C8*L1*L6 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8*L1*L10 + (-128*I*pi**7*C2*C6 - 128*I*pi**7*C2*C7)*C8*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C7)*C8*L1*L3 + (-128*I*pi**7*C4*C6 - 128*I*pi**7*C4*C7)*C8*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C7)*C8*L1*L5)*L7)*L8 + ((-128*I*pi**7*C10*C2*C8 - 128*I*pi**7*C10*C2*C9)*L1*L10*L2 + (((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C3 - 128*I*pi**7*C10*C2*C4 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C8 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4)*C9)*L1*L2)*L3 + ((-128*I*pi**7*C10*C4*C8 - 128*I*pi**7*C10*C4*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C2*C4*C8 - 128*I*pi**7*C2*C4*C9)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C8 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C9 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4)*L1*L3)*L4 + (((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C4 - 128*I*pi**7*C10*C2*C5 - 128*I*pi**7*C10*C2*C6 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C8 + (-128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5 - 128*I*pi**7*C2*C6)*C9)*L1*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3)*C4 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C5 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C8 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6)*C9)*L1*L3 + (-128*I*pi**7*C10*C4*C5 - 128*I*pi**7*C10*C4*C6 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C8 + (-128*I*pi**7*C4*C5 - 128*I*pi**7*C4*C6)*C9)*L1*L4)*L5 + ((-128*I*pi**7*C10*C6*C8 - 128*I*pi**7*C10*C6*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C2*C6*C8 - 128*I*pi**7*C2*C6*C9)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C8 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6*C9 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6)*L1*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C4*C6*C8 - 128*I*pi**7*C4*C6*C9)*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C8 + (-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6*C9 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6)*L1*L5)*L6 + (((-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7 - 128*I*pi**7*C10*C8)*C9)*L1*L10 + (-128*I*pi**7*C10*C2*C6 - 128*I*pi**7*C10*C2*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C2*C6 - 128*I*pi**7*C2*C7)*C8 + (-128*I*pi**7*C2*C6 - 128*I*pi**7*C2*C7 - 128*I*pi**7*C2*C8)*C9)*L1*L2 + ((-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C6 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C7 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C7)*C8 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C6 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C7 + (-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C8)*C9)*L1*L3 + (-128*I*pi**7*C10*C4*C6 - 128*I*pi**7*C10*C4*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C4*C6 - 128*I*pi**7*C4*C7)*C8 + (-128*I*pi**7*C4*C6 - 128*I*pi**7*C4*C7 - 128*I*pi**7*C4*C8)*C9)*L1*L4 + ((-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5)*C6 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C7 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 + (-128*I*pi**7*C10 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C7)*C8 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C7 + (-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C8)*C9)*L1*L5 + (-128*I*pi**7*C10*C6*C7 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C6*C7)*C8 + (-128*I*pi**7*C6*C7 - 128*I*pi**7*C6*C8)*C9)*L1*L6)*L7 + (-128*I*pi**7*C10*C8*C9*L1*L10 + (-128*I*pi**7*C10*C2*C8 - 128*I*pi**7*C2*C8*C9)*L1*L2 + ((-128*I*pi**7*C2 - 128*I*pi**7*C3 - 128*I*pi**7*C4)*C8*C9 + (-128*I*pi**7*C10*C2 - 128*I*pi**7*C10*C3 - 128*I*pi**7*C10*C4)*C8)*L1*L3 + (-128*I*pi**7*C10*C4*C8 - 128*I*pi**7*C4*C8*C9)*L1*L4 + ((-128*I*pi**7*C4 - 128*I*pi**7*C5 - 128*I*pi**7*C6)*C8*C9 + (-128*I*pi**7*C10*C4 - 128*I*pi**7*C10*C5 - 128*I*pi**7*C10*C6)*C8)*L1*L5 + (-128*I*pi**7*C10*C6*C8 - 128*I*pi**7*C6*C8*C9)*L1*L6 + ((-128*I*pi**7*C6 - 128*I*pi**7*C7)*C8*C9 + (-128*I*pi**7*C10*C6 - 128*I*pi**7*C10*C7)*C8)*L1*L7)*L8)*L9)*freq**7 - 64*(((pi**6*C10*C2*C3 + pi**6*C10*C2*C4)*L1*L2*L3 + (pi**6*C10*C2*C4*L1*L2 + (pi**6*C10*C2 + pi**6*C10*C3)*C4*L1*L3)*L4 + ((pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L1*L3 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6)*L1*L4)*L5 + (pi**6*C10*C2*C6*L1*L2 + pi**6*C10*C4*C6*L1*L4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6*L1*L3 + (pi**6*C10*C4 + pi**6*C10*C5)*C6*L1*L5)*L6 + ((pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + pi**6*C10*C2*C8)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L1*L3 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + pi**6*C10*C4*C8)*L1*L4 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L1*L5 + (pi**6*C10*C6*C7 + pi**6*C10*C6*C8)*L1*L6)*L7 + (pi**6*C10*C2*C8*L1*L2 + pi**6*C10*C4*C8*L1*L4 + pi**6*C10*C6*C8*L1*L6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8*L1*L3 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8*L1*L5 + (pi**6*C10*C6 + pi**6*C10*C7)*C8*L1*L7)*L8 + (pi**6*C10*C8*C9*L1*L8 + (pi**6*C10*C2*C8 + pi**6*C10*C2*C9)*L1*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C9)*L1*L3 + (pi**6*C10*C4*C8 + pi**6*C10*C4*C9)*L1*L4 + ((pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C9)*L1*L5 + (pi**6*C10*C6*C8 + pi**6*C10*C6*C9)*L1*L6 + ((pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C6 + pi**6*C10*C7 + pi**6*C10*C8)*C9)*L1*L7)*L9)*ZL + (pi**6*C1*C10*C2*L1*L10*L2 + ((pi**6*C1*C10*C2 + (pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2)*C4)*L1*L10 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1 + (pi**6*C10*C2*C3 + pi**6*C10*C2*C4)*L10)*L2)*L3 + ((pi**6*C1*C10 + pi**6*C10*C2)*C4*L1*L10 + (pi**6*C1*C2*C4*L1 + pi**6*C10*C2*C4*L10)*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4*L1 + (pi**6*C10*C2 + pi**6*C10*C3)*C4*L10)*L3)*L4 + (((pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C10 + pi**6*C10*C2)*C5 + (pi**6*C1*C10 + pi**6*C10*C2)*C6)*L1*L10 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5 + pi**6*C1*C2*C6)*L1 + (pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6)*L10)*L2 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L10 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + pi**6*C2*C4)*C5 + (pi**6*C2*C3 + pi**6*C2*C4)*C6)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C5 + (pi**6*C1 + pi**6*C2)*C4*C6)*L1 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6)*L10 + (pi**6*C2*C4*C5 + pi**6*C2*C4*C6)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C5 + (pi**6*C2 + pi**6*C3)*C4*C6)*L3)*L4)*L5 + ((pi**6*C1*C10 + pi**6*C10*C2)*C6*L1*L10 + (pi**6*C1*C2*C6*L1 + pi**6*C10*C2*C6*L10)*L2 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6*L1 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6*L10 + (pi**6*C2*C3 + pi**6*C2*C4)*C6*L2)*L3 + (pi**6*C10*C4*C6*L10 + pi**6*C2*C4*C6*L2 + (pi**6*C1 + pi**6*C2)*C4*C6*L1 + (pi**6*C2 + pi**6*C3)*C4*C6*L3)*L4 + (pi**6*C4*C5*C6*L4 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5)*C6*L1 + (pi**6*C10*C4 + pi**6*C10*C5)*C6*L10 + (pi**6*C2*C4 + pi**6*C2*C5)*C6*L2 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6*L3)*L5)*L6 + (((pi**6*C1*C10 + pi**6*C10*C2)*C6 + (pi**6*C1*C10 + pi**6*C10*C2)*C7 + (pi**6*C1*C10 + pi**6*C10*C2)*C8)*L1*L10 + ((pi**6*C1*C2*C6 + pi**6*C1*C2*C7 + pi**6*C1*C2*C8)*L1 + (pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + pi**6*C10*C2*C8)*L10)*L2 + (((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C7 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L10 + ((pi**6*C2*C3 + pi**6*C2*C4)*C6 + (pi**6*C2*C3 + pi**6*C2*C4)*C7 + (pi**6*C2*C3 + pi**6*C2*C4)*C8)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C6 + (pi**6*C1 + pi**6*C2)*C4*C7 + (pi**6*C1 + pi**6*C2)*C4*C8)*L1 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + pi**6*C10*C4*C8)*L10 + (pi**6*C2*C4*C6 + pi**6*C2*C4*C7 + pi**6*C2*C4*C8)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C6 + (pi**6*C2 + pi**6*C3)*C4*C7 + (pi**6*C2 + pi**6*C3)*C4*C8)*L3)*L4 + ((((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C7 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8)*L1 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L10 + ((pi**6*C2*C4 + pi**6*C2*C5)*C6 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C7 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8)*L2 + (((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C7 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8)*L3 + (pi**6*C4*C5*C6 + (pi**6*C4*C5 + pi**6*C4*C6)*C7 + (pi**6*C4*C5 + pi**6*C4*C6)*C8)*L4)*L5 + (((pi**6*C1 + pi**6*C2)*C6*C7 + (pi**6*C1 + pi**6*C2)*C6*C8)*L1 + (pi**6*C10*C6*C7 + pi**6*C10*C6*C8)*L10 + (pi**6*C2*C6*C7 + pi**6*C2*C6*C8)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C7 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8)*L3 + (pi**6*C4*C6*C7 + pi**6*C4*C6*C8)*L4 + ((pi**6*C4 + pi**6*C5)*C6*C7 + (pi**6*C4 + pi**6*C5)*C6*C8)*L5)*L6)*L7 + ((pi**6*C1*C10 + pi**6*C10*C2)*C8*L1*L10 + (pi**6*C1*C2*C8*L1 + pi**6*C10*C2*C8*L10)*L2 + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8*L1 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8*L10 + (pi**6*C2*C3 + pi**6*C2*C4)*C8*L2)*L3 + (pi**6*C10*C4*C8*L10 + pi**6*C2*C4*C8*L2 + (pi**6*C1 + pi**6*C2)*C4*C8*L1 + (pi**6*C2 + pi**6*C3)*C4*C8*L3)*L4 + (((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8*L1 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8*L10 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8*L2 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8*L3 + (pi**6*C4*C5 + pi**6*C4*C6)*C8*L4)*L5 + (pi**6*C10*C6*C8*L10 + pi**6*C2*C6*C8*L2 + pi**6*C4*C6*C8*L4 + (pi**6*C1 + pi**6*C2)*C6*C8*L1 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8*L3 + (pi**6*C4 + pi**6*C5)*C6*C8*L5)*L6 + (pi**6*C6*C7*C8*L6 + ((pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7)*C8*L1 + (pi**6*C10*C6 + pi**6*C10*C7)*C8*L10 + (pi**6*C2*C6 + pi**6*C2*C7)*C8*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7)*C8*L3 + (pi**6*C4*C6 + pi**6*C4*C7)*C8*L4 + ((pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7)*C8*L5)*L7)*L8 + (((pi**6*C1*C10 + pi**6*C10*C2)*C8 + (pi**6*C1*C10 + pi**6*C10*C2)*C9)*L1*L10 + ((pi**6*C1*C10*C2 + pi**6*C1*C2*C8 + pi**6*C1*C2*C9)*L1 + (pi**6*C10*C2*C8 + pi**6*C10*C2*C9)*L10)*L2 + ((pi**6*C1*C10*C2 + (pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C8 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C9)*L1 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C9)*L10 + (pi**6*C10*C2*C3 + pi**6*C10*C2*C4 + (pi**6*C2*C3 + pi**6*C2*C4)*C8 + (pi**6*C2*C3 + pi**6*C2*C4)*C9)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C8 + (pi**6*C1 + pi**6*C2)*C4*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C4)*L1 + (pi**6*C10*C4*C8 + pi**6*C10*C4*C9)*L10 + (pi**6*C10*C2*C4 + pi**6*C2*C4*C8 + pi**6*C2*C4*C9)*L2 + ((pi**6*C2 + pi**6*C3)*C4*C8 + (pi**6*C2 + pi**6*C3)*C4*C9 + (pi**6*C10*C2 + pi**6*C10*C3)*C4)*L3)*L4 + (((pi**6*C1*C10 + pi**6*C10*C2)*C4 + (pi**6*C1*C10 + pi**6*C10*C2)*C5 + (pi**6*C1*C10 + pi**6*C10*C2)*C6 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C8 + ((pi**6*C1 + pi**6*C2)*C4 + (pi**6*C1 + pi**6*C2)*C5 + (pi**6*C1 + pi**6*C2)*C6)*C9)*L1 + ((pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C9)*L10 + (pi**6*C10*C2*C4 + pi**6*C10*C2*C5 + pi**6*C10*C2*C6 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C8 + (pi**6*C2*C4 + pi**6*C2*C5 + pi**6*C2*C6)*C9)*L2 + ((pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C8 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C9)*L3 + (pi**6*C10*C4*C5 + pi**6*C10*C4*C6 + (pi**6*C4*C5 + pi**6*C4*C6)*C8 + (pi**6*C4*C5 + pi**6*C4*C6)*C9)*L4)*L5 + (((pi**6*C1 + pi**6*C2)*C6*C8 + (pi**6*C1 + pi**6*C2)*C6*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C6)*L1 + (pi**6*C10*C6*C8 + pi**6*C10*C6*C9)*L10 + (pi**6*C10*C2*C6 + pi**6*C2*C6*C8 + pi**6*C2*C6*C9)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C8 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6*C9 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6)*L3 + (pi**6*C10*C4*C6 + pi**6*C4*C6*C8 + pi**6*C4*C6*C9)*L4 + ((pi**6*C4 + pi**6*C5)*C6*C8 + (pi**6*C4 + pi**6*C5)*C6*C9 + (pi**6*C10*C4 + pi**6*C10*C5)*C6)*L5)*L6 + (((pi**6*C1*C10 + pi**6*C10*C2)*C6 + (pi**6*C1*C10 + pi**6*C10*C2)*C7 + (pi**6*C1*C10 + pi**6*C10*C2 + (pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7)*C8 + ((pi**6*C1 + pi**6*C2)*C6 + (pi**6*C1 + pi**6*C2)*C7 + (pi**6*C1 + pi**6*C2)*C8)*C9)*L1 + ((pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C6 + pi**6*C10*C7 + pi**6*C10*C8)*C9)*L10 + (pi**6*C10*C2*C6 + pi**6*C10*C2*C7 + (pi**6*C10*C2 + pi**6*C2*C6 + pi**6*C2*C7)*C8 + (pi**6*C2*C6 + pi**6*C2*C7 + pi**6*C2*C8)*C9)*L2 + ((pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C6 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C7 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7)*C8 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C6 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C7 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C8)*C9)*L3 + (pi**6*C10*C4*C6 + pi**6*C10*C4*C7 + (pi**6*C10*C4 + pi**6*C4*C6 + pi**6*C4*C7)*C8 + (pi**6*C4*C6 + pi**6*C4*C7 + pi**6*C4*C8)*C9)*L4 + ((pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C4 + pi**6*C10*C5 + (pi**6*C10 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7)*C8 + ((pi**6*C4 + pi**6*C5)*C6 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C7 + (pi**6*C4 + pi**6*C5 + pi**6*C6)*C8)*C9)*L5 + (pi**6*C10*C6*C7 + (pi**6*C10*C6 + pi**6*C6*C7)*C8 + (pi**6*C6*C7 + pi**6*C6*C8)*C9)*L6)*L7 + (pi**6*C10*C8*C9*L10 + ((pi**6*C1 + pi**6*C2)*C8*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C8)*L1 + (pi**6*C10*C2*C8 + pi**6*C2*C8*C9)*L2 + ((pi**6*C2 + pi**6*C3 + pi**6*C4)*C8*C9 + (pi**6*C10*C2 + pi**6*C10*C3 + pi**6*C10*C4)*C8)*L3 + (pi**6*C10*C4*C8 + pi**6*C4*C8*C9)*L4 + ((pi**6*C4 + pi**6*C5 + pi**6*C6)*C8*C9 + (pi**6*C10*C4 + pi**6*C10*C5 + pi**6*C10*C6)*C8)*L5 + (pi**6*C10*C6*C8 + pi**6*C6*C8*C9)*L6 + ((pi**6*C6 + pi**6*C7)*C8*C9 + (pi**6*C10*C6 + pi**6*C10*C7)*C8)*L7)*L8)*L9)*ZS)*freq**6 + (32*I*pi**5*C10*C2*L1*L10*L2 + (32*I*pi**5*C1*C10*C2*L1*L2 + ((32*I*pi**5*C1*C10*C2 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C3 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4)*L1 + (32*I*pi**5*C10*C2*C3 + 32*I*pi**5*C10*C2*C4)*L2)*L3 + (32*I*pi**5*C10*C2*C4*L2 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3)*C4*L3)*L4 + (((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C4 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C5 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6)*L1 + (32*I*pi**5*C10*C2*C4 + 32*I*pi**5*C10*C2*C5 + 32*I*pi**5*C10*C2*C6)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3)*C4 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C5 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6)*L3 + (32*I*pi**5*C10*C4*C5 + 32*I*pi**5*C10*C4*C6)*L4)*L5 + (32*I*pi**5*C10*C2*C6*L2 + 32*I*pi**5*C10*C4*C6*L4 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5)*C6*L5)*L6 + (((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C6 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C7 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8)*L1 + (32*I*pi**5*C10*C2*C6 + 32*I*pi**5*C10*C2*C7 + 32*I*pi**5*C10*C2*C8)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C6 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C7 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8)*L3 + (32*I*pi**5*C10*C4*C6 + 32*I*pi**5*C10*C4*C7 + 32*I*pi**5*C10*C4*C8)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5)*C6 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C7 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8)*L5 + (32*I*pi**5*C10*C6*C7 + 32*I*pi**5*C10*C6*C8)*L6)*L7 + (32*I*pi**5*C10*C2*C8*L2 + 32*I*pi**5*C10*C4*C8*L4 + 32*I*pi**5*C10*C6*C8*L6 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8*L1 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8*L5 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7)*C8*L7)*L8 + (32*I*pi**5*C10*C8*C9*L8 + ((32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C8 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C10*C2)*C9)*L1 + (32*I*pi**5*C10*C2*C8 + 32*I*pi**5*C10*C2*C9)*L2 + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C8 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*C9)*L3 + (32*I*pi**5*C10*C4*C8 + 32*I*pi**5*C10*C4*C9)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C8 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*C9)*L5 + (32*I*pi**5*C10*C6*C8 + 32*I*pi**5*C10*C6*C9)*L6 + ((32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7)*C8 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + 32*I*pi**5*C10*C8)*C9)*L7)*L9)*ZL*ZS + ((32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4)*L1*L10 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4)*L1*L2)*L3 + (32*I*pi**5*C10*C4*L1*L10 + 32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1*L3)*L4 + ((32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6)*L1*L10 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5 + 32*I*pi**5*C2*C6)*L1*L2 + ((32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6)*L1*L3 + (32*I*pi**5*C4*C5 + 32*I*pi**5*C4*C6)*L1*L4)*L5 + (32*I*pi**5*C10*C6*L1*L10 + 32*I*pi**5*C2*C6*L1*L2 + 32*I*pi**5*C4*C6*L1*L4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6*L1*L3 + (32*I*pi**5*C4 + 32*I*pi**5*C5)*C6*L1*L5)*L6 + ((32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + 32*I*pi**5*C10*C8)*L1*L10 + (32*I*pi**5*C2*C6 + 32*I*pi**5*C2*C7 + 32*I*pi**5*C2*C8)*L1*L2 + ((32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C7 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C8)*L1*L3 + (32*I*pi**5*C4*C6 + 32*I*pi**5*C4*C7 + 32*I*pi**5*C4*C8)*L1*L4 + ((32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C7 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C8)*L1*L5 + (32*I*pi**5*C6*C7 + 32*I*pi**5*C6*C8)*L1*L6)*L7 + (32*I*pi**5*C10*C8*L1*L10 + 32*I*pi**5*C2*C8*L1*L2 + 32*I*pi**5*C4*C8*L1*L4 + 32*I*pi**5*C6*C8*L1*L6 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C8*L1*L3 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C8*L1*L5 + (32*I*pi**5*C6 + 32*I*pi**5*C7)*C8*L1*L7)*L8 + ((32*I*pi**5*C10*C8 + 32*I*pi**5*C10*C9)*L1*L10 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C2*C8 + 32*I*pi**5*C2*C9)*L1*L2 + (32*I*pi**5*C10*C2 + 32*I*pi**5*C10*C3 + 32*I*pi**5*C10*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C8 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C9)*L1*L3 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C4*C8 + 32*I*pi**5*C4*C9)*L1*L4 + (32*I*pi**5*C10*C4 + 32*I*pi**5*C10*C5 + 32*I*pi**5*C10*C6 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C8 + (32*I*pi**5*C4 + 32*I*pi**5*C5 + 32*I*pi**5*C6)*C9)*L1*L5 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C6*C8 + 32*I*pi**5*C6*C9)*L1*L6 + (32*I*pi**5*C10*C6 + 32*I*pi**5*C10*C7 + (32*I*pi**5*C10 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C8 + (32*I*pi**5*C6 + 32*I*pi**5*C7 + 32*I*pi**5*C8)*C9)*L1*L7 + (32*I*pi**5*C10*C8 + 32*I*pi**5*C8*C9)*L1*L8)*L9)*freq**5 + 16*((pi**4*C10*C2*L1*L2 + pi**4*C10*C4*L1*L4 + pi**4*C10*C6*L1*L6 + pi**4*C10*C8*L1*L8 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4)*L1*L3 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6)*L1*L5 + (pi**4*C10*C6 + pi**4*C10*C7 + pi**4*C10*C8)*L1*L7 + (pi**4*C10*C8 + pi**4*C10*C9)*L1*L9)*ZL + ((pi**4*C1*C10 + pi**4*C10*C2)*L1*L10 + (pi**4*C1*C2*L1 + pi**4*C10*C2*L10)*L2 + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4)*L10 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C10*C4*L10 + pi**4*C2*C4*L2 + (pi**4*C1 + pi**4*C2)*C4*L1 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + (((pi**4*C1 + pi**4*C2)*C4 + (pi**4*C1 + pi**4*C2)*C5 + (pi**4*C1 + pi**4*C2)*C6)*L1 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6)*L10 + (pi**4*C2*C4 + pi**4*C2*C5 + pi**4*C2*C6)*L2 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C6)*L3 + (pi**4*C4*C5 + pi**4*C4*C6)*L4)*L5 + (pi**4*C10*C6*L10 + pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + (pi**4*C1 + pi**4*C2)*C6*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C6*L3 + (pi**4*C4 + pi**4*C5)*C6*L5)*L6 + (((pi**4*C1 + pi**4*C2)*C6 + (pi**4*C1 + pi**4*C2)*C7 + (pi**4*C1 + pi**4*C2)*C8)*L1 + (pi**4*C10*C6 + pi**4*C10*C7 + pi**4*C10*C8)*L10 + (pi**4*C2*C6 + pi**4*C2*C7 + pi**4*C2*C8)*L2 + ((pi**4*C2 + pi**4*C3 + pi**4*C4)*C6 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C7 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8)*L3 + (pi**4*C4*C6 + pi**4*C4*C7 + pi**4*C4*C8)*L4 + ((pi**4*C4 + pi**4*C5)*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C7 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8)*L5 + (pi**4*C6*C7 + pi**4*C6*C8)*L6)*L7 + (pi**4*C10*C8*L10 + pi**4*C2*C8*L2 + pi**4*C4*C8*L4 + pi**4*C6*C8*L6 + (pi**4*C1 + pi**4*C2)*C8*L1 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8*L3 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8*L5 + (pi**4*C6 + pi**4*C7)*C8*L7)*L8 + ((pi**4*C1*C10 + pi**4*C10*C2 + (pi**4*C1 + pi**4*C2)*C8 + (pi**4*C1 + pi**4*C2)*C9)*L1 + (pi**4*C10*C8 + pi**4*C10*C9)*L10 + (pi**4*C10*C2 + pi**4*C2*C8 + pi**4*C2*C9)*L2 + (pi**4*C10*C2 + pi**4*C10*C3 + pi**4*C10*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C8 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C9)*L3 + (pi**4*C10*C4 + pi**4*C4*C8 + pi**4*C4*C9)*L4 + (pi**4*C10*C4 + pi**4*C10*C5 + pi**4*C10*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C8 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C9)*L5 + (pi**4*C10*C6 + pi**4*C6*C8 + pi**4*C6*C9)*L6 + (pi**4*C10*C6 + pi**4*C10*C7 + (pi**4*C10 + pi**4*C6 + pi**4*C7)*C8 + (pi**4*C6 + pi**4*C7 + pi**4*C8)*C9)*L7 + (pi**4*C10*C8 + pi**4*C8*C9)*L8)*L9)*ZS)*freq**4 + (-8*I*pi**3*C10*L1*L10 - 8*I*pi**3*C2*L1*L2 - 8*I*pi**3*C4*L1*L4 - 8*I*pi**3*C6*L1*L6 - 8*I*pi**3*C8*L1*L8 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L3 + (-8*I*pi**3*C4 - 8*I*pi**3*C5 - 8*I*pi**3*C6)*L1*L5 + (-8*I*pi**3*C6 - 8*I*pi**3*C7 - 8*I*pi**3*C8)*L1*L7 + (-8*I*pi**3*C10 - 8*I*pi**3*C8 - 8*I*pi**3*C9)*L1*L9 + (-8*I*pi**3*C10*C2*L2 - 8*I*pi**3*C10*C4*L4 - 8*I*pi**3*C10*C6*L6 - 8*I*pi**3*C10*C8*L8 + (-8*I*pi**3*C1*C10 - 8*I*pi**3*C10*C2)*L1 + (-8*I*pi**3*C10*C2 - 8*I*pi**3*C10*C3 - 8*I*pi**3*C10*C4)*L3 + (-8*I*pi**3*C10*C4 - 8*I*pi**3*C10*C5 - 8*I*pi**3*C10*C6)*L5 + (-8*I*pi**3*C10*C6 - 8*I*pi**3*C10*C7 - 8*I*pi**3*C10*C8)*L7 + (-8*I*pi**3*C10*C8 - 8*I*pi**3*C10*C9)*L9)*ZL*ZS)*freq**3 - 4*(pi**2*C10*L1*ZL + (pi**2*C10*L10 + pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + pi**2*C8*L8 + (pi**2*C1 + pi**2*C2)*L1 + (pi**2*C2 + pi**2*C3 + pi**2*C4)*L3 + (pi**2*C4 + pi**2*C5 + pi**2*C6)*L5 + (pi**2*C6 + pi**2*C7 + pi**2*C8)*L7 + (pi**2*C10 + pi**2*C8 + pi**2*C9)*L9)*ZS)*freq**2 + (2*I*pi*C10*ZL*ZS + 2*I*pi*L1)*freq + ZS)*np.sqrt(ZL*ZS))
            if (network_type['First_Element'] == 'Series'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    S11 = (4*I*pi**2*C1*L1*freq**2 + 2*(pi*C1*ZL - pi*C1*ZS)*freq - I)/(4*I*pi**2*C1*L1*freq**2 + 2*(pi*C1*ZL + pi*C1*ZS)*freq - I)
                    S21 = 4*pi*np.sqrt(ZL*ZS)*C1*freq/(4*I*pi**2*C1*L1*freq**2 + 2*(pi*C1*ZL + pi*C1*ZS)*freq - I)
                if(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    S11 = (16*pi**4*C1*C2*L1*L2*ZL*freq**4 + (8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 + 4*(pi**2*C1*L2*ZS - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS + 2*I*pi*L2)*freq + ZL)/(16*pi**4*C1*C2*L1*L2*ZL*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 - 4*(pi**2*C1*L2*ZS + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L2)*freq + ZL)
                    S21 = -8*pi**2*C1*L2*ZL*ZS*freq**2/((16*pi**4*C1*C2*L1*L2*ZL*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 - 4*(pi**2*C1*L2*ZS + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L2)*freq + ZL)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    S11 = (64*I*pi**6*C1*C2*C3*L1*L2*L3*freq**6 + 32*(pi**5*C1*C2*C3*L1*L2*ZL - pi**5*C1*C2*C3*L2*L3*ZS)*freq**5 + (16*I*pi**4*C1*C2*C3*L2*ZL*ZS + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3)*freq**4 - 8*((pi**3*C1*C3*L1 + (pi**3*C1 + pi**3*C2)*C3*L2)*ZL - (pi**3*C1*C3*L3 + (pi**3*C1*C2 + pi**3*C1*C3)*L2)*ZS)*freq**3 + (-4*I*pi**2*C1*C3*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2)*freq**2 + 2*(pi*C3*ZL - pi*C1*ZS)*freq - I)/(64*I*pi**6*C1*C2*C3*L1*L2*L3*freq**6 + 32*(pi**5*C1*C2*C3*L1*L2*ZL + pi**5*C1*C2*C3*L2*L3*ZS)*freq**5 + (-16*I*pi**4*C1*C2*C3*L2*ZL*ZS + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3)*freq**4 - 8*((pi**3*C1*C3*L1 + (pi**3*C1 + pi**3*C2)*C3*L2)*ZL + (pi**3*C1*C3*L3 + (pi**3*C1*C2 + pi**3*C1*C3)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C3*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2)*freq**2 + 2*(pi*C3*ZL + pi*C1*ZS)*freq - I)
                    S21 = -16*pi**3*C1*C3*L2*ZL*ZS*freq**3/((64*I*pi**6*C1*C2*C3*L1*L2*L3*freq**6 + 32*(pi**5*C1*C2*C3*L1*L2*ZL + pi**5*C1*C2*C3*L2*L3*ZS)*freq**5 + (-16*I*pi**4*C1*C2*C3*L2*ZL*ZS + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3)*freq**4 - 8*((pi**3*C1*C3*L1 + (pi**3*C1 + pi**3*C2)*C3*L2)*ZL + (pi**3*C1*C3*L3 + (pi**3*C1*C2 + pi**3*C1*C3)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C3*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2)*freq**2 + 2*(pi*C3*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 4):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    S11 = (256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*freq**8 + (128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4)*freq**7 + 64*(pi**6*C1*C2*C3*L2*L3*L4*ZS - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1 + pi**6*C2)*C3*C4*L2)*L3)*L4)*ZL)*freq**6 + ((-32*I*pi**5*C1*C2*C3*L2*L3 + (-32*I*pi**5*C1*C3*C4*L3 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3)*L4)*freq**5 - 16*((pi**4*C1*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4*ZS - ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L2)*L4)*ZL)*freq**4 + ((8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4)*L4)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4)*freq**3 + 4*(pi**2*C1*L4*ZS - (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L4)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS + 2*I*pi*L4)*freq + ZL)/(256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4)*freq**7 - 64*(pi**6*C1*C2*C3*L2*L3*L4*ZS + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1 + pi**6*C2)*C3*C4*L2)*L3)*L4)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L2*L3 + (32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3)*L4)*freq**5 + 16*((pi**4*C1*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L2)*L4)*ZL)*freq**4 + ((-8*I*pi**3*C1*C3*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L4)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4)*freq**3 - 4*(pi**2*C1*L4*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L4)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L4)*freq + ZL)
                    
                    S21 = 32*pi**4*C1*C3*L2*L4*ZL*ZS*freq**4/((256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*freq**8 + (-128*I*pi**7*C1*C2*C3*C4*L2*L3*L4*ZL*ZS - 128*I*pi**7*C1*C2*C3*L1*L2*L3*L4)*freq**7 - 64*(pi**6*C1*C2*C3*L2*L3*L4*ZS + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1 + pi**6*C2)*C3*C4*L2)*L3)*L4)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L2*L3 + (32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3)*L4)*freq**5 + 16*((pi**4*C1*C3*L3 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L4*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + (pi**4*C3*C4*L3 + (pi**4*C1*C3 + pi**4*C1*C4)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L2)*L4)*ZL)*freq**4 + ((-8*I*pi**3*C1*C3*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4)*L4)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2)*L4)*freq**3 - 4*(pi**2*C1*L4*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4)*L4)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L4)*freq + ZL)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 5):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    S11 = (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*freq**10 + 512*(pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL - pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5*ZS)*freq**9 + (256*I*pi**8*C1*C2*C3*C4*C5*L2*L3*L4*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5)*freq**8 - 128*((pi**7*C1*C2*C3*C5*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L1*L2 + (pi**7*C1*C3*C4*C5*L1 + (pi**7*C1 + pi**7*C2)*C3*C4*C5*L2)*L3)*L4)*ZL - ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C5*L2*L3 + (-64*I*pi**6*C1*C3*C4*C5*L3 + (-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4)*C5*L2)*L4)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C5*L1*L2 + (pi**5*C1*C3*C5*L1 + (pi**5*C1 + pi**5*C2)*C3*C5*L2)*L3 + (pi**5*C3*C4*C5*L3 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4)*C5*L2)*L4)*ZL - (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (16*I*pi**4*C1*C3*C5*L3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C5*L2 + (16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4)*C5*L4)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5)*freq**4 - 8*((pi**3*C1*C5*L1 + pi**3*C3*C5*L3 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C5*L2 + (pi**3*C3 + pi**3*C4)*C5*L4)*ZL - (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4)*ZS)*freq**3 + (-4*I*pi**2*C1*C5*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4)*freq**2 + 2*(pi*C5*ZL - pi*C1*ZS)*freq - I)/(1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*freq**10 + 512*(pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL + pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5*ZS)*freq**9 + (-256*I*pi**8*C1*C2*C3*C4*C5*L2*L3*L4*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5)*freq**8 - 128*((pi**7*C1*C2*C3*C5*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L1*L2 + (pi**7*C1*C3*C4*C5*L1 + (pi**7*C1 + pi**7*C2)*C3*C4*C5*L2)*L3)*L4)*ZL + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C5*L2*L3 + (64*I*pi**6*C1*C3*C4*C5*L3 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L2)*L4)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C5*L1*L2 + (pi**5*C1*C3*C5*L1 + (pi**5*C1 + pi**5*C2)*C3*C5*L2)*L3 + (pi**5*C3*C4*C5*L3 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4)*C5*L2)*L4)*ZL + (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*C5*L3 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L4)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5)*freq**4 - 8*((pi**3*C1*C5*L1 + pi**3*C3*C5*L3 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C5*L2 + (pi**3*C3 + pi**3*C4)*C5*L4)*ZL + (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4)*freq**2 + 2*(pi*C5*ZL + pi*C1*ZS)*freq - I)

                    S21 = 64*pi**5*C1*C3*C5*L2*L4*ZL*ZS*freq**5/((1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*freq**10 + 512*(pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4*ZL + pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5*ZS)*freq**9 + (-256*I*pi**8*C1*C2*C3*C4*C5*L2*L3*L4*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5)*freq**8 - 128*((pi**7*C1*C2*C3*C5*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L1*L2 + (pi**7*C1*C3*C4*C5*L1 + (pi**7*C1 + pi**7*C2)*C3*C4*C5*L2)*L3)*L4)*ZL + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C5*L2*L3 + (64*I*pi**6*C1*C3*C4*C5*L3 + (64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L2)*L4)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C5*L1*L2 + (pi**5*C1*C3*C5*L1 + (pi**5*C1 + pi**5*C2)*C3*C5*L2)*L3 + (pi**5*C3*C4*C5*L3 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4)*C5*L2)*L4)*ZL + (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*C5*L3 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L4)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5)*freq**4 - 8*((pi**3*C1*C5*L1 + pi**3*C3*C5*L3 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C5*L2 + (pi**3*C3 + pi**3*C4)*C5*L4)*ZL + (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4)*freq**2 + 2*(pi*C5*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))

                if(network_type['N'] >= 6):
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        if i % 2 == 0: # Even
                            code.append('LP')
                            x.append(comp_val['L' + str(i)])
                            code.append('CP')
                            x.append(comp_val['C' + str(i)])
                        else: # Odd
                            code.append('LS')
                            x.append(comp_val['L' + str(i)])
                            code.append('CS')
                            x.append(comp_val['C' + str(i)])

                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
                
                if(network_type['N'] == 6):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    L6 = comp_val['L6']
                    C6 = comp_val['C6']
                    S11 = (4096*pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL*freq**12 + (2048*I*pi**11*C1*C2*C3*C4*C5*C6*L2*L3*L4*L5*L6*ZL*ZS - 2048*I*pi**11*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*L6)*freq**11 + 1024*(pi**10*C1*C2*C3*C4*C5*L2*L3*L4*L5*L6*ZS - (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6)*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C6*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6*L1*L2 + (pi**10*C1*C3*C4*C5*C6*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C6*L2)*L3)*L4)*L5)*L6)*ZL)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((-512*I*pi**9*C1*C2*C3*C4*C5 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C6)*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C5*C6*L2*L3 + (-512*I*pi**9*C1*C3*C4*C5*C6*L3 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C6*L2)*L4)*L5)*L6)*ZL*ZS + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L2 + (512*I*pi**9*C1*C3*C4*C5*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L2)*L3)*L4)*L5)*L6)*freq**9 - 256*(((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L2*L3 + (pi**8*C1*C3*C4*C5*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L2)*L4)*L5)*L6*ZS - ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6)*L1*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6)*L2)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6*L1*L2 + (pi**8*C1*C3*C5*C6*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C6*L2)*L3 + (pi**8*C3*C4*C5*C6*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C6*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6*L2)*L4)*L5)*L6)*ZL)*freq**8 + (((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L2*L3 + (128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((128*I*pi**7*C1*C2*C3*C5 + 128*I*pi**7*C1*C2*C3*C6)*L2*L3 + (((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C6)*L2 + (128*I*pi**7*C1*C3*C4*C5 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C6)*L3)*L4 + (128*I*pi**7*C1*C3*C5*C6*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C6*L2 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C6*L4)*L5)*L6)*ZL*ZS + (-128*I*pi**7*C1*C2*C3*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L2)*L4)*L5)*L6)*freq**7 + 64*((pi**6*C1*C2*C3*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L3)*L4 + (pi**6*C1*C3*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L4)*L5)*L6*ZS - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6)*L1*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6)*L3)*L4 + (pi**6*C1*C5*C6*L1 + pi**6*C3*C5*C6*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6*L2 + (pi**6*C3 + pi**6*C4)*C5*C6*L4)*L5)*L6)*ZL)*freq**6 + ((-32*I*pi**5*C1*C2*C3*L2*L3 + ((-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 - 32*I*pi**5*C1*C3*C5)*L3)*L4 + (-32*I*pi**5*C1*C3*C5*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L4)*L5 + (-32*I*pi**5*C1*C5*C6*L5 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C6)*L2 + (-32*I*pi**5*C1*C3*C5 - 32*I*pi**5*C1*C3*C6)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C6)*L4)*L6)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L4)*L5)*L6)*freq**5 - 16*((pi**4*C1*C3*L3 + pi**4*C1*C5*L5 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L4)*L6*ZS - ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4)*L5 + (pi**4*C5*C6*L5 + (pi**4*C1*C5 + pi**4*C1*C6)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6)*L2 + (pi**4*C3*C5 + pi**4*C3*C6)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6)*L4)*L6)*ZL)*freq**4 + ((8*I*pi**3*C1*C3*L3 + 8*I*pi**3*C1*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L4 + (8*I*pi**3*C1*C5 + 8*I*pi**3*C1*C6)*L6)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 - 8*I*pi**3*C5*L5 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L4)*L6)*freq**3 + 4*(pi**2*C1*L6*ZS - (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6)*L6)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS + 2*I*pi*L6)*freq + ZL)/(4096*pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL*freq**12 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L2*L3*L4*L5*L6*ZL*ZS - 2048*I*pi**11*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*L6)*freq**11 - 1024*(pi**10*C1*C2*C3*C4*C5*L2*L3*L4*L5*L6*ZS + (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6)*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C6*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6*L1*L2 + (pi**10*C1*C3*C4*C5*C6*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C6*L2)*L3)*L4)*L5)*L6)*ZL)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6)*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*C6*L2*L3 + (512*I*pi**9*C1*C3*C4*C5*C6*L3 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6*L2)*L4)*L5)*L6)*ZL*ZS + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L2 + (512*I*pi**9*C1*C3*C4*C5*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L2)*L3)*L4)*L5)*L6)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L2*L3 + (pi**8*C1*C3*C4*C5*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L2)*L4)*L5)*L6*ZS + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6)*L1*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6)*L2)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6*L1*L2 + (pi**8*C1*C3*C5*C6*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C6*L2)*L3 + (pi**8*C3*C4*C5*C6*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C6*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6*L2)*L4)*L5)*L6)*ZL)*freq**8 + (((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C5*L2*L3 + (-128*I*pi**7*C1*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((-128*I*pi**7*C1*C2*C3*C5 - 128*I*pi**7*C1*C2*C3*C6)*L2*L3 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6)*L2 + (-128*I*pi**7*C1*C3*C4*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C6)*L3)*L4 + (-128*I*pi**7*C1*C3*C5*C6*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C6*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C6*L4)*L5)*L6)*ZL*ZS + (-128*I*pi**7*C1*C2*C3*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L2)*L4)*L5)*L6)*freq**7 - 64*((pi**6*C1*C2*C3*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L3)*L4 + (pi**6*C1*C3*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L4)*L5)*L6*ZS + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6)*L1*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6)*L3)*L4 + (pi**6*C1*C5*C6*L1 + pi**6*C3*C5*C6*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6*L2 + (pi**6*C3 + pi**6*C4)*C5*C6*L4)*L5)*L6)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L2*L3 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + (32*I*pi**5*C1*C3*C4 + 32*I*pi**5*C1*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C3*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L4)*L5 + (32*I*pi**5*C1*C5*C6*L5 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6)*L2 + (32*I*pi**5*C1*C3*C5 + 32*I*pi**5*C1*C3*C6)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6)*L4)*L6)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L4)*L5)*L6)*freq**5 + 16*((pi**4*C1*C3*L3 + pi**4*C1*C5*L5 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L4)*L6*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4)*L5 + (pi**4*C5*C6*L5 + (pi**4*C1*C5 + pi**4*C1*C6)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6)*L2 + (pi**4*C3*C5 + pi**4*C3*C6)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6)*L4)*L6)*ZL)*freq**4 + ((-8*I*pi**3*C1*C3*L3 - 8*I*pi**3*C1*C5*L5 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L4 + (-8*I*pi**3*C1*C5 - 8*I*pi**3*C1*C6)*L6)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 - 8*I*pi**3*C5*L5 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L4)*L6)*freq**3 - 4*(pi**2*C1*L6*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6)*L6)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L6)*freq + ZL)
                    
                    S21 = -128*pi**6*C1*C3*C5*L2*L4*L6*ZL*ZS*freq**6/((4096*pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL*freq**12 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L2*L3*L4*L5*L6*ZL*ZS - 2048*I*pi**11*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*L6)*freq**11 - 1024*(pi**10*C1*C2*C3*C4*C5*L2*L3*L4*L5*L6*ZS + (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6)*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C6*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6*L1*L2 + (pi**10*C1*C3*C4*C5*C6*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C6*L2)*L3)*L4)*L5)*L6)*ZL)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6)*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*C6*L2*L3 + (512*I*pi**9*C1*C3*C4*C5*C6*L3 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6*L2)*L4)*L5)*L6)*ZL*ZS + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L2 + (512*I*pi**9*C1*C3*C4*C5*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L2)*L3)*L4)*L5)*L6)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L2*L3 + (pi**8*C1*C3*C4*C5*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L2)*L4)*L5)*L6*ZS + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6)*L1*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6)*L2)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6*L1*L2 + (pi**8*C1*C3*C5*C6*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C6*L2)*L3 + (pi**8*C3*C4*C5*C6*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C6*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6*L2)*L4)*L5)*L6)*ZL)*freq**8 + (((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C5*L2*L3 + (-128*I*pi**7*C1*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((-128*I*pi**7*C1*C2*C3*C5 - 128*I*pi**7*C1*C2*C3*C6)*L2*L3 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6)*L2 + (-128*I*pi**7*C1*C3*C4*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C6)*L3)*L4 + (-128*I*pi**7*C1*C3*C5*C6*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C6*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C6*L4)*L5)*L6)*ZL*ZS + (-128*I*pi**7*C1*C2*C3*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L2)*L4)*L5)*L6)*freq**7 - 64*((pi**6*C1*C2*C3*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L3)*L4 + (pi**6*C1*C3*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L4)*L5)*L6*ZS + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6)*L1*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6)*L3)*L4 + (pi**6*C1*C5*C6*L1 + pi**6*C3*C5*C6*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6*L2 + (pi**6*C3 + pi**6*C4)*C5*C6*L4)*L5)*L6)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L2*L3 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + (32*I*pi**5*C1*C3*C4 + 32*I*pi**5*C1*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C3*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L4)*L5 + (32*I*pi**5*C1*C5*C6*L5 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6)*L2 + (32*I*pi**5*C1*C3*C5 + 32*I*pi**5*C1*C3*C6)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6)*L4)*L6)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L4)*L5)*L6)*freq**5 + 16*((pi**4*C1*C3*L3 + pi**4*C1*C5*L5 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L4)*L6*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4)*L5 + (pi**4*C5*C6*L5 + (pi**4*C1*C5 + pi**4*C1*C6)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6)*L2 + (pi**4*C3*C5 + pi**4*C3*C6)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6)*L4)*L6)*ZL)*freq**4 + ((-8*I*pi**3*C1*C3*L3 - 8*I*pi**3*C1*C5*L5 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L4 + (-8*I*pi**3*C1*C5 - 8*I*pi**3*C1*C6)*L6)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 - 8*I*pi**3*C5*L5 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L4)*L6)*freq**3 - 4*(pi**2*C1*L6*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6)*L6)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L6)*freq + ZL)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 7):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    L6 = comp_val['L6']
                    C6 = comp_val['C6']
                    L7 = comp_val['L7']
                    C7 = comp_val['C7']

                    S11 = (16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*freq**14 + 8192*(pi**13*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*ZL - pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7*ZS)*freq**13 + (4096*I*pi**12*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*ZL*ZS + (-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7)*freq**12 - 2048*((pi**11*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L1*L2 + (pi**11*C1*C3*C4*C5*C6*C7*L1 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*ZL - ((pi**11*C1*C2*C3*C4*C5*C6 + pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**11*C1*C3*C4*C5*C6*C7*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*ZS)*freq**11 + (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (-1024*I*pi**10*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((-1024*I*pi**10*C1*C2*C3*C4*C5 + (-1024*I*pi**10*C1*C2*C3*C4 - 1024*I*pi**10*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (-1024*I*pi**10*C1*C2*C3*C5*C6*C7*L2*L3 + (-1024*I*pi**10*C1*C3*C4*C5*C6*C7*L3 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*ZL*ZS + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*L1*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*freq**10 + 512*(((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L1*L2 + (pi**9*C1*C3*C4*C5*C7*L1 + (pi**9*C1 + pi**9*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L1*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4*C5 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L1*L2 + (pi**9*C1*C3*C5*C6*C7*L1 + (pi**9*C1 + pi**9*C2)*C3*C5*C6*C7*L2)*L3 + (pi**9*C3*C4*C5*C6*C7*L3 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*ZL - (pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**9*C1*C2*C3*C4*C5 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C6 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C6 + pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7)*L2 + (pi**9*C1*C3*C4*C5*C6 + pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L2*L3 + (pi**9*C1*C3*C4*C5*C7*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**9*C1*C3*C5*C6*C7*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((256*I*pi**8*C1*C2*C3*C4 + 256*I*pi**8*C1*C2*C3*C5)*C7*L2*L3*L4 + (256*I*pi**8*C1*C2*C3*C5*C7*L2*L3 + (256*I*pi**8*C1*C3*C4*C5*C7*L3 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((256*I*pi**8*C1*C2*C3*C5 + 256*I*pi**8*C1*C2*C3*C6)*C7*L2*L3 + (((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C6)*C7*L2 + (256*I*pi**8*C1*C3*C4*C5 + (256*I*pi**8*C1*C3*C4 + 256*I*pi**8*C1*C3*C5)*C6)*C7*L3)*L4 + (256*I*pi**8*C1*C3*C5*C6*C7*L3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5*C6*C7*L2 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5*C6*C7*L4)*L5)*L6)*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7)*L2 + (-256*I*pi**8*C3*C4*C5*C6 - 256*I*pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*L1*L2 + (-256*I*pi**8*C1*C3*C5*C7*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C5*C6*C7*L1 - 256*I*pi**8*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*freq**8 - 128*((pi**7*C1*C2*C3*C7*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L1*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3*C4 + (pi**7*C1 + pi**7*C2)*C3*C5)*C7*L2)*L3)*L4 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L1*L2 + (pi**7*C1*C3*C5*C7*L1 + (pi**7*C1 + pi**7*C2)*C3*C5*C7*L2)*L3 + (pi**7*C3*C4*C5*C7*L3 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5*C7*L2)*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L1*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3*C5 + (pi**7*C1 + pi**7*C2)*C3*C6)*C7*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6)*C7*L2 + (pi**7*C3*C4*C5 + (pi**7*C3*C4 + pi**7*C3*C5)*C6)*C7*L3)*L4 + (pi**7*C1*C5*C6*C7*L1 + pi**7*C3*C5*C6*C7*L3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C6*C7*L2 + (pi**7*C3 + pi**7*C4)*C5*C6*C7*L4)*L5)*L6)*ZL - ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**7*C1*C2*C3*C5 + pi**7*C1*C2*C3*C6 + pi**7*C1*C2*C3*C7)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L2 + (pi**7*C1*C3*C4*C5 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C6 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7)*L2 + (pi**7*C1*C3*C5*C6 + pi**7*C1*C3*C5*C7)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C6 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**7*C1*C2*C3*C7*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L3)*L4 + (pi**7*C1*C3*C5*C7*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L4)*L5 + (pi**7*C1*C5*C6*C7*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L4)*L6)*L7)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C7*L2*L3 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5)*C7*L2 + (-64*I*pi**6*C1*C3*C4 - 64*I*pi**6*C1*C3*C5)*C7*L3)*L4 + (-64*I*pi**6*C1*C3*C5*C7*L3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5*C7*L2 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5*C7*L4)*L5 + (-64*I*pi**6*C1*C5*C6*C7*L5 + ((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C6)*C7*L2 + (-64*I*pi**6*C1*C3*C5 - 64*I*pi**6*C1*C3*C6)*C7*L3 + ((-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C6)*C7*L4)*L6)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*L1*L2 + ((64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L2 + (64*I*pi**6*C3*C4*C5 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C6 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7)*L3)*L4 + ((64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7)*L2 + (64*I*pi**6*C3*C5*C6 + 64*I*pi**6*C3*C5*C7)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*L1*L2 + (64*I*pi**6*C1*C3*C7*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C5*C7*L1 + 64*I*pi**6*C3*C5*C7*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C5*C6*C7*L5 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7*L4)*L6)*L7)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C7*L1*L2 + (pi**5*C1*C3*C7*L1 + (pi**5*C1 + pi**5*C2)*C3*C7*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C7*L2 + (pi**5*C3*C4 + pi**5*C3*C5)*C7*L3)*L4 + (pi**5*C1*C5*C7*L1 + pi**5*C3*C5*C7*L3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5*C7*L2 + (pi**5*C3 + pi**5*C4)*C5*C7*L4)*L5 + (pi**5*C5*C6*C7*L5 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6)*C7*L2 + (pi**5*C3*C5 + pi**5*C3*C6)*C7*L3 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6)*C7*L4)*L6)*ZL - (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L2 + (pi**5*C1*C3*C5 + pi**5*C1*C3*C6 + pi**5*C1*C3*C7)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L4 + (pi**5*C1*C5*C6 + pi**5*C1*C5*C7)*L5)*L6 + (pi**5*C1*C3*C7*L3 + pi**5*C1*C5*C7*L5 + (pi**5*C1*C2 + pi**5*C1*C3)*C7*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L4 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L6)*L7)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (16*I*pi**4*C1*C3*C7*L3 + 16*I*pi**4*C1*C5*C7*L5 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C7*L2 + (16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4 + 16*I*pi**4*C1*C5)*C7*L4 + (16*I*pi**4*C1*C5 + 16*I*pi**4*C1*C6)*C7*L6)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5 + ((-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L2 + (-16*I*pi**4*C3*C5 - 16*I*pi**4*C3*C6 - 16*I*pi**4*C3*C7)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L4 + (-16*I*pi**4*C5*C6 - 16*I*pi**4*C5*C7)*L5)*L6 + (-16*I*pi**4*C1*C7*L1 - 16*I*pi**4*C3*C7*L3 - 16*I*pi**4*C5*C7*L5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7*L6)*L7)*freq**4 - 8*((pi**3*C1*C7*L1 + pi**3*C3*C7*L3 + pi**3*C5*C7*L5 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C7*L2 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C7*L4 + (pi**3*C5 + pi**3*C6)*C7*L6)*ZL - (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + pi**3*C1*C7*L7 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L6)*ZS)*freq**3 + (-4*I*pi**2*C1*C7*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + 4*I*pi**2*C7*L7 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L6)*freq**2 + 2*(pi*C7*ZL - pi*C1*ZS)*freq - I)/(16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*freq**14 + 8192*(pi**13*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*ZL + pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7*ZS)*freq**13 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*ZL*ZS + (-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7)*freq**12 - 2048*((pi**11*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L1*L2 + (pi**11*C1*C3*C4*C5*C6*C7*L1 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*ZL + ((pi**11*C1*C2*C3*C4*C5*C6 + pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**11*C1*C3*C4*C5*C6*C7*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*ZS)*freq**11 + (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (1024*I*pi**10*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C6*C7*L2*L3 + (1024*I*pi**10*C1*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*ZL*ZS + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*L1*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*freq**10 + 512*(((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L1*L2 + (pi**9*C1*C3*C4*C5*C7*L1 + (pi**9*C1 + pi**9*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L1*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4*C5 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L1*L2 + (pi**9*C1*C3*C5*C6*C7*L1 + (pi**9*C1 + pi**9*C2)*C3*C5*C6*C7*L2)*L3 + (pi**9*C3*C4*C5*C6*C7*L3 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*ZL + (pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**9*C1*C2*C3*C4*C5 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C6 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C6 + pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7)*L2 + (pi**9*C1*C3*C4*C5*C6 + pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L2*L3 + (pi**9*C1*C3*C4*C5*C7*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**9*C1*C3*C5*C6*C7*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*C7*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*C7*L2*L3 + (-256*I*pi**8*C1*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6)*C7*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6*C7*L4)*L5)*L6)*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7)*L2 + (-256*I*pi**8*C3*C4*C5*C6 - 256*I*pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*L1*L2 + (-256*I*pi**8*C1*C3*C5*C7*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C5*C6*C7*L1 - 256*I*pi**8*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*freq**8 - 128*((pi**7*C1*C2*C3*C7*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L1*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3*C4 + (pi**7*C1 + pi**7*C2)*C3*C5)*C7*L2)*L3)*L4 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L1*L2 + (pi**7*C1*C3*C5*C7*L1 + (pi**7*C1 + pi**7*C2)*C3*C5*C7*L2)*L3 + (pi**7*C3*C4*C5*C7*L3 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5*C7*L2)*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L1*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3*C5 + (pi**7*C1 + pi**7*C2)*C3*C6)*C7*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6)*C7*L2 + (pi**7*C3*C4*C5 + (pi**7*C3*C4 + pi**7*C3*C5)*C6)*C7*L3)*L4 + (pi**7*C1*C5*C6*C7*L1 + pi**7*C3*C5*C6*C7*L3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C6*C7*L2 + (pi**7*C3 + pi**7*C4)*C5*C6*C7*L4)*L5)*L6)*ZL + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**7*C1*C2*C3*C5 + pi**7*C1*C2*C3*C6 + pi**7*C1*C2*C3*C7)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L2 + (pi**7*C1*C3*C4*C5 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C6 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7)*L2 + (pi**7*C1*C3*C5*C6 + pi**7*C1*C3*C5*C7)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C6 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**7*C1*C2*C3*C7*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L3)*L4 + (pi**7*C1*C3*C5*C7*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L4)*L5 + (pi**7*C1*C5*C6*C7*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L4)*L6)*L7)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C7*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C7*L2 + (64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C3*C5*C7*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*C7*L2 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C1*C5*C6*C7*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6)*C7*L2 + (64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6)*C7*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6)*C7*L4)*L6)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*L1*L2 + ((64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L2 + (64*I*pi**6*C3*C4*C5 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C6 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7)*L3)*L4 + ((64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7)*L2 + (64*I*pi**6*C3*C5*C6 + 64*I*pi**6*C3*C5*C7)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*L1*L2 + (64*I*pi**6*C1*C3*C7*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C5*C7*L1 + 64*I*pi**6*C3*C5*C7*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C5*C6*C7*L5 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7*L4)*L6)*L7)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C7*L1*L2 + (pi**5*C1*C3*C7*L1 + (pi**5*C1 + pi**5*C2)*C3*C7*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C7*L2 + (pi**5*C3*C4 + pi**5*C3*C5)*C7*L3)*L4 + (pi**5*C1*C5*C7*L1 + pi**5*C3*C5*C7*L3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5*C7*L2 + (pi**5*C3 + pi**5*C4)*C5*C7*L4)*L5 + (pi**5*C5*C6*C7*L5 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6)*C7*L2 + (pi**5*C3*C5 + pi**5*C3*C6)*C7*L3 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6)*C7*L4)*L6)*ZL + (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L2 + (pi**5*C1*C3*C5 + pi**5*C1*C3*C6 + pi**5*C1*C3*C7)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L4 + (pi**5*C1*C5*C6 + pi**5*C1*C5*C7)*L5)*L6 + (pi**5*C1*C3*C7*L3 + pi**5*C1*C5*C7*L5 + (pi**5*C1*C2 + pi**5*C1*C3)*C7*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L4 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L6)*L7)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*C7*L3 - 16*I*pi**4*C1*C5*C7*L5 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C7*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C7*L4 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6)*C7*L6)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5 + ((-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L2 + (-16*I*pi**4*C3*C5 - 16*I*pi**4*C3*C6 - 16*I*pi**4*C3*C7)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L4 + (-16*I*pi**4*C5*C6 - 16*I*pi**4*C5*C7)*L5)*L6 + (-16*I*pi**4*C1*C7*L1 - 16*I*pi**4*C3*C7*L3 - 16*I*pi**4*C5*C7*L5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7*L6)*L7)*freq**4 - 8*((pi**3*C1*C7*L1 + pi**3*C3*C7*L3 + pi**3*C5*C7*L5 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C7*L2 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C7*L4 + (pi**3*C5 + pi**3*C6)*C7*L6)*ZL + (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + pi**3*C1*C7*L7 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L6)*ZS)*freq**3 + (4*I*pi**2*C1*C7*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + 4*I*pi**2*C7*L7 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L6)*freq**2 + 2*(pi*C7*ZL + pi*C1*ZS)*freq - I)

                    S21 = -256*pi**7*C1*C3*C5*C7*L2*L4*L6*ZL*ZS*freq**7/((16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*freq**14 + 8192*(pi**13*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*ZL + pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7*ZS)*freq**13 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*ZL*ZS + (-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7)*freq**12 - 2048*((pi**11*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L1*L2 + (pi**11*C1*C3*C4*C5*C6*C7*L1 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*ZL + ((pi**11*C1*C2*C3*C4*C5*C6 + pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**11*C1*C3*C4*C5*C6*C7*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*ZS)*freq**11 + (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (1024*I*pi**10*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C6*C7*L2*L3 + (1024*I*pi**10*C1*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*ZL*ZS + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*L1*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*freq**10 + 512*(((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L1*L2 + (pi**9*C1*C3*C4*C5*C7*L1 + (pi**9*C1 + pi**9*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L1*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4*C5 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L1*L2 + (pi**9*C1*C3*C5*C6*C7*L1 + (pi**9*C1 + pi**9*C2)*C3*C5*C6*C7*L2)*L3 + (pi**9*C3*C4*C5*C6*C7*L3 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*ZL + (pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**9*C1*C2*C3*C4*C5 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C6 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C6 + pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7)*L2 + (pi**9*C1*C3*C4*C5*C6 + pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L2*L3 + (pi**9*C1*C3*C4*C5*C7*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**9*C1*C3*C5*C6*C7*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*C7*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*C7*L2*L3 + (-256*I*pi**8*C1*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6)*C7*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6*C7*L4)*L5)*L6)*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7)*L2 + (-256*I*pi**8*C3*C4*C5*C6 - 256*I*pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*L1*L2 + (-256*I*pi**8*C1*C3*C5*C7*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C5*C6*C7*L1 - 256*I*pi**8*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*freq**8 - 128*((pi**7*C1*C2*C3*C7*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L1*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3*C4 + (pi**7*C1 + pi**7*C2)*C3*C5)*C7*L2)*L3)*L4 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L1*L2 + (pi**7*C1*C3*C5*C7*L1 + (pi**7*C1 + pi**7*C2)*C3*C5*C7*L2)*L3 + (pi**7*C3*C4*C5*C7*L3 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5*C7*L2)*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L1*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L1 + ((pi**7*C1 + pi**7*C2)*C3*C5 + (pi**7*C1 + pi**7*C2)*C3*C6)*C7*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6)*C7*L2 + (pi**7*C3*C4*C5 + (pi**7*C3*C4 + pi**7*C3*C5)*C6)*C7*L3)*L4 + (pi**7*C1*C5*C6*C7*L1 + pi**7*C3*C5*C6*C7*L3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C6*C7*L2 + (pi**7*C3 + pi**7*C4)*C5*C6*C7*L4)*L5)*L6)*ZL + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**7*C1*C2*C3*C5 + pi**7*C1*C2*C3*C6 + pi**7*C1*C2*C3*C7)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L2 + (pi**7*C1*C3*C4*C5 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C6 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7)*L2 + (pi**7*C1*C3*C5*C6 + pi**7*C1*C3*C5*C7)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C6 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**7*C1*C2*C3*C7*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L3)*L4 + (pi**7*C1*C3*C5*C7*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L4)*L5 + (pi**7*C1*C5*C6*C7*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L4)*L6)*L7)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C7*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C7*L2 + (64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C3*C5*C7*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*C7*L2 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C1*C5*C6*C7*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6)*C7*L2 + (64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6)*C7*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6)*C7*L4)*L6)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*L1*L2 + ((64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L2 + (64*I*pi**6*C3*C4*C5 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C6 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7)*L3)*L4 + ((64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7)*L2 + (64*I*pi**6*C3*C5*C6 + 64*I*pi**6*C3*C5*C7)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*L1*L2 + (64*I*pi**6*C1*C3*C7*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C5*C7*L1 + 64*I*pi**6*C3*C5*C7*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C5*C6*C7*L5 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7*L4)*L6)*L7)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C7*L1*L2 + (pi**5*C1*C3*C7*L1 + (pi**5*C1 + pi**5*C2)*C3*C7*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C7*L2 + (pi**5*C3*C4 + pi**5*C3*C5)*C7*L3)*L4 + (pi**5*C1*C5*C7*L1 + pi**5*C3*C5*C7*L3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5*C7*L2 + (pi**5*C3 + pi**5*C4)*C5*C7*L4)*L5 + (pi**5*C5*C6*C7*L5 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6)*C7*L2 + (pi**5*C3*C5 + pi**5*C3*C6)*C7*L3 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6)*C7*L4)*L6)*ZL + (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L2 + (pi**5*C1*C3*C5 + pi**5*C1*C3*C6 + pi**5*C1*C3*C7)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L4 + (pi**5*C1*C5*C6 + pi**5*C1*C5*C7)*L5)*L6 + (pi**5*C1*C3*C7*L3 + pi**5*C1*C5*C7*L5 + (pi**5*C1*C2 + pi**5*C1*C3)*C7*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L4 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L6)*L7)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*C7*L3 - 16*I*pi**4*C1*C5*C7*L5 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C7*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C7*L4 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6)*C7*L6)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5 + ((-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L2 + (-16*I*pi**4*C3*C5 - 16*I*pi**4*C3*C6 - 16*I*pi**4*C3*C7)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L4 + (-16*I*pi**4*C5*C6 - 16*I*pi**4*C5*C7)*L5)*L6 + (-16*I*pi**4*C1*C7*L1 - 16*I*pi**4*C3*C7*L3 - 16*I*pi**4*C5*C7*L5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7*L6)*L7)*freq**4 - 8*((pi**3*C1*C7*L1 + pi**3*C3*C7*L3 + pi**3*C5*C7*L5 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C7*L2 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C7*L4 + (pi**3*C5 + pi**3*C6)*C7*L6)*ZL + (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + pi**3*C1*C7*L7 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L6)*ZS)*freq**3 + (4*I*pi**2*C1*C7*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + 4*I*pi**2*C7*L7 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L6)*freq**2 + 2*(pi*C7*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))
                if(network_type['N'] == 8):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    L6 = comp_val['L6']
                    C6 = comp_val['C6']
                    L7 = comp_val['L7']
                    C7 = comp_val['C7']
                    L8 = comp_val['L8']
                    C8 = comp_val['C8']

                    S11 = (65536*pi**16*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*ZL*freq**16 + (32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C8*L2*L3*L4*L5*L6*L7*L8*ZL*ZS - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*L8)*freq**15 + 16384*(pi**14*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7*L8*ZS - (pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8)*L1*L2*L3*L4*L5*L6 + (pi**14*C1*C2*C3*C4*C5*C7*C8*L1*L2*L3*L4*L5 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8*L1*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C6*C7*C8*L1*L2*L3 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8*L1*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C8*L1 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C8*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL)*freq**14 + ((-8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7 + ((-8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C8)*L2*L3*L4*L5*L6 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C7*C8*L2*L3*L4*L5 + ((-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C8*L2*L3*L4 + (-8192*I*pi**13*C1*C2*C3*C5*C6*C7*C8*L2*L3 + (-8192*I*pi**13*C1*C3*C4*C5*C6*C7*C8*L3 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C8*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*L1*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*L1 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7)*L8)*freq**13 - 4096*(((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**12*C1*C3*C4*C5*C6*C7*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*L8*ZS - ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (pi**12*C1*C3*C4*C5*C6*C7*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8)*L1*L2*L3*L4*L5 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8)*L1*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8)*L1*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8)*L1*L2 + ((pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8)*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C8)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8*L1*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C7*C8*L1*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8*L1*L2 + (pi**12*C1*C3*C4*C5*C7*C8*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C8*L2)*L3)*L4)*L5 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8*L1*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8*L1*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C8*L2)*L3)*L4 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8*L1*L2 + (pi**12*C1*C3*C5*C6*C7*C8*L1 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C8*L2)*L3 + (pi**12*C3*C4*C5*C6*C7*C8*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8*L1 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C8*L2)*L4)*L5)*L6)*L7)*L8)*ZL)*freq**12 + (((2048*I*pi**11*C1*C2*C3*C4*C5*C6 + 2048*I*pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (2048*I*pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (2048*I*pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (2048*I*pi**11*C1*C3*C4*C5*C6*C7*L3 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + ((2048*I*pi**11*C1*C2*C3*C4*C5*C7 + 2048*I*pi**11*C1*C2*C3*C4*C5*C8)*L2*L3*L4*L5 + (((2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7 + (2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7)*C8)*L2*L3*L4 + ((2048*I*pi**11*C1*C2*C3*C5*C6*C7 + (2048*I*pi**11*C1*C2*C3*C5*C6 + 2048*I*pi**11*C1*C2*C3*C5*C7)*C8)*L2*L3 + (((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C8)*L2 + (2048*I*pi**11*C1*C3*C4*C5*C6*C7 + (2048*I*pi**11*C1*C3*C4*C5*C6 + 2048*I*pi**11*C1*C3*C4*C5*C7)*C8)*L3)*L4)*L5)*L6 + ((2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7*C8*L2*L3*L4 + (2048*I*pi**11*C1*C2*C3*C5*C7*C8*L2*L3 + (2048*I*pi**11*C1*C3*C4*C5*C7*C8*L3 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7*C8*L2)*L4)*L5 + ((2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7*C8*L2*L3 + (((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C8*L2 + (2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7*C8*L3)*L4 + (2048*I*pi**11*C1*C3*C5*C6*C7*C8*L3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6*C7*C8*L2 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6*C7*C8*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (-2048*I*pi**11*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*L1*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*L1*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*L1*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*L1*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*L1 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*L1*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*L1*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*L1*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*L1 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*L8)*freq**11 + 1024*((pi**10*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L2 + (pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L2*L3 + (pi**10*C1*C3*C4*C5*C7*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**10*C1*C3*C5*C6*C7*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*L8*ZS - (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (pi**10*C1*C3*C4*C5*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L1*L2 + (pi**10*C1*C3*C5*C6*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (pi**10*C3*C4*C5*C6*C7*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8)*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8)*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8)*L1*L2 + ((pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C8)*L2)*L3)*L4)*L5 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8)*L1*L2*L3 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8)*L1*L2 + (((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8)*L1 + (((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C8)*L2)*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8)*L1*L2 + ((pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C8)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8)*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C8)*L2 + (pi**10*C3*C4*C5*C6*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C8)*L3)*L4)*L5)*L6 + (pi**10*C1*C2*C3*C7*C8*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8*L1*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C8*L2)*L3)*L4 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8*L1*L2 + (pi**10*C1*C3*C5*C7*C8*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C8*L2)*L3 + (pi**10*C3*C4*C5*C7*C8*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C8*L2)*L4)*L5 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8*L1*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C8*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C8*L2 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C8*L3)*L4 + (pi**10*C1*C5*C6*C7*C8*L1 + pi**10*C3*C5*C6*C7*C8*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C8*L2 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C8*L4)*L5)*L6)*L7)*L8)*ZL)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((-512*I*pi**9*C1*C2*C3*C4*C5 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C6 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((-512*I*pi**9*C1*C2*C3*C5*C6 - 512*I*pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C7)*L2 + (-512*I*pi**9*C1*C3*C4*C5*C6 - 512*I*pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C5*C7*L2*L3 + (-512*I*pi**9*C1*C3*C4*C5*C7*L3 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6)*C7*L2 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (-512*I*pi**9*C1*C3*C5*C6*C7*L3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6*C7*L2 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + (((-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C7 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C8)*L2*L3*L4 + ((-512*I*pi**9*C1*C2*C3*C5*C7 - 512*I*pi**9*C1*C2*C3*C5*C8)*L2*L3 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C7 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C8)*L2 + (-512*I*pi**9*C1*C3*C4*C5*C7 - 512*I*pi**9*C1*C3*C4*C5*C8)*L3)*L4)*L5 + (((-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6)*C7 + (-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6 - 512*I*pi**9*C1*C2*C3*C7)*C8)*L2*L3 + ((((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6)*C7 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7)*C8)*L2 + ((-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6)*C7 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7)*C8)*L3)*L4 + (((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6*C7 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7)*C8)*L2 + (-512*I*pi**9*C1*C3*C5*C6*C7 + (-512*I*pi**9*C1*C3*C5*C6 - 512*I*pi**9*C1*C3*C5*C7)*C8)*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6*C7 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7)*C8)*L4)*L5)*L6 + (-512*I*pi**9*C1*C2*C3*C7*C8*L2*L3 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7*C8*L2 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7*C8*L3)*L4 + (-512*I*pi**9*C1*C3*C5*C7*C8*L3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7*C8*L2 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7*C8*L4)*L5 + (-512*I*pi**9*C1*C5*C6*C7*C8*L5 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7*C8*L2 + (-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7*C8*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7*C8*L4)*L6)*L7)*L8)*ZL*ZS + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L2 + (512*I*pi**9*C1*C3*C4*C5*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*L1*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*L1*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*L1*L2 + ((512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7)*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*L1 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C3*C4*C5*C6 + 512*I*pi**9*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*L1*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*L1*L2 + (512*I*pi**9*C1*C3*C5*C7*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7*L2)*L3 + (512*I*pi**9*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*L1*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*L1 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7*L3)*L4 + (512*I*pi**9*C1*C5*C6*C7*L1 + 512*I*pi**9*C3*C5*C6*C7*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*L8)*freq**9 - 256*(((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L2*L3 + (pi**8*C1*C3*C4*C5*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L2 + (pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L2 + (pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L3)*L4 + (pi**8*C1*C3*C5*C7*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L4)*L5 + (pi**8*C1*C5*C6*C7*L5 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L4)*L6)*L7)*L8*ZS - ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L1*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L1*L2 + ((pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C6 + (pi**8*C1 + pi**8*C2)*C3*C5*C7)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7)*L2 + (pi**8*C3*C4*C5*C6 + pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L1*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L1*L2 + (pi**8*C1*C3*C5*C7*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C7*L2)*L3 + (pi**8*C3*C4*C5*C7*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L1*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7*L3)*L4 + (pi**8*C1*C5*C6*C7*L1 + pi**8*C3*C5*C6*C7*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7*L2 + (pi**8*C3 + pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8)*L1*L2 + (((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C8)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8)*L1*L2 + ((pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C7 + (pi**8*C1 + pi**8*C2)*C3*C5*C8)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C8)*L2 + (pi**8*C3*C4*C5*C7 + pi**8*C3*C4*C5*C8)*L3)*L4)*L5 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8)*L1*L2 + (((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C8)*L2)*L3 + ((((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8)*L1 + ((((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C8)*L2 + ((pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C8)*L3)*L4 + ((pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8)*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C8)*L2 + (pi**8*C3*C5*C6*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C8)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C8)*L4)*L5)*L6 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8*L1*L2 + (pi**8*C1*C3*C7*C8*L1 + (pi**8*C1 + pi**8*C2)*C3*C7*C8*L2)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C8*L2 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C8*L3)*L4 + (pi**8*C1*C5*C7*C8*L1 + pi**8*C3*C5*C7*C8*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C8*L2 + (pi**8*C3 + pi**8*C4)*C5*C7*C8*L4)*L5 + (pi**8*C5*C6*C7*C8*L5 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C8*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C8*L2 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C8*L3 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C8*L4)*L6)*L7)*L8)*ZL)*freq**8 + (((128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L2*L3 + (128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((128*I*pi**7*C1*C2*C3*C5 + 128*I*pi**7*C1*C2*C3*C6 + 128*I*pi**7*C1*C2*C3*C7)*L2*L3 + (((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C6 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C7)*L2 + (128*I*pi**7*C1*C3*C4*C5 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C6 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C7)*L3)*L4 + (((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C7)*L2 + (128*I*pi**7*C1*C3*C5*C6 + 128*I*pi**7*C1*C3*C5*C7)*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (128*I*pi**7*C1*C2*C3*C7*L2*L3 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C7*L2 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C7*L3)*L4 + (128*I*pi**7*C1*C3*C5*C7*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C7*L2 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C7*L4)*L5 + (128*I*pi**7*C1*C5*C6*C7*L5 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6)*C7*L2 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6)*C7*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6)*C7*L4)*L6)*L7 + ((128*I*pi**7*C1*C2*C3*C7 + 128*I*pi**7*C1*C2*C3*C8)*L2*L3 + (((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C7 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C8)*L2 + ((128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C7 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C8)*L3)*L4 + (((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C7 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C8)*L2 + (128*I*pi**7*C1*C3*C5*C7 + 128*I*pi**7*C1*C3*C5*C8)*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C7 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C8)*L4)*L5 + ((((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6)*C7 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7)*C8)*L2 + ((128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6)*C7 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6 + 128*I*pi**7*C1*C3*C7)*C8)*L3 + (((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6)*C7 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7)*C8)*L4 + (128*I*pi**7*C1*C5*C6*C7 + (128*I*pi**7*C1*C5*C6 + 128*I*pi**7*C1*C5*C7)*C8)*L5)*L6 + (128*I*pi**7*C1*C3*C7*C8*L3 + 128*I*pi**7*C1*C5*C7*C8*L5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7*C8*L2 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7*C8*L4 + (128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7*C8*L6)*L7)*L8)*ZL*ZS + (-128*I*pi**7*C1*C2*C3*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L2)*L4)*L5 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*L1*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7)*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*L1 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7)*L2 + (-128*I*pi**7*C3*C4*C5 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C6 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7)*L3)*L4 + ((-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7)*L2 + (-128*I*pi**7*C3*C5*C6 - 128*I*pi**7*C3*C5*C7)*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7)*L4)*L5)*L6 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*L1*L2 + (-128*I*pi**7*C1*C3*C7*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7*L3)*L4 + (-128*I*pi**7*C1*C5*C7*L1 - 128*I*pi**7*C3*C5*C7*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7*L4)*L5 + (-128*I*pi**7*C5*C6*C7*L5 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7*L4)*L6)*L7)*L8)*freq**7 + 64*((pi**6*C1*C2*C3*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L3)*L4 + (pi**6*C1*C3*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L2 + (pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L4 + (pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L5)*L6 + (pi**6*C1*C3*C7*L3 + pi**6*C1*C5*C7*L5 + (pi**6*C1*C2 + pi**6*C1*C3)*C7*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L4 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L6)*L7)*L8*ZS - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L1*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6 + (pi**6*C1 + pi**6*C2)*C3*C7)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6 + (pi**6*C3*C4 + pi**6*C3*C5)*C7)*L3)*L4 + ((pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7)*L2 + (pi**6*C3*C5*C6 + pi**6*C3*C5*C7)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C6 + (pi**6*C3 + pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((pi**6*C1*C2 + pi**6*C1*C3)*C7*L1*L2 + (pi**6*C1*C3*C7*L1 + (pi**6*C1 + pi**6*C2)*C3*C7*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C7*L3)*L4 + (pi**6*C1*C5*C7*L1 + pi**6*C3*C5*C7*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7*L2 + (pi**6*C3 + pi**6*C4)*C5*C7*L4)*L5 + (pi**6*C5*C6*C7*L5 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7*L2 + (pi**6*C3*C5 + pi**6*C3*C6)*C7*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7*L4)*L6)*L7 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8)*L1*L2 + ((pi**6*C1*C3*C7 + pi**6*C1*C3*C8)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C7 + (pi**6*C1 + pi**6*C2)*C3*C8)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C8)*L2 + ((pi**6*C3*C4 + pi**6*C3*C5)*C7 + (pi**6*C3*C4 + pi**6*C3*C5)*C8)*L3)*L4 + ((pi**6*C1*C5*C7 + pi**6*C1*C5*C8)*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C8)*L2 + (pi**6*C3*C5*C7 + pi**6*C3*C5*C8)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C7 + (pi**6*C3 + pi**6*C4)*C5*C8)*L4)*L5 + (((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8)*L1 + (((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C8)*L2 + ((pi**6*C3*C5 + pi**6*C3*C6)*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C8)*L3 + (((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C8)*L4 + (pi**6*C5*C6*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C8)*L5)*L6 + (pi**6*C1*C7*C8*L1 + pi**6*C3*C7*C8*L3 + pi**6*C5*C7*C8*L5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C8*L2 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C8*L4 + (pi**6*C5 + pi**6*C6)*C7*C8*L6)*L7)*L8)*ZL)*freq**6 + ((-32*I*pi**5*C1*C2*C3*L2*L3 + ((-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 - 32*I*pi**5*C1*C3*C5)*L3)*L4 + (-32*I*pi**5*C1*C3*C5*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L4)*L5 + (((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C6 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C7)*L2 + (-32*I*pi**5*C1*C3*C5 - 32*I*pi**5*C1*C3*C6 - 32*I*pi**5*C1*C3*C7)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C6 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C7)*L4 + (-32*I*pi**5*C1*C5*C6 - 32*I*pi**5*C1*C5*C7)*L5)*L6 + (-32*I*pi**5*C1*C3*C7*L3 - 32*I*pi**5*C1*C5*C7*L5 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C7*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C7*L4 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6)*C7*L6)*L7 + (-32*I*pi**5*C1*C7*C8*L7 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C7 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C8)*L2 + (-32*I*pi**5*C1*C3*C7 - 32*I*pi**5*C1*C3*C8)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C7 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C8)*L4 + (-32*I*pi**5*C1*C5*C7 - 32*I*pi**5*C1*C5*C8)*L5 + ((-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6)*C7 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6 - 32*I*pi**5*C1*C7)*C8)*L6)*L8)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L4)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7)*L2 + (32*I*pi**5*C3*C5 + 32*I*pi**5*C3*C6 + 32*I*pi**5*C3*C7)*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7)*L4 + (32*I*pi**5*C5*C6 + 32*I*pi**5*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C7*L1 + 32*I*pi**5*C3*C7*L3 + 32*I*pi**5*C5*C7*L5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6)*C7*L6)*L7)*L8)*freq**5 - 16*((pi**4*C1*C3*L3 + pi**4*C1*C5*L5 + pi**4*C1*C7*L7 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L4 + (pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L6)*L8*ZS - ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4)*L5 + ((pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7)*L2 + (pi**4*C3*C5 + pi**4*C3*C6 + pi**4*C3*C7)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7)*L4 + (pi**4*C5*C6 + pi**4*C5*C7)*L5)*L6 + (pi**4*C1*C7*L1 + pi**4*C3*C7*L3 + pi**4*C5*C7*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7*L4 + (pi**4*C5 + pi**4*C6)*C7*L6)*L7 + (pi**4*C7*C8*L7 + (pi**4*C1*C7 + pi**4*C1*C8)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C8)*L2 + (pi**4*C3*C7 + pi**4*C3*C8)*L3 + ((pi**4*C3 + pi**4*C4 + pi**4*C5)*C7 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C8)*L4 + (pi**4*C5*C7 + pi**4*C5*C8)*L5 + ((pi**4*C5 + pi**4*C6)*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C8)*L6)*L8)*ZL)*freq**4 + ((8*I*pi**3*C1*C3*L3 + 8*I*pi**3*C1*C5*L5 + 8*I*pi**3*C1*C7*L7 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L4 + (8*I*pi**3*C1*C5 + 8*I*pi**3*C1*C6 + 8*I*pi**3*C1*C7)*L6 + (8*I*pi**3*C1*C7 + 8*I*pi**3*C1*C8)*L8)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 - 8*I*pi**3*C5*L5 - 8*I*pi**3*C7*L7 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L4 + (-8*I*pi**3*C5 - 8*I*pi**3*C6 - 8*I*pi**3*C7)*L6)*L8)*freq**3 + 4*(pi**2*C1*L8*ZS - (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + pi**2*C7*L7 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6 + pi**2*C7)*L6 + (pi**2*C7 + pi**2*C8)*L8)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS + 2*I*pi*L8)*freq + ZL)/(65536*pi**16*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*ZL*freq**16 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C8*L2*L3*L4*L5*L6*L7*L8*ZL*ZS - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*L8)*freq**15 - 16384*(pi**14*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7*L8*ZS + (pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8)*L1*L2*L3*L4*L5*L6 + (pi**14*C1*C2*C3*C4*C5*C7*C8*L1*L2*L3*L4*L5 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8*L1*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C6*C7*C8*L1*L2*L3 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8*L1*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C8*L1 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C8*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL)*freq**14 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C8)*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*C8*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C8*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*C8*L2*L3 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*C8*L3 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C8*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*L1*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*L1 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7)*L8)*freq**13 + 4096*(((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**12*C1*C3*C4*C5*C6*C7*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*L8*ZS + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (pi**12*C1*C3*C4*C5*C6*C7*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8)*L1*L2*L3*L4*L5 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8)*L1*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8)*L1*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8)*L1*L2 + ((pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8)*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C8)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8*L1*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C7*C8*L1*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8*L1*L2 + (pi**12*C1*C3*C4*C5*C7*C8*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C8*L2)*L3)*L4)*L5 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8*L1*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8*L1*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C8*L2)*L3)*L4 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8*L1*L2 + (pi**12*C1*C3*C5*C6*C7*C8*L1 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C8*L2)*L3 + (pi**12*C3*C4*C5*C6*C7*C8*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8*L1 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C8*L2)*L4)*L5)*L6)*L7)*L8)*ZL)*freq**12 + (((-2048*I*pi**11*C1*C2*C3*C4*C5*C6 - 2048*I*pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C2*C3*C4*C5*C7 - 2048*I*pi**11*C1*C2*C3*C4*C5*C8)*L2*L3*L4*L5 + (((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C8)*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C8)*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C8)*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C8)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C8*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*C8*L2*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C7*C8*L3 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C8*L2)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C8*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C8*L2 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C8*L3)*L4 + (-2048*I*pi**11*C1*C3*C5*C6*C7*C8*L3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C8*L2 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C8*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (-2048*I*pi**11*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*L1*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*L1*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*L1*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*L1*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*L1 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*L1*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*L1*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*L1*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*L1 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*L8)*freq**11 - 1024*((pi**10*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L2 + (pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L2*L3 + (pi**10*C1*C3*C4*C5*C7*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**10*C1*C3*C5*C6*C7*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*L8*ZS + (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (pi**10*C1*C3*C4*C5*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L1*L2 + (pi**10*C1*C3*C5*C6*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (pi**10*C3*C4*C5*C6*C7*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8)*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8)*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8)*L1*L2 + ((pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C8)*L2)*L3)*L4)*L5 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8)*L1*L2*L3 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8)*L1*L2 + (((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8)*L1 + (((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C8)*L2)*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8)*L1*L2 + ((pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C8)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8)*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C8)*L2 + (pi**10*C3*C4*C5*C6*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C8)*L3)*L4)*L5)*L6 + (pi**10*C1*C2*C3*C7*C8*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8*L1*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C8*L2)*L3)*L4 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8*L1*L2 + (pi**10*C1*C3*C5*C7*C8*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C8*L2)*L3 + (pi**10*C3*C4*C5*C7*C8*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C8*L2)*L4)*L5 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8*L1*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C8*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C8*L2 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C8*L3)*L4 + (pi**10*C1*C5*C6*C7*C8*L1 + pi**10*C3*C5*C6*C7*C8*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C8*L2 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C8*L4)*L5)*L6)*L7)*L8)*ZL)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C5*C6 + 512*I*pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C1*C3*C4*C5*C6 + 512*I*pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*C7*L2*L3 + (512*I*pi**9*C1*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (512*I*pi**9*C1*C3*C5*C6*C7*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + (((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C8)*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C5*C7 + 512*I*pi**9*C1*C2*C3*C5*C8)*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C8)*L2 + (512*I*pi**9*C1*C3*C4*C5*C7 + 512*I*pi**9*C1*C3*C4*C5*C8)*L3)*L4)*L5 + (((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C8)*L2*L3 + ((((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C8)*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C8)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C8)*L2 + (512*I*pi**9*C1*C3*C5*C6*C7 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C8)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C8)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*C8*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C8*L2 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C8*L3)*L4 + (512*I*pi**9*C1*C3*C5*C7*C8*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C8*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C8*L4)*L5 + (512*I*pi**9*C1*C5*C6*C7*C8*L5 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C8*L2 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C8*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C8*L4)*L6)*L7)*L8)*ZL*ZS + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L2 + (512*I*pi**9*C1*C3*C4*C5*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*L1*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*L1*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*L1*L2 + ((512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7)*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*L1 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C3*C4*C5*C6 + 512*I*pi**9*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*L1*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*L1*L2 + (512*I*pi**9*C1*C3*C5*C7*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7*L2)*L3 + (512*I*pi**9*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*L1*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*L1 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7*L3)*L4 + (512*I*pi**9*C1*C5*C6*C7*L1 + 512*I*pi**9*C3*C5*C6*C7*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*L8)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L2*L3 + (pi**8*C1*C3*C4*C5*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L2 + (pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L2 + (pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L3)*L4 + (pi**8*C1*C3*C5*C7*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L4)*L5 + (pi**8*C1*C5*C6*C7*L5 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L4)*L6)*L7)*L8*ZS + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L1*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L1*L2 + ((pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C6 + (pi**8*C1 + pi**8*C2)*C3*C5*C7)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7)*L2 + (pi**8*C3*C4*C5*C6 + pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L1*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L1*L2 + (pi**8*C1*C3*C5*C7*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C7*L2)*L3 + (pi**8*C3*C4*C5*C7*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L1*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7*L3)*L4 + (pi**8*C1*C5*C6*C7*L1 + pi**8*C3*C5*C6*C7*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7*L2 + (pi**8*C3 + pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8)*L1*L2 + (((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C8)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8)*L1*L2 + ((pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C7 + (pi**8*C1 + pi**8*C2)*C3*C5*C8)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C8)*L2 + (pi**8*C3*C4*C5*C7 + pi**8*C3*C4*C5*C8)*L3)*L4)*L5 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8)*L1*L2 + (((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C8)*L2)*L3 + ((((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8)*L1 + ((((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C8)*L2 + ((pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C8)*L3)*L4 + ((pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8)*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C8)*L2 + (pi**8*C3*C5*C6*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C8)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C8)*L4)*L5)*L6 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8*L1*L2 + (pi**8*C1*C3*C7*C8*L1 + (pi**8*C1 + pi**8*C2)*C3*C7*C8*L2)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C8*L2 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C8*L3)*L4 + (pi**8*C1*C5*C7*C8*L1 + pi**8*C3*C5*C7*C8*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C8*L2 + (pi**8*C3 + pi**8*C4)*C5*C7*C8*L4)*L5 + (pi**8*C5*C6*C7*C8*L5 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C8*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C8*L2 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C8*L3 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C8*L4)*L6)*L7)*L8)*ZL)*freq**8 + (((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C5*L2*L3 + (-128*I*pi**7*C1*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((-128*I*pi**7*C1*C2*C3*C5 - 128*I*pi**7*C1*C2*C3*C6 - 128*I*pi**7*C1*C2*C3*C7)*L2*L3 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7)*L2 + (-128*I*pi**7*C1*C3*C4*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C6 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7)*L3)*L4 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7)*L2 + (-128*I*pi**7*C1*C3*C5*C6 - 128*I*pi**7*C1*C3*C5*C7)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (-128*I*pi**7*C1*C2*C3*C7*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7*L2 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7*L3)*L4 + (-128*I*pi**7*C1*C3*C5*C7*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7*L4)*L5 + (-128*I*pi**7*C1*C5*C6*C7*L5 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7*L2 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7*L4)*L6)*L7 + ((-128*I*pi**7*C1*C2*C3*C7 - 128*I*pi**7*C1*C2*C3*C8)*L2*L3 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C8)*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C8)*L3)*L4 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C8)*L2 + (-128*I*pi**7*C1*C3*C5*C7 - 128*I*pi**7*C1*C3*C5*C8)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C8)*L4)*L5 + ((((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C8)*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C8)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C8)*L4 + (-128*I*pi**7*C1*C5*C6*C7 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C8)*L5)*L6 + (-128*I*pi**7*C1*C3*C7*C8*L3 - 128*I*pi**7*C1*C5*C7*C8*L5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C8*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C8*L4 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C8*L6)*L7)*L8)*ZL*ZS + (-128*I*pi**7*C1*C2*C3*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L2)*L4)*L5 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*L1*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7)*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*L1 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7)*L2 + (-128*I*pi**7*C3*C4*C5 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C6 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7)*L3)*L4 + ((-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7)*L2 + (-128*I*pi**7*C3*C5*C6 - 128*I*pi**7*C3*C5*C7)*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7)*L4)*L5)*L6 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*L1*L2 + (-128*I*pi**7*C1*C3*C7*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7*L3)*L4 + (-128*I*pi**7*C1*C5*C7*L1 - 128*I*pi**7*C3*C5*C7*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7*L4)*L5 + (-128*I*pi**7*C5*C6*C7*L5 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7*L4)*L6)*L7)*L8)*freq**7 - 64*((pi**6*C1*C2*C3*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L3)*L4 + (pi**6*C1*C3*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L2 + (pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L4 + (pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L5)*L6 + (pi**6*C1*C3*C7*L3 + pi**6*C1*C5*C7*L5 + (pi**6*C1*C2 + pi**6*C1*C3)*C7*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L4 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L6)*L7)*L8*ZS + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L1*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6 + (pi**6*C1 + pi**6*C2)*C3*C7)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6 + (pi**6*C3*C4 + pi**6*C3*C5)*C7)*L3)*L4 + ((pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7)*L2 + (pi**6*C3*C5*C6 + pi**6*C3*C5*C7)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C6 + (pi**6*C3 + pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((pi**6*C1*C2 + pi**6*C1*C3)*C7*L1*L2 + (pi**6*C1*C3*C7*L1 + (pi**6*C1 + pi**6*C2)*C3*C7*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C7*L3)*L4 + (pi**6*C1*C5*C7*L1 + pi**6*C3*C5*C7*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7*L2 + (pi**6*C3 + pi**6*C4)*C5*C7*L4)*L5 + (pi**6*C5*C6*C7*L5 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7*L2 + (pi**6*C3*C5 + pi**6*C3*C6)*C7*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7*L4)*L6)*L7 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8)*L1*L2 + ((pi**6*C1*C3*C7 + pi**6*C1*C3*C8)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C7 + (pi**6*C1 + pi**6*C2)*C3*C8)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C8)*L2 + ((pi**6*C3*C4 + pi**6*C3*C5)*C7 + (pi**6*C3*C4 + pi**6*C3*C5)*C8)*L3)*L4 + ((pi**6*C1*C5*C7 + pi**6*C1*C5*C8)*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C8)*L2 + (pi**6*C3*C5*C7 + pi**6*C3*C5*C8)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C7 + (pi**6*C3 + pi**6*C4)*C5*C8)*L4)*L5 + (((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8)*L1 + (((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C8)*L2 + ((pi**6*C3*C5 + pi**6*C3*C6)*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C8)*L3 + (((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C8)*L4 + (pi**6*C5*C6*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C8)*L5)*L6 + (pi**6*C1*C7*C8*L1 + pi**6*C3*C7*C8*L3 + pi**6*C5*C7*C8*L5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C8*L2 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C8*L4 + (pi**6*C5 + pi**6*C6)*C7*C8*L6)*L7)*L8)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L2*L3 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + (32*I*pi**5*C1*C3*C4 + 32*I*pi**5*C1*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C3*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L4)*L5 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7)*L2 + (32*I*pi**5*C1*C3*C5 + 32*I*pi**5*C1*C3*C6 + 32*I*pi**5*C1*C3*C7)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7)*L4 + (32*I*pi**5*C1*C5*C6 + 32*I*pi**5*C1*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C3*C7*L3 + 32*I*pi**5*C1*C5*C7*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7*L4 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7*L6)*L7 + (32*I*pi**5*C1*C7*C8*L7 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C8)*L2 + (32*I*pi**5*C1*C3*C7 + 32*I*pi**5*C1*C3*C8)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C8)*L4 + (32*I*pi**5*C1*C5*C7 + 32*I*pi**5*C1*C5*C8)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C8)*L6)*L8)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L4)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7)*L2 + (32*I*pi**5*C3*C5 + 32*I*pi**5*C3*C6 + 32*I*pi**5*C3*C7)*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7)*L4 + (32*I*pi**5*C5*C6 + 32*I*pi**5*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C7*L1 + 32*I*pi**5*C3*C7*L3 + 32*I*pi**5*C5*C7*L5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6)*C7*L6)*L7)*L8)*freq**5 + 16*((pi**4*C1*C3*L3 + pi**4*C1*C5*L5 + pi**4*C1*C7*L7 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L4 + (pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L6)*L8*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4)*L5 + ((pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7)*L2 + (pi**4*C3*C5 + pi**4*C3*C6 + pi**4*C3*C7)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7)*L4 + (pi**4*C5*C6 + pi**4*C5*C7)*L5)*L6 + (pi**4*C1*C7*L1 + pi**4*C3*C7*L3 + pi**4*C5*C7*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7*L4 + (pi**4*C5 + pi**4*C6)*C7*L6)*L7 + (pi**4*C7*C8*L7 + (pi**4*C1*C7 + pi**4*C1*C8)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C8)*L2 + (pi**4*C3*C7 + pi**4*C3*C8)*L3 + ((pi**4*C3 + pi**4*C4 + pi**4*C5)*C7 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C8)*L4 + (pi**4*C5*C7 + pi**4*C5*C8)*L5 + ((pi**4*C5 + pi**4*C6)*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C8)*L6)*L8)*ZL)*freq**4 + ((-8*I*pi**3*C1*C3*L3 - 8*I*pi**3*C1*C5*L5 - 8*I*pi**3*C1*C7*L7 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L4 + (-8*I*pi**3*C1*C5 - 8*I*pi**3*C1*C6 - 8*I*pi**3*C1*C7)*L6 + (-8*I*pi**3*C1*C7 - 8*I*pi**3*C1*C8)*L8)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 - 8*I*pi**3*C5*L5 - 8*I*pi**3*C7*L7 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L4 + (-8*I*pi**3*C5 - 8*I*pi**3*C6 - 8*I*pi**3*C7)*L6)*L8)*freq**3 - 4*(pi**2*C1*L8*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + pi**2*C7*L7 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6 + pi**2*C7)*L6 + (pi**2*C7 + pi**2*C8)*L8)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L8)*freq + ZL)

                    S21 = 512*pi**8*C1*C3*C5*C7*L2*L4*L6*L8*ZL*ZS*freq**8/((65536*pi**16*C1*C2*C3*C4*C5*C6*C7*C8*L1*L2*L3*L4*L5*L6*L7*L8*ZL*freq**16 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C8*L2*L3*L4*L5*L6*L7*L8*ZL*ZS - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7*L8)*freq**15 - 16384*(pi**14*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7*L8*ZS + (pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8)*L1*L2*L3*L4*L5*L6 + (pi**14*C1*C2*C3*C4*C5*C7*C8*L1*L2*L3*L4*L5 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8*L1*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C6*C7*C8*L1*L2*L3 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8*L1*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C8*L1 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C8*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL)*freq**14 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C8)*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*C8*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C8*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*C8*L2*L3 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*C8*L3 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C8*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*L1*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*L1 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7)*L8)*freq**13 + 4096*(((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**12*C1*C3*C4*C5*C6*C7*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*L8*ZS + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (pi**12*C1*C3*C4*C5*C6*C7*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8)*L1*L2*L3*L4*L5 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8)*L1*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8)*L1*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8)*L1*L2 + ((pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8)*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C8)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8*L1*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C7*C8*L1*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8*L1*L2 + (pi**12*C1*C3*C4*C5*C7*C8*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C8*L2)*L3)*L4)*L5 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8*L1*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8*L1*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C8*L2)*L3)*L4 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8*L1*L2 + (pi**12*C1*C3*C5*C6*C7*C8*L1 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C8*L2)*L3 + (pi**12*C3*C4*C5*C6*C7*C8*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8*L1 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C8*L2)*L4)*L5)*L6)*L7)*L8)*ZL)*freq**12 + (((-2048*I*pi**11*C1*C2*C3*C4*C5*C6 - 2048*I*pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C2*C3*C4*C5*C7 - 2048*I*pi**11*C1*C2*C3*C4*C5*C8)*L2*L3*L4*L5 + (((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C8)*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C8)*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C8)*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C8)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C8*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*C8*L2*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C7*C8*L3 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C8*L2)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C8*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C8*L2 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C8*L3)*L4 + (-2048*I*pi**11*C1*C3*C5*C6*C7*C8*L3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C8*L2 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C8*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (-2048*I*pi**11*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*L1*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*L1*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*L1*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*L1*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*L1 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*L1*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*L1*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*L1*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*L1 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*L1 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7)*L8)*freq**11 - 1024*((pi**10*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L2 + (pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L2*L3 + (pi**10*C1*C3*C4*C5*C7*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**10*C1*C3*C5*C6*C7*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*L8*ZS + (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (pi**10*C1*C3*C4*C5*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L1*L2 + (pi**10*C1*C3*C5*C6*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (pi**10*C3*C4*C5*C6*C7*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8)*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8)*L1*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8)*L1*L2 + ((pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C8)*L2)*L3)*L4)*L5 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8)*L1*L2*L3 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8)*L1*L2 + (((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8)*L1 + (((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C8)*L2)*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8)*L1*L2 + ((pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8)*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C8)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8)*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C8)*L2 + (pi**10*C3*C4*C5*C6*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C8)*L3)*L4)*L5)*L6 + (pi**10*C1*C2*C3*C7*C8*L1*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8*L1*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C8*L2)*L3)*L4 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8*L1*L2 + (pi**10*C1*C3*C5*C7*C8*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C8*L2)*L3 + (pi**10*C3*C4*C5*C7*C8*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C8*L2)*L4)*L5 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8*L1*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C8*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C8*L2 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C8*L3)*L4 + (pi**10*C1*C5*C6*C7*C8*L1 + pi**10*C3*C5*C6*C7*C8*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C8*L2 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C8*L4)*L5)*L6)*L7)*L8)*ZL)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C5*C6 + 512*I*pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C1*C3*C4*C5*C6 + 512*I*pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*C7*L2*L3 + (512*I*pi**9*C1*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (512*I*pi**9*C1*C3*C5*C6*C7*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + (((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C8)*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C5*C7 + 512*I*pi**9*C1*C2*C3*C5*C8)*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C8)*L2 + (512*I*pi**9*C1*C3*C4*C5*C7 + 512*I*pi**9*C1*C3*C4*C5*C8)*L3)*L4)*L5 + (((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C8)*L2*L3 + ((((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C8)*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C8)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C8)*L2 + (512*I*pi**9*C1*C3*C5*C6*C7 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C8)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C8)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*C8*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C8*L2 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C8*L3)*L4 + (512*I*pi**9*C1*C3*C5*C7*C8*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C8*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C8*L4)*L5 + (512*I*pi**9*C1*C5*C6*C7*C8*L5 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C8*L2 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C8*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C8*L4)*L6)*L7)*L8)*ZL*ZS + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L2*L3*L4 + (512*I*pi**9*C1*C2*C3*C5*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L2 + (512*I*pi**9*C1*C3*C4*C5*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*L1*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*L1*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*L1*L2 + ((512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7)*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*L1 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C3*C4*C5*C6 + 512*I*pi**9*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*L1*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*L1*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*L1*L2 + (512*I*pi**9*C1*C3*C5*C7*L1 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7*L2)*L3 + (512*I*pi**9*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*L1*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*L1 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*L1 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7*L3)*L4 + (512*I*pi**9*C1*C5*C6*C7*L1 + 512*I*pi**9*C3*C5*C6*C7*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7*L4)*L5)*L6)*L7)*L8)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L2*L3 + (pi**8*C1*C3*C4*C5*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L2 + (pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L2 + (pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L3)*L4 + (pi**8*C1*C3*C5*C7*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L4)*L5 + (pi**8*C1*C5*C6*C7*L5 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L4)*L6)*L7)*L8*ZS + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L1*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L1*L2 + ((pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C6 + (pi**8*C1 + pi**8*C2)*C3*C5*C7)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7)*L2 + (pi**8*C3*C4*C5*C6 + pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L1*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L1*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L1*L2 + (pi**8*C1*C3*C5*C7*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C7*L2)*L3 + (pi**8*C3*C4*C5*C7*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L1*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7*L3)*L4 + (pi**8*C1*C5*C6*C7*L1 + pi**8*C3*C5*C6*C7*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7*L2 + (pi**8*C3 + pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8)*L1*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8)*L1*L2 + (((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C8)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8)*L1*L2 + ((pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8)*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C7 + (pi**8*C1 + pi**8*C2)*C3*C5*C8)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C8)*L2 + (pi**8*C3*C4*C5*C7 + pi**8*C3*C4*C5*C8)*L3)*L4)*L5 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8)*L1*L2 + (((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8)*L1 + (((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C8)*L2)*L3 + ((((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8)*L1 + ((((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C8)*L2 + ((pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C8)*L3)*L4 + ((pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8)*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C8)*L2 + (pi**8*C3*C5*C6*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C8)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C8)*L4)*L5)*L6 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8*L1*L2 + (pi**8*C1*C3*C7*C8*L1 + (pi**8*C1 + pi**8*C2)*C3*C7*C8*L2)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C8*L2 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C8*L3)*L4 + (pi**8*C1*C5*C7*C8*L1 + pi**8*C3*C5*C7*C8*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C8*L2 + (pi**8*C3 + pi**8*C4)*C5*C7*C8*L4)*L5 + (pi**8*C5*C6*C7*C8*L5 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C8*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C8*L2 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C8*L3 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C8*L4)*L6)*L7)*L8)*ZL)*freq**8 + (((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C5*L2*L3 + (-128*I*pi**7*C1*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((-128*I*pi**7*C1*C2*C3*C5 - 128*I*pi**7*C1*C2*C3*C6 - 128*I*pi**7*C1*C2*C3*C7)*L2*L3 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7)*L2 + (-128*I*pi**7*C1*C3*C4*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C6 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7)*L3)*L4 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7)*L2 + (-128*I*pi**7*C1*C3*C5*C6 - 128*I*pi**7*C1*C3*C5*C7)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (-128*I*pi**7*C1*C2*C3*C7*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7*L2 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7*L3)*L4 + (-128*I*pi**7*C1*C3*C5*C7*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7*L4)*L5 + (-128*I*pi**7*C1*C5*C6*C7*L5 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7*L2 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7*L4)*L6)*L7 + ((-128*I*pi**7*C1*C2*C3*C7 - 128*I*pi**7*C1*C2*C3*C8)*L2*L3 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C8)*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C8)*L3)*L4 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C8)*L2 + (-128*I*pi**7*C1*C3*C5*C7 - 128*I*pi**7*C1*C3*C5*C8)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C8)*L4)*L5 + ((((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C8)*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C8)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C8)*L4 + (-128*I*pi**7*C1*C5*C6*C7 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C8)*L5)*L6 + (-128*I*pi**7*C1*C3*C7*C8*L3 - 128*I*pi**7*C1*C5*C7*C8*L5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C8*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C8*L4 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C8*L6)*L7)*L8)*ZL*ZS + (-128*I*pi**7*C1*C2*C3*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L2)*L4)*L5 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*L1*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7)*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*L1 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7)*L2 + (-128*I*pi**7*C3*C4*C5 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C6 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7)*L3)*L4 + ((-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7)*L2 + (-128*I*pi**7*C3*C5*C6 - 128*I*pi**7*C3*C5*C7)*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7)*L4)*L5)*L6 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*L1*L2 + (-128*I*pi**7*C1*C3*C7*L1 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7*L3)*L4 + (-128*I*pi**7*C1*C5*C7*L1 - 128*I*pi**7*C3*C5*C7*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7*L4)*L5 + (-128*I*pi**7*C5*C6*C7*L5 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*L1 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7*L4)*L6)*L7)*L8)*freq**7 - 64*((pi**6*C1*C2*C3*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L3)*L4 + (pi**6*C1*C3*C5*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L2 + (pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L4 + (pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L5)*L6 + (pi**6*C1*C3*C7*L3 + pi**6*C1*C5*C7*L5 + (pi**6*C1*C2 + pi**6*C1*C3)*C7*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L4 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L6)*L7)*L8*ZS + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L1*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6 + (pi**6*C1 + pi**6*C2)*C3*C7)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6 + (pi**6*C3*C4 + pi**6*C3*C5)*C7)*L3)*L4 + ((pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7)*L2 + (pi**6*C3*C5*C6 + pi**6*C3*C5*C7)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C6 + (pi**6*C3 + pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((pi**6*C1*C2 + pi**6*C1*C3)*C7*L1*L2 + (pi**6*C1*C3*C7*L1 + (pi**6*C1 + pi**6*C2)*C3*C7*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C7*L3)*L4 + (pi**6*C1*C5*C7*L1 + pi**6*C3*C5*C7*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7*L2 + (pi**6*C3 + pi**6*C4)*C5*C7*L4)*L5 + (pi**6*C5*C6*C7*L5 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7*L2 + (pi**6*C3*C5 + pi**6*C3*C6)*C7*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7*L4)*L6)*L7 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8)*L1*L2 + ((pi**6*C1*C3*C7 + pi**6*C1*C3*C8)*L1 + ((pi**6*C1 + pi**6*C2)*C3*C7 + (pi**6*C1 + pi**6*C2)*C3*C8)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8)*L1 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C8)*L2 + ((pi**6*C3*C4 + pi**6*C3*C5)*C7 + (pi**6*C3*C4 + pi**6*C3*C5)*C8)*L3)*L4 + ((pi**6*C1*C5*C7 + pi**6*C1*C5*C8)*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C8)*L2 + (pi**6*C3*C5*C7 + pi**6*C3*C5*C8)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C7 + (pi**6*C3 + pi**6*C4)*C5*C8)*L4)*L5 + (((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8)*L1 + (((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C8)*L2 + ((pi**6*C3*C5 + pi**6*C3*C6)*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C8)*L3 + (((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C8)*L4 + (pi**6*C5*C6*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C8)*L5)*L6 + (pi**6*C1*C7*C8*L1 + pi**6*C3*C7*C8*L3 + pi**6*C5*C7*C8*L5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C8*L2 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C8*L4 + (pi**6*C5 + pi**6*C6)*C7*C8*L6)*L7)*L8)*ZL)*freq**6 + ((32*I*pi**5*C1*C2*C3*L2*L3 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + (32*I*pi**5*C1*C3*C4 + 32*I*pi**5*C1*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C3*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L4)*L5 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7)*L2 + (32*I*pi**5*C1*C3*C5 + 32*I*pi**5*C1*C3*C6 + 32*I*pi**5*C1*C3*C7)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7)*L4 + (32*I*pi**5*C1*C5*C6 + 32*I*pi**5*C1*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C3*C7*L3 + 32*I*pi**5*C1*C5*C7*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7*L4 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7*L6)*L7 + (32*I*pi**5*C1*C7*C8*L7 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C8)*L2 + (32*I*pi**5*C1*C3*C7 + 32*I*pi**5*C1*C3*C8)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C8)*L4 + (32*I*pi**5*C1*C5*C7 + 32*I*pi**5*C1*C5*C8)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C8)*L6)*L8)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L4)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*L1 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7)*L2 + (32*I*pi**5*C3*C5 + 32*I*pi**5*C3*C6 + 32*I*pi**5*C3*C7)*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7)*L4 + (32*I*pi**5*C5*C6 + 32*I*pi**5*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C7*L1 + 32*I*pi**5*C3*C7*L3 + 32*I*pi**5*C5*C7*L5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6)*C7*L6)*L7)*L8)*freq**5 + 16*((pi**4*C1*C3*L3 + pi**4*C1*C5*L5 + pi**4*C1*C7*L7 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L4 + (pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L6)*L8*ZS + ((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4)*L5 + ((pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7)*L2 + (pi**4*C3*C5 + pi**4*C3*C6 + pi**4*C3*C7)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7)*L4 + (pi**4*C5*C6 + pi**4*C5*C7)*L5)*L6 + (pi**4*C1*C7*L1 + pi**4*C3*C7*L3 + pi**4*C5*C7*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7*L4 + (pi**4*C5 + pi**4*C6)*C7*L6)*L7 + (pi**4*C7*C8*L7 + (pi**4*C1*C7 + pi**4*C1*C8)*L1 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C8)*L2 + (pi**4*C3*C7 + pi**4*C3*C8)*L3 + ((pi**4*C3 + pi**4*C4 + pi**4*C5)*C7 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C8)*L4 + (pi**4*C5*C7 + pi**4*C5*C8)*L5 + ((pi**4*C5 + pi**4*C6)*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C8)*L6)*L8)*ZL)*freq**4 + ((-8*I*pi**3*C1*C3*L3 - 8*I*pi**3*C1*C5*L5 - 8*I*pi**3*C1*C7*L7 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L4 + (-8*I*pi**3*C1*C5 - 8*I*pi**3*C1*C6 - 8*I*pi**3*C1*C7)*L6 + (-8*I*pi**3*C1*C7 - 8*I*pi**3*C1*C8)*L8)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 - 8*I*pi**3*C5*L5 - 8*I*pi**3*C7*L7 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L4 + (-8*I*pi**3*C5 - 8*I*pi**3*C6 - 8*I*pi**3*C7)*L6)*L8)*freq**3 - 4*(pi**2*C1*L8*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + pi**2*C7*L7 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6 + pi**2*C7)*L6 + (pi**2*C7 + pi**2*C8)*L8)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L8)*freq + ZL)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 9):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    L6 = comp_val['L6']
                    C6 = comp_val['C6']
                    L7 = comp_val['L7']
                    C7 = comp_val['C7']
                    L8 = comp_val['L8']
                    C8 = comp_val['C8']
                    L9 = comp_val['L9']
                    C9 = comp_val['C9']

                    S11 = (262144*I*pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*freq**18 + 131072*(pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*ZL - pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*freq**17 + (65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2*L3*L4*L5*L6*L7*L8*ZL*ZS + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C8 - 65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L2*L3*L4*L5*L6*L7*L8 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L1*L2*L3*L4*L5*L6*L7 + ((-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6 - 65536*I*pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L2*L3*L4*L5*L6 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L1*L2*L3*L4*L5 + ((-65536*I*pi**16*C1*C2*C3*C4*C5 + (-65536*I*pi**16*C1*C2*C3*C4 - 65536*I*pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L2*L3*L4 + (-65536*I*pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L1*L2*L3 + ((-65536*I*pi**16*C1*C2*C3 + (-65536*I*pi**16*C1*C2 - 65536*I*pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L2 + (-65536*I*pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L1 + (-65536*I*pi**16*C1 - 65536*I*pi**16*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**16 - 32768*((pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L1*L2*L3*L4*L5*L6*L7 + ((pi**15*C1*C2*C3*C4*C5*C6*C7 + (pi**15*C1*C2*C3*C4*C5*C6 + pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L2*L3*L4*L5*L6 + (pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L1*L2*L3*L4*L5 + ((pi**15*C1*C2*C3*C4*C5 + (pi**15*C1*C2*C3*C4 + pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L2*L3*L4 + (pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L1*L2*L3 + ((pi**15*C1*C2*C3 + (pi**15*C1*C2 + pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L2 + (pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L1 + (pi**15*C1 + pi**15*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL - ((pi**15*C1*C2*C3*C4*C5*C6*C7*C8 + pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L2*L3*L4*L5*L6*L7*L8 + (pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L2*L3*L4*L5*L6*L7 + ((pi**15*C1*C2*C3*C4*C5*C6*C7 + (pi**15*C1*C2*C3*C4*C5*C6 + pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L2*L3*L4*L5*L6 + (pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L2*L3*L4*L5 + ((pi**15*C1*C2*C3*C4*C5 + (pi**15*C1*C2*C3*C4 + pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L2*L3*L4 + (pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L2*L3 + (pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**15*C1*C2*C3 + (pi**15*C1*C2 + pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**15 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7 + (-16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*C9*L2*L3*L4*L5*L6*L7 + ((-16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7 + (-16384*I*pi**14*C1*C2*C3*C4*C5*C6 - 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C8)*C9*L2*L3*L4*L5*L6 + (-16384*I*pi**14*C1*C2*C3*C4*C5*C7*C8*C9*L2*L3*L4*L5 + ((-16384*I*pi**14*C1*C2*C3*C4*C5 + (-16384*I*pi**14*C1*C2*C3*C4 - 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C8*C9*L2*L3*L4 + (-16384*I*pi**14*C1*C2*C3*C5*C6*C7*C8*C9*L2*L3 + (-16384*I*pi**14*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (-16384*I*pi**14*C1*C2*C3 + (-16384*I*pi**14*C1*C2 - 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C8 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1*L2*L3*L4*L5*L6 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C7*C8 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7*C9)*L1*L2*L3*L4*L5 + (((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L1*L2*L3*L4 + ((16384*I*pi**14*C1*C2*C3*C5*C6*C7*C8 + 16384*I*pi**14*C1*C2*C3*C5*C6*C7*C9)*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5*C6*C7*C8 + 16384*I*pi**14*C1*C3*C4*C5*C6*C7*C9)*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C8 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C9*L1*L2*L3*L4*L5*L6 + (16384*I*pi**14*C1*C2*C3*C4*C5*C7*C9*L1*L2*L3*L4*L5 + ((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C9*L1*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C6*C7*C9*L1*L2*L3 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C9*L1*L2 + (16384*I*pi**14*C1*C3*C4*C5*C6*C7*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C7 + 16384*I*pi**14*C1*C2*C3*C4*C5*C8)*C9*L1*L2*L3*L4*L5 + (((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L1*L2*L3*L4 + ((16384*I*pi**14*C1*C2*C3*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C5*C6 + 16384*I*pi**14*C1*C2*C3*C5*C7)*C8)*C9*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C3*C4*C5*C6 + 16384*I*pi**14*C1*C3*C4*C5*C7)*C8)*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C7*C8*C9*L1*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C7*C8*C9*L1*L2*L3 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C7*C8*C9*L1*L2 + (16384*I*pi**14*C1*C3*C4*C5*C7*C8*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((16384*I*pi**14*C1*C2*C3*C5 + 16384*I*pi**14*C1*C2*C3*C6)*C7*C8*C9*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5 + (16384*I*pi**14*C1*C3*C4 + 16384*I*pi**14*C1*C3*C5)*C6)*C7*C8*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C5*C6*C7*C8*C9*L1*L2 + (16384*I*pi**14*C1*C3*C5*C6*C7*C8*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (16384*I*pi**14*C3*C4*C5*C6*C7*C8*C9*L3 + (16384*I*pi**14*C1*C3 + 16384*I*pi**14*C1*C4)*C5*C6*C7*C8*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2 + 16384*I*pi**14*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**14 + 8192*(((pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9*L1*L2*L3*L4*L5*L6 + (pi**13*C1*C2*C3*C4*C5*C7*C9*L1*L2*L3*L4*L5 + ((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9*L1*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C6*C7*C9*L1*L2*L3 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9*L1*L2 + (pi**13*C1*C3*C4*C5*C6*C7*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**13*C1*C2*C3*C4*C5*C7 + pi**13*C1*C2*C3*C4*C5*C8)*C9*L1*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L1*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7 + (pi**13*C1*C2*C3*C5*C6 + pi**13*C1*C2*C3*C5*C7)*C8)*C9*L1*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L2 + ((pi**13*C1*C3*C4*C5*C6*C7 + (pi**13*C1*C3*C4*C5*C6 + pi**13*C1*C3*C4*C5*C7)*C8)*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5*C6*C7 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5*C6 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7*C8*C9*L1*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C7*C8*C9*L1*L2*L3 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7*C8*C9*L1*L2 + (pi**13*C1*C3*C4*C5*C7*C8*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((pi**13*C1*C2*C3*C5 + pi**13*C1*C2*C3*C6)*C7*C8*C9*L1*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4 + (pi**13*C1*C2 + pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L1*L2 + ((pi**13*C1*C3*C4*C5 + (pi**13*C1*C3*C4 + pi**13*C1*C3*C5)*C6)*C7*C8*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5 + ((pi**13*C1 + pi**13*C2)*C3*C4 + (pi**13*C1 + pi**13*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((pi**13*C1*C2 + pi**13*C1*C3)*C5*C6*C7*C8*C9*L1*L2 + (pi**13*C1*C3*C5*C6*C7*C8*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (pi**13*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**13*C1*C3 + pi**13*C1*C4)*C5*C6*C7*C8*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3 + (pi**13*C1 + pi**13*C2 + pi**13*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*ZL - (pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7 + ((pi**13*C1*C2*C3*C4*C5*C6*C7 + (pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C8 + (pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9)*L2*L3*L4*L5*L6 + ((pi**13*C1*C2*C3*C4*C5*C7*C8 + pi**13*C1*C2*C3*C4*C5*C7*C9)*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C8 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9)*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7*C8 + pi**13*C1*C2*C3*C5*C6*C7*C9)*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C8 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9)*L2 + (pi**13*C1*C3*C4*C5*C6*C7*C8 + pi**13*C1*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9*L2*L3*L4*L5*L6 + (pi**13*C1*C2*C3*C4*C5*C7*C9*L2*L3*L4*L5 + ((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C6*C7*C9*L2*L3 + (pi**13*C1*C3*C4*C5*C6*C7*C9*L3 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((pi**13*C1*C2*C3*C4*C5*C7 + pi**13*C1*C2*C3*C4*C5*C8)*C9*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7 + (pi**13*C1*C2*C3*C5*C6 + pi**13*C1*C2*C3*C5*C7)*C8)*C9*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**13*C1*C3*C4*C5*C6*C7 + (pi**13*C1*C3*C4*C5*C6 + pi**13*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7*C8*C9*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C7*C8*C9*L2*L3 + (pi**13*C1*C3*C4*C5*C7*C8*C9*L3 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((pi**13*C1*C2*C3*C5 + pi**13*C1*C2*C3*C6)*C7*C8*C9*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4 + (pi**13*C1*C2 + pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**13*C1*C3*C4*C5 + (pi**13*C1*C3*C4 + pi**13*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**13*C1*C3*C5*C6*C7*C8*C9*L3 + (pi**13*C1*C2 + pi**13*C1*C3)*C5*C6*C7*C8*C9*L2 + (pi**13*C1*C3 + pi**13*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**13 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + ((4096*I*pi**12*C1*C2*C3*C4*C5*C6 + 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*C9*L2*L3*L4*L5*L6 + (4096*I*pi**12*C1*C2*C3*C4*C5*C7*C9*L2*L3*L4*L5 + ((4096*I*pi**12*C1*C2*C3*C4*C5 + (4096*I*pi**12*C1*C2*C3*C4 + 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*C9*L2*L3*L4 + (4096*I*pi**12*C1*C2*C3*C5*C6*C7*C9*L2*L3 + (4096*I*pi**12*C1*C3*C4*C5*C6*C7*C9*L3 + (4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((4096*I*pi**12*C1*C2*C3*C4*C5*C7 + 4096*I*pi**12*C1*C2*C3*C4*C5*C8)*C9*L2*L3*L4*L5 + (((4096*I*pi**12*C1*C2*C3*C4*C5 + (4096*I*pi**12*C1*C2*C3*C4 + 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7 + (4096*I*pi**12*C1*C2*C3*C4*C5 + (4096*I*pi**12*C1*C2*C3*C4 + 4096*I*pi**12*C1*C2*C3*C5)*C6 + (4096*I*pi**12*C1*C2*C3*C4 + 4096*I*pi**12*C1*C2*C3*C5)*C7)*C8)*C9*L2*L3*L4 + ((4096*I*pi**12*C1*C2*C3*C5*C6*C7 + (4096*I*pi**12*C1*C2*C3*C5*C6 + 4096*I*pi**12*C1*C2*C3*C5*C7)*C8)*C9*L2*L3 + (((4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7 + ((4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (4096*I*pi**12*C1*C3*C4*C5*C6*C7 + (4096*I*pi**12*C1*C3*C4*C5*C6 + 4096*I*pi**12*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((4096*I*pi**12*C1*C2*C3*C4 + 4096*I*pi**12*C1*C2*C3*C5)*C7*C8*C9*L2*L3*L4 + (4096*I*pi**12*C1*C2*C3*C5*C7*C8*C9*L2*L3 + (4096*I*pi**12*C1*C3*C4*C5*C7*C8*C9*L3 + (4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((4096*I*pi**12*C1*C2*C3*C5 + 4096*I*pi**12*C1*C2*C3*C6)*C7*C8*C9*L2*L3 + (((4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4)*C5 + (4096*I*pi**12*C1*C2*C3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C4 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (4096*I*pi**12*C1*C3*C4*C5 + (4096*I*pi**12*C1*C3*C4 + 4096*I*pi**12*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (4096*I*pi**12*C1*C3*C5*C6*C7*C8*C9*L3 + (4096*I*pi**12*C1*C2 + 4096*I*pi**12*C1*C3)*C5*C6*C7*C8*C9*L2 + (4096*I*pi**12*C1*C3 + 4096*I*pi**12*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C7 - 4096*I*pi**12*C1*C2*C3*C4*C5*C8 - 4096*I*pi**12*C1*C2*C3*C4*C5*C9)*L1*L2*L3*L4*L5 + (((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C8 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C9)*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C8 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C9)*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C8 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C8 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + (((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C8 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C9)*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C7*C8 - 4096*I*pi**12*C1*C2*C3*C5*C7*C9)*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C8 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C7*C8 - 4096*I*pi**12*C1*C3*C4*C5*C7*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C8 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + (((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C8 + (-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C9)*L1*L2*L3 + ((((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C8 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C9)*L1*L2 + (((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C8 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C9)*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C8 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C5*C6*C7*C8 - 4096*I*pi**12*C1*C3*C5*C6*C7*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C8 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C9)*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C8 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C9)*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C9)*L2 + (-4096*I*pi**12*C3*C4*C5*C6*C7*C8 - 4096*I*pi**12*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C9*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C9*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C9*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C7*C9*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C7*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C5*C6*C7*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C9*L2)*L3 + (-4096*I*pi**12*C3*C4*C5*C6*C7*C9*L3 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C8)*C9*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C7 - 4096*I*pi**12*C1*C2*C3*C5*C8)*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C8)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C7 - 4096*I*pi**12*C1*C3*C4*C5*C8)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6 - 4096*I*pi**12*C1*C2*C3*C7)*C8)*C9*L1*L2*L3 + ((((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C7)*C8)*C9*L1*L2 + (((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C7)*C8)*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C7)*C8)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C5*C6 - 4096*I*pi**12*C1*C3*C5*C7)*C8)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C7)*C8)*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C7)*C8)*C9*L2 + (-4096*I*pi**12*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C3*C4*C5*C6 - 4096*I*pi**12*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (-4096*I*pi**12*C1*C2*C3*C7*C8*C9*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C7*C8*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C7*C8*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C5*C7*C8*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C7*C8*C9*L2)*L3 + (-4096*I*pi**12*C3*C4*C5*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C6)*C7*C8*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C5 - 4096*I*pi**12*C1*C3*C6)*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4 - 4096*I*pi**12*C1*C5)*C6)*C7*C8*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C5)*C6)*C7*C8*C9*L2 + (-4096*I*pi**12*C3*C4*C5 + (-4096*I*pi**12*C3*C4 - 4096*I*pi**12*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (-4096*I*pi**12*C1*C5*C6*C7*C8*C9*L1 - 4096*I*pi**12*C3*C5*C6*C7*C8*C9*L3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C5*C6*C7*C8*C9*L2 + (-4096*I*pi**12*C3 - 4096*I*pi**12*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*freq**12 - 2048*((pi**11*C1*C2*C3*C4*C5*C9*L1*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9*L1*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9*L1*L2 + ((pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5*C6 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9*L1*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C7*C9*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9*L1*L2 + (pi**11*C1*C3*C4*C5*C7*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9*L1*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9*L1*L2 + (pi**11*C1*C3*C5*C6*C7*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C5*C6*C7*C9*L2)*L3 + (pi**11*C3*C4*C5*C6*C7*C9*L3 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C8)*C9*L1*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7 + pi**11*C1*C2*C3*C5*C8)*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C8)*C9*L1*L2 + ((pi**11*C1*C3*C4*C5*C7 + pi**11*C1*C3*C4*C5*C8)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5*C7 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6 + pi**11*C1*C2*C3*C7)*C8)*C9*L1*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7)*C8)*C9*L1*L2 + (((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7)*C8)*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6)*C7 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7)*C8)*C9*L1*L2 + ((pi**11*C1*C3*C5*C6*C7 + (pi**11*C1*C3*C5*C6 + pi**11*C1*C3*C5*C7)*C8)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C5*C6*C7 + ((pi**11*C1 + pi**11*C2)*C3*C5*C6 + (pi**11*C1 + pi**11*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7)*C8)*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6*C7 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**11*C3*C4*C5*C6*C7 + (pi**11*C3*C4*C5*C6 + pi**11*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (pi**11*C1*C2*C3*C7*C8*C9*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7*C8*C9*L1*L2 + ((pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C7*C8*C9*L1*L2 + (pi**11*C1*C3*C5*C7*C8*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C5*C7*C8*C9*L2)*L3 + (pi**11*C3*C4*C5*C7*C8*C9*L3 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5 + (pi**11*C1*C2 + pi**11*C1*C3)*C6)*C7*C8*C9*L1*L2 + ((pi**11*C1*C3*C5 + pi**11*C1*C3*C6)*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C5 + (pi**11*C1 + pi**11*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((pi**11*C1*C3 + pi**11*C1*C4)*C5 + (pi**11*C1*C3 + pi**11*C1*C4 + pi**11*C1*C5)*C6)*C7*C8*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**11*C3*C4*C5 + (pi**11*C3*C4 + pi**11*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**11*C1*C5*C6*C7*C8*C9*L1 + pi**11*C3*C5*C6*C7*C8*C9*L3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C5*C6*C7*C8*C9*L2 + (pi**11*C3 + pi**11*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*ZL - ((pi**11*C1*C2*C3*C4*C5*C6 + pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**11*C1*C3*C4*C5*C6*C7*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + ((pi**11*C1*C2*C3*C4*C5*C7 + pi**11*C1*C2*C3*C4*C5*C8 + pi**11*C1*C2*C3*C4*C5*C9)*L2*L3*L4*L5 + (((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7 + (pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C8 + (pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9)*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6*C7 + (pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C8 + (pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9)*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C8 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9)*L2 + (pi**11*C1*C3*C4*C5*C6*C7 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C8 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C8 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9)*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7*C8 + pi**11*C1*C2*C3*C5*C7*C9)*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C8 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9)*L2 + (pi**11*C1*C3*C4*C5*C7*C8 + pi**11*C1*C3*C4*C5*C7*C9)*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C8 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9)*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C8 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9)*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C8 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9)*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C8 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9)*L2 + (pi**11*C1*C3*C5*C6*C7*C8 + pi**11*C1*C3*C5*C6*C7*C9)*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C8 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + (pi**11*C1*C2*C3*C4*C5*C9*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9*L2 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C7*C9*L2*L3 + (pi**11*C1*C3*C4*C5*C7*C9*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9*L2 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**11*C1*C3*C5*C6*C7*C9*L3 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9*L2 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C8)*C9*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7 + pi**11*C1*C2*C3*C5*C8)*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C8)*C9*L2 + (pi**11*C1*C3*C4*C5*C7 + pi**11*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6 + pi**11*C1*C2*C3*C7)*C8)*C9*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7)*C8)*C9*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7)*C8)*C9*L2 + (pi**11*C1*C3*C5*C6*C7 + (pi**11*C1*C3*C5*C6 + pi**11*C1*C3*C5*C7)*C8)*C9*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (pi**11*C1*C2*C3*C7*C8*C9*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7*C8*C9*L2 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7*C8*C9*L3)*L4 + (pi**11*C1*C3*C5*C7*C8*C9*L3 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7*C8*C9*L2 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7*C8*C9*L4)*L5 + (pi**11*C1*C5*C6*C7*C8*C9*L5 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5 + (pi**11*C1*C2 + pi**11*C1*C3)*C6)*C7*C8*C9*L2 + (pi**11*C1*C3*C5 + pi**11*C1*C3*C6)*C7*C8*C9*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5 + (pi**11*C1*C3 + pi**11*C1*C4 + pi**11*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZS)*freq**11 + (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (-1024*I*pi**10*C1*C2*C3*C4*C5*C9*L2*L3*L4*L5 + ((-1024*I*pi**10*C1*C2*C3*C4*C5 + (-1024*I*pi**10*C1*C2*C3*C4 - 1024*I*pi**10*C1*C2*C3*C5)*C6 + (-1024*I*pi**10*C1*C2*C3*C4 - 1024*I*pi**10*C1*C2*C3*C5)*C7)*C9*L2*L3*L4 + ((-1024*I*pi**10*C1*C2*C3*C5*C6 - 1024*I*pi**10*C1*C2*C3*C5*C7)*C9*L2*L3 + (((-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5*C7)*C9*L2 + (-1024*I*pi**10*C1*C3*C4*C5*C6 - 1024*I*pi**10*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((-1024*I*pi**10*C1*C2*C3*C4 - 1024*I*pi**10*C1*C2*C3*C5)*C7*C9*L2*L3*L4 + (-1024*I*pi**10*C1*C2*C3*C5*C7*C9*L2*L3 + (-1024*I*pi**10*C1*C3*C4*C5*C7*C9*L3 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((-1024*I*pi**10*C1*C2*C3*C5 - 1024*I*pi**10*C1*C2*C3*C6)*C7*C9*L2*L3 + (((-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5)*C6)*C7*C9*L2 + (-1024*I*pi**10*C1*C3*C4*C5 + (-1024*I*pi**10*C1*C3*C4 - 1024*I*pi**10*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (-1024*I*pi**10*C1*C3*C5*C6*C7*C9*L3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5*C6*C7*C9*L2 + (-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((-1024*I*pi**10*C1*C2*C3*C4 - 1024*I*pi**10*C1*C2*C3*C5)*C7 + (-1024*I*pi**10*C1*C2*C3*C4 - 1024*I*pi**10*C1*C2*C3*C5)*C8)*C9*L2*L3*L4 + ((-1024*I*pi**10*C1*C2*C3*C5*C7 - 1024*I*pi**10*C1*C2*C3*C5*C8)*C9*L2*L3 + (((-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5*C7 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5*C8)*C9*L2 + (-1024*I*pi**10*C1*C3*C4*C5*C7 - 1024*I*pi**10*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((-1024*I*pi**10*C1*C2*C3*C5 - 1024*I*pi**10*C1*C2*C3*C6)*C7 + (-1024*I*pi**10*C1*C2*C3*C5 - 1024*I*pi**10*C1*C2*C3*C6 - 1024*I*pi**10*C1*C2*C3*C7)*C8)*C9*L2*L3 + ((((-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4)*C5 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5)*C6 + (-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5)*C7)*C8)*C9*L2 + ((-1024*I*pi**10*C1*C3*C4*C5 + (-1024*I*pi**10*C1*C3*C4 - 1024*I*pi**10*C1*C3*C5)*C6)*C7 + (-1024*I*pi**10*C1*C3*C4*C5 + (-1024*I*pi**10*C1*C3*C4 - 1024*I*pi**10*C1*C3*C5)*C6 + (-1024*I*pi**10*C1*C3*C4 - 1024*I*pi**10*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + (((-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5*C6*C7 + ((-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5*C6 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5*C7)*C8)*C9*L2 + (-1024*I*pi**10*C1*C3*C5*C6*C7 + (-1024*I*pi**10*C1*C3*C5*C6 - 1024*I*pi**10*C1*C3*C5*C7)*C8)*C9*L3 + ((-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4)*C5*C6*C7 + ((-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4)*C5*C6 + (-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (-1024*I*pi**10*C1*C2*C3*C7*C8*C9*L2*L3 + ((-1024*I*pi**10*C1*C2*C3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C4 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5)*C7*C8*C9*L2 + (-1024*I*pi**10*C1*C3*C4 - 1024*I*pi**10*C1*C3*C5)*C7*C8*C9*L3)*L4 + (-1024*I*pi**10*C1*C3*C5*C7*C8*C9*L3 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5*C7*C8*C9*L2 + (-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4)*C5*C7*C8*C9*L4)*L5 + (-1024*I*pi**10*C1*C5*C6*C7*C8*C9*L5 + ((-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C5 + (-1024*I*pi**10*C1*C2 - 1024*I*pi**10*C1*C3)*C6)*C7*C8*C9*L2 + (-1024*I*pi**10*C1*C3*C5 - 1024*I*pi**10*C1*C3*C6)*C7*C8*C9*L3 + ((-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4)*C5 + (-1024*I*pi**10*C1*C3 - 1024*I*pi**10*C1*C4 - 1024*I*pi**10*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*ZL*ZS + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*L1*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + (((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C8 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C9)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C7 + 1024*I*pi**10*C1*C2*C3*C5*C8 + 1024*I*pi**10*C1*C2*C3*C5*C9)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C8 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C7 + 1024*I*pi**10*C1*C3*C4*C5*C8 + 1024*I*pi**10*C1*C3*C4*C5*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + (((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C8 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C9)*L1*L2*L3 + ((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C8 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C9)*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C8 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C6*C7 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C8 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C9)*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C8 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C8 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C9)*L2 + (1024*I*pi**10*C3*C4*C5*C6*C7 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C8 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C7*C8 + 1024*I*pi**10*C1*C2*C3*C7*C9)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C8 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C8 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C9)*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C8 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C7*C8 + 1024*I*pi**10*C1*C3*C5*C7*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C9)*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C8 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C9)*L2 + (1024*I*pi**10*C3*C4*C5*C7*C8 + 1024*I*pi**10*C3*C4*C5*C7*C9)*L3)*L4)*L5 + ((((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C8 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C8 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C9)*L2)*L3 + ((((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C8 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C9)*L1 + ((((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C8 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C9)*L2 + ((1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C8 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C9)*L3)*L4 + ((1024*I*pi**10*C1*C5*C6*C7*C8 + 1024*I*pi**10*C1*C5*C6*C7*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C9)*L2 + (1024*I*pi**10*C3*C5*C6*C7*C8 + 1024*I*pi**10*C3*C5*C6*C7*C9)*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C8 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C9*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C9*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C9*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C9*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C9*L2 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (1024*I*pi**10*C1*C2*C3*C7*C9*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C9*L1*L2 + (1024*I*pi**10*C1*C3*C5*C7*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C9*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C7*C9*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C9*L2 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C9*L3)*L4 + (1024*I*pi**10*C1*C5*C6*C7*C9*L1 + 1024*I*pi**10*C3*C5*C6*C7*C9*L3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C9*L2 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((1024*I*pi**10*C1*C2*C3*C7 + 1024*I*pi**10*C1*C2*C3*C8)*C9*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C8)*C9*L1*L2 + (((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C8)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C7 + 1024*I*pi**10*C1*C3*C5*C8)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C8)*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C8)*C9*L2 + (1024*I*pi**10*C3*C4*C5*C7 + 1024*I*pi**10*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C7)*C8)*C9*L1*L2 + (((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6 + 1024*I*pi**10*C1*C3*C7)*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C7)*C8)*C9*L1 + ((((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C7)*C8)*C9*L2 + ((1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C7)*C8)*C9*L3)*L4 + ((1024*I*pi**10*C1*C5*C6*C7 + (1024*I*pi**10*C1*C5*C6 + 1024*I*pi**10*C1*C5*C7)*C8)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C7)*C8)*C9*L2 + (1024*I*pi**10*C3*C5*C6*C7 + (1024*I*pi**10*C3*C5*C6 + 1024*I*pi**10*C3*C5*C7)*C8)*C9*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C7*C8*C9*L1*L2 + (1024*I*pi**10*C1*C3*C7*C8*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C7*C8*C9*L2)*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C7*C8*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C7*C8*C9*L2 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C7*C8*C9*L3)*L4 + (1024*I*pi**10*C1*C5*C7*C8*C9*L1 + 1024*I*pi**10*C3*C5*C7*C8*C9*L3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C7*C8*C9*L2 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C7*C8*C9*L4)*L5 + (1024*I*pi**10*C5*C6*C7*C8*C9*L5 + (1024*I*pi**10*C1*C5 + 1024*I*pi**10*C1*C6)*C7*C8*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C6)*C7*C8*C9*L2 + (1024*I*pi**10*C3*C5 + 1024*I*pi**10*C3*C6)*C7*C8*C9*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4 + 1024*I*pi**10*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*freq**10 + 512*(((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9*L1*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C9*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9*L1*L2 + (pi**9*C1*C3*C4*C5*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9*L1*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4*C5 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9*L1*L2 + ((pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5*C6 + (pi**9*C1 + pi**9*C2)*C3*C5*C7)*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7)*C9*L2 + (pi**9*C3*C4*C5*C6 + pi**9*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (pi**9*C1*C2*C3*C7*C9*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9*L1*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9*L1*L2 + (pi**9*C1*C3*C5*C7*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C5*C7*C9*L2)*L3 + (pi**9*C3*C4*C5*C7*C9*L3 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9*L1*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6)*C7*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7*C9*L2 + (pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**9*C1*C5*C6*C7*C9*L1 + pi**9*C3*C5*C6*C7*C9*L3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6*C7*C9*L2 + (pi**9*C3 + pi**9*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((pi**9*C1*C2*C3*C7 + pi**9*C1*C2*C3*C8)*C9*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C8)*C9*L1*L2 + (((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C8)*C9*L1*L2 + ((pi**9*C1*C3*C5*C7 + pi**9*C1*C3*C5*C8)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5*C7 + (pi**9*C1 + pi**9*C2)*C3*C5*C8)*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C8)*C9*L2 + (pi**9*C3*C4*C5*C7 + pi**9*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C7)*C8)*C9*L1*L2 + (((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6 + pi**9*C1*C3*C7)*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6)*C7 + ((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6 + (pi**9*C1 + pi**9*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7)*C8)*C9*L1 + ((((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7)*C8)*C9*L2 + ((pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6)*C7 + (pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6 + (pi**9*C3*C4 + pi**9*C3*C5)*C7)*C8)*C9*L3)*L4 + ((pi**9*C1*C5*C6*C7 + (pi**9*C1*C5*C6 + pi**9*C1*C5*C7)*C8)*C9*L1 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6*C7 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C7)*C8)*C9*L2 + (pi**9*C3*C5*C6*C7 + (pi**9*C3*C5*C6 + pi**9*C3*C5*C7)*C8)*C9*L3 + ((pi**9*C3 + pi**9*C4)*C5*C6*C7 + ((pi**9*C3 + pi**9*C4)*C5*C6 + (pi**9*C3 + pi**9*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((pi**9*C1*C2 + pi**9*C1*C3)*C7*C8*C9*L1*L2 + (pi**9*C1*C3*C7*C8*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C7*C8*C9*L2)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7*C8*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7*C8*C9*L2 + (pi**9*C3*C4 + pi**9*C3*C5)*C7*C8*C9*L3)*L4 + (pi**9*C1*C5*C7*C8*C9*L1 + pi**9*C3*C5*C7*C8*C9*L3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C7*C8*C9*L2 + (pi**9*C3 + pi**9*C4)*C5*C7*C8*C9*L4)*L5 + (pi**9*C5*C6*C7*C8*C9*L5 + (pi**9*C1*C5 + pi**9*C1*C6)*C7*C8*C9*L1 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C6)*C7*C8*C9*L2 + (pi**9*C3*C5 + pi**9*C3*C6)*C7*C8*C9*L3 + ((pi**9*C3 + pi**9*C4)*C5 + (pi**9*C3 + pi**9*C4 + pi**9*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*ZL - (pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**9*C1*C2*C3*C4*C5 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C6 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C6 + pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7)*L2 + (pi**9*C1*C3*C4*C5*C6 + pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L2*L3 + (pi**9*C1*C3*C4*C5*C7*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**9*C1*C3*C5*C6*C7*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + (((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C8 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C7 + pi**9*C1*C2*C3*C5*C8 + pi**9*C1*C2*C3*C5*C9)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C8 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9)*L2 + (pi**9*C1*C3*C4*C5*C7 + pi**9*C1*C3*C4*C5*C8 + pi**9*C1*C3*C4*C5*C9)*L3)*L4)*L5 + (((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7 + (pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C8 + (pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9)*L2*L3 + ((((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C8 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9)*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C8 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C8 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9)*L2 + (pi**9*C1*C3*C5*C6*C7 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C8 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C8 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C7*C8 + pi**9*C1*C2*C3*C7*C9)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C8 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9)*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C8 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C8 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9)*L2 + (pi**9*C1*C3*C5*C7*C8 + pi**9*C1*C3*C5*C7*C9)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C8 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9)*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C8 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9)*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C8 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C8 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9)*L4 + (pi**9*C1*C5*C6*C7*C8 + pi**9*C1*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C9*L2*L3 + (pi**9*C1*C3*C4*C5*C9*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9*L2 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + (pi**9*C1*C2*C3*C7*C9*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9*L2 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9*L3)*L4 + (pi**9*C1*C3*C5*C7*C9*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9*L4)*L5 + (pi**9*C1*C5*C6*C7*C9*L5 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9*L2 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + ((pi**9*C1*C2*C3*C7 + pi**9*C1*C2*C3*C8)*C9*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C8)*C9*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C8)*C9*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C8)*C9*L2 + (pi**9*C1*C3*C5*C7 + pi**9*C1*C3*C5*C8)*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C8)*C9*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C7)*C8)*C9*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6 + pi**9*C1*C3*C7)*C8)*C9*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7)*C8)*C9*L4 + (pi**9*C1*C5*C6*C7 + (pi**9*C1*C5*C6 + pi**9*C1*C5*C7)*C8)*C9*L5)*L6 + (pi**9*C1*C3*C7*C8*C9*L3 + pi**9*C1*C5*C7*C8*C9*L5 + (pi**9*C1*C2 + pi**9*C1*C3)*C7*C8*C9*L2 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7*C8*C9*L4 + (pi**9*C1*C5 + pi**9*C1*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((256*I*pi**8*C1*C2*C3*C4 + 256*I*pi**8*C1*C2*C3*C5)*C9*L2*L3*L4 + (256*I*pi**8*C1*C2*C3*C5*C9*L2*L3 + (256*I*pi**8*C1*C3*C4*C5*C9*L3 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + ((256*I*pi**8*C1*C2*C3*C5 + 256*I*pi**8*C1*C2*C3*C6 + 256*I*pi**8*C1*C2*C3*C7)*C9*L2*L3 + (((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C6 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C7)*C9*L2 + (256*I*pi**8*C1*C3*C4*C5 + (256*I*pi**8*C1*C3*C4 + 256*I*pi**8*C1*C3*C5)*C6 + (256*I*pi**8*C1*C3*C4 + 256*I*pi**8*C1*C3*C5)*C7)*C9*L3)*L4 + (((256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5*C6 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5*C7)*C9*L2 + (256*I*pi**8*C1*C3*C5*C6 + 256*I*pi**8*C1*C3*C5*C7)*C9*L3 + ((256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5*C6 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + (256*I*pi**8*C1*C2*C3*C7*C9*L2*L3 + ((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C7*C9*L2 + (256*I*pi**8*C1*C3*C4 + 256*I*pi**8*C1*C3*C5)*C7*C9*L3)*L4 + (256*I*pi**8*C1*C3*C5*C7*C9*L3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5*C7*C9*L2 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5*C7*C9*L4)*L5 + (256*I*pi**8*C1*C5*C6*C7*C9*L5 + ((256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C6)*C7*C9*L2 + (256*I*pi**8*C1*C3*C5 + 256*I*pi**8*C1*C3*C6)*C7*C9*L3 + ((256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4 + 256*I*pi**8*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + ((256*I*pi**8*C1*C2*C3*C7 + 256*I*pi**8*C1*C2*C3*C8)*C9*L2*L3 + (((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C7 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C8)*C9*L2 + ((256*I*pi**8*C1*C3*C4 + 256*I*pi**8*C1*C3*C5)*C7 + (256*I*pi**8*C1*C3*C4 + 256*I*pi**8*C1*C3*C5)*C8)*C9*L3)*L4 + (((256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5*C7 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5*C8)*C9*L2 + (256*I*pi**8*C1*C3*C5*C7 + 256*I*pi**8*C1*C3*C5*C8)*C9*L3 + ((256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5*C7 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5*C8)*C9*L4)*L5 + ((((256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C6)*C7 + ((256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C6 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C7)*C8)*C9*L2 + ((256*I*pi**8*C1*C3*C5 + 256*I*pi**8*C1*C3*C6)*C7 + (256*I*pi**8*C1*C3*C5 + 256*I*pi**8*C1*C3*C6 + 256*I*pi**8*C1*C3*C7)*C8)*C9*L3 + (((256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4 + 256*I*pi**8*C1*C5)*C6)*C7 + ((256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4)*C5 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4 + 256*I*pi**8*C1*C5)*C6 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4 + 256*I*pi**8*C1*C5)*C7)*C8)*C9*L4 + (256*I*pi**8*C1*C5*C6*C7 + (256*I*pi**8*C1*C5*C6 + 256*I*pi**8*C1*C5*C7)*C8)*C9*L5)*L6 + (256*I*pi**8*C1*C3*C7*C8*C9*L3 + 256*I*pi**8*C1*C5*C7*C8*C9*L5 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C7*C8*C9*L2 + (256*I*pi**8*C1*C3 + 256*I*pi**8*C1*C4 + 256*I*pi**8*C1*C5)*C7*C8*C9*L4 + (256*I*pi**8*C1*C5 + 256*I*pi**8*C1*C6)*C7*C8*C9*L6)*L7)*L8)*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7)*L2 + (-256*I*pi**8*C3*C4*C5*C6 - 256*I*pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*L1*L2 + (-256*I*pi**8*C1*C3*C5*C7*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C5*C6*C7*L1 - 256*I*pi**8*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + ((-256*I*pi**8*C1*C2*C3*C7 - 256*I*pi**8*C1*C2*C3*C8 - 256*I*pi**8*C1*C2*C3*C9)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C9)*L1*L2 + (((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C8 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C9)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C8 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C9)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C7 - 256*I*pi**8*C1*C3*C5*C8 - 256*I*pi**8*C1*C3*C5*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C9)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C8 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C9)*L2 + (-256*I*pi**8*C3*C4*C5*C7 - 256*I*pi**8*C3*C4*C5*C8 - 256*I*pi**8*C3*C4*C5*C9)*L3)*L4)*L5 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C9)*L1*L2 + (((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C8 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C9)*L2)*L3 + ((((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C9)*L1 + ((((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C8 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9)*L2 + ((-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C8 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C9)*L3)*L4 + ((-256*I*pi**8*C1*C5*C6*C7 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C8 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C9)*L2 + (-256*I*pi**8*C3*C5*C6*C7 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C8 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C9)*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C8 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C9)*L4)*L5)*L6 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C8 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C9)*L1*L2 + ((-256*I*pi**8*C1*C3*C7*C8 - 256*I*pi**8*C1*C3*C7*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C9)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C8 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C9)*L2 + ((-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C8 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C9)*L3)*L4 + ((-256*I*pi**8*C1*C5*C7*C8 - 256*I*pi**8*C1*C5*C7*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C9)*L2 + (-256*I*pi**8*C3*C5*C7*C8 - 256*I*pi**8*C3*C5*C7*C9)*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C8 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C9)*L4)*L5 + (((-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C8 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C9)*L2 + ((-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C8 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C9)*L3 + (((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C8 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C9)*L4 + (-256*I*pi**8*C5*C6*C7*C8 - 256*I*pi**8*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + (-256*I*pi**8*C1*C2*C3*C9*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C9*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C9*L1*L2 + (-256*I*pi**8*C1*C3*C5*C9*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C9*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C9*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C9*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C9*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C9*L3)*L4 + ((-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C9*L2 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C9*L4)*L5)*L6 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C9*L1*L2 + (-256*I*pi**8*C1*C3*C7*C9*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C9*L2)*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C9*L2 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C9*L3)*L4 + (-256*I*pi**8*C1*C5*C7*C9*L1 - 256*I*pi**8*C3*C5*C7*C9*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C9*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C9*L4)*L5 + (-256*I*pi**8*C5*C6*C7*C9*L5 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C9*L2 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C9*L4)*L6)*L7 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C8)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C7 - 256*I*pi**8*C1*C3*C8)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C8)*C9*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C8)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C8)*C9*L2 + ((-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C8)*C9*L3)*L4 + ((-256*I*pi**8*C1*C5*C7 - 256*I*pi**8*C1*C5*C8)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C8)*C9*L2 + (-256*I*pi**8*C3*C5*C7 - 256*I*pi**8*C3*C5*C8)*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C8)*C9*L4)*L5 + (((-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6 - 256*I*pi**8*C1*C7)*C8)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C7)*C8)*C9*L2 + ((-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6 - 256*I*pi**8*C3*C7)*C8)*C9*L3 + (((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C7)*C8)*C9*L4 + (-256*I*pi**8*C5*C6*C7 + (-256*I*pi**8*C5*C6 - 256*I*pi**8*C5*C7)*C8)*C9*L5)*L6 + (-256*I*pi**8*C1*C7*C8*C9*L1 - 256*I*pi**8*C3*C7*C8*C9*L3 - 256*I*pi**8*C5*C7*C8*C9*L5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C7*C8*C9*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C7*C8*C9*L4 + (-256*I*pi**8*C5 - 256*I*pi**8*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*freq**8 - 128*((pi**7*C1*C2*C3*C9*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9*L1*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C4 + (pi**7*C1 + pi**7*C2)*C3*C5)*C9*L2)*L3)*L4 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5*C9*L1*L2 + (pi**7*C1*C3*C5*C9*L1 + (pi**7*C1 + pi**7*C2)*C3*C5*C9*L2)*L3 + (pi**7*C3*C4*C5*C9*L3 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5*C9*L2)*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9*L1*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C5 + (pi**7*C1 + pi**7*C2)*C3*C6 + (pi**7*C1 + pi**7*C2)*C3*C7)*C9*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7)*C9*L2 + (pi**7*C3*C4*C5 + (pi**7*C3*C4 + pi**7*C3*C5)*C6 + (pi**7*C3*C4 + pi**7*C3*C5)*C7)*C9*L3)*L4 + ((pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7)*C9*L2 + (pi**7*C3*C5*C6 + pi**7*C3*C5*C7)*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5*C6 + (pi**7*C3 + pi**7*C4)*C5*C7)*C9*L4)*L5)*L6 + ((pi**7*C1*C2 + pi**7*C1*C3)*C7*C9*L1*L2 + (pi**7*C1*C3*C7*C9*L1 + (pi**7*C1 + pi**7*C2)*C3*C7*C9*L2)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7*C9*L2 + (pi**7*C3*C4 + pi**7*C3*C5)*C7*C9*L3)*L4 + (pi**7*C1*C5*C7*C9*L1 + pi**7*C3*C5*C7*C9*L3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7*C9*L2 + (pi**7*C3 + pi**7*C4)*C5*C7*C9*L4)*L5 + (pi**7*C5*C6*C7*C9*L5 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7*C9*L2 + (pi**7*C3*C5 + pi**7*C3*C6)*C7*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7*C9*L4)*L6)*L7 + (((pi**7*C1*C2 + pi**7*C1*C3)*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C8)*C9*L1*L2 + ((pi**7*C1*C3*C7 + pi**7*C1*C3*C8)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C7 + (pi**7*C1 + pi**7*C2)*C3*C8)*C9*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C8)*C9*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C8)*C9*L2 + ((pi**7*C3*C4 + pi**7*C3*C5)*C7 + (pi**7*C3*C4 + pi**7*C3*C5)*C8)*C9*L3)*L4 + ((pi**7*C1*C5*C7 + pi**7*C1*C5*C8)*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C8)*C9*L2 + (pi**7*C3*C5*C7 + pi**7*C3*C5*C8)*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5*C7 + (pi**7*C3 + pi**7*C4)*C5*C8)*C9*L4)*L5 + (((pi**7*C1*C5 + pi**7*C1*C6)*C7 + (pi**7*C1*C5 + pi**7*C1*C6 + pi**7*C1*C7)*C8)*C9*L1 + (((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7)*C8)*C9*L2 + ((pi**7*C3*C5 + pi**7*C3*C6)*C7 + (pi**7*C3*C5 + pi**7*C3*C6 + pi**7*C3*C7)*C8)*C9*L3 + (((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7)*C8)*C9*L4 + (pi**7*C5*C6*C7 + (pi**7*C5*C6 + pi**7*C5*C7)*C8)*C9*L5)*L6 + (pi**7*C1*C7*C8*C9*L1 + pi**7*C3*C7*C8*C9*L3 + pi**7*C5*C7*C8*C9*L5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7*C8*C9*L2 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7*C8*C9*L4 + (pi**7*C5 + pi**7*C6)*C7*C8*C9*L6)*L7)*L8)*ZL - ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**7*C1*C2*C3*C5 + pi**7*C1*C2*C3*C6 + pi**7*C1*C2*C3*C7)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L2 + (pi**7*C1*C3*C4*C5 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C6 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7)*L2 + (pi**7*C1*C3*C5*C6 + pi**7*C1*C3*C5*C7)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C6 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**7*C1*C2*C3*C7*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L3)*L4 + (pi**7*C1*C3*C5*C7*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L4)*L5 + (pi**7*C1*C5*C6*C7*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L4)*L6)*L7 + ((pi**7*C1*C2*C3*C7 + pi**7*C1*C2*C3*C8 + pi**7*C1*C2*C3*C9)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C8 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9)*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C8 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C8 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C9)*L2 + (pi**7*C1*C3*C5*C7 + pi**7*C1*C3*C5*C8 + pi**7*C1*C3*C5*C9)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C7 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C8 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9)*L4)*L5 + ((((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C8 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9)*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C8 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C8 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9)*L4 + (pi**7*C1*C5*C6*C7 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C8 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9)*L5)*L6 + (((pi**7*C1*C2 + pi**7*C1*C3)*C7*C8 + (pi**7*C1*C2 + pi**7*C1*C3)*C7*C9)*L2 + (pi**7*C1*C3*C7*C8 + pi**7*C1*C3*C7*C9)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C8 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9)*L4 + (pi**7*C1*C5*C7*C8 + pi**7*C1*C5*C7*C9)*L5 + ((pi**7*C1*C5 + pi**7*C1*C6)*C7*C8 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9)*L6)*L7)*L8 + (pi**7*C1*C2*C3*C9*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9*L3)*L4 + (pi**7*C1*C3*C5*C9*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C9*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9*L4 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9*L5)*L6 + (pi**7*C1*C3*C7*C9*L3 + pi**7*C1*C5*C7*C9*L5 + (pi**7*C1*C2 + pi**7*C1*C3)*C7*C9*L2 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9*L4 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9*L6)*L7 + (pi**7*C1*C7*C8*C9*L7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C8)*C9*L2 + (pi**7*C1*C3*C7 + pi**7*C1*C3*C8)*C9*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C8)*C9*L4 + (pi**7*C1*C5*C7 + pi**7*C1*C5*C8)*C9*L5 + ((pi**7*C1*C5 + pi**7*C1*C6)*C7 + (pi**7*C1*C5 + pi**7*C1*C6 + pi**7*C1*C7)*C8)*C9*L6)*L8)*L9)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C9*L2*L3 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5)*C9*L2 + (-64*I*pi**6*C1*C3*C4 - 64*I*pi**6*C1*C3*C5)*C9*L3)*L4 + (-64*I*pi**6*C1*C3*C5*C9*L3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5*C9*L2 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5*C9*L4)*L5 + (((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C6 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C7)*C9*L2 + (-64*I*pi**6*C1*C3*C5 - 64*I*pi**6*C1*C3*C6 - 64*I*pi**6*C1*C3*C7)*C9*L3 + ((-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C6 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C7)*C9*L4 + (-64*I*pi**6*C1*C5*C6 - 64*I*pi**6*C1*C5*C7)*C9*L5)*L6 + (-64*I*pi**6*C1*C3*C7*C9*L3 - 64*I*pi**6*C1*C5*C7*C9*L5 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C7*C9*L2 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C7*C9*L4 + (-64*I*pi**6*C1*C5 - 64*I*pi**6*C1*C6)*C7*C9*L6)*L7 + (-64*I*pi**6*C1*C7*C8*C9*L7 + ((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C7 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C8)*C9*L2 + (-64*I*pi**6*C1*C3*C7 - 64*I*pi**6*C1*C3*C8)*C9*L3 + ((-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C7 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C8)*C9*L4 + (-64*I*pi**6*C1*C5*C7 - 64*I*pi**6*C1*C5*C8)*C9*L5 + ((-64*I*pi**6*C1*C5 - 64*I*pi**6*C1*C6)*C7 + (-64*I*pi**6*C1*C5 - 64*I*pi**6*C1*C6 - 64*I*pi**6*C1*C7)*C8)*C9*L6)*L8)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*L1*L2 + ((64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L2 + (64*I*pi**6*C3*C4*C5 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C6 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7)*L3)*L4 + ((64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7)*L2 + (64*I*pi**6*C3*C5*C6 + 64*I*pi**6*C3*C5*C7)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*L1*L2 + (64*I*pi**6*C1*C3*C7*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C5*C7*L1 + 64*I*pi**6*C3*C5*C7*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C5*C6*C7*L5 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7*L4)*L6)*L7 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C9)*L1*L2 + ((64*I*pi**6*C1*C3*C7 + 64*I*pi**6*C1*C3*C8 + 64*I*pi**6*C1*C3*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C9)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C9)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9)*L2 + ((64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C8 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C9)*L3)*L4 + ((64*I*pi**6*C1*C5*C7 + 64*I*pi**6*C1*C5*C8 + 64*I*pi**6*C1*C5*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C9)*L2 + (64*I*pi**6*C3*C5*C7 + 64*I*pi**6*C3*C5*C8 + 64*I*pi**6*C3*C5*C9)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C8 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C9)*L4)*L5 + (((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C9)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9)*L2 + ((64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C8 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C9)*L3 + (((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C8 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9)*L4 + (64*I*pi**6*C5*C6*C7 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C8 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C9)*L5)*L6 + ((64*I*pi**6*C1*C7*C8 + 64*I*pi**6*C1*C7*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C9)*L2 + (64*I*pi**6*C3*C7*C8 + 64*I*pi**6*C3*C7*C9)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C8 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C9)*L4 + (64*I*pi**6*C5*C7*C8 + 64*I*pi**6*C5*C7*C9)*L5 + ((64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C8 + (64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C9)*L6)*L7)*L8 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C9*L1*L2 + (64*I*pi**6*C1*C3*C9*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C9*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C9*L3)*L4 + (64*I*pi**6*C1*C5*C9*L1 + 64*I*pi**6*C3*C5*C9*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C9*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C9*L4)*L5 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C9*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9*L4 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C9*L5)*L6 + (64*I*pi**6*C1*C7*C9*L1 + 64*I*pi**6*C3*C7*C9*L3 + 64*I*pi**6*C5*C7*C9*L5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C9*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C9*L4 + (64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C9*L6)*L7 + (64*I*pi**6*C7*C8*C9*L7 + (64*I*pi**6*C1*C7 + 64*I*pi**6*C1*C8)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C8)*C9*L2 + (64*I*pi**6*C3*C7 + 64*I*pi**6*C3*C8)*C9*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C8)*C9*L4 + (64*I*pi**6*C5*C7 + 64*I*pi**6*C5*C8)*C9*L5 + ((64*I*pi**6*C5 + 64*I*pi**6*C6)*C7 + (64*I*pi**6*C5 + 64*I*pi**6*C6 + 64*I*pi**6*C7)*C8)*C9*L6)*L8)*L9)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C9*L1*L2 + (pi**5*C1*C3*C9*L1 + (pi**5*C1 + pi**5*C2)*C3*C9*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C9*L2 + (pi**5*C3*C4 + pi**5*C3*C5)*C9*L3)*L4 + (pi**5*C1*C5*C9*L1 + pi**5*C3*C5*C9*L3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5*C9*L2 + (pi**5*C3 + pi**5*C4)*C5*C9*L4)*L5 + ((pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7)*C9*L2 + (pi**5*C3*C5 + pi**5*C3*C6 + pi**5*C3*C7)*C9*L3 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7)*C9*L4 + (pi**5*C5*C6 + pi**5*C5*C7)*C9*L5)*L6 + (pi**5*C1*C7*C9*L1 + pi**5*C3*C7*C9*L3 + pi**5*C5*C7*C9*L5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7*C9*L2 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7*C9*L4 + (pi**5*C5 + pi**5*C6)*C7*C9*L6)*L7 + (pi**5*C7*C8*C9*L7 + (pi**5*C1*C7 + pi**5*C1*C8)*C9*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C7 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C8)*C9*L2 + (pi**5*C3*C7 + pi**5*C3*C8)*C9*L3 + ((pi**5*C3 + pi**5*C4 + pi**5*C5)*C7 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C8)*C9*L4 + (pi**5*C5*C7 + pi**5*C5*C8)*C9*L5 + ((pi**5*C5 + pi**5*C6)*C7 + (pi**5*C5 + pi**5*C6 + pi**5*C7)*C8)*C9*L6)*L8)*ZL - (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L2 + (pi**5*C1*C3*C5 + pi**5*C1*C3*C6 + pi**5*C1*C3*C7)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L4 + (pi**5*C1*C5*C6 + pi**5*C1*C5*C7)*L5)*L6 + (pi**5*C1*C3*C7*L3 + pi**5*C1*C5*C7*L5 + (pi**5*C1*C2 + pi**5*C1*C3)*C7*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L4 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L6)*L7 + (((pi**5*C1*C2 + pi**5*C1*C3)*C7 + (pi**5*C1*C2 + pi**5*C1*C3)*C8 + (pi**5*C1*C2 + pi**5*C1*C3)*C9)*L2 + (pi**5*C1*C3*C7 + pi**5*C1*C3*C8 + pi**5*C1*C3*C9)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C8 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9)*L4 + (pi**5*C1*C5*C7 + pi**5*C1*C5*C8 + pi**5*C1*C5*C9)*L5 + ((pi**5*C1*C5 + pi**5*C1*C6)*C7 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C8 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9)*L6 + (pi**5*C1*C7*C8 + pi**5*C1*C7*C9)*L7)*L8 + (pi**5*C1*C3*C9*L3 + pi**5*C1*C5*C9*L5 + pi**5*C1*C7*C9*L7 + (pi**5*C1*C2 + pi**5*C1*C3)*C9*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9*L4 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9*L6 + (pi**5*C1*C7 + pi**5*C1*C8)*C9*L8)*L9)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (16*I*pi**4*C1*C3*C9*L3 + 16*I*pi**4*C1*C5*C9*L5 + 16*I*pi**4*C1*C7*C9*L7 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C9*L2 + (16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4 + 16*I*pi**4*C1*C5)*C9*L4 + (16*I*pi**4*C1*C5 + 16*I*pi**4*C1*C6 + 16*I*pi**4*C1*C7)*C9*L6 + (16*I*pi**4*C1*C7 + 16*I*pi**4*C1*C8)*C9*L8)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5 + ((-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L2 + (-16*I*pi**4*C3*C5 - 16*I*pi**4*C3*C6 - 16*I*pi**4*C3*C7)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L4 + (-16*I*pi**4*C5*C6 - 16*I*pi**4*C5*C7)*L5)*L6 + (-16*I*pi**4*C1*C7*L1 - 16*I*pi**4*C3*C7*L3 - 16*I*pi**4*C5*C7*L5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7*L6)*L7 + ((-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8 - 16*I*pi**4*C1*C9)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C8 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9)*L2 + (-16*I*pi**4*C3*C7 - 16*I*pi**4*C3*C8 - 16*I*pi**4*C3*C9)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C8 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9)*L4 + (-16*I*pi**4*C5*C7 - 16*I*pi**4*C5*C8 - 16*I*pi**4*C5*C9)*L5 + ((-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C8 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9)*L6 + (-16*I*pi**4*C7*C8 - 16*I*pi**4*C7*C9)*L7)*L8 + (-16*I*pi**4*C1*C9*L1 - 16*I*pi**4*C3*C9*L3 - 16*I*pi**4*C5*C9*L5 - 16*I*pi**4*C7*C9*L7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9*L6 + (-16*I*pi**4*C7 - 16*I*pi**4*C8)*C9*L8)*L9)*freq**4 - 8*((pi**3*C1*C9*L1 + pi**3*C3*C9*L3 + pi**3*C5*C9*L5 + pi**3*C7*C9*L7 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C9*L2 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C9*L4 + (pi**3*C5 + pi**3*C6 + pi**3*C7)*C9*L6 + (pi**3*C7 + pi**3*C8)*C9*L8)*ZL - (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + pi**3*C1*C7*L7 + pi**3*C1*C9*L9 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L6 + (pi**3*C1*C7 + pi**3*C1*C8 + pi**3*C1*C9)*L8)*ZS)*freq**3 + (-4*I*pi**2*C1*C9*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + 4*I*pi**2*C7*L7 + 4*I*pi**2*C9*L9 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L6 + (4*I*pi**2*C7 + 4*I*pi**2*C8 + 4*I*pi**2*C9)*L8)*freq**2 + 2*(pi*C9*ZL - pi*C1*ZS)*freq - I)/(262144*I*pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*freq**18 + 131072*(pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*ZL + pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*freq**17 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2*L3*L4*L5*L6*L7*L8*ZL*ZS + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C8 - 65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L2*L3*L4*L5*L6*L7*L8 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L1*L2*L3*L4*L5*L6*L7 + ((-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6 - 65536*I*pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L2*L3*L4*L5*L6 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L1*L2*L3*L4*L5 + ((-65536*I*pi**16*C1*C2*C3*C4*C5 + (-65536*I*pi**16*C1*C2*C3*C4 - 65536*I*pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L2*L3*L4 + (-65536*I*pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L1*L2*L3 + ((-65536*I*pi**16*C1*C2*C3 + (-65536*I*pi**16*C1*C2 - 65536*I*pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L2 + (-65536*I*pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L1 + (-65536*I*pi**16*C1 - 65536*I*pi**16*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**16 - 32768*((pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L1*L2*L3*L4*L5*L6*L7 + ((pi**15*C1*C2*C3*C4*C5*C6*C7 + (pi**15*C1*C2*C3*C4*C5*C6 + pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L2*L3*L4*L5*L6 + (pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L1*L2*L3*L4*L5 + ((pi**15*C1*C2*C3*C4*C5 + (pi**15*C1*C2*C3*C4 + pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L2*L3*L4 + (pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L1*L2*L3 + ((pi**15*C1*C2*C3 + (pi**15*C1*C2 + pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L2 + (pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L1 + (pi**15*C1 + pi**15*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL + ((pi**15*C1*C2*C3*C4*C5*C6*C7*C8 + pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L2*L3*L4*L5*L6*L7*L8 + (pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L2*L3*L4*L5*L6*L7 + ((pi**15*C1*C2*C3*C4*C5*C6*C7 + (pi**15*C1*C2*C3*C4*C5*C6 + pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L2*L3*L4*L5*L6 + (pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L2*L3*L4*L5 + ((pi**15*C1*C2*C3*C4*C5 + (pi**15*C1*C2*C3*C4 + pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L2*L3*L4 + (pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L2*L3 + (pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**15*C1*C2*C3 + (pi**15*C1*C2 + pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**15 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*C9*L2*L3*L4*L5*L6*L7 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C8)*C9*L2*L3*L4*L5*L6 + (16384*I*pi**14*C1*C2*C3*C4*C5*C7*C8*C9*L2*L3*L4*L5 + ((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C8*C9*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C6*C7*C8*C9*L2*L3 + (16384*I*pi**14*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C8 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1*L2*L3*L4*L5*L6 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C7*C8 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7*C9)*L1*L2*L3*L4*L5 + (((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L1*L2*L3*L4 + ((16384*I*pi**14*C1*C2*C3*C5*C6*C7*C8 + 16384*I*pi**14*C1*C2*C3*C5*C6*C7*C9)*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5*C6*C7*C8 + 16384*I*pi**14*C1*C3*C4*C5*C6*C7*C9)*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C8 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C9*L1*L2*L3*L4*L5*L6 + (16384*I*pi**14*C1*C2*C3*C4*C5*C7*C9*L1*L2*L3*L4*L5 + ((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C9*L1*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C6*C7*C9*L1*L2*L3 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C9*L1*L2 + (16384*I*pi**14*C1*C3*C4*C5*C6*C7*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C7 + 16384*I*pi**14*C1*C2*C3*C4*C5*C8)*C9*L1*L2*L3*L4*L5 + (((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L1*L2*L3*L4 + ((16384*I*pi**14*C1*C2*C3*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C5*C6 + 16384*I*pi**14*C1*C2*C3*C5*C7)*C8)*C9*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C3*C4*C5*C6 + 16384*I*pi**14*C1*C3*C4*C5*C7)*C8)*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C7*C8*C9*L1*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C7*C8*C9*L1*L2*L3 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C7*C8*C9*L1*L2 + (16384*I*pi**14*C1*C3*C4*C5*C7*C8*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((16384*I*pi**14*C1*C2*C3*C5 + 16384*I*pi**14*C1*C2*C3*C6)*C7*C8*C9*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5 + (16384*I*pi**14*C1*C3*C4 + 16384*I*pi**14*C1*C3*C5)*C6)*C7*C8*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C5*C6*C7*C8*C9*L1*L2 + (16384*I*pi**14*C1*C3*C5*C6*C7*C8*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (16384*I*pi**14*C3*C4*C5*C6*C7*C8*C9*L3 + (16384*I*pi**14*C1*C3 + 16384*I*pi**14*C1*C4)*C5*C6*C7*C8*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2 + 16384*I*pi**14*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**14 + 8192*(((pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9*L1*L2*L3*L4*L5*L6 + (pi**13*C1*C2*C3*C4*C5*C7*C9*L1*L2*L3*L4*L5 + ((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9*L1*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C6*C7*C9*L1*L2*L3 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9*L1*L2 + (pi**13*C1*C3*C4*C5*C6*C7*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**13*C1*C2*C3*C4*C5*C7 + pi**13*C1*C2*C3*C4*C5*C8)*C9*L1*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L1*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7 + (pi**13*C1*C2*C3*C5*C6 + pi**13*C1*C2*C3*C5*C7)*C8)*C9*L1*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L2 + ((pi**13*C1*C3*C4*C5*C6*C7 + (pi**13*C1*C3*C4*C5*C6 + pi**13*C1*C3*C4*C5*C7)*C8)*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5*C6*C7 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5*C6 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7*C8*C9*L1*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C7*C8*C9*L1*L2*L3 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7*C8*C9*L1*L2 + (pi**13*C1*C3*C4*C5*C7*C8*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((pi**13*C1*C2*C3*C5 + pi**13*C1*C2*C3*C6)*C7*C8*C9*L1*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4 + (pi**13*C1*C2 + pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L1*L2 + ((pi**13*C1*C3*C4*C5 + (pi**13*C1*C3*C4 + pi**13*C1*C3*C5)*C6)*C7*C8*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5 + ((pi**13*C1 + pi**13*C2)*C3*C4 + (pi**13*C1 + pi**13*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((pi**13*C1*C2 + pi**13*C1*C3)*C5*C6*C7*C8*C9*L1*L2 + (pi**13*C1*C3*C5*C6*C7*C8*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (pi**13*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**13*C1*C3 + pi**13*C1*C4)*C5*C6*C7*C8*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3 + (pi**13*C1 + pi**13*C2 + pi**13*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*ZL + (pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7 + ((pi**13*C1*C2*C3*C4*C5*C6*C7 + (pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C8 + (pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9)*L2*L3*L4*L5*L6 + ((pi**13*C1*C2*C3*C4*C5*C7*C8 + pi**13*C1*C2*C3*C4*C5*C7*C9)*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C8 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9)*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7*C8 + pi**13*C1*C2*C3*C5*C6*C7*C9)*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C8 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9)*L2 + (pi**13*C1*C3*C4*C5*C6*C7*C8 + pi**13*C1*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9*L2*L3*L4*L5*L6 + (pi**13*C1*C2*C3*C4*C5*C7*C9*L2*L3*L4*L5 + ((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C6*C7*C9*L2*L3 + (pi**13*C1*C3*C4*C5*C6*C7*C9*L3 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((pi**13*C1*C2*C3*C4*C5*C7 + pi**13*C1*C2*C3*C4*C5*C8)*C9*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7 + (pi**13*C1*C2*C3*C5*C6 + pi**13*C1*C2*C3*C5*C7)*C8)*C9*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**13*C1*C3*C4*C5*C6*C7 + (pi**13*C1*C3*C4*C5*C6 + pi**13*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7*C8*C9*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C7*C8*C9*L2*L3 + (pi**13*C1*C3*C4*C5*C7*C8*C9*L3 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((pi**13*C1*C2*C3*C5 + pi**13*C1*C2*C3*C6)*C7*C8*C9*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4 + (pi**13*C1*C2 + pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**13*C1*C3*C4*C5 + (pi**13*C1*C3*C4 + pi**13*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**13*C1*C3*C5*C6*C7*C8*C9*L3 + (pi**13*C1*C2 + pi**13*C1*C3)*C5*C6*C7*C8*C9*L2 + (pi**13*C1*C3 + pi**13*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**13 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*C9*L2*L3*L4*L5*L6 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*C9*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*C9*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*C9*L2*L3 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*C9*L3 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C7 - 4096*I*pi**12*C1*C2*C3*C4*C5*C8)*C9*L2*L3*L4*L5 + (((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C8)*C9*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C8)*C9*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C8*C9*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C7*C8*C9*L2*L3 + (-4096*I*pi**12*C1*C3*C4*C5*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C8*C9*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (-4096*I*pi**12*C1*C3*C5*C6*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C8*C9*L2 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C7 - 4096*I*pi**12*C1*C2*C3*C4*C5*C8 - 4096*I*pi**12*C1*C2*C3*C4*C5*C9)*L1*L2*L3*L4*L5 + (((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C8 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C9)*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C8 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C9)*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C8 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C8 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + (((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C8 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C9)*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C7*C8 - 4096*I*pi**12*C1*C2*C3*C5*C7*C9)*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C8 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C7*C8 - 4096*I*pi**12*C1*C3*C4*C5*C7*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C8 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + (((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C8 + (-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C9)*L1*L2*L3 + ((((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C8 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C9)*L1*L2 + (((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C8 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C9)*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C8 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C5*C6*C7*C8 - 4096*I*pi**12*C1*C3*C5*C6*C7*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C8 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C9)*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C8 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C9)*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C9)*L2 + (-4096*I*pi**12*C3*C4*C5*C6*C7*C8 - 4096*I*pi**12*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C9*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C9*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C9*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C7*C9*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C7*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C5*C6*C7*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C9*L2)*L3 + (-4096*I*pi**12*C3*C4*C5*C6*C7*C9*L3 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C8)*C9*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C7 - 4096*I*pi**12*C1*C2*C3*C5*C8)*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C8)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C7 - 4096*I*pi**12*C1*C3*C4*C5*C8)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6 - 4096*I*pi**12*C1*C2*C3*C7)*C8)*C9*L1*L2*L3 + ((((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C7)*C8)*C9*L1*L2 + (((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C7)*C8)*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C7)*C8)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C5*C6 - 4096*I*pi**12*C1*C3*C5*C7)*C8)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C7)*C8)*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C7)*C8)*C9*L2 + (-4096*I*pi**12*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C3*C4*C5*C6 - 4096*I*pi**12*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (-4096*I*pi**12*C1*C2*C3*C7*C8*C9*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C7*C8*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C7*C8*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C5*C7*C8*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C7*C8*C9*L2)*L3 + (-4096*I*pi**12*C3*C4*C5*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C6)*C7*C8*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C5 - 4096*I*pi**12*C1*C3*C6)*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4 - 4096*I*pi**12*C1*C5)*C6)*C7*C8*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C5)*C6)*C7*C8*C9*L2 + (-4096*I*pi**12*C3*C4*C5 + (-4096*I*pi**12*C3*C4 - 4096*I*pi**12*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (-4096*I*pi**12*C1*C5*C6*C7*C8*C9*L1 - 4096*I*pi**12*C3*C5*C6*C7*C8*C9*L3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C5*C6*C7*C8*C9*L2 + (-4096*I*pi**12*C3 - 4096*I*pi**12*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*freq**12 - 2048*((pi**11*C1*C2*C3*C4*C5*C9*L1*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9*L1*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9*L1*L2 + ((pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5*C6 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9*L1*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C7*C9*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9*L1*L2 + (pi**11*C1*C3*C4*C5*C7*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9*L1*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9*L1*L2 + (pi**11*C1*C3*C5*C6*C7*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C5*C6*C7*C9*L2)*L3 + (pi**11*C3*C4*C5*C6*C7*C9*L3 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C8)*C9*L1*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7 + pi**11*C1*C2*C3*C5*C8)*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C8)*C9*L1*L2 + ((pi**11*C1*C3*C4*C5*C7 + pi**11*C1*C3*C4*C5*C8)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5*C7 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6 + pi**11*C1*C2*C3*C7)*C8)*C9*L1*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7)*C8)*C9*L1*L2 + (((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7)*C8)*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6)*C7 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7)*C8)*C9*L1*L2 + ((pi**11*C1*C3*C5*C6*C7 + (pi**11*C1*C3*C5*C6 + pi**11*C1*C3*C5*C7)*C8)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C5*C6*C7 + ((pi**11*C1 + pi**11*C2)*C3*C5*C6 + (pi**11*C1 + pi**11*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7)*C8)*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6*C7 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**11*C3*C4*C5*C6*C7 + (pi**11*C3*C4*C5*C6 + pi**11*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (pi**11*C1*C2*C3*C7*C8*C9*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7*C8*C9*L1*L2 + ((pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C7*C8*C9*L1*L2 + (pi**11*C1*C3*C5*C7*C8*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C5*C7*C8*C9*L2)*L3 + (pi**11*C3*C4*C5*C7*C8*C9*L3 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5 + (pi**11*C1*C2 + pi**11*C1*C3)*C6)*C7*C8*C9*L1*L2 + ((pi**11*C1*C3*C5 + pi**11*C1*C3*C6)*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C5 + (pi**11*C1 + pi**11*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((pi**11*C1*C3 + pi**11*C1*C4)*C5 + (pi**11*C1*C3 + pi**11*C1*C4 + pi**11*C1*C5)*C6)*C7*C8*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**11*C3*C4*C5 + (pi**11*C3*C4 + pi**11*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**11*C1*C5*C6*C7*C8*C9*L1 + pi**11*C3*C5*C6*C7*C8*C9*L3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C5*C6*C7*C8*C9*L2 + (pi**11*C3 + pi**11*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*ZL + ((pi**11*C1*C2*C3*C4*C5*C6 + pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**11*C1*C3*C4*C5*C6*C7*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + ((pi**11*C1*C2*C3*C4*C5*C7 + pi**11*C1*C2*C3*C4*C5*C8 + pi**11*C1*C2*C3*C4*C5*C9)*L2*L3*L4*L5 + (((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7 + (pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C8 + (pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9)*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6*C7 + (pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C8 + (pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9)*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C8 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9)*L2 + (pi**11*C1*C3*C4*C5*C6*C7 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C8 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C8 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9)*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7*C8 + pi**11*C1*C2*C3*C5*C7*C9)*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C8 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9)*L2 + (pi**11*C1*C3*C4*C5*C7*C8 + pi**11*C1*C3*C4*C5*C7*C9)*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C8 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9)*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C8 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9)*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C8 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9)*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C8 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9)*L2 + (pi**11*C1*C3*C5*C6*C7*C8 + pi**11*C1*C3*C5*C6*C7*C9)*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C8 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + (pi**11*C1*C2*C3*C4*C5*C9*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9*L2 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C7*C9*L2*L3 + (pi**11*C1*C3*C4*C5*C7*C9*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9*L2 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**11*C1*C3*C5*C6*C7*C9*L3 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9*L2 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C8)*C9*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7 + pi**11*C1*C2*C3*C5*C8)*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C8)*C9*L2 + (pi**11*C1*C3*C4*C5*C7 + pi**11*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6 + pi**11*C1*C2*C3*C7)*C8)*C9*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7)*C8)*C9*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7)*C8)*C9*L2 + (pi**11*C1*C3*C5*C6*C7 + (pi**11*C1*C3*C5*C6 + pi**11*C1*C3*C5*C7)*C8)*C9*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (pi**11*C1*C2*C3*C7*C8*C9*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7*C8*C9*L2 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7*C8*C9*L3)*L4 + (pi**11*C1*C3*C5*C7*C8*C9*L3 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7*C8*C9*L2 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7*C8*C9*L4)*L5 + (pi**11*C1*C5*C6*C7*C8*C9*L5 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5 + (pi**11*C1*C2 + pi**11*C1*C3)*C6)*C7*C8*C9*L2 + (pi**11*C1*C3*C5 + pi**11*C1*C3*C6)*C7*C8*C9*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5 + (pi**11*C1*C3 + pi**11*C1*C4 + pi**11*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZS)*freq**11 + (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (1024*I*pi**10*C1*C2*C3*C4*C5*C9*L2*L3*L4*L5 + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*C9*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*C9*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*C9*L2 + (1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*C9*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*C9*L2*L3 + (1024*I*pi**10*C1*C3*C4*C5*C7*C9*L3 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*C9*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*C9*L2 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (1024*I*pi**10*C1*C3*C5*C6*C7*C9*L3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*C9*L2 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C8)*C9*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C7 + 1024*I*pi**10*C1*C2*C3*C5*C8)*C9*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C8)*C9*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7 + 1024*I*pi**10*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C8)*C9*L2*L3 + ((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8)*C9*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C8)*C9*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C8)*C9*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (1024*I*pi**10*C1*C2*C3*C7*C8*C9*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C8*C9*L2 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C8*C9*L3)*L4 + (1024*I*pi**10*C1*C3*C5*C7*C8*C9*L3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C8*C9*L2 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C8*C9*L4)*L5 + (1024*I*pi**10*C1*C5*C6*C7*C8*C9*L5 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C8*C9*L2 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C8*C9*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*ZL*ZS + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*L1*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + (((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C8 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C9)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C7 + 1024*I*pi**10*C1*C2*C3*C5*C8 + 1024*I*pi**10*C1*C2*C3*C5*C9)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C8 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C7 + 1024*I*pi**10*C1*C3*C4*C5*C8 + 1024*I*pi**10*C1*C3*C4*C5*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + (((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C8 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C9)*L1*L2*L3 + ((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C8 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C9)*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C8 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C6*C7 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C8 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C9)*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C8 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C8 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C9)*L2 + (1024*I*pi**10*C3*C4*C5*C6*C7 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C8 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C7*C8 + 1024*I*pi**10*C1*C2*C3*C7*C9)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C8 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C8 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C9)*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C8 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C7*C8 + 1024*I*pi**10*C1*C3*C5*C7*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C9)*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C8 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C9)*L2 + (1024*I*pi**10*C3*C4*C5*C7*C8 + 1024*I*pi**10*C3*C4*C5*C7*C9)*L3)*L4)*L5 + ((((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C8 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C8 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C9)*L2)*L3 + ((((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C8 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C9)*L1 + ((((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C8 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C9)*L2 + ((1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C8 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C9)*L3)*L4 + ((1024*I*pi**10*C1*C5*C6*C7*C8 + 1024*I*pi**10*C1*C5*C6*C7*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C9)*L2 + (1024*I*pi**10*C3*C5*C6*C7*C8 + 1024*I*pi**10*C3*C5*C6*C7*C9)*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C8 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C9*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C9*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C9*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C9*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C9*L2 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (1024*I*pi**10*C1*C2*C3*C7*C9*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C9*L1*L2 + (1024*I*pi**10*C1*C3*C5*C7*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C9*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C7*C9*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C9*L2 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C9*L3)*L4 + (1024*I*pi**10*C1*C5*C6*C7*C9*L1 + 1024*I*pi**10*C3*C5*C6*C7*C9*L3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C9*L2 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((1024*I*pi**10*C1*C2*C3*C7 + 1024*I*pi**10*C1*C2*C3*C8)*C9*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C8)*C9*L1*L2 + (((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C8)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C7 + 1024*I*pi**10*C1*C3*C5*C8)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C8)*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C8)*C9*L2 + (1024*I*pi**10*C3*C4*C5*C7 + 1024*I*pi**10*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C7)*C8)*C9*L1*L2 + (((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6 + 1024*I*pi**10*C1*C3*C7)*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C7)*C8)*C9*L1 + ((((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C7)*C8)*C9*L2 + ((1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C7)*C8)*C9*L3)*L4 + ((1024*I*pi**10*C1*C5*C6*C7 + (1024*I*pi**10*C1*C5*C6 + 1024*I*pi**10*C1*C5*C7)*C8)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C7)*C8)*C9*L2 + (1024*I*pi**10*C3*C5*C6*C7 + (1024*I*pi**10*C3*C5*C6 + 1024*I*pi**10*C3*C5*C7)*C8)*C9*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C7*C8*C9*L1*L2 + (1024*I*pi**10*C1*C3*C7*C8*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C7*C8*C9*L2)*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C7*C8*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C7*C8*C9*L2 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C7*C8*C9*L3)*L4 + (1024*I*pi**10*C1*C5*C7*C8*C9*L1 + 1024*I*pi**10*C3*C5*C7*C8*C9*L3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C7*C8*C9*L2 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C7*C8*C9*L4)*L5 + (1024*I*pi**10*C5*C6*C7*C8*C9*L5 + (1024*I*pi**10*C1*C5 + 1024*I*pi**10*C1*C6)*C7*C8*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C6)*C7*C8*C9*L2 + (1024*I*pi**10*C3*C5 + 1024*I*pi**10*C3*C6)*C7*C8*C9*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4 + 1024*I*pi**10*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*freq**10 + 512*(((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9*L1*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C9*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9*L1*L2 + (pi**9*C1*C3*C4*C5*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9*L1*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4*C5 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9*L1*L2 + ((pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5*C6 + (pi**9*C1 + pi**9*C2)*C3*C5*C7)*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7)*C9*L2 + (pi**9*C3*C4*C5*C6 + pi**9*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (pi**9*C1*C2*C3*C7*C9*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9*L1*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9*L1*L2 + (pi**9*C1*C3*C5*C7*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C5*C7*C9*L2)*L3 + (pi**9*C3*C4*C5*C7*C9*L3 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9*L1*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6)*C7*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7*C9*L2 + (pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**9*C1*C5*C6*C7*C9*L1 + pi**9*C3*C5*C6*C7*C9*L3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6*C7*C9*L2 + (pi**9*C3 + pi**9*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((pi**9*C1*C2*C3*C7 + pi**9*C1*C2*C3*C8)*C9*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C8)*C9*L1*L2 + (((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C8)*C9*L1*L2 + ((pi**9*C1*C3*C5*C7 + pi**9*C1*C3*C5*C8)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5*C7 + (pi**9*C1 + pi**9*C2)*C3*C5*C8)*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C8)*C9*L2 + (pi**9*C3*C4*C5*C7 + pi**9*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C7)*C8)*C9*L1*L2 + (((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6 + pi**9*C1*C3*C7)*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6)*C7 + ((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6 + (pi**9*C1 + pi**9*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7)*C8)*C9*L1 + ((((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7)*C8)*C9*L2 + ((pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6)*C7 + (pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6 + (pi**9*C3*C4 + pi**9*C3*C5)*C7)*C8)*C9*L3)*L4 + ((pi**9*C1*C5*C6*C7 + (pi**9*C1*C5*C6 + pi**9*C1*C5*C7)*C8)*C9*L1 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6*C7 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C7)*C8)*C9*L2 + (pi**9*C3*C5*C6*C7 + (pi**9*C3*C5*C6 + pi**9*C3*C5*C7)*C8)*C9*L3 + ((pi**9*C3 + pi**9*C4)*C5*C6*C7 + ((pi**9*C3 + pi**9*C4)*C5*C6 + (pi**9*C3 + pi**9*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((pi**9*C1*C2 + pi**9*C1*C3)*C7*C8*C9*L1*L2 + (pi**9*C1*C3*C7*C8*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C7*C8*C9*L2)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7*C8*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7*C8*C9*L2 + (pi**9*C3*C4 + pi**9*C3*C5)*C7*C8*C9*L3)*L4 + (pi**9*C1*C5*C7*C8*C9*L1 + pi**9*C3*C5*C7*C8*C9*L3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C7*C8*C9*L2 + (pi**9*C3 + pi**9*C4)*C5*C7*C8*C9*L4)*L5 + (pi**9*C5*C6*C7*C8*C9*L5 + (pi**9*C1*C5 + pi**9*C1*C6)*C7*C8*C9*L1 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C6)*C7*C8*C9*L2 + (pi**9*C3*C5 + pi**9*C3*C6)*C7*C8*C9*L3 + ((pi**9*C3 + pi**9*C4)*C5 + (pi**9*C3 + pi**9*C4 + pi**9*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*ZL + (pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**9*C1*C2*C3*C4*C5 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C6 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C6 + pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7)*L2 + (pi**9*C1*C3*C4*C5*C6 + pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L2*L3 + (pi**9*C1*C3*C4*C5*C7*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**9*C1*C3*C5*C6*C7*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + (((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C8 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C7 + pi**9*C1*C2*C3*C5*C8 + pi**9*C1*C2*C3*C5*C9)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C8 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9)*L2 + (pi**9*C1*C3*C4*C5*C7 + pi**9*C1*C3*C4*C5*C8 + pi**9*C1*C3*C4*C5*C9)*L3)*L4)*L5 + (((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7 + (pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C8 + (pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9)*L2*L3 + ((((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C8 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9)*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C8 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C8 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9)*L2 + (pi**9*C1*C3*C5*C6*C7 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C8 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C8 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C7*C8 + pi**9*C1*C2*C3*C7*C9)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C8 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9)*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C8 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C8 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9)*L2 + (pi**9*C1*C3*C5*C7*C8 + pi**9*C1*C3*C5*C7*C9)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C8 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9)*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C8 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9)*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C8 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C8 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9)*L4 + (pi**9*C1*C5*C6*C7*C8 + pi**9*C1*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C9*L2*L3 + (pi**9*C1*C3*C4*C5*C9*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9*L2 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + (pi**9*C1*C2*C3*C7*C9*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9*L2 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9*L3)*L4 + (pi**9*C1*C3*C5*C7*C9*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9*L4)*L5 + (pi**9*C1*C5*C6*C7*C9*L5 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9*L2 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + ((pi**9*C1*C2*C3*C7 + pi**9*C1*C2*C3*C8)*C9*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C8)*C9*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C8)*C9*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C8)*C9*L2 + (pi**9*C1*C3*C5*C7 + pi**9*C1*C3*C5*C8)*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C8)*C9*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C7)*C8)*C9*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6 + pi**9*C1*C3*C7)*C8)*C9*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7)*C8)*C9*L4 + (pi**9*C1*C5*C6*C7 + (pi**9*C1*C5*C6 + pi**9*C1*C5*C7)*C8)*C9*L5)*L6 + (pi**9*C1*C3*C7*C8*C9*L3 + pi**9*C1*C5*C7*C8*C9*L5 + (pi**9*C1*C2 + pi**9*C1*C3)*C7*C8*C9*L2 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7*C8*C9*L4 + (pi**9*C1*C5 + pi**9*C1*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*C9*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*C9*L2*L3 + (-256*I*pi**8*C1*C3*C4*C5*C9*L3 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*C9*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*C9*L2 + (-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*C9*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*C9*L2 + (-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*C9*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*C9*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*C9*L2 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*C9*L3)*L4 + (-256*I*pi**8*C1*C3*C5*C7*C9*L3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*C9*L2 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*C9*L4)*L5 + (-256*I*pi**8*C1*C5*C6*C7*C9*L5 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*C9*L2 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*C9*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + ((-256*I*pi**8*C1*C2*C3*C7 - 256*I*pi**8*C1*C2*C3*C8)*C9*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8)*C9*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C8)*C9*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C8)*C9*L2 + (-256*I*pi**8*C1*C3*C5*C7 - 256*I*pi**8*C1*C3*C5*C8)*C9*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C8)*C9*L4)*L5 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8)*C9*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C8)*C9*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8)*C9*L4 + (-256*I*pi**8*C1*C5*C6*C7 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C8)*C9*L5)*L6 + (-256*I*pi**8*C1*C3*C7*C8*C9*L3 - 256*I*pi**8*C1*C5*C7*C8*C9*L5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C8*C9*L2 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C8*C9*L4 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C8*C9*L6)*L7)*L8)*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7)*L2 + (-256*I*pi**8*C3*C4*C5*C6 - 256*I*pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*L1*L2 + (-256*I*pi**8*C1*C3*C5*C7*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C5*C6*C7*L1 - 256*I*pi**8*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + ((-256*I*pi**8*C1*C2*C3*C7 - 256*I*pi**8*C1*C2*C3*C8 - 256*I*pi**8*C1*C2*C3*C9)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C9)*L1*L2 + (((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C8 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C9)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C8 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C9)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C7 - 256*I*pi**8*C1*C3*C5*C8 - 256*I*pi**8*C1*C3*C5*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C9)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C8 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C9)*L2 + (-256*I*pi**8*C3*C4*C5*C7 - 256*I*pi**8*C3*C4*C5*C8 - 256*I*pi**8*C3*C4*C5*C9)*L3)*L4)*L5 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C9)*L1*L2 + (((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C8 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C9)*L2)*L3 + ((((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C9)*L1 + ((((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C8 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9)*L2 + ((-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C8 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C9)*L3)*L4 + ((-256*I*pi**8*C1*C5*C6*C7 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C8 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C9)*L2 + (-256*I*pi**8*C3*C5*C6*C7 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C8 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C9)*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C8 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C9)*L4)*L5)*L6 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C8 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C9)*L1*L2 + ((-256*I*pi**8*C1*C3*C7*C8 - 256*I*pi**8*C1*C3*C7*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C9)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C8 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C9)*L2 + ((-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C8 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C9)*L3)*L4 + ((-256*I*pi**8*C1*C5*C7*C8 - 256*I*pi**8*C1*C5*C7*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C9)*L2 + (-256*I*pi**8*C3*C5*C7*C8 - 256*I*pi**8*C3*C5*C7*C9)*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C8 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C9)*L4)*L5 + (((-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C8 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C9)*L2 + ((-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C8 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C9)*L3 + (((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C8 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C9)*L4 + (-256*I*pi**8*C5*C6*C7*C8 - 256*I*pi**8*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + (-256*I*pi**8*C1*C2*C3*C9*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C9*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C9*L1*L2 + (-256*I*pi**8*C1*C3*C5*C9*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C9*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C9*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C9*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C9*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C9*L3)*L4 + ((-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C9*L2 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C9*L4)*L5)*L6 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C9*L1*L2 + (-256*I*pi**8*C1*C3*C7*C9*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C9*L2)*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C9*L2 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C9*L3)*L4 + (-256*I*pi**8*C1*C5*C7*C9*L1 - 256*I*pi**8*C3*C5*C7*C9*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C9*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C9*L4)*L5 + (-256*I*pi**8*C5*C6*C7*C9*L5 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C9*L2 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C9*L4)*L6)*L7 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C8)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C7 - 256*I*pi**8*C1*C3*C8)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C8)*C9*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C8)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C8)*C9*L2 + ((-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C8)*C9*L3)*L4 + ((-256*I*pi**8*C1*C5*C7 - 256*I*pi**8*C1*C5*C8)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C8)*C9*L2 + (-256*I*pi**8*C3*C5*C7 - 256*I*pi**8*C3*C5*C8)*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C8)*C9*L4)*L5 + (((-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6 - 256*I*pi**8*C1*C7)*C8)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C7)*C8)*C9*L2 + ((-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6 - 256*I*pi**8*C3*C7)*C8)*C9*L3 + (((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C7)*C8)*C9*L4 + (-256*I*pi**8*C5*C6*C7 + (-256*I*pi**8*C5*C6 - 256*I*pi**8*C5*C7)*C8)*C9*L5)*L6 + (-256*I*pi**8*C1*C7*C8*C9*L1 - 256*I*pi**8*C3*C7*C8*C9*L3 - 256*I*pi**8*C5*C7*C8*C9*L5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C7*C8*C9*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C7*C8*C9*L4 + (-256*I*pi**8*C5 - 256*I*pi**8*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*freq**8 - 128*((pi**7*C1*C2*C3*C9*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9*L1*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C4 + (pi**7*C1 + pi**7*C2)*C3*C5)*C9*L2)*L3)*L4 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5*C9*L1*L2 + (pi**7*C1*C3*C5*C9*L1 + (pi**7*C1 + pi**7*C2)*C3*C5*C9*L2)*L3 + (pi**7*C3*C4*C5*C9*L3 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5*C9*L2)*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9*L1*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C5 + (pi**7*C1 + pi**7*C2)*C3*C6 + (pi**7*C1 + pi**7*C2)*C3*C7)*C9*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7)*C9*L2 + (pi**7*C3*C4*C5 + (pi**7*C3*C4 + pi**7*C3*C5)*C6 + (pi**7*C3*C4 + pi**7*C3*C5)*C7)*C9*L3)*L4 + ((pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7)*C9*L2 + (pi**7*C3*C5*C6 + pi**7*C3*C5*C7)*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5*C6 + (pi**7*C3 + pi**7*C4)*C5*C7)*C9*L4)*L5)*L6 + ((pi**7*C1*C2 + pi**7*C1*C3)*C7*C9*L1*L2 + (pi**7*C1*C3*C7*C9*L1 + (pi**7*C1 + pi**7*C2)*C3*C7*C9*L2)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7*C9*L2 + (pi**7*C3*C4 + pi**7*C3*C5)*C7*C9*L3)*L4 + (pi**7*C1*C5*C7*C9*L1 + pi**7*C3*C5*C7*C9*L3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7*C9*L2 + (pi**7*C3 + pi**7*C4)*C5*C7*C9*L4)*L5 + (pi**7*C5*C6*C7*C9*L5 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7*C9*L2 + (pi**7*C3*C5 + pi**7*C3*C6)*C7*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7*C9*L4)*L6)*L7 + (((pi**7*C1*C2 + pi**7*C1*C3)*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C8)*C9*L1*L2 + ((pi**7*C1*C3*C7 + pi**7*C1*C3*C8)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C7 + (pi**7*C1 + pi**7*C2)*C3*C8)*C9*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C8)*C9*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C8)*C9*L2 + ((pi**7*C3*C4 + pi**7*C3*C5)*C7 + (pi**7*C3*C4 + pi**7*C3*C5)*C8)*C9*L3)*L4 + ((pi**7*C1*C5*C7 + pi**7*C1*C5*C8)*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C8)*C9*L2 + (pi**7*C3*C5*C7 + pi**7*C3*C5*C8)*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5*C7 + (pi**7*C3 + pi**7*C4)*C5*C8)*C9*L4)*L5 + (((pi**7*C1*C5 + pi**7*C1*C6)*C7 + (pi**7*C1*C5 + pi**7*C1*C6 + pi**7*C1*C7)*C8)*C9*L1 + (((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7)*C8)*C9*L2 + ((pi**7*C3*C5 + pi**7*C3*C6)*C7 + (pi**7*C3*C5 + pi**7*C3*C6 + pi**7*C3*C7)*C8)*C9*L3 + (((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7)*C8)*C9*L4 + (pi**7*C5*C6*C7 + (pi**7*C5*C6 + pi**7*C5*C7)*C8)*C9*L5)*L6 + (pi**7*C1*C7*C8*C9*L1 + pi**7*C3*C7*C8*C9*L3 + pi**7*C5*C7*C8*C9*L5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7*C8*C9*L2 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7*C8*C9*L4 + (pi**7*C5 + pi**7*C6)*C7*C8*C9*L6)*L7)*L8)*ZL + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**7*C1*C2*C3*C5 + pi**7*C1*C2*C3*C6 + pi**7*C1*C2*C3*C7)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L2 + (pi**7*C1*C3*C4*C5 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C6 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7)*L2 + (pi**7*C1*C3*C5*C6 + pi**7*C1*C3*C5*C7)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C6 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**7*C1*C2*C3*C7*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L3)*L4 + (pi**7*C1*C3*C5*C7*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L4)*L5 + (pi**7*C1*C5*C6*C7*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L4)*L6)*L7 + ((pi**7*C1*C2*C3*C7 + pi**7*C1*C2*C3*C8 + pi**7*C1*C2*C3*C9)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C8 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9)*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C8 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C8 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C9)*L2 + (pi**7*C1*C3*C5*C7 + pi**7*C1*C3*C5*C8 + pi**7*C1*C3*C5*C9)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C7 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C8 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9)*L4)*L5 + ((((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C8 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9)*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C8 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C8 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9)*L4 + (pi**7*C1*C5*C6*C7 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C8 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9)*L5)*L6 + (((pi**7*C1*C2 + pi**7*C1*C3)*C7*C8 + (pi**7*C1*C2 + pi**7*C1*C3)*C7*C9)*L2 + (pi**7*C1*C3*C7*C8 + pi**7*C1*C3*C7*C9)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C8 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9)*L4 + (pi**7*C1*C5*C7*C8 + pi**7*C1*C5*C7*C9)*L5 + ((pi**7*C1*C5 + pi**7*C1*C6)*C7*C8 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9)*L6)*L7)*L8 + (pi**7*C1*C2*C3*C9*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9*L3)*L4 + (pi**7*C1*C3*C5*C9*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C9*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9*L4 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9*L5)*L6 + (pi**7*C1*C3*C7*C9*L3 + pi**7*C1*C5*C7*C9*L5 + (pi**7*C1*C2 + pi**7*C1*C3)*C7*C9*L2 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9*L4 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9*L6)*L7 + (pi**7*C1*C7*C8*C9*L7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C8)*C9*L2 + (pi**7*C1*C3*C7 + pi**7*C1*C3*C8)*C9*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C8)*C9*L4 + (pi**7*C1*C5*C7 + pi**7*C1*C5*C8)*C9*L5 + ((pi**7*C1*C5 + pi**7*C1*C6)*C7 + (pi**7*C1*C5 + pi**7*C1*C6 + pi**7*C1*C7)*C8)*C9*L6)*L8)*L9)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C9*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C9*L2 + (64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*C9*L3)*L4 + (64*I*pi**6*C1*C3*C5*C9*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*C9*L2 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*C9*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*C9*L2 + (64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*C9*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*C9*L4 + (64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*C9*L5)*L6 + (64*I*pi**6*C1*C3*C7*C9*L3 + 64*I*pi**6*C1*C5*C7*C9*L5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*C9*L2 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*C9*L4 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*C9*L6)*L7 + (64*I*pi**6*C1*C7*C8*C9*L7 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8)*C9*L2 + (64*I*pi**6*C1*C3*C7 + 64*I*pi**6*C1*C3*C8)*C9*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8)*C9*L4 + (64*I*pi**6*C1*C5*C7 + 64*I*pi**6*C1*C5*C8)*C9*L5 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8)*C9*L6)*L8)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*L1*L2 + ((64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L2 + (64*I*pi**6*C3*C4*C5 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C6 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7)*L3)*L4 + ((64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7)*L2 + (64*I*pi**6*C3*C5*C6 + 64*I*pi**6*C3*C5*C7)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*L1*L2 + (64*I*pi**6*C1*C3*C7*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C5*C7*L1 + 64*I*pi**6*C3*C5*C7*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C5*C6*C7*L5 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7*L4)*L6)*L7 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C9)*L1*L2 + ((64*I*pi**6*C1*C3*C7 + 64*I*pi**6*C1*C3*C8 + 64*I*pi**6*C1*C3*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C9)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C9)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9)*L2 + ((64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C8 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C9)*L3)*L4 + ((64*I*pi**6*C1*C5*C7 + 64*I*pi**6*C1*C5*C8 + 64*I*pi**6*C1*C5*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C9)*L2 + (64*I*pi**6*C3*C5*C7 + 64*I*pi**6*C3*C5*C8 + 64*I*pi**6*C3*C5*C9)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C8 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C9)*L4)*L5 + (((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C9)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9)*L2 + ((64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C8 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C9)*L3 + (((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C8 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9)*L4 + (64*I*pi**6*C5*C6*C7 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C8 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C9)*L5)*L6 + ((64*I*pi**6*C1*C7*C8 + 64*I*pi**6*C1*C7*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C9)*L2 + (64*I*pi**6*C3*C7*C8 + 64*I*pi**6*C3*C7*C9)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C8 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C9)*L4 + (64*I*pi**6*C5*C7*C8 + 64*I*pi**6*C5*C7*C9)*L5 + ((64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C8 + (64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C9)*L6)*L7)*L8 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C9*L1*L2 + (64*I*pi**6*C1*C3*C9*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C9*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C9*L3)*L4 + (64*I*pi**6*C1*C5*C9*L1 + 64*I*pi**6*C3*C5*C9*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C9*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C9*L4)*L5 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C9*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9*L4 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C9*L5)*L6 + (64*I*pi**6*C1*C7*C9*L1 + 64*I*pi**6*C3*C7*C9*L3 + 64*I*pi**6*C5*C7*C9*L5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C9*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C9*L4 + (64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C9*L6)*L7 + (64*I*pi**6*C7*C8*C9*L7 + (64*I*pi**6*C1*C7 + 64*I*pi**6*C1*C8)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C8)*C9*L2 + (64*I*pi**6*C3*C7 + 64*I*pi**6*C3*C8)*C9*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C8)*C9*L4 + (64*I*pi**6*C5*C7 + 64*I*pi**6*C5*C8)*C9*L5 + ((64*I*pi**6*C5 + 64*I*pi**6*C6)*C7 + (64*I*pi**6*C5 + 64*I*pi**6*C6 + 64*I*pi**6*C7)*C8)*C9*L6)*L8)*L9)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C9*L1*L2 + (pi**5*C1*C3*C9*L1 + (pi**5*C1 + pi**5*C2)*C3*C9*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C9*L2 + (pi**5*C3*C4 + pi**5*C3*C5)*C9*L3)*L4 + (pi**5*C1*C5*C9*L1 + pi**5*C3*C5*C9*L3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5*C9*L2 + (pi**5*C3 + pi**5*C4)*C5*C9*L4)*L5 + ((pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7)*C9*L2 + (pi**5*C3*C5 + pi**5*C3*C6 + pi**5*C3*C7)*C9*L3 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7)*C9*L4 + (pi**5*C5*C6 + pi**5*C5*C7)*C9*L5)*L6 + (pi**5*C1*C7*C9*L1 + pi**5*C3*C7*C9*L3 + pi**5*C5*C7*C9*L5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7*C9*L2 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7*C9*L4 + (pi**5*C5 + pi**5*C6)*C7*C9*L6)*L7 + (pi**5*C7*C8*C9*L7 + (pi**5*C1*C7 + pi**5*C1*C8)*C9*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C7 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C8)*C9*L2 + (pi**5*C3*C7 + pi**5*C3*C8)*C9*L3 + ((pi**5*C3 + pi**5*C4 + pi**5*C5)*C7 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C8)*C9*L4 + (pi**5*C5*C7 + pi**5*C5*C8)*C9*L5 + ((pi**5*C5 + pi**5*C6)*C7 + (pi**5*C5 + pi**5*C6 + pi**5*C7)*C8)*C9*L6)*L8)*ZL + (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L2 + (pi**5*C1*C3*C5 + pi**5*C1*C3*C6 + pi**5*C1*C3*C7)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L4 + (pi**5*C1*C5*C6 + pi**5*C1*C5*C7)*L5)*L6 + (pi**5*C1*C3*C7*L3 + pi**5*C1*C5*C7*L5 + (pi**5*C1*C2 + pi**5*C1*C3)*C7*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L4 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L6)*L7 + (((pi**5*C1*C2 + pi**5*C1*C3)*C7 + (pi**5*C1*C2 + pi**5*C1*C3)*C8 + (pi**5*C1*C2 + pi**5*C1*C3)*C9)*L2 + (pi**5*C1*C3*C7 + pi**5*C1*C3*C8 + pi**5*C1*C3*C9)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C8 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9)*L4 + (pi**5*C1*C5*C7 + pi**5*C1*C5*C8 + pi**5*C1*C5*C9)*L5 + ((pi**5*C1*C5 + pi**5*C1*C6)*C7 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C8 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9)*L6 + (pi**5*C1*C7*C8 + pi**5*C1*C7*C9)*L7)*L8 + (pi**5*C1*C3*C9*L3 + pi**5*C1*C5*C9*L5 + pi**5*C1*C7*C9*L7 + (pi**5*C1*C2 + pi**5*C1*C3)*C9*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9*L4 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9*L6 + (pi**5*C1*C7 + pi**5*C1*C8)*C9*L8)*L9)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*C9*L3 - 16*I*pi**4*C1*C5*C9*L5 - 16*I*pi**4*C1*C7*C9*L7 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C9*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C9*L4 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*C9*L6 + (-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8)*C9*L8)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5 + ((-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L2 + (-16*I*pi**4*C3*C5 - 16*I*pi**4*C3*C6 - 16*I*pi**4*C3*C7)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L4 + (-16*I*pi**4*C5*C6 - 16*I*pi**4*C5*C7)*L5)*L6 + (-16*I*pi**4*C1*C7*L1 - 16*I*pi**4*C3*C7*L3 - 16*I*pi**4*C5*C7*L5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7*L6)*L7 + ((-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8 - 16*I*pi**4*C1*C9)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C8 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9)*L2 + (-16*I*pi**4*C3*C7 - 16*I*pi**4*C3*C8 - 16*I*pi**4*C3*C9)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C8 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9)*L4 + (-16*I*pi**4*C5*C7 - 16*I*pi**4*C5*C8 - 16*I*pi**4*C5*C9)*L5 + ((-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C8 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9)*L6 + (-16*I*pi**4*C7*C8 - 16*I*pi**4*C7*C9)*L7)*L8 + (-16*I*pi**4*C1*C9*L1 - 16*I*pi**4*C3*C9*L3 - 16*I*pi**4*C5*C9*L5 - 16*I*pi**4*C7*C9*L7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9*L6 + (-16*I*pi**4*C7 - 16*I*pi**4*C8)*C9*L8)*L9)*freq**4 - 8*((pi**3*C1*C9*L1 + pi**3*C3*C9*L3 + pi**3*C5*C9*L5 + pi**3*C7*C9*L7 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C9*L2 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C9*L4 + (pi**3*C5 + pi**3*C6 + pi**3*C7)*C9*L6 + (pi**3*C7 + pi**3*C8)*C9*L8)*ZL + (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + pi**3*C1*C7*L7 + pi**3*C1*C9*L9 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L6 + (pi**3*C1*C7 + pi**3*C1*C8 + pi**3*C1*C9)*L8)*ZS)*freq**3 + (4*I*pi**2*C1*C9*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + 4*I*pi**2*C7*L7 + 4*I*pi**2*C9*L9 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L6 + (4*I*pi**2*C7 + 4*I*pi**2*C8 + 4*I*pi**2*C9)*L8)*freq**2 + 2*(pi*C9*ZL + pi*C1*ZS)*freq - I)

                    S21 = 1024*pi**9*C1*C3*C5*C7*C9*L2*L4*L6*L8*ZL*ZS*freq**9/((262144*I*pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*L9*freq**18 + 131072*(pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L2*L3*L4*L5*L6*L7*L8*ZL + pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*freq**17 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2*L3*L4*L5*L6*L7*L8*ZL*ZS + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C8 - 65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L2*L3*L4*L5*L6*L7*L8 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L1*L2*L3*L4*L5*L6*L7 + ((-65536*I*pi**16*C1*C2*C3*C4*C5*C6*C7 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C6 - 65536*I*pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L2*L3*L4*L5*L6 + (-65536*I*pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L1*L2*L3*L4*L5 + ((-65536*I*pi**16*C1*C2*C3*C4*C5 + (-65536*I*pi**16*C1*C2*C3*C4 - 65536*I*pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L2*L3*L4 + (-65536*I*pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L1*L2*L3 + ((-65536*I*pi**16*C1*C2*C3 + (-65536*I*pi**16*C1*C2 - 65536*I*pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L2 + (-65536*I*pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L1 + (-65536*I*pi**16*C1 - 65536*I*pi**16*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**16 - 32768*((pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L1*L2*L3*L4*L5*L6*L7 + ((pi**15*C1*C2*C3*C4*C5*C6*C7 + (pi**15*C1*C2*C3*C4*C5*C6 + pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L2*L3*L4*L5*L6 + (pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L1*L2*L3*L4*L5 + ((pi**15*C1*C2*C3*C4*C5 + (pi**15*C1*C2*C3*C4 + pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L2*L3*L4 + (pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L1*L2*L3 + ((pi**15*C1*C2*C3 + (pi**15*C1*C2 + pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L2 + (pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L1 + (pi**15*C1 + pi**15*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL + ((pi**15*C1*C2*C3*C4*C5*C6*C7*C8 + pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L2*L3*L4*L5*L6*L7*L8 + (pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L2*L3*L4*L5*L6*L7 + ((pi**15*C1*C2*C3*C4*C5*C6*C7 + (pi**15*C1*C2*C3*C4*C5*C6 + pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L2*L3*L4*L5*L6 + (pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L2*L3*L4*L5 + ((pi**15*C1*C2*C3*C4*C5 + (pi**15*C1*C2*C3*C4 + pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L2*L3*L4 + (pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L2*L3 + (pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**15*C1*C2*C3 + (pi**15*C1*C2 + pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**15 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*L4*L5*L6*L7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7*C9*L2*L3*L4*L5*L6*L7 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C8)*C9*L2*L3*L4*L5*L6 + (16384*I*pi**14*C1*C2*C3*C4*C5*C7*C8*C9*L2*L3*L4*L5 + ((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C8*C9*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C6*C7*C8*C9*L2*L3 + (16384*I*pi**14*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C8 + (16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1*L2*L3*L4*L5*L6 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C7*C8 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7*C9)*L1*L2*L3*L4*L5 + (((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L1*L2*L3*L4 + ((16384*I*pi**14*C1*C2*C3*C5*C6*C7*C8 + 16384*I*pi**14*C1*C2*C3*C5*C6*C7*C9)*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5*C6*C7*C8 + 16384*I*pi**14*C1*C3*C4*C5*C6*C7*C9)*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C8 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C6 + 16384*I*pi**14*C1*C2*C3*C4*C5*C7)*C9*L1*L2*L3*L4*L5*L6 + (16384*I*pi**14*C1*C2*C3*C4*C5*C7*C9*L1*L2*L3*L4*L5 + ((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7*C9*L1*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C6*C7*C9*L1*L2*L3 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7*C9*L1*L2 + (16384*I*pi**14*C1*C3*C4*C5*C6*C7*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((16384*I*pi**14*C1*C2*C3*C4*C5*C7 + 16384*I*pi**14*C1*C2*C3*C4*C5*C8)*C9*L1*L2*L3*L4*L5 + (((16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6)*C7 + (16384*I*pi**14*C1*C2*C3*C4*C5 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C6 + (16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L1*L2*L3*L4 + ((16384*I*pi**14*C1*C2*C3*C5*C6*C7 + (16384*I*pi**14*C1*C2*C3*C5*C6 + 16384*I*pi**14*C1*C2*C3*C5*C7)*C8)*C9*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6*C7 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C6 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5*C6*C7 + (16384*I*pi**14*C1*C3*C4*C5*C6 + 16384*I*pi**14*C1*C3*C4*C5*C7)*C8)*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6*C7 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C6 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((16384*I*pi**14*C1*C2*C3*C4 + 16384*I*pi**14*C1*C2*C3*C5)*C7*C8*C9*L1*L2*L3*L4 + (16384*I*pi**14*C1*C2*C3*C5*C7*C8*C9*L1*L2*L3 + ((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5*C7*C8*C9*L1*L2 + (16384*I*pi**14*C1*C3*C4*C5*C7*C8*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((16384*I*pi**14*C1*C2*C3*C5 + 16384*I*pi**14*C1*C2*C3*C6)*C7*C8*C9*L1*L2*L3 + (((16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4)*C5 + (16384*I*pi**14*C1*C2*C3 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C4 + (16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L1*L2 + ((16384*I*pi**14*C1*C3*C4*C5 + (16384*I*pi**14*C1*C3*C4 + 16384*I*pi**14*C1*C3*C5)*C6)*C7*C8*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4*C5 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C4 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((16384*I*pi**14*C1*C2 + 16384*I*pi**14*C1*C3)*C5*C6*C7*C8*C9*L1*L2 + (16384*I*pi**14*C1*C3*C5*C6*C7*C8*C9*L1 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (16384*I*pi**14*C3*C4*C5*C6*C7*C8*C9*L3 + (16384*I*pi**14*C1*C3 + 16384*I*pi**14*C1*C4)*C5*C6*C7*C8*C9*L1 + ((16384*I*pi**14*C1 + 16384*I*pi**14*C2)*C3 + (16384*I*pi**14*C1 + 16384*I*pi**14*C2 + 16384*I*pi**14*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**14 + 8192*(((pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9*L1*L2*L3*L4*L5*L6 + (pi**13*C1*C2*C3*C4*C5*C7*C9*L1*L2*L3*L4*L5 + ((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9*L1*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C6*C7*C9*L1*L2*L3 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9*L1*L2 + (pi**13*C1*C3*C4*C5*C6*C7*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**13*C1*C2*C3*C4*C5*C7 + pi**13*C1*C2*C3*C4*C5*C8)*C9*L1*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L1*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7 + (pi**13*C1*C2*C3*C5*C6 + pi**13*C1*C2*C3*C5*C7)*C8)*C9*L1*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L2 + ((pi**13*C1*C3*C4*C5*C6*C7 + (pi**13*C1*C3*C4*C5*C6 + pi**13*C1*C3*C4*C5*C7)*C8)*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5*C6*C7 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5*C6 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7*C8*C9*L1*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C7*C8*C9*L1*L2*L3 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7*C8*C9*L1*L2 + (pi**13*C1*C3*C4*C5*C7*C8*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((pi**13*C1*C2*C3*C5 + pi**13*C1*C2*C3*C6)*C7*C8*C9*L1*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4 + (pi**13*C1*C2 + pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L1*L2 + ((pi**13*C1*C3*C4*C5 + (pi**13*C1*C3*C4 + pi**13*C1*C3*C5)*C6)*C7*C8*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3*C4*C5 + ((pi**13*C1 + pi**13*C2)*C3*C4 + (pi**13*C1 + pi**13*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((pi**13*C1*C2 + pi**13*C1*C3)*C5*C6*C7*C8*C9*L1*L2 + (pi**13*C1*C3*C5*C6*C7*C8*C9*L1 + (pi**13*C1 + pi**13*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (pi**13*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**13*C1*C3 + pi**13*C1*C4)*C5*C6*C7*C8*C9*L1 + ((pi**13*C1 + pi**13*C2)*C3 + (pi**13*C1 + pi**13*C2 + pi**13*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*ZL + (pi**13*C1*C2*C3*C4*C5*C6*C7*L2*L3*L4*L5*L6*L7 + ((pi**13*C1*C2*C3*C4*C5*C6*C7 + (pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C8 + (pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9)*L2*L3*L4*L5*L6 + ((pi**13*C1*C2*C3*C4*C5*C7*C8 + pi**13*C1*C2*C3*C4*C5*C7*C9)*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C8 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9)*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7*C8 + pi**13*C1*C2*C3*C5*C6*C7*C9)*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C8 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9)*L2 + (pi**13*C1*C3*C4*C5*C6*C7*C8 + pi**13*C1*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**13*C1*C2*C3*C4*C5*C6 + pi**13*C1*C2*C3*C4*C5*C7)*C9*L2*L3*L4*L5*L6 + (pi**13*C1*C2*C3*C4*C5*C7*C9*L2*L3*L4*L5 + ((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7*C9*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C6*C7*C9*L2*L3 + (pi**13*C1*C3*C4*C5*C6*C7*C9*L3 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((pi**13*C1*C2*C3*C4*C5*C7 + pi**13*C1*C2*C3*C4*C5*C8)*C9*L2*L3*L4*L5 + (((pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6)*C7 + (pi**13*C1*C2*C3*C4*C5 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C6 + (pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L2*L3*L4 + ((pi**13*C1*C2*C3*C5*C6*C7 + (pi**13*C1*C2*C3*C5*C6 + pi**13*C1*C2*C3*C5*C7)*C8)*C9*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6*C7 + ((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C6 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**13*C1*C3*C4*C5*C6*C7 + (pi**13*C1*C3*C4*C5*C6 + pi**13*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((pi**13*C1*C2*C3*C4 + pi**13*C1*C2*C3*C5)*C7*C8*C9*L2*L3*L4 + (pi**13*C1*C2*C3*C5*C7*C8*C9*L2*L3 + (pi**13*C1*C3*C4*C5*C7*C8*C9*L3 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((pi**13*C1*C2*C3*C5 + pi**13*C1*C2*C3*C6)*C7*C8*C9*L2*L3 + (((pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4)*C5 + (pi**13*C1*C2*C3 + (pi**13*C1*C2 + pi**13*C1*C3)*C4 + (pi**13*C1*C2 + pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**13*C1*C3*C4*C5 + (pi**13*C1*C3*C4 + pi**13*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**13*C1*C3*C5*C6*C7*C8*C9*L3 + (pi**13*C1*C2 + pi**13*C1*C3)*C5*C6*C7*C8*C9*L2 + (pi**13*C1*C3 + pi**13*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**13 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*L1*L2*L3*L4*L5*L6 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C6 - 4096*I*pi**12*C1*C2*C3*C4*C5*C7)*C9*L2*L3*L4*L5*L6 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*C9*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*C9*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*C9*L2*L3 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*C9*L3 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C7 - 4096*I*pi**12*C1*C2*C3*C4*C5*C8)*C9*L2*L3*L4*L5 + (((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C8)*C9*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C8)*C9*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C8*C9*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C7*C8*C9*L2*L3 + (-4096*I*pi**12*C1*C3*C4*C5*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C8*C9*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (-4096*I*pi**12*C1*C3*C5*C6*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C8*C9*L2 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (-4096*I*pi**12*C1*C2*C3*C4*C5*C7*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C6*C7*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C6*C7*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7*L2)*L3)*L4)*L5)*L6)*L7 + ((-4096*I*pi**12*C1*C2*C3*C4*C5*C7 - 4096*I*pi**12*C1*C2*C3*C4*C5*C8 - 4096*I*pi**12*C1*C2*C3*C4*C5*C9)*L1*L2*L3*L4*L5 + (((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C8 + (-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C9)*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C8 + (-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C9)*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C8 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C8 + (-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + (((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C8 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C9)*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C7*C8 - 4096*I*pi**12*C1*C2*C3*C5*C7*C9)*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C8 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C7*C8 - 4096*I*pi**12*C1*C3*C4*C5*C7*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C8 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + (((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C8 + (-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C9)*L1*L2*L3 + ((((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C8 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C9)*L1*L2 + (((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C8 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C9)*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C8 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C9)*L1*L2 + ((-4096*I*pi**12*C1*C3*C5*C6*C7*C8 - 4096*I*pi**12*C1*C3*C5*C6*C7*C9)*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C8 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C9)*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C8 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C9)*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C8 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C9)*L2 + (-4096*I*pi**12*C3*C4*C5*C6*C7*C8 - 4096*I*pi**12*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + (-4096*I*pi**12*C1*C2*C3*C4*C5*C9*L1*L2*L3*L4*L5 + ((-4096*I*pi**12*C1*C2*C3*C4*C5 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C6 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7)*C9*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C6 - 4096*I*pi**12*C1*C2*C3*C5*C7)*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C6 - 4096*I*pi**12*C1*C3*C4*C5*C7)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7*C9*L1*L2*L3*L4 + (-4096*I*pi**12*C1*C2*C3*C5*C7*C9*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C4*C5*C7*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C5*C6*C7*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7*C9*L2)*L3 + (-4096*I*pi**12*C3*C4*C5*C6*C7*C9*L3 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C7 + (-4096*I*pi**12*C1*C2*C3*C4 - 4096*I*pi**12*C1*C2*C3*C5)*C8)*C9*L1*L2*L3*L4 + ((-4096*I*pi**12*C1*C2*C3*C5*C7 - 4096*I*pi**12*C1*C2*C3*C5*C8)*C9*L1*L2*L3 + (((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C7 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5*C8)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4*C5*C7 - 4096*I*pi**12*C1*C3*C4*C5*C8)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C7 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6)*C7 + (-4096*I*pi**12*C1*C2*C3*C5 - 4096*I*pi**12*C1*C2*C3*C6 - 4096*I*pi**12*C1*C2*C3*C7)*C8)*C9*L1*L2*L3 + ((((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6)*C7 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4)*C5 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C6 + (-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C7)*C8)*C9*L1*L2 + (((-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6)*C7 + (-4096*I*pi**12*C1*C3*C4*C5 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C6 + (-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C7)*C8)*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6)*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C6 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6*C7 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C6 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C7)*C8)*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C5*C6*C7 + (-4096*I*pi**12*C1*C3*C5*C6 - 4096*I*pi**12*C1*C3*C5*C7)*C8)*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6*C7 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C6 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6*C7 + ((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C6 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C7)*C8)*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6*C7 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C6 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C7)*C8)*C9*L2 + (-4096*I*pi**12*C3*C4*C5*C6*C7 + (-4096*I*pi**12*C3*C4*C5*C6 - 4096*I*pi**12*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (-4096*I*pi**12*C1*C2*C3*C7*C8*C9*L1*L2*L3 + ((-4096*I*pi**12*C1*C2*C3 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C4 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5)*C7*C8*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C4 - 4096*I*pi**12*C1*C3*C5)*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5*C7*C8*C9*L1*L2 + (-4096*I*pi**12*C1*C3*C5*C7*C8*C9*L1 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5*C7*C8*C9*L2)*L3 + (-4096*I*pi**12*C3*C4*C5*C7*C8*C9*L3 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C5 + (-4096*I*pi**12*C1*C2 - 4096*I*pi**12*C1*C3)*C6)*C7*C8*C9*L1*L2 + ((-4096*I*pi**12*C1*C3*C5 - 4096*I*pi**12*C1*C3*C6)*C7*C8*C9*L1 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C5 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4)*C5 + (-4096*I*pi**12*C1*C3 - 4096*I*pi**12*C1*C4 - 4096*I*pi**12*C1*C5)*C6)*C7*C8*C9*L1 + (((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4)*C5 + ((-4096*I*pi**12*C1 - 4096*I*pi**12*C2)*C3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C4 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C5)*C6)*C7*C8*C9*L2 + (-4096*I*pi**12*C3*C4*C5 + (-4096*I*pi**12*C3*C4 - 4096*I*pi**12*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (-4096*I*pi**12*C1*C5*C6*C7*C8*C9*L1 - 4096*I*pi**12*C3*C5*C6*C7*C8*C9*L3 + (-4096*I*pi**12*C1 - 4096*I*pi**12*C2 - 4096*I*pi**12*C3)*C5*C6*C7*C8*C9*L2 + (-4096*I*pi**12*C3 - 4096*I*pi**12*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*freq**12 - 2048*((pi**11*C1*C2*C3*C4*C5*C9*L1*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9*L1*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9*L1*L2 + ((pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5*C6 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9*L1*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C7*C9*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9*L1*L2 + (pi**11*C1*C3*C4*C5*C7*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9*L1*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9*L1*L2 + (pi**11*C1*C3*C5*C6*C7*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C5*C6*C7*C9*L2)*L3 + (pi**11*C3*C4*C5*C6*C7*C9*L3 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C8)*C9*L1*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7 + pi**11*C1*C2*C3*C5*C8)*C9*L1*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C8)*C9*L1*L2 + ((pi**11*C1*C3*C4*C5*C7 + pi**11*C1*C3*C4*C5*C8)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5*C7 + (pi**11*C1 + pi**11*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6 + pi**11*C1*C2*C3*C7)*C8)*C9*L1*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7)*C8)*C9*L1*L2 + (((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7)*C8)*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6)*C7 + ((pi**11*C1 + pi**11*C2)*C3*C4*C5 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C6 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7)*C8)*C9*L1*L2 + ((pi**11*C1*C3*C5*C6*C7 + (pi**11*C1*C3*C5*C6 + pi**11*C1*C3*C5*C7)*C8)*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C5*C6*C7 + ((pi**11*C1 + pi**11*C2)*C3*C5*C6 + (pi**11*C1 + pi**11*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7)*C8)*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6*C7 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C6 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**11*C3*C4*C5*C6*C7 + (pi**11*C3*C4*C5*C6 + pi**11*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (pi**11*C1*C2*C3*C7*C8*C9*L1*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7*C8*C9*L1*L2 + ((pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C4 + (pi**11*C1 + pi**11*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C7*C8*C9*L1*L2 + (pi**11*C1*C3*C5*C7*C8*C9*L1 + (pi**11*C1 + pi**11*C2)*C3*C5*C7*C8*C9*L2)*L3 + (pi**11*C3*C4*C5*C7*C8*C9*L3 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5 + (pi**11*C1*C2 + pi**11*C1*C3)*C6)*C7*C8*C9*L1*L2 + ((pi**11*C1*C3*C5 + pi**11*C1*C3*C6)*C7*C8*C9*L1 + ((pi**11*C1 + pi**11*C2)*C3*C5 + (pi**11*C1 + pi**11*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((pi**11*C1*C3 + pi**11*C1*C4)*C5 + (pi**11*C1*C3 + pi**11*C1*C4 + pi**11*C1*C5)*C6)*C7*C8*C9*L1 + (((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4)*C5 + ((pi**11*C1 + pi**11*C2)*C3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C4 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**11*C3*C4*C5 + (pi**11*C3*C4 + pi**11*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**11*C1*C5*C6*C7*C8*C9*L1 + pi**11*C3*C5*C6*C7*C8*C9*L3 + (pi**11*C1 + pi**11*C2 + pi**11*C3)*C5*C6*C7*C8*C9*L2 + (pi**11*C3 + pi**11*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*ZL + ((pi**11*C1*C2*C3*C4*C5*C6 + pi**11*C1*C2*C3*C4*C5*C7)*L2*L3*L4*L5*L6 + (pi**11*C1*C2*C3*C4*C5*C7*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C6*C7*L2*L3 + (pi**11*C1*C3*C4*C5*C6*C7*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + ((pi**11*C1*C2*C3*C4*C5*C7 + pi**11*C1*C2*C3*C4*C5*C8 + pi**11*C1*C2*C3*C4*C5*C9)*L2*L3*L4*L5 + (((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6)*C7 + (pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C8 + (pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9)*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6*C7 + (pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C8 + (pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9)*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C8 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9)*L2 + (pi**11*C1*C3*C4*C5*C6*C7 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C8 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C8 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9)*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7*C8 + pi**11*C1*C2*C3*C5*C7*C9)*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C8 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9)*L2 + (pi**11*C1*C3*C4*C5*C7*C8 + pi**11*C1*C3*C4*C5*C7*C9)*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C8 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9)*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C8 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9)*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C8 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9)*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C8 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9)*L2 + (pi**11*C1*C3*C5*C6*C7*C8 + pi**11*C1*C3*C5*C6*C7*C9)*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C8 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + (pi**11*C1*C2*C3*C4*C5*C9*L2*L3*L4*L5 + ((pi**11*C1*C2*C3*C4*C5 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C6 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7)*C9*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C6 + pi**11*C1*C2*C3*C5*C7)*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7)*C9*L2 + (pi**11*C1*C3*C4*C5*C6 + pi**11*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7*C9*L2*L3*L4 + (pi**11*C1*C2*C3*C5*C7*C9*L2*L3 + (pi**11*C1*C3*C4*C5*C7*C9*L3 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7*C9*L2 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**11*C1*C3*C5*C6*C7*C9*L3 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7*C9*L2 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C7 + (pi**11*C1*C2*C3*C4 + pi**11*C1*C2*C3*C5)*C8)*C9*L2*L3*L4 + ((pi**11*C1*C2*C3*C5*C7 + pi**11*C1*C2*C3*C5*C8)*C9*L2*L3 + (((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C7 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5*C8)*C9*L2 + (pi**11*C1*C3*C4*C5*C7 + pi**11*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6)*C7 + (pi**11*C1*C2*C3*C5 + pi**11*C1*C2*C3*C6 + pi**11*C1*C2*C3*C7)*C8)*C9*L2*L3 + ((((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6)*C7 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4)*C5 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C6 + (pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7)*C8)*C9*L2 + ((pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6)*C7 + (pi**11*C1*C3*C4*C5 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C6 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + (((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6*C7 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5*C6 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7)*C8)*C9*L2 + (pi**11*C1*C3*C5*C6*C7 + (pi**11*C1*C3*C5*C6 + pi**11*C1*C3*C5*C7)*C8)*C9*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6*C7 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5*C6 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (pi**11*C1*C2*C3*C7*C8*C9*L2*L3 + ((pi**11*C1*C2*C3 + (pi**11*C1*C2 + pi**11*C1*C3)*C4 + (pi**11*C1*C2 + pi**11*C1*C3)*C5)*C7*C8*C9*L2 + (pi**11*C1*C3*C4 + pi**11*C1*C3*C5)*C7*C8*C9*L3)*L4 + (pi**11*C1*C3*C5*C7*C8*C9*L3 + (pi**11*C1*C2 + pi**11*C1*C3)*C5*C7*C8*C9*L2 + (pi**11*C1*C3 + pi**11*C1*C4)*C5*C7*C8*C9*L4)*L5 + (pi**11*C1*C5*C6*C7*C8*C9*L5 + ((pi**11*C1*C2 + pi**11*C1*C3)*C5 + (pi**11*C1*C2 + pi**11*C1*C3)*C6)*C7*C8*C9*L2 + (pi**11*C1*C3*C5 + pi**11*C1*C3*C6)*C7*C8*C9*L3 + ((pi**11*C1*C3 + pi**11*C1*C4)*C5 + (pi**11*C1*C3 + pi**11*C1*C4 + pi**11*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZS)*freq**11 + (1024*I*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (1024*I*pi**10*C1*C2*C3*C4*C5*C9*L2*L3*L4*L5 + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*C9*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*C9*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*C9*L2 + (1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*C9*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*C9*L2*L3 + (1024*I*pi**10*C1*C3*C4*C5*C7*C9*L3 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*C9*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*C9*L2 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (1024*I*pi**10*C1*C3*C5*C6*C7*C9*L3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*C9*L2 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C8)*C9*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C7 + 1024*I*pi**10*C1*C2*C3*C5*C8)*C9*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C8)*C9*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7 + 1024*I*pi**10*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C8)*C9*L2*L3 + ((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8)*C9*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C8)*C9*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C8)*C9*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (1024*I*pi**10*C1*C2*C3*C7*C8*C9*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C8*C9*L2 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C8*C9*L3)*L4 + (1024*I*pi**10*C1*C3*C5*C7*C8*C9*L3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C8*C9*L2 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C8*C9*L4)*L5 + (1024*I*pi**10*C1*C5*C6*C7*C8*C9*L5 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C8*C9*L2 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C8*C9*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*ZL*ZS + ((1024*I*pi**10*C1*C2*C3*C4*C5 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C6 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C6 + 1024*I*pi**10*C1*C2*C3*C5*C7)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C6 + 1024*I*pi**10*C1*C3*C4*C5*C7)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C7*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7*L1*L2 + (1024*I*pi**10*C1*C3*C5*C6*C7*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C6*C7*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7*L2)*L4)*L5)*L6)*L7 + (((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C7 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C8 + (1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C9)*L1*L2*L3*L4 + ((1024*I*pi**10*C1*C2*C3*C5*C7 + 1024*I*pi**10*C1*C2*C3*C5*C8 + 1024*I*pi**10*C1*C2*C3*C5*C9)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C8 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5*C7 + 1024*I*pi**10*C1*C3*C4*C5*C8 + 1024*I*pi**10*C1*C3*C4*C5*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C7 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + (((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6)*C7 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C8 + (1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C9)*L1*L2*L3 + ((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6)*C7 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C8 + (1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C9)*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C8 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C6*C7 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C8 + (1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C9)*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C8 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6*C7 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C8 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C9)*L2 + (1024*I*pi**10*C3*C4*C5*C6*C7 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C8 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2*C3*C7*C8 + 1024*I*pi**10*C1*C2*C3*C7*C9)*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C8 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C8 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C9)*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C8 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C9)*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C7*C8 + 1024*I*pi**10*C1*C3*C5*C7*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C9)*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C8 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C9)*L2 + (1024*I*pi**10*C3*C4*C5*C7*C8 + 1024*I*pi**10*C3*C4*C5*C7*C9)*L3)*L4)*L5 + ((((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C8 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C9)*L1*L2 + (((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C8 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C9)*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C8 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C9)*L2)*L3 + ((((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C8 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C9)*L1 + ((((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C8 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C9)*L2 + ((1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C8 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C9)*L3)*L4 + ((1024*I*pi**10*C1*C5*C6*C7*C8 + 1024*I*pi**10*C1*C5*C6*C7*C9)*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C8 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C9)*L2 + (1024*I*pi**10*C3*C5*C6*C7*C8 + 1024*I*pi**10*C3*C5*C6*C7*C9)*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C8 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + ((1024*I*pi**10*C1*C2*C3*C4 + 1024*I*pi**10*C1*C2*C3*C5)*C9*L1*L2*L3*L4 + (1024*I*pi**10*C1*C2*C3*C5*C9*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5*C9*L1*L2 + (1024*I*pi**10*C1*C3*C4*C5*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((1024*I*pi**10*C1*C2*C3*C5 + 1024*I*pi**10*C1*C2*C3*C6 + 1024*I*pi**10*C1*C2*C3*C7)*C9*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C4*C5 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C6 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C6 + 1024*I*pi**10*C1*C3*C5*C7)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7)*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7)*C9*L2 + (1024*I*pi**10*C3*C4*C5*C6 + 1024*I*pi**10*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (1024*I*pi**10*C1*C2*C3*C7*C9*L1*L2*L3 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7*C9*L1*L2 + (1024*I*pi**10*C1*C3*C5*C7*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7*C9*L2)*L3 + (1024*I*pi**10*C3*C4*C5*C7*C9*L3 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7*C9*L2 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7*C9*L3)*L4 + (1024*I*pi**10*C1*C5*C6*C7*C9*L1 + 1024*I*pi**10*C3*C5*C6*C7*C9*L3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7*C9*L2 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((1024*I*pi**10*C1*C2*C3*C7 + 1024*I*pi**10*C1*C2*C3*C8)*C9*L1*L2*L3 + (((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C8)*C9*L1*L2 + (((1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C7 + (1024*I*pi**10*C1*C3*C4 + 1024*I*pi**10*C1*C3*C5)*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + (((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C7 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5*C8)*C9*L1*L2 + ((1024*I*pi**10*C1*C3*C5*C7 + 1024*I*pi**10*C1*C3*C5*C8)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C7 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5*C8)*C9*L2)*L3 + (((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C7 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5*C8)*C9*L2 + (1024*I*pi**10*C3*C4*C5*C7 + 1024*I*pi**10*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6)*C7 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C6 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C7)*C8)*C9*L1*L2 + (((1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6)*C7 + (1024*I*pi**10*C1*C3*C5 + 1024*I*pi**10*C1*C3*C6 + 1024*I*pi**10*C1*C3*C7)*C8)*C9*L1 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6)*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6)*C7 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4)*C5 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C6 + (1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C7)*C8)*C9*L1 + ((((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6)*C7 + (((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4)*C5 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C6 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C7)*C8)*C9*L2 + ((1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6)*C7 + (1024*I*pi**10*C3*C4*C5 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C6 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C7)*C8)*C9*L3)*L4 + ((1024*I*pi**10*C1*C5*C6*C7 + (1024*I*pi**10*C1*C5*C6 + 1024*I*pi**10*C1*C5*C7)*C8)*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6*C7 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C6 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C7)*C8)*C9*L2 + (1024*I*pi**10*C3*C5*C6*C7 + (1024*I*pi**10*C3*C5*C6 + 1024*I*pi**10*C3*C5*C7)*C8)*C9*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6*C7 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C6 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C7*C8*C9*L1*L2 + (1024*I*pi**10*C1*C3*C7*C8*C9*L1 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3*C7*C8*C9*L2)*L3 + ((1024*I*pi**10*C1*C3 + 1024*I*pi**10*C1*C4 + 1024*I*pi**10*C1*C5)*C7*C8*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2)*C3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C4 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5)*C7*C8*C9*L2 + (1024*I*pi**10*C3*C4 + 1024*I*pi**10*C3*C5)*C7*C8*C9*L3)*L4 + (1024*I*pi**10*C1*C5*C7*C8*C9*L1 + 1024*I*pi**10*C3*C5*C7*C8*C9*L3 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5*C7*C8*C9*L2 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5*C7*C8*C9*L4)*L5 + (1024*I*pi**10*C5*C6*C7*C8*C9*L5 + (1024*I*pi**10*C1*C5 + 1024*I*pi**10*C1*C6)*C7*C8*C9*L1 + ((1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C5 + (1024*I*pi**10*C1 + 1024*I*pi**10*C2 + 1024*I*pi**10*C3)*C6)*C7*C8*C9*L2 + (1024*I*pi**10*C3*C5 + 1024*I*pi**10*C3*C6)*C7*C8*C9*L3 + ((1024*I*pi**10*C3 + 1024*I*pi**10*C4)*C5 + (1024*I*pi**10*C3 + 1024*I*pi**10*C4 + 1024*I*pi**10*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*freq**10 + 512*(((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9*L1*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C9*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9*L1*L2 + (pi**9*C1*C3*C4*C5*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9*L1*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4*C5 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9*L1*L2 + ((pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5*C6 + (pi**9*C1 + pi**9*C2)*C3*C5*C7)*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7)*C9*L2 + (pi**9*C3*C4*C5*C6 + pi**9*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (pi**9*C1*C2*C3*C7*C9*L1*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9*L1*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9*L1*L2 + (pi**9*C1*C3*C5*C7*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C5*C7*C9*L2)*L3 + (pi**9*C3*C4*C5*C7*C9*L3 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9*L1*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6)*C7*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7*C9*L2 + (pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**9*C1*C5*C6*C7*C9*L1 + pi**9*C3*C5*C6*C7*C9*L3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6*C7*C9*L2 + (pi**9*C3 + pi**9*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((pi**9*C1*C2*C3*C7 + pi**9*C1*C2*C3*C8)*C9*L1*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C8)*C9*L1*L2 + (((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C7 + ((pi**9*C1 + pi**9*C2)*C3*C4 + (pi**9*C1 + pi**9*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C8)*C9*L1*L2 + ((pi**9*C1*C3*C5*C7 + pi**9*C1*C3*C5*C8)*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3*C5*C7 + (pi**9*C1 + pi**9*C2)*C3*C5*C8)*C9*L2)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C7 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5*C8)*C9*L2 + (pi**9*C3*C4*C5*C7 + pi**9*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C7)*C8)*C9*L1*L2 + (((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6 + pi**9*C1*C3*C7)*C8)*C9*L1 + (((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6)*C7 + ((pi**9*C1 + pi**9*C2)*C3*C5 + (pi**9*C1 + pi**9*C2)*C3*C6 + (pi**9*C1 + pi**9*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7)*C8)*C9*L1 + ((((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7)*C8)*C9*L2 + ((pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6)*C7 + (pi**9*C3*C4*C5 + (pi**9*C3*C4 + pi**9*C3*C5)*C6 + (pi**9*C3*C4 + pi**9*C3*C5)*C7)*C8)*C9*L3)*L4 + ((pi**9*C1*C5*C6*C7 + (pi**9*C1*C5*C6 + pi**9*C1*C5*C7)*C8)*C9*L1 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6*C7 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C6 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C7)*C8)*C9*L2 + (pi**9*C3*C5*C6*C7 + (pi**9*C3*C5*C6 + pi**9*C3*C5*C7)*C8)*C9*L3 + ((pi**9*C3 + pi**9*C4)*C5*C6*C7 + ((pi**9*C3 + pi**9*C4)*C5*C6 + (pi**9*C3 + pi**9*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((pi**9*C1*C2 + pi**9*C1*C3)*C7*C8*C9*L1*L2 + (pi**9*C1*C3*C7*C8*C9*L1 + (pi**9*C1 + pi**9*C2)*C3*C7*C8*C9*L2)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7*C8*C9*L1 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7*C8*C9*L2 + (pi**9*C3*C4 + pi**9*C3*C5)*C7*C8*C9*L3)*L4 + (pi**9*C1*C5*C7*C8*C9*L1 + pi**9*C3*C5*C7*C8*C9*L3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5*C7*C8*C9*L2 + (pi**9*C3 + pi**9*C4)*C5*C7*C8*C9*L4)*L5 + (pi**9*C5*C6*C7*C8*C9*L5 + (pi**9*C1*C5 + pi**9*C1*C6)*C7*C8*C9*L1 + ((pi**9*C1 + pi**9*C2 + pi**9*C3)*C5 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C6)*C7*C8*C9*L2 + (pi**9*C3*C5 + pi**9*C3*C6)*C7*C8*C9*L3 + ((pi**9*C3 + pi**9*C4)*C5 + (pi**9*C3 + pi**9*C4 + pi**9*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*ZL + (pi**9*C1*C2*C3*C4*C5*L2*L3*L4*L5 + ((pi**9*C1*C2*C3*C4*C5 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C6 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C6 + pi**9*C1*C2*C3*C5*C7)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7)*L2 + (pi**9*C1*C3*C4*C5*C6 + pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C7*L2*L3 + (pi**9*C1*C3*C4*C5*C7*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7*L3)*L4 + (pi**9*C1*C3*C5*C6*C7*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + (((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C7 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C8 + (pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9)*L2*L3*L4 + ((pi**9*C1*C2*C3*C5*C7 + pi**9*C1*C2*C3*C5*C8 + pi**9*C1*C2*C3*C5*C9)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C8 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9)*L2 + (pi**9*C1*C3*C4*C5*C7 + pi**9*C1*C3*C4*C5*C8 + pi**9*C1*C3*C4*C5*C9)*L3)*L4)*L5 + (((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6)*C7 + (pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C8 + (pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9)*L2*L3 + ((((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C8 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9)*L2 + ((pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6)*C7 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C8 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C8 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9)*L2 + (pi**9*C1*C3*C5*C6*C7 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C8 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C8 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9)*L4)*L5)*L6 + ((pi**9*C1*C2*C3*C7*C8 + pi**9*C1*C2*C3*C7*C9)*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C8 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9)*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C8 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9)*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C8 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9)*L2 + (pi**9*C1*C3*C5*C7*C8 + pi**9*C1*C3*C5*C7*C9)*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C8 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9)*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C8 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9)*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C8 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9)*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C8 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9)*L4 + (pi**9*C1*C5*C6*C7*C8 + pi**9*C1*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + ((pi**9*C1*C2*C3*C4 + pi**9*C1*C2*C3*C5)*C9*L2*L3*L4 + (pi**9*C1*C2*C3*C5*C9*L2*L3 + (pi**9*C1*C3*C4*C5*C9*L3 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + ((pi**9*C1*C2*C3*C5 + pi**9*C1*C2*C3*C6 + pi**9*C1*C2*C3*C7)*C9*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9*L2 + (pi**9*C1*C3*C4*C5 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C6 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7)*C9*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7)*C9*L2 + (pi**9*C1*C3*C5*C6 + pi**9*C1*C3*C5*C7)*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C6 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + (pi**9*C1*C2*C3*C7*C9*L2*L3 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7*C9*L2 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7*C9*L3)*L4 + (pi**9*C1*C3*C5*C7*C9*L3 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C7*C9*L2 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C7*C9*L4)*L5 + (pi**9*C1*C5*C6*C7*C9*L5 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7*C9*L2 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + ((pi**9*C1*C2*C3*C7 + pi**9*C1*C2*C3*C8)*C9*L2*L3 + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C8)*C9*L2 + ((pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C7 + (pi**9*C1*C3*C4 + pi**9*C1*C3*C5)*C8)*C9*L3)*L4 + (((pi**9*C1*C2 + pi**9*C1*C3)*C5*C7 + (pi**9*C1*C2 + pi**9*C1*C3)*C5*C8)*C9*L2 + (pi**9*C1*C3*C5*C7 + pi**9*C1*C3*C5*C8)*C9*L3 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5*C7 + (pi**9*C1*C3 + pi**9*C1*C4)*C5*C8)*C9*L4)*L5 + ((((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6)*C7 + ((pi**9*C1*C2 + pi**9*C1*C3)*C5 + (pi**9*C1*C2 + pi**9*C1*C3)*C6 + (pi**9*C1*C2 + pi**9*C1*C3)*C7)*C8)*C9*L2 + ((pi**9*C1*C3*C5 + pi**9*C1*C3*C6)*C7 + (pi**9*C1*C3*C5 + pi**9*C1*C3*C6 + pi**9*C1*C3*C7)*C8)*C9*L3 + (((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6)*C7 + ((pi**9*C1*C3 + pi**9*C1*C4)*C5 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C6 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7)*C8)*C9*L4 + (pi**9*C1*C5*C6*C7 + (pi**9*C1*C5*C6 + pi**9*C1*C5*C7)*C8)*C9*L5)*L6 + (pi**9*C1*C3*C7*C8*C9*L3 + pi**9*C1*C5*C7*C8*C9*L5 + (pi**9*C1*C2 + pi**9*C1*C3)*C7*C8*C9*L2 + (pi**9*C1*C3 + pi**9*C1*C4 + pi**9*C1*C5)*C7*C8*C9*L4 + (pi**9*C1*C5 + pi**9*C1*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZS)*freq**9 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*L1*L2*L3*L4 + ((-256*I*pi**8*C1*C2*C3*C4 - 256*I*pi**8*C1*C2*C3*C5)*C9*L2*L3*L4 + (-256*I*pi**8*C1*C2*C3*C5*C9*L2*L3 + (-256*I*pi**8*C1*C3*C4*C5*C9*L3 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*C9*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*C9*L2 + (-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*C9*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*C9*L2 + (-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*C9*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*C9*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*C9*L2 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*C9*L3)*L4 + (-256*I*pi**8*C1*C3*C5*C7*C9*L3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*C9*L2 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*C9*L4)*L5 + (-256*I*pi**8*C1*C5*C6*C7*C9*L5 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*C9*L2 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*C9*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + ((-256*I*pi**8*C1*C2*C3*C7 - 256*I*pi**8*C1*C2*C3*C8)*C9*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8)*C9*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C8)*C9*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C8)*C9*L2 + (-256*I*pi**8*C1*C3*C5*C7 - 256*I*pi**8*C1*C3*C5*C8)*C9*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C8)*C9*L4)*L5 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8)*C9*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C8)*C9*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8)*C9*L4 + (-256*I*pi**8*C1*C5*C6*C7 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C8)*C9*L5)*L6 + (-256*I*pi**8*C1*C3*C7*C8*C9*L3 - 256*I*pi**8*C1*C5*C7*C8*C9*L5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C8*C9*L2 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C8*C9*L4 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C8*C9*L6)*L7)*L8)*ZL*ZS + (-256*I*pi**8*C1*C2*C3*C5*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5*L1*L2 + (-256*I*pi**8*C1*C3*C4*C5*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5*L2)*L3)*L4)*L5 + ((-256*I*pi**8*C1*C2*C3*C5 - 256*I*pi**8*C1*C2*C3*C6 - 256*I*pi**8*C1*C2*C3*C7)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C4*C5 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C6 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C6 - 256*I*pi**8*C1*C3*C5*C7)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7)*L2 + (-256*I*pi**8*C3*C4*C5*C6 - 256*I*pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (-256*I*pi**8*C1*C2*C3*C7*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7*L1*L2 + (-256*I*pi**8*C1*C3*C5*C7*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C7*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7*L3)*L4 + (-256*I*pi**8*C1*C5*C6*C7*L1 - 256*I*pi**8*C3*C5*C6*C7*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7*L4)*L5)*L6)*L7 + ((-256*I*pi**8*C1*C2*C3*C7 - 256*I*pi**8*C1*C2*C3*C8 - 256*I*pi**8*C1*C2*C3*C9)*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C9)*L1*L2 + (((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C7 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C8 + (-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C9)*L2)*L3)*L4 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C8 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C9)*L1*L2 + ((-256*I*pi**8*C1*C3*C5*C7 - 256*I*pi**8*C1*C3*C5*C8 - 256*I*pi**8*C1*C3*C5*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C9)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C8 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C9)*L2 + (-256*I*pi**8*C3*C4*C5*C7 - 256*I*pi**8*C3*C4*C5*C8 - 256*I*pi**8*C3*C4*C5*C9)*L3)*L4)*L5 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C9)*L1*L2 + (((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6)*C7 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C8 + (-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C9)*L2)*L3 + ((((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C9)*L1 + ((((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C8 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9)*L2 + ((-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6)*C7 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C8 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C9)*L3)*L4 + ((-256*I*pi**8*C1*C5*C6*C7 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C8 + (-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C9)*L2 + (-256*I*pi**8*C3*C5*C6*C7 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C8 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C9)*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6*C7 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C8 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C9)*L4)*L5)*L6 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C8 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C9)*L1*L2 + ((-256*I*pi**8*C1*C3*C7*C8 - 256*I*pi**8*C1*C3*C7*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C9)*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C8 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C9)*L2 + ((-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C8 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C9)*L3)*L4 + ((-256*I*pi**8*C1*C5*C7*C8 - 256*I*pi**8*C1*C5*C7*C9)*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C8 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C9)*L2 + (-256*I*pi**8*C3*C5*C7*C8 - 256*I*pi**8*C3*C5*C7*C9)*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C8 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C9)*L4)*L5 + (((-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C8 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C9)*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C8 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C9)*L2 + ((-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C8 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C9)*L3 + (((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C8 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C9)*L4 + (-256*I*pi**8*C5*C6*C7*C8 - 256*I*pi**8*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + (-256*I*pi**8*C1*C2*C3*C9*L1*L2*L3 + ((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C4 - 256*I*pi**8*C1*C3*C5)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5)*C9*L2)*L3)*L4 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5*C9*L1*L2 + (-256*I*pi**8*C1*C3*C5*C9*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5*C9*L2)*L3 + (-256*I*pi**8*C3*C4*C5*C9*L3 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5*C9*L2)*L4)*L5 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C5 - 256*I*pi**8*C1*C3*C6 - 256*I*pi**8*C1*C3*C7)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7)*C9*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9*L2 + (-256*I*pi**8*C3*C4*C5 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C6 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7)*C9*L3)*L4 + ((-256*I*pi**8*C1*C5*C6 - 256*I*pi**8*C1*C5*C7)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7)*C9*L2 + (-256*I*pi**8*C3*C5*C6 - 256*I*pi**8*C3*C5*C7)*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7)*C9*L4)*L5)*L6 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7*C9*L1*L2 + (-256*I*pi**8*C1*C3*C7*C9*L1 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7*C9*L2)*L3 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7*C9*L2 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7*C9*L3)*L4 + (-256*I*pi**8*C1*C5*C7*C9*L1 - 256*I*pi**8*C3*C5*C7*C9*L3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7*C9*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7*C9*L4)*L5 + (-256*I*pi**8*C5*C6*C7*C9*L5 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7*C9*L2 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7*C9*L4)*L6)*L7 + (((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C8)*C9*L1*L2 + ((-256*I*pi**8*C1*C3*C7 - 256*I*pi**8*C1*C3*C8)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C8)*C9*L2)*L3 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C8)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C8)*C9*L2 + ((-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C7 + (-256*I*pi**8*C3*C4 - 256*I*pi**8*C3*C5)*C8)*C9*L3)*L4 + ((-256*I*pi**8*C1*C5*C7 - 256*I*pi**8*C1*C5*C8)*C9*L1 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C7 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5*C8)*C9*L2 + (-256*I*pi**8*C3*C5*C7 - 256*I*pi**8*C3*C5*C8)*C9*L3 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C7 + (-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5*C8)*C9*L4)*L5 + (((-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6)*C7 + (-256*I*pi**8*C1*C5 - 256*I*pi**8*C1*C6 - 256*I*pi**8*C1*C7)*C8)*C9*L1 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6)*C7 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C6 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C7)*C8)*C9*L2 + ((-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6)*C7 + (-256*I*pi**8*C3*C5 - 256*I*pi**8*C3*C6 - 256*I*pi**8*C3*C7)*C8)*C9*L3 + (((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6)*C7 + ((-256*I*pi**8*C3 - 256*I*pi**8*C4)*C5 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C6 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C7)*C8)*C9*L4 + (-256*I*pi**8*C5*C6*C7 + (-256*I*pi**8*C5*C6 - 256*I*pi**8*C5*C7)*C8)*C9*L5)*L6 + (-256*I*pi**8*C1*C7*C8*C9*L1 - 256*I*pi**8*C3*C7*C8*C9*L3 - 256*I*pi**8*C5*C7*C8*C9*L5 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C7*C8*C9*L2 + (-256*I*pi**8*C3 - 256*I*pi**8*C4 - 256*I*pi**8*C5)*C7*C8*C9*L4 + (-256*I*pi**8*C5 - 256*I*pi**8*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*freq**8 - 128*((pi**7*C1*C2*C3*C9*L1*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9*L1*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C4 + (pi**7*C1 + pi**7*C2)*C3*C5)*C9*L2)*L3)*L4 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5*C9*L1*L2 + (pi**7*C1*C3*C5*C9*L1 + (pi**7*C1 + pi**7*C2)*C3*C5*C9*L2)*L3 + (pi**7*C3*C4*C5*C9*L3 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5*C9*L2)*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9*L1*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C5 + (pi**7*C1 + pi**7*C2)*C3*C6 + (pi**7*C1 + pi**7*C2)*C3*C7)*C9*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7)*C9*L2 + (pi**7*C3*C4*C5 + (pi**7*C3*C4 + pi**7*C3*C5)*C6 + (pi**7*C3*C4 + pi**7*C3*C5)*C7)*C9*L3)*L4 + ((pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7)*C9*L2 + (pi**7*C3*C5*C6 + pi**7*C3*C5*C7)*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5*C6 + (pi**7*C3 + pi**7*C4)*C5*C7)*C9*L4)*L5)*L6 + ((pi**7*C1*C2 + pi**7*C1*C3)*C7*C9*L1*L2 + (pi**7*C1*C3*C7*C9*L1 + (pi**7*C1 + pi**7*C2)*C3*C7*C9*L2)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7*C9*L2 + (pi**7*C3*C4 + pi**7*C3*C5)*C7*C9*L3)*L4 + (pi**7*C1*C5*C7*C9*L1 + pi**7*C3*C5*C7*C9*L3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7*C9*L2 + (pi**7*C3 + pi**7*C4)*C5*C7*C9*L4)*L5 + (pi**7*C5*C6*C7*C9*L5 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7*C9*L2 + (pi**7*C3*C5 + pi**7*C3*C6)*C7*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7*C9*L4)*L6)*L7 + (((pi**7*C1*C2 + pi**7*C1*C3)*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C8)*C9*L1*L2 + ((pi**7*C1*C3*C7 + pi**7*C1*C3*C8)*C9*L1 + ((pi**7*C1 + pi**7*C2)*C3*C7 + (pi**7*C1 + pi**7*C2)*C3*C8)*C9*L2)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C8)*C9*L1 + (((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C8)*C9*L2 + ((pi**7*C3*C4 + pi**7*C3*C5)*C7 + (pi**7*C3*C4 + pi**7*C3*C5)*C8)*C9*L3)*L4 + ((pi**7*C1*C5*C7 + pi**7*C1*C5*C8)*C9*L1 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C7 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5*C8)*C9*L2 + (pi**7*C3*C5*C7 + pi**7*C3*C5*C8)*C9*L3 + ((pi**7*C3 + pi**7*C4)*C5*C7 + (pi**7*C3 + pi**7*C4)*C5*C8)*C9*L4)*L5 + (((pi**7*C1*C5 + pi**7*C1*C6)*C7 + (pi**7*C1*C5 + pi**7*C1*C6 + pi**7*C1*C7)*C8)*C9*L1 + (((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7)*C8)*C9*L2 + ((pi**7*C3*C5 + pi**7*C3*C6)*C7 + (pi**7*C3*C5 + pi**7*C3*C6 + pi**7*C3*C7)*C8)*C9*L3 + (((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7)*C8)*C9*L4 + (pi**7*C5*C6*C7 + (pi**7*C5*C6 + pi**7*C5*C7)*C8)*C9*L5)*L6 + (pi**7*C1*C7*C8*C9*L1 + pi**7*C3*C7*C8*C9*L3 + pi**7*C5*C7*C8*C9*L5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7*C8*C9*L2 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7*C8*C9*L4 + (pi**7*C5 + pi**7*C6)*C7*C8*C9*L6)*L7)*L8)*ZL + ((pi**7*C1*C2*C3*C4 + pi**7*C1*C2*C3*C5)*L2*L3*L4 + (pi**7*C1*C2*C3*C5*L2*L3 + (pi**7*C1*C3*C4*C5*L3 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5*L2)*L4)*L5 + ((pi**7*C1*C2*C3*C5 + pi**7*C1*C2*C3*C6 + pi**7*C1*C2*C3*C7)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L2 + (pi**7*C1*C3*C4*C5 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C6 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7)*L2 + (pi**7*C1*C3*C5*C6 + pi**7*C1*C3*C5*C7)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C6 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (pi**7*C1*C2*C3*C7*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7*L3)*L4 + (pi**7*C1*C3*C5*C7*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C7*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C7*L4)*L5 + (pi**7*C1*C5*C6*C7*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7*L4)*L6)*L7 + ((pi**7*C1*C2*C3*C7 + pi**7*C1*C2*C3*C8 + pi**7*C1*C2*C3*C9)*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C8 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9)*L2 + ((pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C7 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C8 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9)*L3)*L4 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C8 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C9)*L2 + (pi**7*C1*C3*C5*C7 + pi**7*C1*C3*C5*C8 + pi**7*C1*C3*C5*C9)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5*C7 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C8 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9)*L4)*L5 + ((((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C8 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9)*L2 + ((pi**7*C1*C3*C5 + pi**7*C1*C3*C6)*C7 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C8 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9)*L3 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C8 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9)*L4 + (pi**7*C1*C5*C6*C7 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C8 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9)*L5)*L6 + (((pi**7*C1*C2 + pi**7*C1*C3)*C7*C8 + (pi**7*C1*C2 + pi**7*C1*C3)*C7*C9)*L2 + (pi**7*C1*C3*C7*C8 + pi**7*C1*C3*C7*C9)*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C8 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9)*L4 + (pi**7*C1*C5*C7*C8 + pi**7*C1*C5*C7*C9)*L5 + ((pi**7*C1*C5 + pi**7*C1*C6)*C7*C8 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9)*L6)*L7)*L8 + (pi**7*C1*C2*C3*C9*L2*L3 + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9*L2 + (pi**7*C1*C3*C4 + pi**7*C1*C3*C5)*C9*L3)*L4 + (pi**7*C1*C3*C5*C9*L3 + (pi**7*C1*C2 + pi**7*C1*C3)*C5*C9*L2 + (pi**7*C1*C3 + pi**7*C1*C4)*C5*C9*L4)*L5 + (((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9*L2 + (pi**7*C1*C3*C5 + pi**7*C1*C3*C6 + pi**7*C1*C3*C7)*C9*L3 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9*L4 + (pi**7*C1*C5*C6 + pi**7*C1*C5*C7)*C9*L5)*L6 + (pi**7*C1*C3*C7*C9*L3 + pi**7*C1*C5*C7*C9*L5 + (pi**7*C1*C2 + pi**7*C1*C3)*C7*C9*L2 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7*C9*L4 + (pi**7*C1*C5 + pi**7*C1*C6)*C7*C9*L6)*L7 + (pi**7*C1*C7*C8*C9*L7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C7 + (pi**7*C1*C2 + pi**7*C1*C3)*C8)*C9*L2 + (pi**7*C1*C3*C7 + pi**7*C1*C3*C8)*C9*L3 + ((pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C8)*C9*L4 + (pi**7*C1*C5*C7 + pi**7*C1*C5*C8)*C9*L5 + ((pi**7*C1*C5 + pi**7*C1*C6)*C7 + (pi**7*C1*C5 + pi**7*C1*C6 + pi**7*C1*C7)*C8)*C9*L6)*L8)*L9)*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L1*L2*L3 + (64*I*pi**6*C1*C2*C3*C9*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C9*L2 + (64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*C9*L3)*L4 + (64*I*pi**6*C1*C3*C5*C9*L3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*C9*L2 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*C9*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*C9*L2 + (64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*C9*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*C9*L4 + (64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*C9*L5)*L6 + (64*I*pi**6*C1*C3*C7*C9*L3 + 64*I*pi**6*C1*C5*C7*C9*L5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*C9*L2 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*C9*L4 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*C9*L6)*L7 + (64*I*pi**6*C1*C7*C8*C9*L7 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8)*C9*L2 + (64*I*pi**6*C1*C3*C7 + 64*I*pi**6*C1*C3*C8)*C9*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8)*C9*L4 + (64*I*pi**6*C1*C5*C7 + 64*I*pi**6*C1*C5*C8)*C9*L5 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8)*C9*L6)*L8)*ZL*ZS + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*L1*L2 + ((64*I*pi**6*C1*C3*C4 + 64*I*pi**6*C1*C3*C5)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5*L1*L2 + (64*I*pi**6*C1*C3*C5*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5*L2)*L3 + (64*I*pi**6*C3*C4*C5*L3 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5*L2)*L4)*L5 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*L1*L2 + ((64*I*pi**6*C1*C3*C5 + 64*I*pi**6*C1*C3*C6 + 64*I*pi**6*C1*C3*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L2 + (64*I*pi**6*C3*C4*C5 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C6 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7)*L3)*L4 + ((64*I*pi**6*C1*C5*C6 + 64*I*pi**6*C1*C5*C7)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7)*L2 + (64*I*pi**6*C3*C5*C6 + 64*I*pi**6*C3*C5*C7)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7*L1*L2 + (64*I*pi**6*C1*C3*C7*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7*L3)*L4 + (64*I*pi**6*C1*C5*C7*L1 + 64*I*pi**6*C3*C5*C7*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7*L4)*L5 + (64*I*pi**6*C5*C6*C7*L5 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7*L4)*L6)*L7 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C9)*L1*L2 + ((64*I*pi**6*C1*C3*C7 + 64*I*pi**6*C1*C3*C8 + 64*I*pi**6*C1*C3*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C9)*L2)*L3 + (((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C9)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9)*L2 + ((64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C7 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C8 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C9)*L3)*L4 + ((64*I*pi**6*C1*C5*C7 + 64*I*pi**6*C1*C5*C8 + 64*I*pi**6*C1*C5*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C9)*L2 + (64*I*pi**6*C3*C5*C7 + 64*I*pi**6*C3*C5*C8 + 64*I*pi**6*C3*C5*C9)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C7 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C8 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C9)*L4)*L5 + (((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C9)*L1 + (((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9)*L2 + ((64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6)*C7 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C8 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C9)*L3 + (((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C8 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9)*L4 + (64*I*pi**6*C5*C6*C7 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C8 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C9)*L5)*L6 + ((64*I*pi**6*C1*C7*C8 + 64*I*pi**6*C1*C7*C9)*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C8 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C9)*L2 + (64*I*pi**6*C3*C7*C8 + 64*I*pi**6*C3*C7*C9)*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C8 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C9)*L4 + (64*I*pi**6*C5*C7*C8 + 64*I*pi**6*C5*C7*C9)*L5 + ((64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C8 + (64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C9)*L6)*L7)*L8 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C9*L1*L2 + (64*I*pi**6*C1*C3*C9*L1 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C9*L2)*L3 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9*L2 + (64*I*pi**6*C3*C4 + 64*I*pi**6*C3*C5)*C9*L3)*L4 + (64*I*pi**6*C1*C5*C9*L1 + 64*I*pi**6*C3*C5*C9*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5*C9*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4)*C5*C9*L4)*L5 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9*L2 + (64*I*pi**6*C3*C5 + 64*I*pi**6*C3*C6 + 64*I*pi**6*C3*C7)*C9*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9*L4 + (64*I*pi**6*C5*C6 + 64*I*pi**6*C5*C7)*C9*L5)*L6 + (64*I*pi**6*C1*C7*C9*L1 + 64*I*pi**6*C3*C7*C9*L3 + 64*I*pi**6*C5*C7*C9*L5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7*C9*L2 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7*C9*L4 + (64*I*pi**6*C5 + 64*I*pi**6*C6)*C7*C9*L6)*L7 + (64*I*pi**6*C7*C8*C9*L7 + (64*I*pi**6*C1*C7 + 64*I*pi**6*C1*C8)*C9*L1 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C8)*C9*L2 + (64*I*pi**6*C3*C7 + 64*I*pi**6*C3*C8)*C9*L3 + ((64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C8)*C9*L4 + (64*I*pi**6*C5*C7 + 64*I*pi**6*C5*C8)*C9*L5 + ((64*I*pi**6*C5 + 64*I*pi**6*C6)*C7 + (64*I*pi**6*C5 + 64*I*pi**6*C6 + 64*I*pi**6*C7)*C8)*C9*L6)*L8)*L9)*freq**6 + 32*(((pi**5*C1*C2 + pi**5*C1*C3)*C9*L1*L2 + (pi**5*C1*C3*C9*L1 + (pi**5*C1 + pi**5*C2)*C3*C9*L2)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9*L1 + ((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C9*L2 + (pi**5*C3*C4 + pi**5*C3*C5)*C9*L3)*L4 + (pi**5*C1*C5*C9*L1 + pi**5*C3*C5*C9*L3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5*C9*L2 + (pi**5*C3 + pi**5*C4)*C5*C9*L4)*L5 + ((pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7)*C9*L2 + (pi**5*C3*C5 + pi**5*C3*C6 + pi**5*C3*C7)*C9*L3 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7)*C9*L4 + (pi**5*C5*C6 + pi**5*C5*C7)*C9*L5)*L6 + (pi**5*C1*C7*C9*L1 + pi**5*C3*C7*C9*L3 + pi**5*C5*C7*C9*L5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7*C9*L2 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7*C9*L4 + (pi**5*C5 + pi**5*C6)*C7*C9*L6)*L7 + (pi**5*C7*C8*C9*L7 + (pi**5*C1*C7 + pi**5*C1*C8)*C9*L1 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C7 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C8)*C9*L2 + (pi**5*C3*C7 + pi**5*C3*C8)*C9*L3 + ((pi**5*C3 + pi**5*C4 + pi**5*C5)*C7 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C8)*C9*L4 + (pi**5*C5*C7 + pi**5*C5*C8)*C9*L5 + ((pi**5*C5 + pi**5*C6)*C7 + (pi**5*C5 + pi**5*C6 + pi**5*C7)*C8)*C9*L6)*L8)*ZL + (pi**5*C1*C2*C3*L2*L3 + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L2 + (pi**5*C1*C3*C4 + pi**5*C1*C3*C5)*L3)*L4 + (pi**5*C1*C3*C5*L3 + (pi**5*C1*C2 + pi**5*C1*C3)*C5*L2 + (pi**5*C1*C3 + pi**5*C1*C4)*C5*L4)*L5 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L2 + (pi**5*C1*C3*C5 + pi**5*C1*C3*C6 + pi**5*C1*C3*C7)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L4 + (pi**5*C1*C5*C6 + pi**5*C1*C5*C7)*L5)*L6 + (pi**5*C1*C3*C7*L3 + pi**5*C1*C5*C7*L5 + (pi**5*C1*C2 + pi**5*C1*C3)*C7*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7*L4 + (pi**5*C1*C5 + pi**5*C1*C6)*C7*L6)*L7 + (((pi**5*C1*C2 + pi**5*C1*C3)*C7 + (pi**5*C1*C2 + pi**5*C1*C3)*C8 + (pi**5*C1*C2 + pi**5*C1*C3)*C9)*L2 + (pi**5*C1*C3*C7 + pi**5*C1*C3*C8 + pi**5*C1*C3*C9)*L3 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C8 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9)*L4 + (pi**5*C1*C5*C7 + pi**5*C1*C5*C8 + pi**5*C1*C5*C9)*L5 + ((pi**5*C1*C5 + pi**5*C1*C6)*C7 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C8 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9)*L6 + (pi**5*C1*C7*C8 + pi**5*C1*C7*C9)*L7)*L8 + (pi**5*C1*C3*C9*L3 + pi**5*C1*C5*C9*L5 + pi**5*C1*C7*C9*L7 + (pi**5*C1*C2 + pi**5*C1*C3)*C9*L2 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9*L4 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9*L6 + (pi**5*C1*C7 + pi**5*C1*C8)*C9*L8)*L9)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1*L2 + (-16*I*pi**4*C1*C3*C9*L3 - 16*I*pi**4*C1*C5*C9*L5 - 16*I*pi**4*C1*C7*C9*L7 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C9*L2 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C9*L4 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*C9*L6 + (-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8)*C9*L8)*ZL*ZS + (-16*I*pi**4*C1*C3*L1 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L3 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L2 + (-16*I*pi**4*C3*C4 - 16*I*pi**4*C3*C5)*L3)*L4 + (-16*I*pi**4*C1*C5*L1 - 16*I*pi**4*C3*C5*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5*L4)*L5 + ((-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L2 + (-16*I*pi**4*C3*C5 - 16*I*pi**4*C3*C6 - 16*I*pi**4*C3*C7)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L4 + (-16*I*pi**4*C5*C6 - 16*I*pi**4*C5*C7)*L5)*L6 + (-16*I*pi**4*C1*C7*L1 - 16*I*pi**4*C3*C7*L3 - 16*I*pi**4*C5*C7*L5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7*L6)*L7 + ((-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8 - 16*I*pi**4*C1*C9)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C8 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9)*L2 + (-16*I*pi**4*C3*C7 - 16*I*pi**4*C3*C8 - 16*I*pi**4*C3*C9)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C8 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9)*L4 + (-16*I*pi**4*C5*C7 - 16*I*pi**4*C5*C8 - 16*I*pi**4*C5*C9)*L5 + ((-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C8 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9)*L6 + (-16*I*pi**4*C7*C8 - 16*I*pi**4*C7*C9)*L7)*L8 + (-16*I*pi**4*C1*C9*L1 - 16*I*pi**4*C3*C9*L3 - 16*I*pi**4*C5*C9*L5 - 16*I*pi**4*C7*C9*L7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9*L2 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9*L4 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9*L6 + (-16*I*pi**4*C7 - 16*I*pi**4*C8)*C9*L8)*L9)*freq**4 - 8*((pi**3*C1*C9*L1 + pi**3*C3*C9*L3 + pi**3*C5*C9*L5 + pi**3*C7*C9*L7 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C9*L2 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C9*L4 + (pi**3*C5 + pi**3*C6 + pi**3*C7)*C9*L6 + (pi**3*C7 + pi**3*C8)*C9*L8)*ZL + (pi**3*C1*C3*L3 + pi**3*C1*C5*L5 + pi**3*C1*C7*L7 + pi**3*C1*C9*L9 + (pi**3*C1*C2 + pi**3*C1*C3)*L2 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L4 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L6 + (pi**3*C1*C7 + pi**3*C1*C8 + pi**3*C1*C9)*L8)*ZS)*freq**3 + (4*I*pi**2*C1*C9*ZL*ZS + 4*I*pi**2*C1*L1 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C5*L5 + 4*I*pi**2*C7*L7 + 4*I*pi**2*C9*L9 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L4 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L6 + (4*I*pi**2*C7 + 4*I*pi**2*C8 + 4*I*pi**2*C9)*L8)*freq**2 + 2*(pi*C9*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 10):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    L6 = comp_val['L6']
                    C6 = comp_val['C6']
                    L7 = comp_val['L7']
                    C7 = comp_val['C7']
                    L8 = comp_val['L8']
                    C8 = comp_val['C8']
                    L9 = comp_val['L9']
                    C9 = comp_val['C9']
                    L10 = comp_val['L10']
                    C10 = comp_val['C10']

                    S11 = (1048576*pi**20*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZL*freq**20 + (524288*I*pi**19*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS - 524288*I*pi**19*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9)*freq**19 + 262144*(pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZS - ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + pi**18*C1*C2*C3*C4*C5*C6*C7*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7*L8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C9*L1*L10*L2*L3*L4*L5*L6*L7 + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**18*C1*C10*C2*C3*C4*C5*C6 + pi**18*C1*C10*C2*C3*C4*C5*C7)*C8)*C9*L1*L10*L2*L3*L4*L5*L6 + (pi**18*C1*C10*C2*C3*C4*C5*C7*C8*C9*L1*L10*L2*L3*L4*L5 + ((pi**18*C1*C10*C2*C3*C4*C5 + (pi**18*C1*C10*C2*C3*C4 + pi**18*C1*C10*C2*C3*C5)*C6)*C7*C8*C9*L1*L10*L2*L3*L4 + (pi**18*C1*C10*C2*C3*C5*C6*C7*C8*C9*L1*L10*L2*L3 + ((pi**18*C1*C10*C2*C3 + (pi**18*C1*C10*C2 + pi**18*C1*C10*C3)*C4)*C5*C6*C7*C8*C9*L1*L10*L2 + (pi**18*C1*C10*C3*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1 + (pi**18*C1*C10 + pi**18*C10*C2)*C3*C4*C5*C6*C7*C8*C9*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL)*freq**18 + ((131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L10*L2*L3*L4*L5*L6*L7*L8 + ((-131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (-131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 - 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8)*C9)*L10*L2*L3*L4*L5*L6*L7*L8 + (-131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C9*L10*L2*L3*L4*L5*L6*L7 + ((-131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + (-131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6 - 131072*I*pi**17*C1*C10*C2*C3*C4*C5*C7)*C8)*C9*L10*L2*L3*L4*L5*L6 + (-131072*I*pi**17*C1*C10*C2*C3*C4*C5*C7*C8*C9*L10*L2*L3*L4*L5 + ((-131072*I*pi**17*C1*C10*C2*C3*C4*C5 + (-131072*I*pi**17*C1*C10*C2*C3*C4 - 131072*I*pi**17*C1*C10*C2*C3*C5)*C6)*C7*C8*C9*L10*L2*L3*L4 + (-131072*I*pi**17*C1*C10*C2*C3*C5*C6*C7*C8*C9*L10*L2*L3 + ((-131072*I*pi**17*C1*C10*C2*C3 + (-131072*I*pi**17*C1*C10*C2 - 131072*I*pi**17*C1*C10*C3)*C4)*C5*C6*C7*C8*C9*L10*L2 + (-131072*I*pi**17*C1*C10*C3*C4*C5*C6*C7*C8*C9*L10 - 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C9*L1*L10*L2*L3*L4*L5*L6*L7 + ((131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7 + (131072*I*pi**17*C1*C2*C3*C4*C5*C6 + 131072*I*pi**17*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L10*L2*L3*L4*L5*L6 + (131072*I*pi**17*C1*C2*C3*C4*C5*C7*C8*C9*L1*L10*L2*L3*L4*L5 + ((131072*I*pi**17*C1*C2*C3*C4*C5 + (131072*I*pi**17*C1*C2*C3*C4 + 131072*I*pi**17*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L10*L2*L3*L4 + (131072*I*pi**17*C1*C2*C3*C5*C6*C7*C8*C9*L1*L10*L2*L3 + ((131072*I*pi**17*C1*C2*C3 + (131072*I*pi**17*C1*C2 + 131072*I*pi**17*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L10*L2 + (131072*I*pi**17*C1*C3*C4*C5*C6*C7*C8*C9*L1*L10 + (131072*I*pi**17*C1 + 131072*I*pi**17*C2)*C3*C4*C5*C6*C7*C8*C9*L10*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**17 + 65536*(((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C10*C2*C3*C4*C5*C7)*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C2*C3*C4*C5*C6)*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((pi**16*C1*C10*C2*C3*C4*C5*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C7 + pi**16*C1*C2*C3*C4*C5*C7*C8)*C9)*L1*L10*L2*L3*L4*L5 + (((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7*C8 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C3*C5*C6*C7 + pi**16*C1*C2*C3*C5*C6*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7*C8 + ((pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7)*C9)*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5*C6*C7*C8 + (pi**16*C1*C10*C3*C4*C5*C6*C7 + pi**16*C1*C3*C4*C5*C6*C7*C8)*C9)*L1*L10 + ((pi**16*C1*C2*C3*C4*C5*C6*C7*C8 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7*C8 + ((pi**16*C1 + pi**16*C2)*C3*C4*C5*C6*C7*C8 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7)*C9)*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C10*C2*C3*C4*C5*C7)*C9*L1*L10*L2*L3*L4*L5*L6 + (pi**16*C1*C10*C2*C3*C4*C5*C7*C9*L1*L10*L2*L3*L4*L5 + ((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7*C9*L1*L10*L2*L3*L4 + (pi**16*C1*C10*C2*C3*C5*C6*C7*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C4*C5*C6*C7*C9*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7*C9*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**16*C1*C10*C2*C3*C4*C5*C7 + pi**16*C1*C10*C2*C3*C4*C5*C8)*C9*L1*L10*L2*L3*L4*L5 + (((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7 + (pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C7)*C8)*C9*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C5*C6 + pi**16*C1*C10*C2*C3*C5*C7)*C8)*C9*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C7)*C8)*C9*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C3*C4*C5*C6 + pi**16*C1*C10*C3*C4*C5*C7)*C8)*C9*L1*L10 + ((pi**16*C1*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C7)*C8)*C9*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C7*C8*C9*L1*L10*L2*L3*L4 + (pi**16*C1*C10*C2*C3*C5*C7*C8*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C7*C8*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C4*C5*C7*C8*C9*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C7*C8*C9*L10)*L2)*L3)*L4)*L5 + ((pi**16*C1*C10*C2*C3*C5 + pi**16*C1*C10*C2*C3*C6)*C7*C8*C9*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C5)*C6)*C7*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5 + (pi**16*C1*C10*C3*C4 + pi**16*C1*C10*C3*C5)*C6)*C7*C8*C9*L1*L10 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C5)*C6)*C7*C8*C9*L10)*L2)*L3)*L4 + ((pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C5*C6*C7*C8*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C5*C6*C7*C8*C9*L1*L10 + (pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C5*C6*C7*C8*C9*L10)*L2)*L3 + ((pi**16*C1*C10*C3 + pi**16*C1*C10*C4)*C5*C6*C7*C8*C9*L1*L10 + ((pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3 + (pi**16*C1*C10 + pi**16*C10*C2 + pi**16*C10*C3)*C4)*C5*C6*C7*C8*C9*L10)*L2 + (pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L1 + pi**16*C10*C3*C4*C5*C6*C7*C8*C9*L10 + (pi**16*C1 + pi**16*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL - ((pi**16*C1*C2*C3*C4*C5*C6*C7*C8 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L10*L2*L3*L4*L5*L6*L7*L8 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L10*L2*L3*L4*L5*L6*L7 + ((pi**16*C1*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L10*L2*L3*L4*L5*L6 + (pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L10*L2*L3*L4*L5 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L10*L2*L3*L4 + (pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L10*L2*L3 + (pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L10*L3 + (pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L10*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**16 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*L1*L10*L2*L3*L4*L5*L6*L7 + ((32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 + 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L10*L2*L3*L4*L5*L6*L7 + ((32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7)*C8 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5 + 32768*I*pi**15*C1*C2*C3*C4*C5*C6)*C7 + (32768*I*pi**15*C1*C2*C3*C4*C5*C6 + 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9)*L10*L2*L3*L4*L5*L6 + ((32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7*C8 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7 + 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8)*C9)*L10*L2*L3*L4*L5 + (((32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7*C8 + ((32768*I*pi**15*C1*C2*C3*C4*C5 + (32768*I*pi**15*C1*C2*C3*C4 + 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7)*C9)*L10*L2*L3*L4 + ((32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7*C8 + (32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7 + 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8)*C9)*L10*L2*L3 + (((32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7*C8 + ((32768*I*pi**15*C1*C2*C3 + (32768*I*pi**15*C1*C2 + 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8 + (32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7)*C9)*L10*L2 + ((32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7*C8 + (32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7 + 32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8)*C9)*L10 + (32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C8 + 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7)*C9*L10*L2*L3*L4*L5*L6 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7*C9*L10*L2*L3*L4*L5 + ((32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7*C9*L10*L2*L3*L4 + (32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7*C9*L10*L2*L3 + ((32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7*C9*L10*L2 + (32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7*C9*L10 + 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7 + 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C8)*C9*L10*L2*L3*L4*L5 + (((32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7 + (32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C6 + (32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C7)*C8)*C9*L10*L2*L3*L4 + ((32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7 + (32768*I*pi**15*C1*C10*C2*C3*C5*C6 + 32768*I*pi**15*C1*C10*C2*C3*C5*C7)*C8)*C9*L10*L2*L3 + (((32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7 + ((32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6 + (32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + ((32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7 + (32768*I*pi**15*C1*C10*C3*C4*C5*C6 + 32768*I*pi**15*C1*C10*C3*C4*C5*C7)*C8)*C9*L10 + (32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7 + (32768*I*pi**15*C1*C2*C3*C4*C5*C6 + 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((32768*I*pi**15*C1*C10*C2*C3*C4 + 32768*I*pi**15*C1*C10*C2*C3*C5)*C7*C8*C9*L10*L2*L3*L4 + (32768*I*pi**15*C1*C10*C2*C3*C5*C7*C8*C9*L10*L2*L3 + ((32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5*C7*C8*C9*L10*L2 + (32768*I*pi**15*C1*C10*C3*C4*C5*C7*C8*C9*L10 + 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((32768*I*pi**15*C1*C10*C2*C3*C5 + 32768*I*pi**15*C1*C10*C2*C3*C6)*C7*C8*C9*L10*L2*L3 + (((32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4)*C5 + (32768*I*pi**15*C1*C10*C2*C3 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C4 + (32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C5)*C6)*C7*C8*C9*L10*L2 + ((32768*I*pi**15*C1*C10*C3*C4*C5 + (32768*I*pi**15*C1*C10*C3*C4 + 32768*I*pi**15*C1*C10*C3*C5)*C6)*C7*C8*C9*L10 + (32768*I*pi**15*C1*C2*C3*C4*C5 + (32768*I*pi**15*C1*C2*C3*C4 + 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((32768*I*pi**15*C1*C10*C2 + 32768*I*pi**15*C1*C10*C3)*C5*C6*C7*C8*C9*L10*L2 + (32768*I*pi**15*C1*C10*C3*C5*C6*C7*C8*C9*L10 + 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L2)*L3 + (32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (32768*I*pi**15*C1*C10*C3 + 32768*I*pi**15*C1*C10*C4)*C5*C6*C7*C8*C9*L10 + (32768*I*pi**15*C1*C2*C3 + (32768*I*pi**15*C1*C2 + 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C9)*L1*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C9)*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C9)*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C9)*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8 - 32768*I*pi**15*C1*C3*C4*C5*C6*C7*C9)*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C9)*L10*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C9*L1*L10*L2*L3*L4*L5*L6 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C7*C9*L1*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C9*L1*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C2*C3*C5*C6*C7*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C9*L10*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C8)*C9*L1*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C7)*C8)*C9*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C2*C3*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C5*C6 - 32768*I*pi**15*C1*C2*C3*C5*C7)*C8)*C9*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C3*C4*C5*C6 - 32768*I*pi**15*C1*C3*C4*C5*C7)*C8)*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C7)*C8)*C9*L10*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C7*C8*C9*L1*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C2*C3*C5*C7*C8*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C7*C8*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C4*C5*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C7*C8*C9*L10*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C2*C3*C5 - 32768*I*pi**15*C1*C2*C3*C6)*C7*C8*C9*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C5)*C6)*C7*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5 + (-32768*I*pi**15*C1*C3*C4 - 32768*I*pi**15*C1*C3*C5)*C6)*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C5)*C6)*C7*C8*C9*L10*L2)*L3)*L4 + ((-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C5*C6*C7*C8*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C5*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C5*C6*C7*C8*C9*L10*L2)*L3 + (-32768*I*pi**15*C3*C4*C5*C6*C7*C8*C9*L10*L3 + (-32768*I*pi**15*C1*C3 - 32768*I*pi**15*C1*C4)*C5*C6*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2 - 32768*I*pi**15*C3)*C4)*C5*C6*C7*C8*C9*L10*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**15 - 16384*(((pi**14*C1*C10*C2*C3*C4*C5*C6 + pi**14*C1*C10*C2*C3*C4*C5*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C10*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L1*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6)*C7)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6*C7 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L1*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6*C7)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6*C7 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C6*C7*L1 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6*C7)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**14*C1*C10*C2*C3*C4*C5*C7 + pi**14*C1*C10*C2*C3*C4*C5*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9)*L1*L10*L2*L3*L4*L5 + (((pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C2*C3*C4)*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6*C7 + (pi**14*C1*C10*C2*C3*C5*C6 + pi**14*C1*C10*C2*C3*C5*C7)*C8 + (pi**14*C1*C10*C2*C3*C5*C6 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C2*C3*C5*C6)*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C8 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5)*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6*C7 + (pi**14*C1*C10*C3*C4*C5*C6 + pi**14*C1*C10*C3*C4*C5*C7)*C8 + (pi**14*C1*C10*C3*C4*C5*C6 + (pi**14*C1*C10*C3*C4*C5 + pi**14*C1*C3*C4*C5*C6)*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5)*C7 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7)*C8)*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7*C8 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C7*C8 + (pi**14*C1*C10*C2*C3*C5*C7 + pi**14*C1*C2*C3*C5*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7*C8 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C7*C8 + (pi**14*C1*C10*C3*C4*C5*C7 + pi**14*C1*C3*C4*C5*C7*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C7*C8 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7*C8 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C7*C8 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7*C8 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7)*C9)*L1*L10*L2*L3 + ((((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7*C8 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7)*C9)*L1*L10*L2 + (((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7*C8 + ((pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8 + (pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7)*C9)*L1*L10 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7*C8 + (((pi**14*C1 + pi**14*C2)*C3*C4*C5 + ((pi**14*C1 + pi**14*C2)*C3*C4 + (pi**14*C1 + pi**14*C2)*C3*C5)*C6)*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7*C8 + ((pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C5*C6*C7*C8 + (pi**14*C1*C10*C3*C5*C6*C7 + pi**14*C1*C3*C5*C6*C7*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C5*C6*C7*C8 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7*C8 + ((pi**14*C1 + pi**14*C2)*C3*C5*C6*C7*C8 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7)*C9)*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7*C8 + ((pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7)*C9)*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7*C8 + (((pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2 + pi**14*C3)*C4)*C5*C6*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7)*C9)*L10)*L2 + ((pi**14*C1*C3*C4*C5*C6*C7*C8 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L1 + (pi**14*C10*C3*C4*C5*C6*C7*C8 + (pi**14*C10*C3*C4*C5*C6*C7 + pi**14*C3*C4*C5*C6*C7*C8)*C9)*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C8 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + (pi**14*C1*C10*C2*C3*C4*C5*C9*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6 + pi**14*C1*C10*C2*C3*C5*C7)*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6 + pi**14*C1*C10*C3*C4*C5*C7)*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C9*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7*C9*L1*L10*L2*L3*L4 + (pi**14*C1*C10*C2*C3*C5*C7*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C4*C5*C7*C9*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C7*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7*C9*L10)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7*C9*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C5*C6*C7*C9*L1*L10 + (pi**14*C1*C2*C3*C5*C6*C7*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7*C9*L10)*L2)*L3 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7*C9*L1*L10 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7*C9*L10)*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C9*L1 + pi**14*C10*C3*C4*C5*C6*C7*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + (((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C8)*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C7 + pi**14*C1*C10*C2*C3*C5*C8)*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C8)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C7 + pi**14*C1*C10*C3*C4*C5*C8)*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C8)*C9*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6 + pi**14*C1*C10*C2*C3*C7)*C8)*C9*L1*L10*L2*L3 + ((((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C7)*C8)*C9*L1*L10*L2 + (((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7 + (pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C7)*C8)*C9*L1*L10 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C7)*C8)*C9*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C7)*C8)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C5*C6*C7 + (pi**14*C1*C10*C3*C5*C6 + pi**14*C1*C10*C3*C5*C7)*C8)*C9*L1*L10 + ((pi**14*C1*C2*C3*C5*C6*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C7)*C8)*C9*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C7)*C8)*C9*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C7)*C8)*C9*L10)*L2 + ((pi**14*C1*C3*C4*C5*C6*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9*L1 + (pi**14*C10*C3*C4*C5*C6*C7 + (pi**14*C10*C3*C4*C5*C6 + pi**14*C10*C3*C4*C5*C7)*C8)*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + (pi**14*C1*C10*C2*C3*C7*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C7*C8*C9*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C7*C8*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C5*C7*C8*C9*L1*L10 + (pi**14*C1*C2*C3*C5*C7*C8*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C7*C8*C9*L10)*L2)*L3 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C7*C8*C9*L10)*L2 + (pi**14*C1*C3*C4*C5*C7*C8*C9*L1 + pi**14*C10*C3*C4*C5*C7*C8*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C6)*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C5 + pi**14*C1*C10*C3*C6)*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C6)*C7*C8*C9*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4 + pi**14*C1*C10*C5)*C6)*C7*C8*C9*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C5)*C6)*C7*C8*C9*L10)*L2 + ((pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8*C9*L1 + (pi**14*C10*C3*C4*C5 + (pi**14*C10*C3*C4 + pi**14*C10*C3*C5)*C6)*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5 + ((pi**14*C1 + pi**14*C2)*C3*C4 + (pi**14*C1 + pi**14*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + (pi**14*C1*C10*C5*C6*C7*C8*C9*L1*L10 + ((pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C5*C6*C7*C8*C9*L10)*L2 + (pi**14*C1*C3*C5*C6*C7*C8*C9*L1 + pi**14*C10*C3*C5*C6*C7*C8*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (pi**14*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8*C9*L1 + (pi**14*C10*C3 + pi**14*C10*C4)*C5*C6*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2 + pi**14*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZL - (pi**14*C1*C2*C3*C4*C5*C6*C7*L10*L2*L3*L4*L5*L6*L7 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C2*C3*C4*C5*C7*C8 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L10*L2*L3*L4 + ((pi**14*C1*C2*C3*C5*C6*C7*C8 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L10*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C8 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L10*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9*L10*L2*L3*L4*L5*L6 + (pi**14*C1*C2*C3*C4*C5*C7*C9*L10*L2*L3*L4*L5 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9*L10*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C6*C7*C9*L10*L2*L3 + (pi**14*C1*C3*C4*C5*C6*C7*C9*L10*L3 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9*L10*L2)*L4)*L5)*L6)*L7 + ((pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L10*L2*L3*L4 + ((pi**14*C1*C2*C3*C5*C6*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + (pi**14*C1*C3*C4*C5*C6*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9*L10*L3)*L4)*L5)*L6 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8*C9*L10*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C7*C8*C9*L10*L2*L3 + (pi**14*C1*C3*C4*C5*C7*C8*C9*L10*L3 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8*C9*L10*L2)*L4)*L5 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8*C9*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L10*L2 + (pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8*C9*L10*L3)*L4 + (pi**14*C1*C3*C5*C6*C7*C8*C9*L10*L3 + (pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8*C9*L10*L2 + (pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8*C9*L10*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**14 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*L1*L10*L2*L3*L4*L5*L6 + ((-8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6 - 8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9)*L10*L2*L3*L4*L5*L6 + ((-8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9)*L10*L2*L3*L4*L5 + (((-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9 + (-8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C6)*C7)*L10*L2*L3*L4 + ((-8192*I*pi**13*C1*C10*C2*C3*C5*C6*C7 - 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9)*L10*L2*L3 + (((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6*C7)*L10*L2 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7*L2 + (-8192*I*pi**13*C1*C10*C3*C4*C5*C6*C7 - 8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9)*L10)*L3)*L4)*L5)*L6)*L7 + ((-8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 - 8192*I*pi**13*C1*C10*C2*C3*C4*C5*C8 + (-8192*I*pi**13*C1*C10*C2*C3*C4*C5 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7 - 8192*I*pi**13*C1*C2*C3*C4*C5*C8)*C9)*L10*L2*L3*L4*L5 + (((-8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C6)*C7 + (-8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C8 + (-8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (-8192*I*pi**13*C1*C10*C2*C3*C4 + (-8192*I*pi**13*C1*C10*C2*C3 - 8192*I*pi**13*C1*C2*C3*C4)*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8)*C9)*L10*L2*L3*L4 + ((-8192*I*pi**13*C1*C10*C2*C3*C5*C6*C7 + (-8192*I*pi**13*C1*C10*C2*C3*C5*C6 - 8192*I*pi**13*C1*C10*C2*C3*C5*C7)*C8 + (-8192*I*pi**13*C1*C10*C2*C3*C5*C6 + (-8192*I*pi**13*C1*C10*C2*C3*C5 - 8192*I*pi**13*C1*C2*C3*C5*C6)*C7 + (-8192*I*pi**13*C1*C2*C3*C5*C6 - 8192*I*pi**13*C1*C2*C3*C5*C7)*C8)*C9)*L10*L2*L3 + (((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6*C7 + ((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C8 + ((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5)*C7 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8)*C9)*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C4*C5*C6*C7 + (-8192*I*pi**13*C1*C10*C3*C4*C5*C6 - 8192*I*pi**13*C1*C10*C3*C4*C5*C7)*C8 + (-8192*I*pi**13*C1*C10*C3*C4*C5*C6 + (-8192*I*pi**13*C1*C10*C3*C4*C5 - 8192*I*pi**13*C1*C3*C4*C5*C6)*C7 + (-8192*I*pi**13*C1*C3*C4*C5*C6 - 8192*I*pi**13*C1*C3*C4*C5*C7)*C8)*C9)*L10 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C8 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + (((-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C7*C8 + ((-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C7*C8 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((-8192*I*pi**13*C1*C10*C2*C3*C5*C7*C8 + (-8192*I*pi**13*C1*C10*C2*C3*C5*C7 - 8192*I*pi**13*C1*C2*C3*C5*C7*C8)*C9)*L10*L2*L3 + (((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7*C8 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C9)*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C4*C5*C7*C8 + (-8192*I*pi**13*C1*C10*C3*C4*C5*C7 - 8192*I*pi**13*C1*C3*C4*C5*C7*C8)*C9)*L10 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C7*C8 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + (((-8192*I*pi**13*C1*C10*C2*C3*C5 - 8192*I*pi**13*C1*C10*C2*C3*C6)*C7*C8 + ((-8192*I*pi**13*C1*C2*C3*C5 - 8192*I*pi**13*C1*C2*C3*C6)*C7*C8 + (-8192*I*pi**13*C1*C10*C2*C3*C5 - 8192*I*pi**13*C1*C10*C2*C3*C6)*C7)*C9)*L10*L2*L3 + ((((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7*C8 + (((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8 + ((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7)*C9)*L10*L2 + (((-8192*I*pi**13*C1*C10*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7*C8 + ((-8192*I*pi**13*C1*C3*C4*C5 + (-8192*I*pi**13*C1*C3*C4 - 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8 + (-8192*I*pi**13*C1*C10*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7)*C9)*L10 + ((-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C8 + (-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + (((-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C6*C7*C8 + ((-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C5*C6*C7*C8 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C6*C7)*C9)*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C5*C6*C7*C8 + (-8192*I*pi**13*C1*C10*C3*C5*C6*C7 - 8192*I*pi**13*C1*C3*C5*C6*C7*C8)*C9)*L10 + (-8192*I*pi**13*C1*C2*C3*C5*C6*C7*C8 - 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9)*L2)*L3 + (((-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C6*C7*C8 + ((-8192*I*pi**13*C1*C3 - 8192*I*pi**13*C1*C4)*C5*C6*C7*C8 + (-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C6*C7)*C9)*L10 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C8 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9)*L2 + (-8192*I*pi**13*C1*C3*C4*C5*C6*C7*C8 - 8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + (-8192*I*pi**13*C1*C10*C2*C3*C4*C5*C9*L10*L2*L3*L4*L5 + ((-8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C9*L10*L2*L3*L4 + ((-8192*I*pi**13*C1*C10*C2*C3*C5*C6 - 8192*I*pi**13*C1*C10*C2*C3*C5*C7)*C9*L10*L2*L3 + (((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C9*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C4*C5*C6 - 8192*I*pi**13*C1*C10*C3*C4*C5*C7)*C9*L10 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C6 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C7*C9*L10*L2*L3*L4 + (-8192*I*pi**13*C1*C10*C2*C3*C5*C7*C9*L10*L2*L3 + ((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7*C9*L10*L2 + (-8192*I*pi**13*C1*C10*C3*C4*C5*C7*C9*L10 - 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((-8192*I*pi**13*C1*C10*C2*C3*C5 - 8192*I*pi**13*C1*C10*C2*C3*C6)*C7*C9*L10*L2*L3 + (((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7*C9*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7*C9*L10 + (-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C6*C7*C9*L10*L2 + (-8192*I*pi**13*C1*C10*C3*C5*C6*C7*C9*L10 - 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9*L2)*L3 + (-8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9*L3 + (-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C6*C7*C9*L10 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C7 + (-8192*I*pi**13*C1*C10*C2*C3*C4 - 8192*I*pi**13*C1*C10*C2*C3*C5)*C8)*C9*L10*L2*L3*L4 + ((-8192*I*pi**13*C1*C10*C2*C3*C5*C7 - 8192*I*pi**13*C1*C10*C2*C3*C5*C8)*C9*L10*L2*L3 + (((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5*C8)*C9*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C4*C5*C7 - 8192*I*pi**13*C1*C10*C3*C4*C5*C8)*C9*L10 + (-8192*I*pi**13*C1*C2*C3*C4*C5*C7 - 8192*I*pi**13*C1*C2*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((-8192*I*pi**13*C1*C10*C2*C3*C5 - 8192*I*pi**13*C1*C10*C2*C3*C6)*C7 + (-8192*I*pi**13*C1*C10*C2*C3*C5 - 8192*I*pi**13*C1*C10*C2*C3*C6 - 8192*I*pi**13*C1*C10*C2*C3*C7)*C8)*C9*L10*L2*L3 + ((((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7 + ((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C6 + (-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C7)*C8)*C9*L10*L2 + (((-8192*I*pi**13*C1*C10*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7 + (-8192*I*pi**13*C1*C10*C3*C4*C5 + (-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C6 + (-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C7)*C8)*C9*L10 + ((-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (-8192*I*pi**13*C1*C2*C3*C4*C5 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C6 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C6*C7 + ((-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C6 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C7)*C8)*C9*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C5*C6*C7 + (-8192*I*pi**13*C1*C10*C3*C5*C6 - 8192*I*pi**13*C1*C10*C3*C5*C7)*C8)*C9*L10 + (-8192*I*pi**13*C1*C2*C3*C5*C6*C7 + (-8192*I*pi**13*C1*C2*C3*C5*C6 - 8192*I*pi**13*C1*C2*C3*C5*C7)*C8)*C9*L2)*L3 + (((-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C6*C7 + ((-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C6 + (-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C7)*C8)*C9*L10 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (-8192*I*pi**13*C1*C3*C4*C5*C6*C7 + (-8192*I*pi**13*C1*C3*C4*C5*C6 - 8192*I*pi**13*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (-8192*I*pi**13*C1*C10*C2*C3*C7*C8*C9*L10*L2*L3 + ((-8192*I*pi**13*C1*C10*C2*C3 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C4 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5)*C7*C8*C9*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C4 - 8192*I*pi**13*C1*C10*C3*C5)*C7*C8*C9*L10 + (-8192*I*pi**13*C1*C2*C3*C4 - 8192*I*pi**13*C1*C2*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5*C7*C8*C9*L10*L2 + (-8192*I*pi**13*C1*C10*C3*C5*C7*C8*C9*L10 - 8192*I*pi**13*C1*C2*C3*C5*C7*C8*C9*L2)*L3 + (-8192*I*pi**13*C1*C3*C4*C5*C7*C8*C9*L3 + (-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5*C7*C8*C9*L10 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C5 + (-8192*I*pi**13*C1*C10*C2 - 8192*I*pi**13*C1*C10*C3)*C6)*C7*C8*C9*L10*L2 + ((-8192*I*pi**13*C1*C10*C3*C5 - 8192*I*pi**13*C1*C10*C3*C6)*C7*C8*C9*L10 + (-8192*I*pi**13*C1*C2*C3*C5 - 8192*I*pi**13*C1*C2*C3*C6)*C7*C8*C9*L2)*L3 + (((-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4)*C5 + (-8192*I*pi**13*C1*C10*C3 - 8192*I*pi**13*C1*C10*C4 - 8192*I*pi**13*C1*C10*C5)*C6)*C7*C8*C9*L10 + ((-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4)*C5 + (-8192*I*pi**13*C1*C2*C3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C4 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (-8192*I*pi**13*C1*C3*C4*C5 + (-8192*I*pi**13*C1*C3*C4 - 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (-8192*I*pi**13*C1*C10*C5*C6*C7*C8*C9*L10 - 8192*I*pi**13*C1*C3*C5*C6*C7*C8*C9*L3 + (-8192*I*pi**13*C1*C2 - 8192*I*pi**13*C1*C3)*C5*C6*C7*C8*C9*L2 + (-8192*I*pi**13*C1*C3 - 8192*I*pi**13*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*L1*L10*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*L1*L10*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7*L10*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8 + 8192*I*pi**13*C1*C2*C3*C4*C5*C9)*L1*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C9)*L10*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C9)*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C7*C8 + 8192*I*pi**13*C1*C2*C3*C5*C7*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C7*C8 + 8192*I*pi**13*C1*C3*C4*C5*C7*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C8 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C9)*L10*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C9)*L1*L10*L2*L3 + ((((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C9)*L1*L10*L2 + (((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C9)*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C9)*L10*L2)*L3)*L4 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5*C6*C7*C8 + 8192*I*pi**13*C1*C3*C5*C6*C7*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C8 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C9)*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C9)*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C9)*L10*L2 + (8192*I*pi**13*C3*C4*C5*C6*C7*C8 + 8192*I*pi**13*C3*C4*C5*C6*C7*C9)*L10*L3)*L4)*L5)*L6)*L7)*L8 + (8192*I*pi**13*C1*C2*C3*C4*C5*C9*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C9*L10*L2)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C9*L1*L10*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C7*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C4*C5*C7*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C9*L10*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C9*L10*L2)*L3)*L4 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C5*C6*C7*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C9*L10*L2)*L3 + (8192*I*pi**13*C3*C4*C5*C6*C7*C9*L10*L3 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C9*L10*L2)*L4)*L5)*L6)*L7 + (((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C8)*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C7 + 8192*I*pi**13*C1*C2*C3*C5*C8)*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C8)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C7 + 8192*I*pi**13*C1*C3*C4*C5*C8)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C8)*C9*L10*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6 + 8192*I*pi**13*C1*C2*C3*C7)*C8)*C9*L1*L10*L2*L3 + ((((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C7)*C8)*C9*L1*L10*L2 + (((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C7)*C8)*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C7)*C8)*C9*L10*L2)*L3)*L4 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C7)*C8)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5*C6*C7 + (8192*I*pi**13*C1*C3*C5*C6 + 8192*I*pi**13*C1*C3*C5*C7)*C8)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C7)*C8)*C9*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C7)*C8)*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + (8192*I*pi**13*C3*C4*C5*C6*C7 + (8192*I*pi**13*C3*C4*C5*C6 + 8192*I*pi**13*C3*C4*C5*C7)*C8)*C9*L10*L3)*L4)*L5)*L6 + (8192*I*pi**13*C1*C2*C3*C7*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C7*C8*C9*L10*L2)*L3)*L4 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C7*C8*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C5*C7*C8*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C7*C8*C9*L10*L2)*L3 + (8192*I*pi**13*C3*C4*C5*C7*C8*C9*L10*L3 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C7*C8*C9*L10*L2)*L4)*L5 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C6)*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5 + 8192*I*pi**13*C1*C3*C6)*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C6)*C7*C8*C9*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4 + 8192*I*pi**13*C1*C5)*C6)*C7*C8*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C5)*C6)*C7*C8*C9*L10*L2 + (8192*I*pi**13*C3*C4*C5 + (8192*I*pi**13*C3*C4 + 8192*I*pi**13*C3*C5)*C6)*C7*C8*C9*L10*L3)*L4 + (8192*I*pi**13*C1*C5*C6*C7*C8*C9*L1*L10 + 8192*I*pi**13*C3*C5*C6*C7*C8*C9*L10*L3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C5*C6*C7*C8*C9*L10*L2 + (8192*I*pi**13*C3 + 8192*I*pi**13*C4)*C5*C6*C7*C8*C9*L10*L4)*L5)*L6)*L7)*L8)*L9)*freq**13 + 4096*(((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C5*C9)*L1*L10*L2*L3*L4*L5 + ((pi**12*C1*C10*C2*C3*C4*C5 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C6 + pi**12*C1*C10*C2*C3*C5*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C6 + pi**12*C1*C10*C3*C4*C5*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C7*C9)*L1*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C7*C9)*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C7*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6)*C7)*L1*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6)*C7)*L1*L10*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6)*C7)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L1 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6)*C7)*L10)*L2)*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6*C7)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6*C7 + pi**12*C1*C3*C5*C6*C7*C9)*L1*L10 + (pi**12*C1*C2*C3*C5*C6*C7*L1 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6*C7)*L10)*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6*C7)*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L1 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6*C7)*L10)*L2 + (pi**12*C1*C3*C4*C5*C6*C7*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7*L2 + (pi**12*C10*C3*C4*C5*C6*C7 + pi**12*C3*C4*C5*C6*C7*C9)*L10)*L3)*L4)*L5)*L6)*L7 + (((pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C8 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C7 + pi**12*C1*C10*C2*C3*C5*C8 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C7 + pi**12*C1*C10*C3*C4*C5*C8 + (pi**12*C1*C10*C3*C4*C5 + pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8 + pi**12*C1*C2*C3*C4*C5*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6)*C7 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + pi**12*C1*C10*C2*C3*C7)*C8 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9)*L1*L10*L2*L3 + ((((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6)*C7 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C8 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C1*C2)*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6)*C7 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C8 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + (pi**12*C1*C10*C3 + pi**12*C1*C3*C4)*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7)*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6*C7 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C8 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6*C7 + (pi**12*C1*C10*C3*C5*C6 + pi**12*C1*C10*C3*C5*C7)*C8 + (pi**12*C1*C10*C3*C5*C6 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C3*C5*C6)*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C5*C7)*C8)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6*C7 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C8 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5)*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9)*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6*C7 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5)*C7 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7)*C8)*C9)*L10)*L2 + ((pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L1 + (pi**12*C10*C3*C4*C5*C6*C7 + (pi**12*C10*C3*C4*C5*C6 + pi**12*C10*C3*C4*C5*C7)*C8 + (pi**12*C10*C3*C4*C5*C6 + (pi**12*C10*C3*C4*C5 + pi**12*C3*C4*C5*C6)*C7 + (pi**12*C3*C4*C5*C6 + pi**12*C3*C4*C5*C7)*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C3*C7*C8 + (pi**12*C1*C10*C2*C3*C7 + pi**12*C1*C2*C3*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7*C8 + ((pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7*C8 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C7*C8 + (pi**12*C1*C10*C3*C5*C7 + pi**12*C1*C3*C5*C7*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C5*C7*C8 + pi**12*C1*C2*C3*C5*C7*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3*C5*C7*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7*C8 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C9)*L10)*L2 + ((pi**12*C1*C3*C4*C5*C7*C8 + pi**12*C1*C3*C4*C5*C7*C9)*L1 + (pi**12*C10*C3*C4*C5*C7*C8 + (pi**12*C10*C3*C4*C5*C7 + pi**12*C3*C4*C5*C7*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C8 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + ((((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7*C8 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7*C8 + ((pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3*C5 + (pi**12*C1 + pi**12*C2)*C3*C6)*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7)*C9)*L10)*L2)*L3 + ((((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7*C8 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7)*C9)*L1*L10 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9)*L1 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7*C8 + ((((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5)*C6)*C7*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7)*C9)*L10)*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9)*L1 + ((pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7*C8 + ((pi**12*C3*C4*C5 + (pi**12*C3*C4 + pi**12*C3*C5)*C6)*C7*C8 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7)*C9)*L10 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + ((pi**12*C1*C10*C5*C6*C7*C8 + (pi**12*C1*C10*C5*C6*C7 + pi**12*C1*C5*C6*C7*C8)*C9)*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7*C8 + ((pi**12*C1 + pi**12*C2 + pi**12*C3)*C5*C6*C7*C8 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7)*C9)*L10)*L2 + ((pi**12*C1*C3*C5*C6*C7*C8 + pi**12*C1*C3*C5*C6*C7*C9)*L1 + (pi**12*C10*C3*C5*C6*C7*C8 + (pi**12*C10*C3*C5*C6*C7 + pi**12*C3*C5*C6*C7*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C8 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9)*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9)*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7*C8 + ((pi**12*C3 + pi**12*C4)*C5*C6*C7*C8 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7)*C9)*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9)*L2 + (pi**12*C3*C4*C5*C6*C7*C8 + pi**12*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C9*L1*L10*L2*L3*L4 + (pi**12*C1*C10*C2*C3*C5*C9*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C4*C5*C9*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C9*L10)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + pi**12*C1*C10*C2*C3*C7)*C9*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C9*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C9*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6 + pi**12*C1*C10*C3*C5*C7)*C9*L1*L10 + ((pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9*L1 + (pi**12*C10*C3*C4*C5*C6 + pi**12*C10*C3*C4*C5*C7)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + (pi**12*C1*C10*C2*C3*C7*C9*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7*C9*L1*L10 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7*C9*L10)*L2)*L3)*L4 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C5*C7*C9*L1*L10 + (pi**12*C1*C2*C3*C5*C7*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7*C9*L10)*L2)*L3 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7*C9*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7*C9*L10)*L2 + (pi**12*C1*C3*C4*C5*C7*C9*L1 + pi**12*C10*C3*C4*C5*C7*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7*C9*L1*L10 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9*L1 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + (pi**12*C1*C10*C5*C6*C7*C9*L1*L10 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7*C9*L10)*L2 + (pi**12*C1*C3*C5*C6*C7*C9*L1 + pi**12*C10*C3*C5*C6*C7*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9*L2)*L3 + (pi**12*C3*C4*C5*C6*C7*C9*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9*L1 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((pi**12*C1*C10*C2*C3*C7 + pi**12*C1*C10*C2*C3*C8)*C9*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C8)*C9*L1*L10*L2 + (((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C8)*C9*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C8)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C7 + pi**12*C1*C10*C3*C5*C8)*C9*L1*L10 + ((pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C8)*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C8)*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9*L1 + (pi**12*C10*C3*C4*C5*C7 + pi**12*C10*C3*C4*C5*C8)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + ((((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C7)*C8)*C9*L1*L10*L2 + (((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6 + pi**12*C1*C10*C3*C7)*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C7)*C8)*C9*L10)*L2)*L3 + ((((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C7)*C8)*C9*L1*L10 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9*L1 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C7)*C8)*C9*L10)*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9*L1 + ((pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C7)*C8)*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + ((pi**12*C1*C10*C5*C6*C7 + (pi**12*C1*C10*C5*C6 + pi**12*C1*C10*C5*C7)*C8)*C9*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C7)*C8)*C9*L10)*L2 + ((pi**12*C1*C3*C5*C6*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9*L1 + (pi**12*C10*C3*C5*C6*C7 + (pi**12*C10*C3*C5*C6 + pi**12*C10*C3*C5*C7)*C8)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C7)*C8)*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**12*C3*C4*C5*C6*C7 + (pi**12*C3*C4*C5*C6 + pi**12*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C7*C8*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C7*C8*C9*L1*L10 + (pi**12*C1*C2*C3*C7*C8*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C7*C8*C9*L10)*L2)*L3 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C7*C8*C9*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C7*C8*C9*L10)*L2 + ((pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8*C9*L1 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + (pi**12*C1*C10*C5*C7*C8*C9*L1*L10 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C7*C8*C9*L10)*L2 + (pi**12*C1*C3*C5*C7*C8*C9*L1 + pi**12*C10*C3*C5*C7*C8*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C5*C7*C8*C9*L2)*L3 + (pi**12*C3*C4*C5*C7*C8*C9*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8*C9*L1 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((pi**12*C1*C10*C5 + pi**12*C1*C10*C6)*C7*C8*C9*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C6)*C7*C8*C9*L10)*L2 + ((pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8*C9*L1 + (pi**12*C10*C3*C5 + pi**12*C10*C3*C6)*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5 + (pi**12*C1 + pi**12*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8*C9*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C3 + pi**12*C10*C4 + pi**12*C10*C5)*C6)*C7*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**12*C3*C4*C5 + (pi**12*C3*C4 + pi**12*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**12*C1*C5*C6*C7*C8*C9*L1 + pi**12*C10*C5*C6*C7*C8*C9*L10 + pi**12*C3*C5*C6*C7*C8*C9*L3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5*C6*C7*C8*C9*L2 + (pi**12*C3 + pi**12*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZL - ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L10*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L10*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L10*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L10*L2*L3 + (pi**12*C1*C3*C4*C5*C6*C7*L10*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L10*L2)*L4)*L5)*L6)*L7 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8 + pi**12*C1*C2*C3*C4*C5*C9)*L10*L2*L3*L4*L5 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L10*L2 + (pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L10*L3)*L4)*L5)*L6 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9)*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C7*C8 + pi**12*C1*C2*C3*C5*C7*C9)*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9)*L10*L2 + (pi**12*C1*C3*C4*C5*C7*C8 + pi**12*C1*C3*C4*C5*C7*C9)*L10*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9)*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9)*L10*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9)*L10*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9)*L10*L2 + (pi**12*C1*C3*C5*C6*C7*C8 + pi**12*C1*C3*C5*C6*C7*C9)*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9)*L10*L4)*L5)*L6)*L7)*L8 + (pi**12*C1*C2*C3*C4*C5*C9*L10*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9*L10*L2 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9*L10*L3)*L4)*L5)*L6 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9*L10*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C7*C9*L10*L2*L3 + (pi**12*C1*C3*C4*C5*C7*C9*L10*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9*L10*L2)*L4)*L5 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9*L10*L2 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9*L10*L3)*L4 + (pi**12*C1*C3*C5*C6*C7*C9*L10*L3 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9*L10*L2 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9*L10*L4)*L5)*L6)*L7 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8)*C9*L10*L2 + (pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9*L10*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9*L10*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9*L10*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9*L10*L2 + (pi**12*C1*C3*C5*C6*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9*L10*L4)*L5)*L6 + (pi**12*C1*C2*C3*C7*C8*C9*L10*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8*C9*L10*L2 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8*C9*L10*L3)*L4 + (pi**12*C1*C3*C5*C7*C8*C9*L10*L3 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8*C9*L10*L2 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8*C9*L10*L4)*L5 + (pi**12*C1*C5*C6*C7*C8*C9*L10*L5 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8*C9*L10*L2 + (pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8*C9*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8*C9*L10*L4)*L6)*L7)*L8)*L9)*ZS)*freq**12 + (-2048*I*pi**11*C1*C2*C3*C4*C5*L1*L10*L2*L3*L4*L5 + ((2048*I*pi**11*C1*C10*C2*C3*C4*C5 + 2048*I*pi**11*C1*C2*C3*C4*C5*C9)*L10*L2*L3*L4*L5 + ((2048*I*pi**11*C1*C10*C2*C3*C4*C5 + (2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5)*C6 + (2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5)*C7 + (2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((2048*I*pi**11*C1*C10*C2*C3*C5*C6 + 2048*I*pi**11*C1*C10*C2*C3*C5*C7 + (2048*I*pi**11*C1*C2*C3*C5*C6 + 2048*I*pi**11*C1*C2*C3*C5*C7)*C9)*L10*L2*L3 + (((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5*C6 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9)*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C4*C5*C6 + 2048*I*pi**11*C1*C10*C3*C4*C5*C7 + (2048*I*pi**11*C1*C3*C4*C5*C6 + 2048*I*pi**11*C1*C3*C4*C5*C7)*C9)*L10 + (2048*I*pi**11*C1*C2*C3*C4*C5*C6 + 2048*I*pi**11*C1*C2*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + (((2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7*C9 + (2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5)*C7)*L10*L2*L3*L4 + ((2048*I*pi**11*C1*C10*C2*C3*C5*C7 + 2048*I*pi**11*C1*C2*C3*C5*C7*C9)*L10*L2*L3 + (((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7)*L10*L2 + (2048*I*pi**11*C1*C2*C3*C4*C5*C7*L2 + (2048*I*pi**11*C1*C10*C3*C4*C5*C7 + 2048*I*pi**11*C1*C3*C4*C5*C7*C9)*L10)*L3)*L4)*L5 + (((2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7*C9 + (2048*I*pi**11*C1*C10*C2*C3*C5 + 2048*I*pi**11*C1*C10*C2*C3*C6)*C7)*L10*L2*L3 + ((((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9 + ((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C6)*C7)*L10*L2 + ((2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7*L2 + ((2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9 + (2048*I*pi**11*C1*C10*C3*C4*C5 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C6)*C7)*L10)*L3)*L4 + (((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6*C7*C9 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C6*C7)*L10*L2 + (2048*I*pi**11*C1*C2*C3*C5*C6*C7*L2 + (2048*I*pi**11*C1*C10*C3*C5*C6*C7 + 2048*I*pi**11*C1*C3*C5*C6*C7*C9)*L10)*L3 + (2048*I*pi**11*C1*C3*C4*C5*C6*C7*L3 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7*L2 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6*C7*C9 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C6*C7)*L10)*L4)*L5)*L6)*L7 + (((2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5)*C7 + (2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5)*C8 + (2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C8)*C9)*L10*L2*L3*L4 + ((2048*I*pi**11*C1*C10*C2*C3*C5*C7 + 2048*I*pi**11*C1*C10*C2*C3*C5*C8 + (2048*I*pi**11*C1*C10*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C5*C7 + 2048*I*pi**11*C1*C2*C3*C5*C8)*C9)*L10*L2*L3 + (((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5*C8 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C8 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5)*C9)*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C4*C5*C7 + 2048*I*pi**11*C1*C10*C3*C4*C5*C8 + (2048*I*pi**11*C1*C10*C3*C4*C5 + 2048*I*pi**11*C1*C3*C4*C5*C7 + 2048*I*pi**11*C1*C3*C4*C5*C8)*C9)*L10 + (2048*I*pi**11*C1*C2*C3*C4*C5*C7 + 2048*I*pi**11*C1*C2*C3*C4*C5*C8 + 2048*I*pi**11*C1*C2*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + (((2048*I*pi**11*C1*C10*C2*C3*C5 + 2048*I*pi**11*C1*C10*C2*C3*C6)*C7 + (2048*I*pi**11*C1*C10*C2*C3*C5 + 2048*I*pi**11*C1*C10*C2*C3*C6 + 2048*I*pi**11*C1*C10*C2*C3*C7)*C8 + (2048*I*pi**11*C1*C10*C2*C3*C5 + 2048*I*pi**11*C1*C10*C2*C3*C6 + (2048*I*pi**11*C1*C10*C2*C3 + 2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7 + (2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6 + 2048*I*pi**11*C1*C2*C3*C7)*C8)*C9)*L10*L2*L3 + ((((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C6)*C7 + ((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C8 + ((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + (2048*I*pi**11*C1*C10 + 2048*I*pi**11*C1*C2)*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C7)*C8)*C9)*L10*L2 + (((2048*I*pi**11*C1*C10*C3*C4*C5 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C6)*C7 + (2048*I*pi**11*C1*C10*C3*C4*C5 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C6 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C7)*C8 + (2048*I*pi**11*C1*C10*C3*C4*C5 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C6 + (2048*I*pi**11*C1*C10*C3*C4 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C3*C4)*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C7)*C8)*C9)*L10 + ((2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7 + (2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7)*C8 + (2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9)*L2)*L3)*L4 + (((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C6*C7 + ((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C6 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C7)*C8 + ((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C6 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C7)*C8)*C9)*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C5*C6*C7 + (2048*I*pi**11*C1*C10*C3*C5*C6 + 2048*I*pi**11*C1*C10*C3*C5*C7)*C8 + (2048*I*pi**11*C1*C10*C3*C5*C6 + (2048*I*pi**11*C1*C10*C3*C5 + 2048*I*pi**11*C1*C3*C5*C6)*C7 + (2048*I*pi**11*C1*C3*C5*C6 + 2048*I*pi**11*C1*C3*C5*C7)*C8)*C9)*L10 + (2048*I*pi**11*C1*C2*C3*C5*C6*C7 + (2048*I*pi**11*C1*C2*C3*C5*C6 + 2048*I*pi**11*C1*C2*C3*C5*C7)*C8 + (2048*I*pi**11*C1*C2*C3*C5*C6 + 2048*I*pi**11*C1*C2*C3*C5*C7)*C9)*L2)*L3 + (((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C6*C7 + ((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C6 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C7)*C8 + ((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C6 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5)*C7 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C7)*C8)*C9)*L10 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C8 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9)*L2 + (2048*I*pi**11*C1*C3*C4*C5*C6*C7 + (2048*I*pi**11*C1*C3*C4*C5*C6 + 2048*I*pi**11*C1*C3*C4*C5*C7)*C8 + (2048*I*pi**11*C1*C3*C4*C5*C6 + 2048*I*pi**11*C1*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + ((2048*I*pi**11*C1*C10*C2*C3*C7*C8 + (2048*I*pi**11*C1*C10*C2*C3*C7 + 2048*I*pi**11*C1*C2*C3*C7*C8)*C9)*L10*L2*L3 + (((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7*C8 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C7*C8 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C9)*L10*L2 + (((2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C7*C8 + ((2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C7*C8 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C7)*C9)*L10 + ((2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7*C8 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7*C9)*L2)*L3)*L4 + (((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C7*C8 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C7*C8 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C7)*C9)*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C5*C7*C8 + (2048*I*pi**11*C1*C10*C3*C5*C7 + 2048*I*pi**11*C1*C3*C5*C7*C8)*C9)*L10 + (2048*I*pi**11*C1*C2*C3*C5*C7*C8 + 2048*I*pi**11*C1*C2*C3*C5*C7*C9)*L2)*L3 + (((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C7*C8 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C7*C8 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C7)*C9)*L10 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7*C8 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9)*L2 + (2048*I*pi**11*C1*C3*C4*C5*C7*C8 + 2048*I*pi**11*C1*C3*C4*C5*C7*C9)*L3)*L4)*L5 + ((((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C6)*C7*C8 + (((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C6)*C7*C8 + ((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C6)*C7)*C9)*L10*L2 + (((2048*I*pi**11*C1*C10*C3*C5 + 2048*I*pi**11*C1*C10*C3*C6)*C7*C8 + ((2048*I*pi**11*C1*C3*C5 + 2048*I*pi**11*C1*C3*C6)*C7*C8 + (2048*I*pi**11*C1*C10*C3*C5 + 2048*I*pi**11*C1*C10*C3*C6)*C7)*C9)*L10 + ((2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7*C8 + (2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7*C9)*L2)*L3 + ((((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C6)*C7*C8 + (((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4 + 2048*I*pi**11*C1*C5)*C6)*C7*C8 + ((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C6)*C7)*C9)*L10 + (((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C8 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9)*L2 + ((2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7*C8 + (2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9)*L3)*L4 + ((2048*I*pi**11*C1*C10*C5*C6*C7*C8 + (2048*I*pi**11*C1*C10*C5*C6*C7 + 2048*I*pi**11*C1*C5*C6*C7*C8)*C9)*L10 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6*C7*C8 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6*C7*C9)*L2 + (2048*I*pi**11*C1*C3*C5*C6*C7*C8 + 2048*I*pi**11*C1*C3*C5*C6*C7*C9)*L3 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6*C7*C8 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + ((2048*I*pi**11*C1*C10*C2*C3*C4 + 2048*I*pi**11*C1*C10*C2*C3*C5)*C9*L10*L2*L3*L4 + (2048*I*pi**11*C1*C10*C2*C3*C5*C9*L10*L2*L3 + ((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5*C9*L10*L2 + (2048*I*pi**11*C1*C10*C3*C4*C5*C9*L10 + 2048*I*pi**11*C1*C2*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((2048*I*pi**11*C1*C10*C2*C3*C5 + 2048*I*pi**11*C1*C10*C2*C3*C6 + 2048*I*pi**11*C1*C10*C2*C3*C7)*C9*L10*L2*L3 + (((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C9*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C4*C5 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C6 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C7)*C9*L10 + (2048*I*pi**11*C1*C2*C3*C4*C5 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C6 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9*L2)*L3)*L4 + (((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C6 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C7)*C9*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C5*C6 + 2048*I*pi**11*C1*C10*C3*C5*C7)*C9*L10 + (2048*I*pi**11*C1*C2*C3*C5*C6 + 2048*I*pi**11*C1*C2*C3*C5*C7)*C9*L2)*L3 + (((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C6 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C7)*C9*L10 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9*L2 + (2048*I*pi**11*C1*C3*C4*C5*C6 + 2048*I*pi**11*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (2048*I*pi**11*C1*C10*C2*C3*C7*C9*L10*L2*L3 + ((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7*C9*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C7*C9*L10 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7*C9*L2)*L3)*L4 + ((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C7*C9*L10*L2 + (2048*I*pi**11*C1*C10*C3*C5*C7*C9*L10 + 2048*I*pi**11*C1*C2*C3*C5*C7*C9*L2)*L3 + (2048*I*pi**11*C1*C3*C4*C5*C7*C9*L3 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C7*C9*L10 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C6)*C7*C9*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C5 + 2048*I*pi**11*C1*C10*C3*C6)*C7*C9*L10 + (2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7*C9*L2)*L3 + (((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C6)*C7*C9*L10 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9*L2 + (2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (2048*I*pi**11*C1*C10*C5*C6*C7*C9*L10 + 2048*I*pi**11*C1*C3*C5*C6*C7*C9*L3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6*C7*C9*L2 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((2048*I*pi**11*C1*C10*C2*C3*C7 + 2048*I*pi**11*C1*C10*C2*C3*C8)*C9*L10*L2*L3 + (((2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C7 + (2048*I*pi**11*C1*C10*C2*C3 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C4 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5)*C8)*C9*L10*L2 + (((2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C7 + (2048*I*pi**11*C1*C10*C3*C4 + 2048*I*pi**11*C1*C10*C3*C5)*C8)*C9*L10 + ((2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C7 + (2048*I*pi**11*C1*C2*C3*C4 + 2048*I*pi**11*C1*C2*C3*C5)*C8)*C9*L2)*L3)*L4 + (((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C7 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5*C8)*C9*L10*L2 + ((2048*I*pi**11*C1*C10*C3*C5*C7 + 2048*I*pi**11*C1*C10*C3*C5*C8)*C9*L10 + (2048*I*pi**11*C1*C2*C3*C5*C7 + 2048*I*pi**11*C1*C2*C3*C5*C8)*C9*L2)*L3 + (((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C7 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5*C8)*C9*L10 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5*C8)*C9*L2 + (2048*I*pi**11*C1*C3*C4*C5*C7 + 2048*I*pi**11*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C6)*C7 + ((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C5 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C6 + (2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C7)*C8)*C9*L10*L2 + (((2048*I*pi**11*C1*C10*C3*C5 + 2048*I*pi**11*C1*C10*C3*C6)*C7 + (2048*I*pi**11*C1*C10*C3*C5 + 2048*I*pi**11*C1*C10*C3*C6 + 2048*I*pi**11*C1*C10*C3*C7)*C8)*C9*L10 + ((2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6)*C7 + (2048*I*pi**11*C1*C2*C3*C5 + 2048*I*pi**11*C1*C2*C3*C6 + 2048*I*pi**11*C1*C2*C3*C7)*C8)*C9*L2)*L3 + ((((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C6)*C7 + ((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4)*C5 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C6 + (2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C7)*C8)*C9*L10 + (((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4)*C5 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C6 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C7)*C8)*C9*L2 + ((2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (2048*I*pi**11*C1*C3*C4*C5 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C6 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + ((2048*I*pi**11*C1*C10*C5*C6*C7 + (2048*I*pi**11*C1*C10*C5*C6 + 2048*I*pi**11*C1*C10*C5*C7)*C8)*C9*L10 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6*C7 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C6 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C7)*C8)*C9*L2 + (2048*I*pi**11*C1*C3*C5*C6*C7 + (2048*I*pi**11*C1*C3*C5*C6 + 2048*I*pi**11*C1*C3*C5*C7)*C8)*C9*L3 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6*C7 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C6 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((2048*I*pi**11*C1*C10*C2 + 2048*I*pi**11*C1*C10*C3)*C7*C8*C9*L10*L2 + (2048*I*pi**11*C1*C10*C3*C7*C8*C9*L10 + 2048*I*pi**11*C1*C2*C3*C7*C8*C9*L2)*L3 + ((2048*I*pi**11*C1*C10*C3 + 2048*I*pi**11*C1*C10*C4 + 2048*I*pi**11*C1*C10*C5)*C7*C8*C9*L10 + (2048*I*pi**11*C1*C2*C3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5)*C7*C8*C9*L2 + (2048*I*pi**11*C1*C3*C4 + 2048*I*pi**11*C1*C3*C5)*C7*C8*C9*L3)*L4 + (2048*I*pi**11*C1*C10*C5*C7*C8*C9*L10 + 2048*I*pi**11*C1*C3*C5*C7*C8*C9*L3 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5*C7*C8*C9*L2 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5*C7*C8*C9*L4)*L5 + (2048*I*pi**11*C1*C5*C6*C7*C8*C9*L5 + (2048*I*pi**11*C1*C10*C5 + 2048*I*pi**11*C1*C10*C6)*C7*C8*C9*L10 + ((2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C5 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C1*C3)*C6)*C7*C8*C9*L2 + (2048*I*pi**11*C1*C3*C5 + 2048*I*pi**11*C1*C3*C6)*C7*C8*C9*L3 + ((2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4)*C5 + (2048*I*pi**11*C1*C3 + 2048*I*pi**11*C1*C4 + 2048*I*pi**11*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZL*ZS + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7)*L10*L2)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*L1*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7*L10*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7*L10*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7*L10*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C6*C7*L10*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7*L10*L2)*L4)*L5)*L6)*L7 + (((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C9)*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8 - 2048*I*pi**11*C1*C2*C3*C5*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8 - 2048*I*pi**11*C1*C3*C4*C5*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C9)*L10*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C9)*L1*L10*L2*L3 + ((((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C9)*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C9)*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C8 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C9)*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C8 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C9)*L10*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C7*C8 - 2048*I*pi**11*C1*C2*C3*C7*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C9)*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C7*C8 - 2048*I*pi**11*C1*C3*C5*C7*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C9)*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C9)*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C7*C8 - 2048*I*pi**11*C3*C4*C5*C7*C9)*L10*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C9)*L10*L2)*L3 + ((((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C9)*L1*L10 + ((((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C8 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C9)*L10*L2 + ((-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C8 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C9)*L10*L3)*L4 + ((-2048*I*pi**11*C1*C5*C6*C7*C8 - 2048*I*pi**11*C1*C5*C6*C7*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C9)*L10*L2 + (-2048*I*pi**11*C3*C5*C6*C7*C8 - 2048*I*pi**11*C3*C5*C6*C7*C9)*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C8 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C9)*L10*L4)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C9*L1*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C9*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C9*L10*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C9*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C9*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C9*L10*L3)*L4)*L5)*L6 + (-2048*I*pi**11*C1*C2*C3*C7*C9*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C9*L10*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C5*C7*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C9*L10*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C7*C9*L10*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C9*L10*L2)*L4)*L5 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C9*L10*L3)*L4 + (-2048*I*pi**11*C1*C5*C6*C7*C9*L1*L10 - 2048*I*pi**11*C3*C5*C6*C7*C9*L10*L3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C9*L10*L2 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C9*L10*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C2*C3*C7 - 2048*I*pi**11*C1*C2*C3*C8)*C9*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C8)*C9*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C8)*C9*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C8)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C7 - 2048*I*pi**11*C1*C3*C5*C8)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C8)*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C8)*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C7 - 2048*I*pi**11*C3*C4*C5*C8)*C9*L10*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C7)*C8)*C9*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6 - 2048*I*pi**11*C1*C3*C7)*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C7)*C8)*C9*L10*L2)*L3 + ((((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C7)*C8)*C9*L1*L10 + ((((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C7)*C8)*C9*L10*L2 + ((-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C7)*C8)*C9*L10*L3)*L4 + ((-2048*I*pi**11*C1*C5*C6*C7 + (-2048*I*pi**11*C1*C5*C6 - 2048*I*pi**11*C1*C5*C7)*C8)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C7)*C8)*C9*L10*L2 + (-2048*I*pi**11*C3*C5*C6*C7 + (-2048*I*pi**11*C3*C5*C6 - 2048*I*pi**11*C3*C5*C7)*C8)*C9*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C7)*C8)*C9*L10*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C7*C8*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C7*C8*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C7*C8*C9*L10*L2)*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C7*C8*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C7*C8*C9*L10*L3)*L4 + (-2048*I*pi**11*C1*C5*C7*C8*C9*L1*L10 - 2048*I*pi**11*C3*C5*C7*C8*C9*L10*L3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C7*C8*C9*L10*L4)*L5 + (-2048*I*pi**11*C5*C6*C7*C8*C9*L10*L5 + (-2048*I*pi**11*C1*C5 - 2048*I*pi**11*C1*C6)*C7*C8*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C6)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3*C5 - 2048*I*pi**11*C3*C6)*C7*C8*C9*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4 - 2048*I*pi**11*C5)*C6)*C7*C8*C9*L10*L4)*L6)*L7)*L8)*L9)*freq**11 - 1024*(((pi**10*C1*C10*C2*C3*C4 + pi**10*C1*C10*C2*C3*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L1*L10*L2*L3*L4 + ((pi**10*C1*C10*C2*C3*C5 + pi**10*C1*C2*C3*C5*C9)*L1*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4)*C5)*L1*L10*L2 + ((pi**10*C1*C10*C3*C4*C5 + pi**10*C1*C3*C4*C5*C9)*L1*L10 + (pi**10*C1*C2*C3*C4*C5*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C4*C5)*L10)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C3*C5 + pi**10*C1*C10*C2*C3*C6 + pi**10*C1*C10*C2*C3*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L1*L10*L2*L3 + (((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4)*C5 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C6 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C4*C5 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C6 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C6 + pi**10*C1*C10*C3*C5*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9)*L10)*L2 + ((pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L1 + (pi**10*C10*C3*C4*C5*C6 + pi**10*C10*C3*C4*C5*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2*C3*C7 + pi**10*C1*C2*C3*C7*C9)*L1*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7)*L1*L10*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7)*L1*L10 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7)*L10)*L2)*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C7 + pi**10*C1*C3*C5*C7*C9)*L1*L10 + (pi**10*C1*C2*C3*C5*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7)*L10)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7)*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7)*L10)*L2 + (pi**10*C1*C3*C4*C5*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7*L2 + (pi**10*C10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C7*C9)*L10)*L3)*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6)*C7)*L1*L10*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6)*C7)*L1*L10 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6)*C7)*L10)*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6)*C7)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L1 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6)*C7)*L10)*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6)*C7)*L10)*L3)*L4 + ((pi**10*C1*C10*C5*C6*C7 + pi**10*C1*C5*C6*C7*C9)*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6*C7)*L10)*L2 + (pi**10*C1*C3*C5*C6*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C6*C7*L2 + (pi**10*C10*C3*C5*C6*C7 + pi**10*C3*C5*C6*C7*C9)*L10)*L3 + (pi**10*C3*C4*C5*C6*C7*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7*L2 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7*C9 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C6*C7)*L10)*L4)*L5)*L6)*L7 + ((pi**10*C1*C10*C2*C3*C7 + pi**10*C1*C10*C2*C3*C8 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9)*L1*L10*L2*L3 + (((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C8 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9)*L1*L10*L2 + (((pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C8 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9)*L1*L10 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C7 + pi**10*C1*C10*C3*C5*C8 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8 + pi**10*C1*C2*C3*C5*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C5*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5)*C9)*L10)*L2 + ((pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8 + pi**10*C1*C3*C4*C5*C9)*L1 + (pi**10*C10*C3*C4*C5*C7 + pi**10*C10*C3*C4*C5*C8 + (pi**10*C10*C3*C4*C5 + pi**10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C8 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + ((((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6)*C7 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C8 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9)*L1*L10*L2 + (((pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6)*C7 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + pi**10*C1*C10*C3*C7)*C8 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9)*L1*L10 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1 + pi**10*C2)*C3*C7)*C8)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6)*C7 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C8 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + (pi**10*C1*C10 + pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9)*L1*L10 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L1 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6)*C7 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C8 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + (pi**10*C1 + pi**10*C10 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7)*C8)*C9)*L10)*L2 + (((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L1 + ((pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6)*C7 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C8 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + (pi**10*C10*C3 + pi**10*C3*C4)*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6 + (pi**10*C3*C4 + pi**10*C3*C5)*C7)*C8)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9)*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C6*C7 + (pi**10*C1*C10*C5*C6 + pi**10*C1*C10*C5*C7)*C8 + (pi**10*C1*C10*C5*C6 + (pi**10*C1*C10*C5 + pi**10*C1*C5*C6)*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9)*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7)*C8)*C9)*L10)*L2 + ((pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L1 + (pi**10*C10*C3*C5*C6*C7 + (pi**10*C10*C3*C5*C6 + pi**10*C10*C3*C5*C7)*C8 + (pi**10*C10*C3*C5*C6 + (pi**10*C10*C3*C5 + pi**10*C3*C5*C6)*C7 + (pi**10*C3*C5*C6 + pi**10*C3*C5*C7)*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6*C7 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C8 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5)*C7 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C3 + pi**10*C4)*C5*C7)*C8)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9)*L2 + (pi**10*C3*C4*C5*C6*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C8 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C7*C8 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C7*C8 + (pi**10*C1*C10*C3*C7 + pi**10*C1*C3*C7*C8)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C7*C8 + pi**10*C1*C2*C3*C7*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C7*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C9)*L10)*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9)*L1 + ((pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7*C8 + ((pi**10*C3*C4 + pi**10*C3*C5)*C7*C8 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9)*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C7*C8 + (pi**10*C1*C10*C5*C7 + pi**10*C1*C5*C7*C8)*C9)*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7*C8 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7*C8 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C9)*L10)*L2 + ((pi**10*C1*C3*C5*C7*C8 + pi**10*C1*C3*C5*C7*C9)*L1 + (pi**10*C10*C3*C5*C7*C8 + (pi**10*C10*C3*C5*C7 + pi**10*C3*C5*C7*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7*C8 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C9)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9)*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C7*C8 + ((pi**10*C3 + pi**10*C4)*C5*C7*C8 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9)*L2 + (pi**10*C3*C4*C5*C7*C8 + pi**10*C3*C4*C5*C7*C9)*L3)*L4)*L5 + (((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7*C8 + ((pi**10*C1*C5 + pi**10*C1*C6)*C7*C8 + (pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7)*C9)*L1*L10 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7*C8 + (((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C6)*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7)*C9)*L10)*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9)*L1 + ((pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7*C8 + ((pi**10*C3*C5 + pi**10*C3*C6)*C7*C8 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9)*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9)*L1 + (((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7*C8 + (((pi**10*C3 + pi**10*C4)*C5 + (pi**10*C3 + pi**10*C4 + pi**10*C5)*C6)*C7*C8 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7)*C9)*L10 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9)*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C8 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9)*L3)*L4 + ((pi**10*C1*C5*C6*C7*C8 + pi**10*C1*C5*C6*C7*C9)*L1 + (pi**10*C10*C5*C6*C7*C8 + (pi**10*C10*C5*C6*C7 + pi**10*C5*C6*C7*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C8 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9)*L2 + (pi**10*C3*C5*C6*C7*C8 + pi**10*C3*C5*C6*C7*C9)*L3 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7*C8 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + (pi**10*C1*C10*C2*C3*C9*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C9*L1*L10 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C9*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C9*L1*L10*L2 + (pi**10*C1*C10*C3*C5*C9*L1*L10 + (pi**10*C1*C2*C3*C5*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C9*L10)*L2)*L3 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C9*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C9*L10)*L2 + (pi**10*C1*C3*C4*C5*C9*L1 + pi**10*C10*C3*C4*C5*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + pi**10*C1*C10*C3*C7)*C9*L1*L10 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C9*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C9*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C9*L10)*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9*L1 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C6 + pi**10*C1*C10*C5*C7)*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C9*L10)*L2 + ((pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9*L1 + (pi**10*C10*C3*C5*C6 + pi**10*C10*C3*C5*C7)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9*L2 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7*C9*L1*L10*L2 + (pi**10*C1*C10*C3*C7*C9*L1*L10 + (pi**10*C1*C2*C3*C7*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7*C9*L10)*L2)*L3 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7*C9*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7*C9*L10)*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9*L1 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + (pi**10*C1*C10*C5*C7*C9*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7*C9*L10)*L2 + (pi**10*C1*C3*C5*C7*C9*L1 + pi**10*C10*C3*C5*C7*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C9*L2)*L3 + (pi**10*C3*C4*C5*C7*C9*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9*L1 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7*C9*L10)*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9*L1 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9*L2 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**10*C1*C5*C6*C7*C9*L1 + pi**10*C10*C5*C6*C7*C9*L10 + pi**10*C3*C5*C6*C7*C9*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9*L2 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C8)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C7 + pi**10*C1*C10*C3*C8)*C9*L1*L10 + ((pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C8)*C9*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C8)*C9*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C8)*C9*L10)*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9*L1 + ((pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C7 + pi**10*C1*C10*C5*C8)*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C8)*C9*L10)*L2 + ((pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9*L1 + (pi**10*C10*C3*C5*C7 + pi**10*C10*C3*C5*C8)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C5*C8)*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8)*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C7 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C8)*C9*L2 + (pi**10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7 + (pi**10*C1*C10*C5 + pi**10*C1*C10*C6 + pi**10*C1*C10*C7)*C8)*C9*L1*L10 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C7)*C8)*C9*L10)*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9*L1 + ((pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6 + pi**10*C10*C3*C7)*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1 + pi**10*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9*L1 + (((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C7)*C8)*C9*L10 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7)*C8)*C9*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6 + (pi**10*C3*C4 + pi**10*C3*C5)*C7)*C8)*C9*L3)*L4 + ((pi**10*C1*C5*C6*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9*L1 + (pi**10*C10*C5*C6*C7 + (pi**10*C10*C5*C6 + pi**10*C10*C5*C7)*C8)*C9*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7)*C8)*C9*L2 + (pi**10*C3*C5*C6*C7 + (pi**10*C3*C5*C6 + pi**10*C3*C5*C7)*C8)*C9*L3 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C3 + pi**10*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (pi**10*C1*C10*C7*C8*C9*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C7*C8*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C7*C8*C9*L10)*L2 + (pi**10*C1*C3*C7*C8*C9*L1 + pi**10*C10*C3*C7*C8*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C7*C8*C9*L2)*L3 + ((pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8*C9*L1 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7*C8*C9*L2 + (pi**10*C3*C4 + pi**10*C3*C5)*C7*C8*C9*L3)*L4 + (pi**10*C1*C5*C7*C8*C9*L1 + pi**10*C10*C5*C7*C8*C9*L10 + pi**10*C3*C5*C7*C8*C9*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7*C8*C9*L2 + (pi**10*C3 + pi**10*C4)*C5*C7*C8*C9*L4)*L5 + (pi**10*C5*C6*C7*C8*C9*L5 + (pi**10*C1*C5 + pi**10*C1*C6)*C7*C8*C9*L1 + (pi**10*C10*C5 + pi**10*C10*C6)*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C6)*C7*C8*C9*L2 + (pi**10*C3*C5 + pi**10*C3*C6)*C7*C8*C9*L3 + ((pi**10*C3 + pi**10*C4)*C5 + (pi**10*C3 + pi**10*C4 + pi**10*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZL - (pi**10*C1*C2*C3*C4*C5*L10*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L10*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L10*L2 + (pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L10*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L10*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L10*L2*L3 + (pi**10*C1*C3*C4*C5*C7*L10*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L10*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L10*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L10*L3)*L4 + (pi**10*C1*C3*C5*C6*C7*L10*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L10*L4)*L5)*L6)*L7 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L10*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8 + pi**10*C1*C2*C3*C5*C9)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9)*L10*L2 + (pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8 + pi**10*C1*C3*C4*C5*C9)*L10*L3)*L4)*L5 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L10*L2*L3 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L10*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L10*L2 + (pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L10*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C7*C8 + pi**10*C1*C2*C3*C7*C9)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9)*L10*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9)*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9)*L10*L2 + (pi**10*C1*C3*C5*C7*C8 + pi**10*C1*C3*C5*C7*C9)*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9)*L10*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9)*L10*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9)*L10*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9)*L10*L4 + (pi**10*C1*C5*C6*C7*C8 + pi**10*C1*C5*C6*C7*C9)*L10*L5)*L6)*L7)*L8 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9*L10*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C9*L10*L2*L3 + (pi**10*C1*C3*C4*C5*C9*L10*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9*L10*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9*L10*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9*L10*L2 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9*L10*L4)*L5)*L6 + (pi**10*C1*C2*C3*C7*C9*L10*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9*L10*L2 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9*L10*L3)*L4 + (pi**10*C1*C3*C5*C7*C9*L10*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9*L10*L4)*L5 + (pi**10*C1*C5*C6*C7*C9*L10*L5 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9*L10*L2 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9*L10*L4)*L6)*L7 + ((pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9*L10*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8)*C9*L10*L2 + (pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8)*C9*L10*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9*L10*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9*L10*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9*L10*L4 + (pi**10*C1*C5*C6*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9*L10*L5)*L6 + (pi**10*C1*C3*C7*C8*C9*L10*L3 + pi**10*C1*C5*C7*C8*C9*L10*L5 + (pi**10*C1*C2 + pi**10*C1*C3)*C7*C8*C9*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8*C9*L10*L4 + (pi**10*C1*C5 + pi**10*C1*C6)*C7*C8*C9*L10*L6)*L7)*L8)*L9)*ZS)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L10*L2*L3*L4 + ((-512*I*pi**9*C1*C10*C2*C3*C4 - 512*I*pi**9*C1*C10*C2*C3*C5 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C9)*L10*L2*L3*L4 + ((-512*I*pi**9*C1*C10*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C5*C9)*L10*L2*L3 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C9 + (-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4)*C5)*L10*L2 + (-512*I*pi**9*C1*C2*C3*C4*C5*L2 + (-512*I*pi**9*C1*C10*C3*C4*C5 - 512*I*pi**9*C1*C3*C4*C5*C9)*L10)*L3)*L4)*L5 + ((-512*I*pi**9*C1*C10*C2*C3*C5 - 512*I*pi**9*C1*C10*C2*C3*C6 - 512*I*pi**9*C1*C10*C2*C3*C7 + (-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6 - 512*I*pi**9*C1*C2*C3*C7)*C9)*L10*L2*L3 + (((-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4)*C5 + (-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C6 + (-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C7 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7)*C9)*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C4*C5 + (-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5)*C6 + (-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5)*C7 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7)*C9)*L10 + (-512*I*pi**9*C1*C2*C3*C4*C5 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C6 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C7)*L2)*L3)*L4 + (((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5*C6 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5*C7 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7)*C9)*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C5*C6 - 512*I*pi**9*C1*C10*C3*C5*C7 + (-512*I*pi**9*C1*C3*C5*C6 - 512*I*pi**9*C1*C3*C5*C7)*C9)*L10 + (-512*I*pi**9*C1*C2*C3*C5*C6 - 512*I*pi**9*C1*C2*C3*C5*C7)*L2)*L3 + (((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5*C6 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5*C7 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7)*C9)*L10 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C7)*L2 + (-512*I*pi**9*C1*C3*C4*C5*C6 - 512*I*pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((-512*I*pi**9*C1*C10*C2*C3*C7 - 512*I*pi**9*C1*C2*C3*C7*C9)*L10*L2*L3 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7*C9 + (-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C7)*L10*L2 + ((-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C7*L2 + ((-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7*C9 + (-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5)*C7)*L10)*L3)*L4 + (((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7*C9 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5*C7)*L10*L2 + (-512*I*pi**9*C1*C2*C3*C5*C7*L2 + (-512*I*pi**9*C1*C10*C3*C5*C7 - 512*I*pi**9*C1*C3*C5*C7*C9)*L10)*L3 + (-512*I*pi**9*C1*C3*C4*C5*C7*L3 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C7*L2 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7*C9 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5*C7)*L10)*L4)*L5 + ((((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7*C9 + ((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C6)*C7)*L10*L2 + ((-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6)*C7*L2 + ((-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7*C9 + (-512*I*pi**9*C1*C10*C3*C5 - 512*I*pi**9*C1*C10*C3*C6)*C7)*L10)*L3 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6)*C7*L2 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6)*C7*L3 + (((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7*C9 + ((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C6)*C7)*L10)*L4 + (-512*I*pi**9*C1*C3*C5*C6*C7*L3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6*C7*L2 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6*C7*L4 + (-512*I*pi**9*C1*C10*C5*C6*C7 - 512*I*pi**9*C1*C5*C6*C7*C9)*L10)*L5)*L6)*L7 + ((-512*I*pi**9*C1*C10*C2*C3*C7 - 512*I*pi**9*C1*C10*C2*C3*C8 + (-512*I*pi**9*C1*C10*C2*C3 - 512*I*pi**9*C1*C2*C3*C7 - 512*I*pi**9*C1*C2*C3*C8)*C9)*L10*L2*L3 + (((-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C7 + (-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C8 + (-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C8)*C9)*L10*L2 + (((-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5)*C7 + (-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5)*C8 + (-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C8)*C9)*L10 + ((-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C7 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C8 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C9)*L2)*L3)*L4 + (((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5*C7 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5*C8 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C8 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C9)*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C5*C7 - 512*I*pi**9*C1*C10*C3*C5*C8 + (-512*I*pi**9*C1*C10*C3*C5 - 512*I*pi**9*C1*C3*C5*C7 - 512*I*pi**9*C1*C3*C5*C8)*C9)*L10 + (-512*I*pi**9*C1*C2*C3*C5*C7 - 512*I*pi**9*C1*C2*C3*C5*C8 - 512*I*pi**9*C1*C2*C3*C5*C9)*L2)*L3 + (((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5*C7 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5*C8 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C8 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5)*C9)*L10 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C7 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C8 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C9)*L2 + (-512*I*pi**9*C1*C3*C4*C5*C7 - 512*I*pi**9*C1*C3*C4*C5*C8 - 512*I*pi**9*C1*C3*C4*C5*C9)*L3)*L4)*L5 + ((((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C6)*C7 + ((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C6 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C7)*C8 + ((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C6 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C7)*C8)*C9)*L10*L2 + (((-512*I*pi**9*C1*C10*C3*C5 - 512*I*pi**9*C1*C10*C3*C6)*C7 + (-512*I*pi**9*C1*C10*C3*C5 - 512*I*pi**9*C1*C10*C3*C6 - 512*I*pi**9*C1*C10*C3*C7)*C8 + (-512*I*pi**9*C1*C10*C3*C5 - 512*I*pi**9*C1*C10*C3*C6 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7 + (-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6 - 512*I*pi**9*C1*C3*C7)*C8)*C9)*L10 + ((-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6)*C7 + (-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6 - 512*I*pi**9*C1*C2*C3*C7)*C8 + (-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6 - 512*I*pi**9*C1*C2*C3*C7)*C9)*L2)*L3 + ((((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C6)*C7 + ((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C6 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C7)*C8 + ((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C6 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 + (-512*I*pi**9*C1*C10 - 512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C7)*C8)*C9)*L10 + (((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6)*C7 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7)*C8 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7)*C9)*L2 + ((-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6)*C7 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7)*C8 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7)*C9)*L3)*L4 + ((-512*I*pi**9*C1*C10*C5*C6*C7 + (-512*I*pi**9*C1*C10*C5*C6 - 512*I*pi**9*C1*C10*C5*C7)*C8 + (-512*I*pi**9*C1*C10*C5*C6 + (-512*I*pi**9*C1*C10*C5 - 512*I*pi**9*C1*C5*C6)*C7 + (-512*I*pi**9*C1*C5*C6 - 512*I*pi**9*C1*C5*C7)*C8)*C9)*L10 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6*C7 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7)*C8 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7)*C9)*L2 + (-512*I*pi**9*C1*C3*C5*C6*C7 + (-512*I*pi**9*C1*C3*C5*C6 - 512*I*pi**9*C1*C3*C5*C7)*C8 + (-512*I*pi**9*C1*C3*C5*C6 - 512*I*pi**9*C1*C3*C5*C7)*C9)*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6*C7 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7)*C8 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7)*C9)*L4)*L5)*L6 + (((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C7*C8 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C7*C8 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C7)*C9)*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C7*C8 + (-512*I*pi**9*C1*C10*C3*C7 - 512*I*pi**9*C1*C3*C7*C8)*C9)*L10 + (-512*I*pi**9*C1*C2*C3*C7*C8 - 512*I*pi**9*C1*C2*C3*C7*C9)*L2)*L3 + (((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C7*C8 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C7*C8 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C7)*C9)*L10 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7*C8 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7*C9)*L2 + ((-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7*C8 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7*C9)*L3)*L4 + ((-512*I*pi**9*C1*C10*C5*C7*C8 + (-512*I*pi**9*C1*C10*C5*C7 - 512*I*pi**9*C1*C5*C7*C8)*C9)*L10 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7*C8 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7*C9)*L2 + (-512*I*pi**9*C1*C3*C5*C7*C8 - 512*I*pi**9*C1*C3*C5*C7*C9)*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7*C8 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7*C9)*L4)*L5 + (((-512*I*pi**9*C1*C10*C5 - 512*I*pi**9*C1*C10*C6)*C7*C8 + ((-512*I*pi**9*C1*C5 - 512*I*pi**9*C1*C6)*C7*C8 + (-512*I*pi**9*C1*C10*C5 - 512*I*pi**9*C1*C10*C6)*C7)*C9)*L10 + (((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7*C8 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7*C9)*L2 + ((-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7*C8 + (-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7*C9)*L3 + (((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7*C8 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7*C9)*L4 + (-512*I*pi**9*C1*C5*C6*C7*C8 - 512*I*pi**9*C1*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + (-512*I*pi**9*C1*C10*C2*C3*C9*L10*L2*L3 + ((-512*I*pi**9*C1*C10*C2*C3 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C4 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5)*C9*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C4 - 512*I*pi**9*C1*C10*C3*C5)*C9*L10 + (-512*I*pi**9*C1*C2*C3*C4 - 512*I*pi**9*C1*C2*C3*C5)*C9*L2)*L3)*L4 + ((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5*C9*L10*L2 + (-512*I*pi**9*C1*C10*C3*C5*C9*L10 - 512*I*pi**9*C1*C2*C3*C5*C9*L2)*L3 + (-512*I*pi**9*C1*C3*C4*C5*C9*L3 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5*C9*L10 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + (((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C5 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C6 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C7)*C9*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C5 - 512*I*pi**9*C1*C10*C3*C6 - 512*I*pi**9*C1*C10*C3*C7)*C9*L10 + (-512*I*pi**9*C1*C2*C3*C5 - 512*I*pi**9*C1*C2*C3*C6 - 512*I*pi**9*C1*C2*C3*C7)*C9*L2)*L3 + (((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4)*C5 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C6 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C7)*C9*L10 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4)*C5 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C6 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7)*C9*L2 + (-512*I*pi**9*C1*C3*C4*C5 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C6 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7)*C9*L3)*L4 + ((-512*I*pi**9*C1*C10*C5*C6 - 512*I*pi**9*C1*C10*C5*C7)*C9*L10 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7)*C9*L2 + (-512*I*pi**9*C1*C3*C5*C6 - 512*I*pi**9*C1*C3*C5*C7)*C9*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + ((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C7*C9*L10*L2 + (-512*I*pi**9*C1*C10*C3*C7*C9*L10 - 512*I*pi**9*C1*C2*C3*C7*C9*L2)*L3 + ((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C7*C9*L10 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7*C9*L2 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7*C9*L3)*L4 + (-512*I*pi**9*C1*C10*C5*C7*C9*L10 - 512*I*pi**9*C1*C3*C5*C7*C9*L3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7*C9*L2 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7*C9*L4)*L5 + (-512*I*pi**9*C1*C5*C6*C7*C9*L5 + (-512*I*pi**9*C1*C10*C5 - 512*I*pi**9*C1*C10*C6)*C7*C9*L10 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7*C9*L2 + (-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7*C9*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + (((-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C7 + (-512*I*pi**9*C1*C10*C2 - 512*I*pi**9*C1*C10*C3)*C8)*C9*L10*L2 + ((-512*I*pi**9*C1*C10*C3*C7 - 512*I*pi**9*C1*C10*C3*C8)*C9*L10 + (-512*I*pi**9*C1*C2*C3*C7 - 512*I*pi**9*C1*C2*C3*C8)*C9*L2)*L3 + (((-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C7 + (-512*I*pi**9*C1*C10*C3 - 512*I*pi**9*C1*C10*C4 - 512*I*pi**9*C1*C10*C5)*C8)*C9*L10 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C7 + (-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5)*C8)*C9*L2 + ((-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C7 + (-512*I*pi**9*C1*C3*C4 - 512*I*pi**9*C1*C3*C5)*C8)*C9*L3)*L4 + ((-512*I*pi**9*C1*C10*C5*C7 - 512*I*pi**9*C1*C10*C5*C8)*C9*L10 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C7 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5*C8)*C9*L2 + (-512*I*pi**9*C1*C3*C5*C7 - 512*I*pi**9*C1*C3*C5*C8)*C9*L3 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C7 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5*C8)*C9*L4)*L5 + (((-512*I*pi**9*C1*C10*C5 - 512*I*pi**9*C1*C10*C6)*C7 + (-512*I*pi**9*C1*C10*C5 - 512*I*pi**9*C1*C10*C6 - 512*I*pi**9*C1*C10*C7)*C8)*C9*L10 + (((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6)*C7 + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C6 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C7)*C8)*C9*L2 + ((-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6)*C7 + (-512*I*pi**9*C1*C3*C5 - 512*I*pi**9*C1*C3*C6 - 512*I*pi**9*C1*C3*C7)*C8)*C9*L3 + (((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6)*C7 + ((-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4)*C5 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C6 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C7)*C8)*C9*L4 + (-512*I*pi**9*C1*C5*C6*C7 + (-512*I*pi**9*C1*C5*C6 - 512*I*pi**9*C1*C5*C7)*C8)*C9*L5)*L6 + (-512*I*pi**9*C1*C10*C7*C8*C9*L10 - 512*I*pi**9*C1*C3*C7*C8*C9*L3 - 512*I*pi**9*C1*C5*C7*C8*C9*L5 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C1*C3)*C7*C8*C9*L2 + (-512*I*pi**9*C1*C3 - 512*I*pi**9*C1*C4 - 512*I*pi**9*C1*C5)*C7*C8*C9*L4 + (-512*I*pi**9*C1*C5 - 512*I*pi**9*C1*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZL*ZS + (512*I*pi**9*C1*C2*C3*C5*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L10*L2 + (512*I*pi**9*C1*C3*C4*C5*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L10*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*L1*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7)*L10*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7)*L10*L2 + (512*I*pi**9*C3*C4*C5*C6 + 512*I*pi**9*C3*C4*C5*C7)*L10*L3)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7*L10*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*L1*L10*L2 + (512*I*pi**9*C1*C3*C5*C7*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7*L10*L2)*L3 + (512*I*pi**9*C3*C4*C5*C7*L10*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7*L10*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7*L10*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7*L10*L3)*L4 + (512*I*pi**9*C1*C5*C6*C7*L1*L10 + 512*I*pi**9*C3*C5*C6*C7*L10*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7*L10*L4)*L5)*L6)*L7 + ((512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8 + 512*I*pi**9*C1*C2*C3*C9)*L1*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C9)*L1*L10*L2 + (((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C9)*L10*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C9)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8 + 512*I*pi**9*C1*C3*C5*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C9)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C9)*L10*L2 + (512*I*pi**9*C3*C4*C5*C7 + 512*I*pi**9*C3*C4*C5*C8 + 512*I*pi**9*C3*C4*C5*C9)*L10*L3)*L4)*L5 + ((((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C9)*L1*L10*L2 + (((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C9)*L10*L2)*L3 + ((((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C9)*L1*L10 + ((((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C8 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C9)*L10*L2 + ((512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C8 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C9)*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C6*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C9)*L10*L2 + (512*I*pi**9*C3*C5*C6*C7 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C8 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C9)*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C8 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C9)*L10*L4)*L5)*L6 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C9)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C7*C8 + 512*I*pi**9*C1*C3*C7*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C9)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C9)*L10*L2 + ((512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C8 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C9)*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C7*C8 + 512*I*pi**9*C1*C5*C7*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C9)*L10*L2 + (512*I*pi**9*C3*C5*C7*C8 + 512*I*pi**9*C3*C5*C7*C9)*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C8 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C9)*L10*L4)*L5 + (((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C9)*L10*L2 + ((512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C8 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C9)*L10*L3 + (((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C8 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C9)*L10*L4 + (512*I*pi**9*C5*C6*C7*C8 + 512*I*pi**9*C5*C6*C7*C9)*L10*L5)*L6)*L7)*L8 + (512*I*pi**9*C1*C2*C3*C9*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C9*L10*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C9*L1*L10*L2 + (512*I*pi**9*C1*C3*C5*C9*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C9*L10*L2)*L3 + (512*I*pi**9*C3*C4*C5*C9*L10*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C9*L10*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C9*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C9*L10*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C9*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C9*L10*L2 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C9*L10*L4)*L5)*L6 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C9*L1*L10*L2 + (512*I*pi**9*C1*C3*C7*C9*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C9*L10*L2)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C9*L10*L2 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C9*L10*L3)*L4 + (512*I*pi**9*C1*C5*C7*C9*L1*L10 + 512*I*pi**9*C3*C5*C7*C9*L10*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C9*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C9*L10*L4)*L5 + (512*I*pi**9*C5*C6*C7*C9*L10*L5 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C9*L10*L2 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C9*L10*L4)*L6)*L7 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C8)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C7 + 512*I*pi**9*C1*C3*C8)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C8)*C9*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C8)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C8)*C9*L10*L2 + ((512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C8)*C9*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C7 + 512*I*pi**9*C1*C5*C8)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C8)*C9*L10*L2 + (512*I*pi**9*C3*C5*C7 + 512*I*pi**9*C3*C5*C8)*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C8)*C9*L10*L4)*L5 + (((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6 + 512*I*pi**9*C1*C7)*C8)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C7)*C8)*C9*L10*L2 + ((512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6 + 512*I*pi**9*C3*C7)*C8)*C9*L10*L3 + (((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C7)*C8)*C9*L10*L4 + (512*I*pi**9*C5*C6*C7 + (512*I*pi**9*C5*C6 + 512*I*pi**9*C5*C7)*C8)*C9*L10*L5)*L6 + (512*I*pi**9*C1*C7*C8*C9*L1*L10 + 512*I*pi**9*C3*C7*C8*C9*L10*L3 + 512*I*pi**9*C5*C7*C8*C9*L10*L5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C7*C8*C9*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C7*C8*C9*L10*L4 + (512*I*pi**9*C5 + 512*I*pi**9*C6)*C7*C8*C9*L10*L6)*L7)*L8)*L9)*freq**9 + 256*(((pi**8*C1*C10*C2*C3 + pi**8*C1*C2*C3*C9)*L1*L10*L2*L3 + ((pi**8*C1*C10*C2*C3 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C4 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C4 + pi**8*C1*C10*C3*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9)*L10)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C9 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5)*L1*L10*L2 + ((pi**8*C1*C10*C3*C5 + pi**8*C1*C3*C5*C9)*L1*L10 + (pi**8*C1*C2*C3*C5*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C5)*L10)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C9 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4)*C5)*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4)*C5)*L10)*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2 + (pi**8*C10*C3*C4*C5 + pi**8*C3*C4*C5*C9)*L10)*L3)*L4)*L5 + (((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C6 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C5 + pi**8*C1*C10*C3*C6 + pi**8*C1*C10*C3*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10*C3 + pi**8*C1*C10*C4)*C5 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C6 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L1*L10 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4)*C5 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L1 + (pi**8*C10*C3*C4*C5 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C6 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + ((pi**8*C1*C10*C5*C6 + pi**8*C1*C10*C5*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L1 + (pi**8*C10*C3*C5*C6 + pi**8*C10*C3*C5*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5*C6 + (pi**8*C1 + pi**8*C2)*C3*C5*C7)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5*C6 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7)*L2 + (pi**8*C3*C4*C5*C6 + pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C9 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7)*L1*L10*L2 + ((pi**8*C1*C10*C3*C7 + pi**8*C1*C3*C7*C9)*L1*L10 + (pi**8*C1*C2*C3*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C7*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C7)*L10)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7)*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7)*L10)*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7*C9 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7)*L10)*L3)*L4 + ((pi**8*C1*C10*C5*C7 + pi**8*C1*C5*C7*C9)*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7)*L10)*L2 + (pi**8*C1*C3*C5*C7*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C7*L2 + (pi**8*C10*C3*C5*C7 + pi**8*C3*C5*C7*C9)*L10)*L3 + (pi**8*C3*C4*C5*C7*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7*L2 + ((pi**8*C3 + pi**8*C4)*C5*C7*C9 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C7)*L10)*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7*C9 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6)*C7)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6)*C7)*L10)*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7*C9 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6)*C7)*L10)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6)*C7)*L10)*L4 + (pi**8*C1*C5*C6*C7*L1 + pi**8*C3*C5*C6*C7*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7*L2 + (pi**8*C3 + pi**8*C4)*C5*C6*C7*L4 + (pi**8*C10*C5*C6*C7 + pi**8*C5*C6*C7*C9)*L10)*L5)*L6)*L7 + (((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C8 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C7 + pi**8*C1*C10*C3*C8 + (pi**8*C1*C10*C3 + pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8 + pi**8*C1*C2*C3*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C8 + ((pi**8*C1 + pi**8*C2)*C3*C7 + (pi**8*C1 + pi**8*C2)*C3*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C8 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9)*L1*L10 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C8)*C9)*L10)*L2 + (((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L1 + ((pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C8 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C7 + (pi**8*C3*C4 + pi**8*C3*C5)*C8)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C8 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9)*L2)*L3)*L4 + ((pi**8*C1*C10*C5*C7 + pi**8*C1*C10*C5*C8 + (pi**8*C1*C10*C5 + pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C8 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C9)*L10)*L2 + ((pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8 + pi**8*C1*C3*C5*C9)*L1 + (pi**8*C10*C3*C5*C7 + pi**8*C10*C3*C5*C8 + (pi**8*C10*C3*C5 + pi**8*C3*C5*C7 + pi**8*C3*C5*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5*C7 + (pi**8*C1 + pi**8*C2)*C3*C5*C8 + (pi**8*C1 + pi**8*C2)*C3*C5*C9)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5*C7 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C8 + ((pi**8*C3 + pi**8*C4)*C5*C7 + (pi**8*C3 + pi**8*C4)*C5*C8 + (pi**8*C10*C3 + pi**8*C10*C4)*C5)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C8 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9)*L2 + (pi**8*C3*C4*C5*C7 + pi**8*C3*C4*C5*C8 + pi**8*C3*C4*C5*C9)*L3)*L4)*L5 + (((pi**8*C1*C10*C5 + pi**8*C1*C10*C6)*C7 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + pi**8*C1*C10*C7)*C8 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + (pi**8*C1*C10 + pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9)*L1*L10 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7)*C8)*C9)*L10)*L2 + (((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L1 + ((pi**8*C10*C3*C5 + pi**8*C10*C3*C6)*C7 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + pi**8*C10*C3*C7)*C8 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + (pi**8*C10*C3 + pi**8*C3*C5 + pi**8*C3*C6)*C7 + (pi**8*C3*C5 + pi**8*C3*C6 + pi**8*C3*C7)*C8)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C8 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9)*L2)*L3 + ((((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L1 + (((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6)*C7 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C8 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + (pi**8*C10 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7)*C8)*C9)*L10 + ((((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C8 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9)*L2 + ((pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C8 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9)*L3)*L4 + ((pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L1 + (pi**8*C10*C5*C6*C7 + (pi**8*C10*C5*C6 + pi**8*C10*C5*C7)*C8 + (pi**8*C10*C5*C6 + (pi**8*C10*C5 + pi**8*C5*C6)*C7 + (pi**8*C5*C6 + pi**8*C5*C7)*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9)*L2 + (pi**8*C3*C5*C6*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C8 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C8 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9)*L4)*L5)*L6 + ((pi**8*C1*C10*C7*C8 + (pi**8*C1*C10*C7 + pi**8*C1*C7*C8)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C7*C8 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C7*C8 + pi**8*C1*C3*C7*C9)*L1 + (pi**8*C10*C3*C7*C8 + (pi**8*C10*C3*C7 + pi**8*C3*C7*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C7*C8 + (pi**8*C1 + pi**8*C2)*C3*C7*C9)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7*C8 + ((pi**8*C3 + pi**8*C4 + pi**8*C5)*C7*C8 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C8 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9)*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7*C8 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C9)*L3)*L4 + ((pi**8*C1*C5*C7*C8 + pi**8*C1*C5*C7*C9)*L1 + (pi**8*C10*C5*C7*C8 + (pi**8*C10*C5*C7 + pi**8*C5*C7*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C8 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9)*L2 + (pi**8*C3*C5*C7*C8 + pi**8*C3*C5*C7*C9)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C7*C8 + (pi**8*C3 + pi**8*C4)*C5*C7*C9)*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7*C8 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9)*L1 + ((pi**8*C10*C5 + pi**8*C10*C6)*C7*C8 + ((pi**8*C5 + pi**8*C6)*C7*C8 + (pi**8*C10*C5 + pi**8*C10*C6)*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9)*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7*C8 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C9)*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C8 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9)*L4 + (pi**8*C5*C6*C7*C8 + pi**8*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + ((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C9*L1*L10*L2 + (pi**8*C1*C10*C3*C9*L1*L10 + (pi**8*C1*C2*C3*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C9*L10)*L2)*L3 + ((pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C9*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C9*L10)*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9*L1 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9*L2)*L3)*L4 + (pi**8*C1*C10*C5*C9*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C9*L10)*L2 + (pi**8*C1*C3*C5*C9*L1 + pi**8*C10*C3*C5*C9*L10 + (pi**8*C1 + pi**8*C2)*C3*C5*C9*L2)*L3 + (pi**8*C3*C4*C5*C9*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9*L1 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9*L2)*L4)*L5 + ((pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + pi**8*C1*C10*C7)*C9*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C9*L10)*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9*L1 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + pi**8*C10*C3*C7)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C9*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9*L3)*L4 + ((pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9*L1 + (pi**8*C10*C5*C6 + pi**8*C10*C5*C7)*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9*L2 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9*L4)*L5)*L6 + (pi**8*C1*C10*C7*C9*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7*C9*L10)*L2 + (pi**8*C1*C3*C7*C9*L1 + pi**8*C10*C3*C7*C9*L10 + (pi**8*C1 + pi**8*C2)*C3*C7*C9*L2)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9*L1 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9*L2 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C9*L3)*L4 + (pi**8*C1*C5*C7*C9*L1 + pi**8*C10*C5*C7*C9*L10 + pi**8*C3*C5*C7*C9*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9*L2 + (pi**8*C3 + pi**8*C4)*C5*C7*C9*L4)*L5 + (pi**8*C5*C6*C7*C9*L5 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9*L1 + (pi**8*C10*C5 + pi**8*C10*C6)*C7*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9*L2 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9*L4)*L6)*L7 + ((pi**8*C1*C10*C7 + pi**8*C1*C10*C8)*C9*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C8)*C9*L10)*L2 + ((pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9*L1 + (pi**8*C10*C3*C7 + pi**8*C10*C3*C8)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C7 + (pi**8*C1 + pi**8*C2)*C3*C8)*C9*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9*L1 + ((pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C8)*C9*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C8)*C9*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7 + (pi**8*C3*C4 + pi**8*C3*C5)*C8)*C9*L3)*L4 + ((pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9*L1 + (pi**8*C10*C5*C7 + pi**8*C10*C5*C8)*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C8)*C9*L2 + (pi**8*C3*C5*C7 + pi**8*C3*C5*C8)*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5*C7 + (pi**8*C3 + pi**8*C4)*C5*C8)*C9*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9*L1 + ((pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C5 + pi**8*C10*C6 + pi**8*C10*C7)*C8)*C9*L10 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7)*C8)*C9*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7 + (pi**8*C3*C5 + pi**8*C3*C6 + pi**8*C3*C7)*C8)*C9*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7)*C8)*C9*L4 + (pi**8*C5*C6*C7 + (pi**8*C5*C6 + pi**8*C5*C7)*C8)*C9*L5)*L6 + (pi**8*C1*C7*C8*C9*L1 + pi**8*C10*C7*C8*C9*L10 + pi**8*C3*C7*C8*C9*L3 + pi**8*C5*C7*C8*C9*L5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7*C8*C9*L2 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7*C8*C9*L4 + (pi**8*C5 + pi**8*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZL - ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L10*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L10*L2*L3 + (pi**8*C1*C3*C4*C5*L10*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L10*L2)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L10*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L10*L2 + (pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L10*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L10*L2 + (pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L10*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L10*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L10*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L10*L3)*L4 + (pi**8*C1*C3*C5*C7*L10*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L10*L4)*L5 + (pi**8*C1*C5*C6*C7*L10*L5 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L10*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L10*L4)*L6)*L7 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8 + pi**8*C1*C2*C3*C9)*L10*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L10*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L10*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9)*L10*L2 + (pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8 + pi**8*C1*C3*C5*C9)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9)*L10*L4)*L5 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L10*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L10*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L10*L4 + (pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L10*L5)*L6 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9)*L10*L2 + (pi**8*C1*C3*C7*C8 + pi**8*C1*C3*C7*C9)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9)*L10*L4 + (pi**8*C1*C5*C7*C8 + pi**8*C1*C5*C7*C9)*L10*L5 + ((pi**8*C1*C5 + pi**8*C1*C6)*C7*C8 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9)*L10*L6)*L7)*L8 + (pi**8*C1*C2*C3*C9*L10*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9*L10*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9*L10*L3)*L4 + (pi**8*C1*C3*C5*C9*L10*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9*L10*L4)*L5 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9*L10*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9*L10*L4 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9*L10*L5)*L6 + (pi**8*C1*C3*C7*C9*L10*L3 + pi**8*C1*C5*C7*C9*L10*L5 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9*L10*L4 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9*L10*L6)*L7 + (pi**8*C1*C7*C8*C9*L10*L7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9*L10*L2 + (pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9*L10*L4 + (pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9*L10*L5 + ((pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9*L10*L6)*L8)*L9)*ZS)*freq**8 + (-128*I*pi**7*C1*C2*C3*L1*L10*L2*L3 + ((128*I*pi**7*C1*C10*C2*C3 + 128*I*pi**7*C1*C2*C3*C9)*L10*L2*L3 + ((128*I*pi**7*C1*C10*C2*C3 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C4 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C5 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C9)*L10*L2 + ((128*I*pi**7*C1*C10*C3*C4 + 128*I*pi**7*C1*C10*C3*C5 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C9)*L10 + (128*I*pi**7*C1*C2*C3*C4 + 128*I*pi**7*C1*C2*C3*C5)*L2)*L3)*L4 + (((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C9 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C5)*L10*L2 + (128*I*pi**7*C1*C2*C3*C5*L2 + (128*I*pi**7*C1*C10*C3*C5 + 128*I*pi**7*C1*C3*C5*C9)*L10)*L3 + (128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L2 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C9 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4)*C5)*L10)*L4)*L5 + (((128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C5 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C6 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C7 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7)*C9)*L10*L2 + ((128*I*pi**7*C1*C10*C3*C5 + 128*I*pi**7*C1*C10*C3*C6 + 128*I*pi**7*C1*C10*C3*C7 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6 + 128*I*pi**7*C1*C3*C7)*C9)*L10 + (128*I*pi**7*C1*C2*C3*C5 + 128*I*pi**7*C1*C2*C3*C6 + 128*I*pi**7*C1*C2*C3*C7)*L2)*L3 + (((128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4)*C5 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5)*C6 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5)*C7 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7)*C9)*L10 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C6 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C7)*L2 + (128*I*pi**7*C1*C3*C4*C5 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C6 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C7)*L3)*L4 + ((128*I*pi**7*C1*C10*C5*C6 + 128*I*pi**7*C1*C10*C5*C7 + (128*I*pi**7*C1*C5*C6 + 128*I*pi**7*C1*C5*C7)*C9)*L10 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C7)*L2 + (128*I*pi**7*C1*C3*C5*C6 + 128*I*pi**7*C1*C3*C5*C7)*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7*C9 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C7)*L10*L2 + (128*I*pi**7*C1*C2*C3*C7*L2 + (128*I*pi**7*C1*C10*C3*C7 + 128*I*pi**7*C1*C3*C7*C9)*L10)*L3 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C7*L2 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C7*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7*C9 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5)*C7)*L10)*L4 + (128*I*pi**7*C1*C3*C5*C7*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C7*L2 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C7*L4 + (128*I*pi**7*C1*C10*C5*C7 + 128*I*pi**7*C1*C5*C7*C9)*L10)*L5 + (128*I*pi**7*C1*C5*C6*C7*L5 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6)*C7*L2 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6)*C7*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6)*C7*L4 + ((128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7*C9 + (128*I*pi**7*C1*C10*C5 + 128*I*pi**7*C1*C10*C6)*C7)*L10)*L6)*L7 + (((128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C7 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C8 + (128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C8)*C9)*L10*L2 + ((128*I*pi**7*C1*C10*C3*C7 + 128*I*pi**7*C1*C10*C3*C8 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C3*C7 + 128*I*pi**7*C1*C3*C8)*C9)*L10 + (128*I*pi**7*C1*C2*C3*C7 + 128*I*pi**7*C1*C2*C3*C8 + 128*I*pi**7*C1*C2*C3*C9)*L2)*L3 + (((128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5)*C7 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5)*C8 + (128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C8)*C9)*L10 + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C7 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C8 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C9)*L2 + ((128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C7 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C8 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C9)*L3)*L4 + ((128*I*pi**7*C1*C10*C5*C7 + 128*I*pi**7*C1*C10*C5*C8 + (128*I*pi**7*C1*C10*C5 + 128*I*pi**7*C1*C5*C7 + 128*I*pi**7*C1*C5*C8)*C9)*L10 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C7 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C8 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C9)*L2 + (128*I*pi**7*C1*C3*C5*C7 + 128*I*pi**7*C1*C3*C5*C8 + 128*I*pi**7*C1*C3*C5*C9)*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C7 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C8 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C9)*L4)*L5 + (((128*I*pi**7*C1*C10*C5 + 128*I*pi**7*C1*C10*C6)*C7 + (128*I*pi**7*C1*C10*C5 + 128*I*pi**7*C1*C10*C6 + 128*I*pi**7*C1*C10*C7)*C8 + (128*I*pi**7*C1*C10*C5 + 128*I*pi**7*C1*C10*C6 + (128*I*pi**7*C1*C10 + 128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7 + (128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6 + 128*I*pi**7*C1*C7)*C8)*C9)*L10 + (((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6)*C7 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7)*C8 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7)*C9)*L2 + ((128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6)*C7 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6 + 128*I*pi**7*C1*C3*C7)*C8 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6 + 128*I*pi**7*C1*C3*C7)*C9)*L3 + (((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6)*C7 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7)*C8 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7)*C9)*L4 + (128*I*pi**7*C1*C5*C6*C7 + (128*I*pi**7*C1*C5*C6 + 128*I*pi**7*C1*C5*C7)*C8 + (128*I*pi**7*C1*C5*C6 + 128*I*pi**7*C1*C5*C7)*C9)*L5)*L6 + ((128*I*pi**7*C1*C10*C7*C8 + (128*I*pi**7*C1*C10*C7 + 128*I*pi**7*C1*C7*C8)*C9)*L10 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7*C8 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7*C9)*L2 + (128*I*pi**7*C1*C3*C7*C8 + 128*I*pi**7*C1*C3*C7*C9)*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7*C8 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7*C9)*L4 + (128*I*pi**7*C1*C5*C7*C8 + 128*I*pi**7*C1*C5*C7*C9)*L5 + ((128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7*C8 + (128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7*C9)*L6)*L7)*L8 + ((128*I*pi**7*C1*C10*C2 + 128*I*pi**7*C1*C10*C3)*C9*L10*L2 + (128*I*pi**7*C1*C10*C3*C9*L10 + 128*I*pi**7*C1*C2*C3*C9*L2)*L3 + ((128*I*pi**7*C1*C10*C3 + 128*I*pi**7*C1*C10*C4 + 128*I*pi**7*C1*C10*C5)*C9*L10 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5)*C9*L2 + (128*I*pi**7*C1*C3*C4 + 128*I*pi**7*C1*C3*C5)*C9*L3)*L4 + (128*I*pi**7*C1*C10*C5*C9*L10 + 128*I*pi**7*C1*C3*C5*C9*L3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5*C9*L2 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*C9*L4)*L5 + ((128*I*pi**7*C1*C10*C5 + 128*I*pi**7*C1*C10*C6 + 128*I*pi**7*C1*C10*C7)*C9*L10 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C6 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7)*C9*L2 + (128*I*pi**7*C1*C3*C5 + 128*I*pi**7*C1*C3*C6 + 128*I*pi**7*C1*C3*C7)*C9*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C6 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7)*C9*L4 + (128*I*pi**7*C1*C5*C6 + 128*I*pi**7*C1*C5*C7)*C9*L5)*L6 + (128*I*pi**7*C1*C10*C7*C9*L10 + 128*I*pi**7*C1*C3*C7*C9*L3 + 128*I*pi**7*C1*C5*C7*C9*L5 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7*C9*L2 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7*C9*L4 + (128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7*C9*L6)*L7 + (128*I*pi**7*C1*C7*C8*C9*L7 + (128*I*pi**7*C1*C10*C7 + 128*I*pi**7*C1*C10*C8)*C9*L10 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C7 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C8)*C9*L2 + (128*I*pi**7*C1*C3*C7 + 128*I*pi**7*C1*C3*C8)*C9*L3 + ((128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C7 + (128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4 + 128*I*pi**7*C1*C5)*C8)*C9*L4 + (128*I*pi**7*C1*C5*C7 + 128*I*pi**7*C1*C5*C8)*C9*L5 + ((128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6)*C7 + (128*I*pi**7*C1*C5 + 128*I*pi**7*C1*C6 + 128*I*pi**7*C1*C7)*C8)*C9*L6)*L8)*L9)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L10*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L10*L2 + (-128*I*pi**7*C1*C3*C5*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L10*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L10*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L10*L2)*L4)*L5 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7)*L10*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7)*L10*L2 + (-128*I*pi**7*C3*C4*C5 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C6 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7)*L10*L3)*L4 + ((-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7)*L10*L2 + (-128*I*pi**7*C3*C5*C6 - 128*I*pi**7*C3*C5*C7)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7)*L10*L4)*L5)*L6 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*L1*L10*L2 + (-128*I*pi**7*C1*C3*C7*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7*L10*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7*L10*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7*L10*L3)*L4 + (-128*I*pi**7*C1*C5*C7*L1*L10 - 128*I*pi**7*C3*C5*C7*L10*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7*L10*L4)*L5 + (-128*I*pi**7*C5*C6*C7*L10*L5 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7*L10*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7*L10*L4)*L6)*L7 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C9)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8 - 128*I*pi**7*C1*C3*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C9)*L10*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C9)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C8 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C9)*L10*L2 + ((-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C8 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C9)*L10*L3)*L4 + ((-128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8 - 128*I*pi**7*C1*C5*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C9)*L10*L2 + (-128*I*pi**7*C3*C5*C7 - 128*I*pi**7*C3*C5*C8 - 128*I*pi**7*C3*C5*C9)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C8 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C9)*L10*L4)*L5 + (((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C9)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C8 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C9)*L10*L2 + ((-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C8 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C9)*L10*L3 + (((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C8 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C9)*L10*L4 + (-128*I*pi**7*C5*C6*C7 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C8 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C9)*L10*L5)*L6 + ((-128*I*pi**7*C1*C7*C8 - 128*I*pi**7*C1*C7*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C9)*L10*L2 + (-128*I*pi**7*C3*C7*C8 - 128*I*pi**7*C3*C7*C9)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C8 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C9)*L10*L4 + (-128*I*pi**7*C5*C7*C8 - 128*I*pi**7*C5*C7*C9)*L10*L5 + ((-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C8 + (-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C9)*L10*L6)*L7)*L8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C9*L1*L10*L2 + (-128*I*pi**7*C1*C3*C9*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C9*L10*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C9*L10*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C9*L10*L3)*L4 + (-128*I*pi**7*C1*C5*C9*L1*L10 - 128*I*pi**7*C3*C5*C9*L10*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C9*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C9*L10*L4)*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C9*L10*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C9*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C9*L10*L4 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C9*L10*L5)*L6 + (-128*I*pi**7*C1*C7*C9*L1*L10 - 128*I*pi**7*C3*C7*C9*L10*L3 - 128*I*pi**7*C5*C7*C9*L10*L5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C9*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C9*L10*L4 + (-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C9*L10*L6)*L7 + (-128*I*pi**7*C7*C8*C9*L10*L7 + (-128*I*pi**7*C1*C7 - 128*I*pi**7*C1*C8)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C8)*C9*L10*L2 + (-128*I*pi**7*C3*C7 - 128*I*pi**7*C3*C8)*C9*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C8)*C9*L10*L4 + (-128*I*pi**7*C5*C7 - 128*I*pi**7*C5*C8)*C9*L10*L5 + ((-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7 + (-128*I*pi**7*C5 - 128*I*pi**7*C6 - 128*I*pi**7*C7)*C8)*C9*L10*L6)*L8)*L9)*freq**7 - 64*(((pi**6*C1*C10*C2 + pi**6*C1*C10*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L1*L10*L2 + ((pi**6*C1*C10*C3 + pi**6*C1*C3*C9)*L1*L10 + (pi**6*C1*C2*C3*L1 + ((pi**6*C1 + pi**6*C2)*C3*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C3)*L10)*L2)*L3 + ((pi**6*C1*C10*C3 + pi**6*C1*C10*C4 + pi**6*C1*C10*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L1*L10 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9)*L10)*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + (pi**6*C10*C3*C4 + pi**6*C10*C3*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C10*C5 + pi**6*C1*C5*C9)*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5)*L10)*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2 + (pi**6*C10*C3*C5 + pi**6*C3*C5*C9)*L10)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2 + ((pi**6*C3 + pi**6*C4)*C5*C9 + (pi**6*C10*C3 + pi**6*C10*C4)*C5)*L10)*L4)*L5 + ((pi**6*C1*C10*C5 + pi**6*C1*C10*C6 + pi**6*C1*C10*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L1*L10 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C6 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9)*L10)*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L1 + (pi**6*C10*C3*C5 + pi**6*C10*C3*C6 + pi**6*C10*C3*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6 + (pi**6*C1 + pi**6*C2)*C3*C7)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L1 + ((pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9)*L10 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6 + (pi**6*C3*C4 + pi**6*C3*C5)*C7)*L3)*L4 + ((pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L1 + (pi**6*C10*C5*C6 + pi**6*C10*C5*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7)*L2 + (pi**6*C3*C5*C6 + pi**6*C3*C5*C7)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C6 + (pi**6*C3 + pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((pi**6*C1*C10*C7 + pi**6*C1*C7*C9)*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7)*L10)*L2 + (pi**6*C1*C3*C7*L1 + (pi**6*C1 + pi**6*C2)*C3*C7*L2 + (pi**6*C10*C3*C7 + pi**6*C3*C7*C9)*L10)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C7*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7)*L10)*L4 + (pi**6*C1*C5*C7*L1 + pi**6*C3*C5*C7*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7*L2 + (pi**6*C3 + pi**6*C4)*C5*C7*L4 + (pi**6*C10*C5*C7 + pi**6*C5*C7*C9)*L10)*L5 + (pi**6*C5*C6*C7*L5 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7*L2 + (pi**6*C3*C5 + pi**6*C3*C6)*C7*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7*L4 + ((pi**6*C5 + pi**6*C6)*C7*C9 + (pi**6*C10*C5 + pi**6*C10*C6)*C7)*L10)*L6)*L7 + ((pi**6*C1*C10*C7 + pi**6*C1*C10*C8 + (pi**6*C1*C10 + pi**6*C1*C7 + pi**6*C1*C8)*C9)*L1*L10 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C8 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C8)*C9)*L10)*L2 + ((pi**6*C1*C3*C7 + pi**6*C1*C3*C8 + pi**6*C1*C3*C9)*L1 + (pi**6*C10*C3*C7 + pi**6*C10*C3*C8 + (pi**6*C10*C3 + pi**6*C3*C7 + pi**6*C3*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C7 + (pi**6*C1 + pi**6*C2)*C3*C8 + (pi**6*C1 + pi**6*C2)*C3*C9)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L1 + ((pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C8 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C8)*C9)*L10 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C8 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9)*L2 + ((pi**6*C3*C4 + pi**6*C3*C5)*C7 + (pi**6*C3*C4 + pi**6*C3*C5)*C8 + (pi**6*C3*C4 + pi**6*C3*C5)*C9)*L3)*L4 + ((pi**6*C1*C5*C7 + pi**6*C1*C5*C8 + pi**6*C1*C5*C9)*L1 + (pi**6*C10*C5*C7 + pi**6*C10*C5*C8 + (pi**6*C10*C5 + pi**6*C5*C7 + pi**6*C5*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C8 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9)*L2 + (pi**6*C3*C5*C7 + pi**6*C3*C5*C8 + pi**6*C3*C5*C9)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C7 + (pi**6*C3 + pi**6*C4)*C5*C8 + (pi**6*C3 + pi**6*C4)*C5*C9)*L4)*L5 + (((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L1 + ((pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C5 + pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C5 + pi**6*C10*C6 + (pi**6*C10 + pi**6*C5 + pi**6*C6)*C7 + (pi**6*C5 + pi**6*C6 + pi**6*C7)*C8)*C9)*L10 + (((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C8 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9)*L2 + ((pi**6*C3*C5 + pi**6*C3*C6)*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C8 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9)*L3 + (((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C8 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9)*L4 + (pi**6*C5*C6*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C8 + (pi**6*C5*C6 + pi**6*C5*C7)*C9)*L5)*L6 + ((pi**6*C1*C7*C8 + pi**6*C1*C7*C9)*L1 + (pi**6*C10*C7*C8 + (pi**6*C10*C7 + pi**6*C7*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C8 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9)*L2 + (pi**6*C3*C7*C8 + pi**6*C3*C7*C9)*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C8 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9)*L4 + (pi**6*C5*C7*C8 + pi**6*C5*C7*C9)*L5 + ((pi**6*C5 + pi**6*C6)*C7*C8 + (pi**6*C5 + pi**6*C6)*C7*C9)*L6)*L7)*L8 + (pi**6*C1*C10*C9*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C9*L1 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C9*L10)*L2 + (pi**6*C1*C3*C9*L1 + pi**6*C10*C3*C9*L10 + (pi**6*C1 + pi**6*C2)*C3*C9*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9*L1 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C9*L10 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C9*L3)*L4 + (pi**6*C1*C5*C9*L1 + pi**6*C10*C5*C9*L10 + pi**6*C3*C5*C9*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9*L2 + (pi**6*C3 + pi**6*C4)*C5*C9*L4)*L5 + ((pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9*L1 + (pi**6*C10*C5 + pi**6*C10*C6 + pi**6*C10*C7)*C9*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9*L2 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9*L4 + (pi**6*C5*C6 + pi**6*C5*C7)*C9*L5)*L6 + (pi**6*C1*C7*C9*L1 + pi**6*C10*C7*C9*L10 + pi**6*C3*C7*C9*L3 + pi**6*C5*C7*C9*L5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9*L2 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9*L4 + (pi**6*C5 + pi**6*C6)*C7*C9*L6)*L7 + (pi**6*C7*C8*C9*L7 + (pi**6*C1*C7 + pi**6*C1*C8)*C9*L1 + (pi**6*C10*C7 + pi**6*C10*C8)*C9*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C8)*C9*L2 + (pi**6*C3*C7 + pi**6*C3*C8)*C9*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C8)*C9*L4 + (pi**6*C5*C7 + pi**6*C5*C8)*C9*L5 + ((pi**6*C5 + pi**6*C6)*C7 + (pi**6*C5 + pi**6*C6 + pi**6*C7)*C8)*C9*L6)*L8)*L9)*ZL - (pi**6*C1*C2*C3*L10*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L10*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L10*L3)*L4 + (pi**6*C1*C3*C5*L10*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L10*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L10*L2 + (pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L10*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L10*L4 + (pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L10*L5)*L6 + (pi**6*C1*C3*C7*L10*L3 + pi**6*C1*C5*C7*L10*L5 + (pi**6*C1*C2 + pi**6*C1*C3)*C7*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L10*L4 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L10*L6)*L7 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L10*L2 + (pi**6*C1*C3*C7 + pi**6*C1*C3*C8 + pi**6*C1*C3*C9)*L10*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L10*L4 + (pi**6*C1*C5*C7 + pi**6*C1*C5*C8 + pi**6*C1*C5*C9)*L10*L5 + ((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L10*L6 + (pi**6*C1*C7*C8 + pi**6*C1*C7*C9)*L10*L7)*L8 + (pi**6*C1*C3*C9*L10*L3 + pi**6*C1*C5*C9*L10*L5 + pi**6*C1*C7*C9*L10*L7 + (pi**6*C1*C2 + pi**6*C1*C3)*C9*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9*L10*L4 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9*L10*L6 + (pi**6*C1*C7 + pi**6*C1*C8)*C9*L10*L8)*L9)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L10*L2 + ((-32*I*pi**5*C1*C10*C2 - 32*I*pi**5*C1*C10*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C9)*L10*L2 + (-32*I*pi**5*C1*C2*C3*L2 + (-32*I*pi**5*C1*C10*C3 - 32*I*pi**5*C1*C3*C9)*L10)*L3 + ((-32*I*pi**5*C1*C10*C3 - 32*I*pi**5*C1*C10*C4 - 32*I*pi**5*C1*C10*C5 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C9)*L10 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 - 32*I*pi**5*C1*C3*C5)*L3)*L4 + (-32*I*pi**5*C1*C3*C5*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5*L4 + (-32*I*pi**5*C1*C10*C5 - 32*I*pi**5*C1*C5*C9)*L10)*L5 + ((-32*I*pi**5*C1*C10*C5 - 32*I*pi**5*C1*C10*C6 - 32*I*pi**5*C1*C10*C7 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6 - 32*I*pi**5*C1*C7)*C9)*L10 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C5 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C6 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C7)*L2 + (-32*I*pi**5*C1*C3*C5 - 32*I*pi**5*C1*C3*C6 - 32*I*pi**5*C1*C3*C7)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C6 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C7)*L4 + (-32*I*pi**5*C1*C5*C6 - 32*I*pi**5*C1*C5*C7)*L5)*L6 + (-32*I*pi**5*C1*C3*C7*L3 - 32*I*pi**5*C1*C5*C7*L5 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C7*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C7*L4 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6)*C7*L6 + (-32*I*pi**5*C1*C10*C7 - 32*I*pi**5*C1*C7*C9)*L10)*L7 + ((-32*I*pi**5*C1*C10*C7 - 32*I*pi**5*C1*C10*C8 + (-32*I*pi**5*C1*C10 - 32*I*pi**5*C1*C7 - 32*I*pi**5*C1*C8)*C9)*L10 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C7 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C8 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C9)*L2 + (-32*I*pi**5*C1*C3*C7 - 32*I*pi**5*C1*C3*C8 - 32*I*pi**5*C1*C3*C9)*L3 + ((-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C7 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C8 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C9)*L4 + (-32*I*pi**5*C1*C5*C7 - 32*I*pi**5*C1*C5*C8 - 32*I*pi**5*C1*C5*C9)*L5 + ((-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6)*C7 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6 - 32*I*pi**5*C1*C7)*C8 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6 - 32*I*pi**5*C1*C7)*C9)*L6 + (-32*I*pi**5*C1*C7*C8 - 32*I*pi**5*C1*C7*C9)*L7)*L8 + (-32*I*pi**5*C1*C10*C9*L10 - 32*I*pi**5*C1*C3*C9*L3 - 32*I*pi**5*C1*C5*C9*L5 - 32*I*pi**5*C1*C7*C9*L7 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C9*L2 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4 - 32*I*pi**5*C1*C5)*C9*L4 + (-32*I*pi**5*C1*C5 - 32*I*pi**5*C1*C6 - 32*I*pi**5*C1*C7)*C9*L6 + (-32*I*pi**5*C1*C7 - 32*I*pi**5*C1*C8)*C9*L8)*L9)*ZL*ZS + (32*I*pi**5*C1*C3*L1*L10 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L10*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L10*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L10*L3)*L4 + (32*I*pi**5*C1*C5*L1*L10 + 32*I*pi**5*C3*C5*L10*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L10*L4)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7)*L10*L2 + (32*I*pi**5*C3*C5 + 32*I*pi**5*C3*C6 + 32*I*pi**5*C3*C7)*L10*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7)*L10*L4 + (32*I*pi**5*C5*C6 + 32*I*pi**5*C5*C7)*L10*L5)*L6 + (32*I*pi**5*C1*C7*L1*L10 + 32*I*pi**5*C3*C7*L10*L3 + 32*I*pi**5*C5*C7*L10*L5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7*L10*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6)*C7*L10*L6)*L7 + ((32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8 + 32*I*pi**5*C1*C9)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C8 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C9)*L10*L2 + (32*I*pi**5*C3*C7 + 32*I*pi**5*C3*C8 + 32*I*pi**5*C3*C9)*L10*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C8 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C9)*L10*L4 + (32*I*pi**5*C5*C7 + 32*I*pi**5*C5*C8 + 32*I*pi**5*C5*C9)*L10*L5 + ((32*I*pi**5*C5 + 32*I*pi**5*C6)*C7 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C8 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C9)*L10*L6 + (32*I*pi**5*C7*C8 + 32*I*pi**5*C7*C9)*L10*L7)*L8 + (32*I*pi**5*C1*C9*L1*L10 + 32*I*pi**5*C3*C9*L10*L3 + 32*I*pi**5*C5*C9*L10*L5 + 32*I*pi**5*C7*C9*L10*L7 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C9*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C9*L10*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C9*L10*L6 + (32*I*pi**5*C7 + 32*I*pi**5*C8)*C9*L10*L8)*L9)*freq**5 + 16*(((pi**4*C1*C10 + pi**4*C1*C9)*L1*L10 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C10 + pi**4*C10*C2 + pi**4*C10*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9)*L10)*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C10*C3 + pi**4*C3*C9)*L10)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C10*C3 + pi**4*C10*C4 + pi**4*C10*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9)*L10 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4 + (pi**4*C10*C5 + pi**4*C5*C9)*L10)*L5 + ((pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L1 + (pi**4*C10*C5 + pi**4*C10*C6 + pi**4*C10*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9)*L10 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7)*L2 + (pi**4*C3*C5 + pi**4*C3*C6 + pi**4*C3*C7)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7)*L4 + (pi**4*C5*C6 + pi**4*C5*C7)*L5)*L6 + (pi**4*C1*C7*L1 + pi**4*C3*C7*L3 + pi**4*C5*C7*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7*L4 + (pi**4*C5 + pi**4*C6)*C7*L6 + (pi**4*C10*C7 + pi**4*C7*C9)*L10)*L7 + ((pi**4*C1*C7 + pi**4*C1*C8 + pi**4*C1*C9)*L1 + (pi**4*C10*C7 + pi**4*C10*C8 + (pi**4*C10 + pi**4*C7 + pi**4*C8)*C9)*L10 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C8 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9)*L2 + (pi**4*C3*C7 + pi**4*C3*C8 + pi**4*C3*C9)*L3 + ((pi**4*C3 + pi**4*C4 + pi**4*C5)*C7 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C8 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9)*L4 + (pi**4*C5*C7 + pi**4*C5*C8 + pi**4*C5*C9)*L5 + ((pi**4*C5 + pi**4*C6)*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C8 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9)*L6 + (pi**4*C7*C8 + pi**4*C7*C9)*L7)*L8 + (pi**4*C1*C9*L1 + pi**4*C10*C9*L10 + pi**4*C3*C9*L3 + pi**4*C5*C9*L5 + pi**4*C7*C9*L7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9*L4 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9*L6 + (pi**4*C7 + pi**4*C8)*C9*L8)*L9)*ZL - (pi**4*C1*C3*L10*L3 + pi**4*C1*C5*L10*L5 + pi**4*C1*C7*L10*L7 + pi**4*C1*C9*L10*L9 + (pi**4*C1*C2 + pi**4*C1*C3)*L10*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L10*L4 + (pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L10*L6 + (pi**4*C1*C7 + pi**4*C1*C8 + pi**4*C1*C9)*L10*L8)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L10 - 8*I*pi**3*C3*L10*L3 - 8*I*pi**3*C5*L10*L5 - 8*I*pi**3*C7*L10*L7 - 8*I*pi**3*C9*L10*L9 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L10*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L10*L4 + (-8*I*pi**3*C5 - 8*I*pi**3*C6 - 8*I*pi**3*C7)*L10*L6 + (-8*I*pi**3*C7 - 8*I*pi**3*C8 - 8*I*pi**3*C9)*L10*L8 + (8*I*pi**3*C1*C3*L3 + 8*I*pi**3*C1*C5*L5 + 8*I*pi**3*C1*C7*L7 + 8*I*pi**3*C1*C9*L9 + (8*I*pi**3*C1*C10 + 8*I*pi**3*C1*C9)*L10 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C4 + 8*I*pi**3*C1*C5)*L4 + (8*I*pi**3*C1*C5 + 8*I*pi**3*C1*C6 + 8*I*pi**3*C1*C7)*L6 + (8*I*pi**3*C1*C7 + 8*I*pi**3*C1*C8 + 8*I*pi**3*C1*C9)*L8)*ZL*ZS)*freq**3 + 4*(pi**2*C1*L10*ZS - (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + pi**2*C7*L7 + pi**2*C9*L9 + (pi**2*C10 + pi**2*C9)*L10 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6 + pi**2*C7)*L6 + (pi**2*C7 + pi**2*C8 + pi**2*C9)*L8)*ZL)*freq**2 + (-2*I*pi*C1*ZL*ZS + 2*I*pi*L10)*freq + ZL)/(1048576*pi**20*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZL*freq**20 + (-524288*I*pi**19*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS - 524288*I*pi**19*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9)*freq**19 - 262144*(pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZS + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + pi**18*C1*C2*C3*C4*C5*C6*C7*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7*L8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C9*L1*L10*L2*L3*L4*L5*L6*L7 + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**18*C1*C10*C2*C3*C4*C5*C6 + pi**18*C1*C10*C2*C3*C4*C5*C7)*C8)*C9*L1*L10*L2*L3*L4*L5*L6 + (pi**18*C1*C10*C2*C3*C4*C5*C7*C8*C9*L1*L10*L2*L3*L4*L5 + ((pi**18*C1*C10*C2*C3*C4*C5 + (pi**18*C1*C10*C2*C3*C4 + pi**18*C1*C10*C2*C3*C5)*C6)*C7*C8*C9*L1*L10*L2*L3*L4 + (pi**18*C1*C10*C2*C3*C5*C6*C7*C8*C9*L1*L10*L2*L3 + ((pi**18*C1*C10*C2*C3 + (pi**18*C1*C10*C2 + pi**18*C1*C10*C3)*C4)*C5*C6*C7*C8*C9*L1*L10*L2 + (pi**18*C1*C10*C3*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1 + (pi**18*C1*C10 + pi**18*C10*C2)*C3*C4*C5*C6*C7*C8*C9*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL)*freq**18 + ((131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L10*L2*L3*L4*L5*L6*L7*L8 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8)*C9)*L10*L2*L3*L4*L5*L6*L7*L8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C9*L10*L2*L3*L4*L5*L6*L7 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6 + 131072*I*pi**17*C1*C10*C2*C3*C4*C5*C7)*C8)*C9*L10*L2*L3*L4*L5*L6 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C7*C8*C9*L10*L2*L3*L4*L5 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5 + (131072*I*pi**17*C1*C10*C2*C3*C4 + 131072*I*pi**17*C1*C10*C2*C3*C5)*C6)*C7*C8*C9*L10*L2*L3*L4 + (131072*I*pi**17*C1*C10*C2*C3*C5*C6*C7*C8*C9*L10*L2*L3 + ((131072*I*pi**17*C1*C10*C2*C3 + (131072*I*pi**17*C1*C10*C2 + 131072*I*pi**17*C1*C10*C3)*C4)*C5*C6*C7*C8*C9*L10*L2 + (131072*I*pi**17*C1*C10*C3*C4*C5*C6*C7*C8*C9*L10 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C9*L1*L10*L2*L3*L4*L5*L6*L7 + ((131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7 + (131072*I*pi**17*C1*C2*C3*C4*C5*C6 + 131072*I*pi**17*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L10*L2*L3*L4*L5*L6 + (131072*I*pi**17*C1*C2*C3*C4*C5*C7*C8*C9*L1*L10*L2*L3*L4*L5 + ((131072*I*pi**17*C1*C2*C3*C4*C5 + (131072*I*pi**17*C1*C2*C3*C4 + 131072*I*pi**17*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L10*L2*L3*L4 + (131072*I*pi**17*C1*C2*C3*C5*C6*C7*C8*C9*L1*L10*L2*L3 + ((131072*I*pi**17*C1*C2*C3 + (131072*I*pi**17*C1*C2 + 131072*I*pi**17*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L10*L2 + (131072*I*pi**17*C1*C3*C4*C5*C6*C7*C8*C9*L1*L10 + (131072*I*pi**17*C1 + 131072*I*pi**17*C2)*C3*C4*C5*C6*C7*C8*C9*L10*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**17 + 65536*(((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C10*C2*C3*C4*C5*C7)*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C2*C3*C4*C5*C6)*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((pi**16*C1*C10*C2*C3*C4*C5*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C7 + pi**16*C1*C2*C3*C4*C5*C7*C8)*C9)*L1*L10*L2*L3*L4*L5 + (((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7*C8 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C3*C5*C6*C7 + pi**16*C1*C2*C3*C5*C6*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7*C8 + ((pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7)*C9)*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5*C6*C7*C8 + (pi**16*C1*C10*C3*C4*C5*C6*C7 + pi**16*C1*C3*C4*C5*C6*C7*C8)*C9)*L1*L10 + ((pi**16*C1*C2*C3*C4*C5*C6*C7*C8 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7*C8 + ((pi**16*C1 + pi**16*C2)*C3*C4*C5*C6*C7*C8 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7)*C9)*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C10*C2*C3*C4*C5*C7)*C9*L1*L10*L2*L3*L4*L5*L6 + (pi**16*C1*C10*C2*C3*C4*C5*C7*C9*L1*L10*L2*L3*L4*L5 + ((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7*C9*L1*L10*L2*L3*L4 + (pi**16*C1*C10*C2*C3*C5*C6*C7*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C4*C5*C6*C7*C9*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7*C9*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**16*C1*C10*C2*C3*C4*C5*C7 + pi**16*C1*C10*C2*C3*C4*C5*C8)*C9*L1*L10*L2*L3*L4*L5 + (((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7 + (pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C7)*C8)*C9*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C5*C6 + pi**16*C1*C10*C2*C3*C5*C7)*C8)*C9*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C7)*C8)*C9*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C3*C4*C5*C6 + pi**16*C1*C10*C3*C4*C5*C7)*C8)*C9*L1*L10 + ((pi**16*C1*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C7)*C8)*C9*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C7*C8*C9*L1*L10*L2*L3*L4 + (pi**16*C1*C10*C2*C3*C5*C7*C8*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C7*C8*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C4*C5*C7*C8*C9*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C7*C8*C9*L10)*L2)*L3)*L4)*L5 + ((pi**16*C1*C10*C2*C3*C5 + pi**16*C1*C10*C2*C3*C6)*C7*C8*C9*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C5)*C6)*C7*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5 + (pi**16*C1*C10*C3*C4 + pi**16*C1*C10*C3*C5)*C6)*C7*C8*C9*L1*L10 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C5)*C6)*C7*C8*C9*L10)*L2)*L3)*L4 + ((pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C5*C6*C7*C8*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C5*C6*C7*C8*C9*L1*L10 + (pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C5*C6*C7*C8*C9*L10)*L2)*L3 + ((pi**16*C1*C10*C3 + pi**16*C1*C10*C4)*C5*C6*C7*C8*C9*L1*L10 + ((pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3 + (pi**16*C1*C10 + pi**16*C10*C2 + pi**16*C10*C3)*C4)*C5*C6*C7*C8*C9*L10)*L2 + (pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L1 + pi**16*C10*C3*C4*C5*C6*C7*C8*C9*L10 + (pi**16*C1 + pi**16*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**16*C1*C2*C3*C4*C5*C6*C7*C8 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L10*L2*L3*L4*L5*L6*L7*L8 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L10*L2*L3*L4*L5*L6*L7 + ((pi**16*C1*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L10*L2*L3*L4*L5*L6 + (pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L10*L2*L3*L4*L5 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L10*L2*L3*L4 + (pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L10*L2*L3 + (pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L10*L3 + (pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L10*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**16 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*L1*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7)*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6)*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9)*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8)*C9)*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7*C8 + ((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7)*C9)*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8)*C9)*L10*L2*L3 + (((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7*C8 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7)*C9)*L10*L2 + ((-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8)*C9)*L10 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C8 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7)*C9*L10*L2*L3*L4*L5*L6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7*C9*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7*C9*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7*C9*L10*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7*C9*L10*L2 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7*C9*L10 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C8)*C9*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C7)*C8)*C9*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C6 - 32768*I*pi**15*C1*C10*C2*C3*C5*C7)*C8)*C9*L10*L2*L3 + (((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7 + ((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + ((-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C6 - 32768*I*pi**15*C1*C10*C3*C4*C5*C7)*C8)*C9*L10 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C7*C8*C9*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C7*C8*C9*L10*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C7*C8*C9*L10*L2 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C7*C8*C9*L10 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C5 - 32768*I*pi**15*C1*C10*C2*C3*C6)*C7*C8*C9*L10*L2*L3 + (((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5 + (-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C5)*C6)*C7*C8*C9*L10*L2 + ((-32768*I*pi**15*C1*C10*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C3*C4 - 32768*I*pi**15*C1*C10*C3*C5)*C6)*C7*C8*C9*L10 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C5*C6*C7*C8*C9*L10*L2 + (-32768*I*pi**15*C1*C10*C3*C5*C6*C7*C8*C9*L10 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L2)*L3 + (-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (-32768*I*pi**15*C1*C10*C3 - 32768*I*pi**15*C1*C10*C4)*C5*C6*C7*C8*C9*L10 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C9)*L1*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C9)*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C9)*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C9)*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8 - 32768*I*pi**15*C1*C3*C4*C5*C6*C7*C9)*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C9)*L10*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C9*L1*L10*L2*L3*L4*L5*L6 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C7*C9*L1*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C9*L1*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C2*C3*C5*C6*C7*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C9*L10*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C8)*C9*L1*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C7)*C8)*C9*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C2*C3*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C5*C6 - 32768*I*pi**15*C1*C2*C3*C5*C7)*C8)*C9*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C3*C4*C5*C6 - 32768*I*pi**15*C1*C3*C4*C5*C7)*C8)*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C7)*C8)*C9*L10*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C7*C8*C9*L1*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C2*C3*C5*C7*C8*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C7*C8*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C4*C5*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C7*C8*C9*L10*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C2*C3*C5 - 32768*I*pi**15*C1*C2*C3*C6)*C7*C8*C9*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C5)*C6)*C7*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5 + (-32768*I*pi**15*C1*C3*C4 - 32768*I*pi**15*C1*C3*C5)*C6)*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C5)*C6)*C7*C8*C9*L10*L2)*L3)*L4 + ((-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C5*C6*C7*C8*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C5*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C5*C6*C7*C8*C9*L10*L2)*L3 + (-32768*I*pi**15*C3*C4*C5*C6*C7*C8*C9*L10*L3 + (-32768*I*pi**15*C1*C3 - 32768*I*pi**15*C1*C4)*C5*C6*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2 - 32768*I*pi**15*C3)*C4)*C5*C6*C7*C8*C9*L10*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**15 - 16384*(((pi**14*C1*C10*C2*C3*C4*C5*C6 + pi**14*C1*C10*C2*C3*C4*C5*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C10*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L1*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6)*C7)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6*C7 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L1*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6*C7)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6*C7 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C6*C7*L1 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6*C7)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**14*C1*C10*C2*C3*C4*C5*C7 + pi**14*C1*C10*C2*C3*C4*C5*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9)*L1*L10*L2*L3*L4*L5 + (((pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C2*C3*C4)*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6*C7 + (pi**14*C1*C10*C2*C3*C5*C6 + pi**14*C1*C10*C2*C3*C5*C7)*C8 + (pi**14*C1*C10*C2*C3*C5*C6 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C2*C3*C5*C6)*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C8 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5)*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6*C7 + (pi**14*C1*C10*C3*C4*C5*C6 + pi**14*C1*C10*C3*C4*C5*C7)*C8 + (pi**14*C1*C10*C3*C4*C5*C6 + (pi**14*C1*C10*C3*C4*C5 + pi**14*C1*C3*C4*C5*C6)*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5)*C7 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7)*C8)*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7*C8 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C7*C8 + (pi**14*C1*C10*C2*C3*C5*C7 + pi**14*C1*C2*C3*C5*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7*C8 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C7*C8 + (pi**14*C1*C10*C3*C4*C5*C7 + pi**14*C1*C3*C4*C5*C7*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C7*C8 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7*C8 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C7*C8 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7*C8 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7)*C9)*L1*L10*L2*L3 + ((((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7*C8 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7)*C9)*L1*L10*L2 + (((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7*C8 + ((pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8 + (pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7)*C9)*L1*L10 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7*C8 + (((pi**14*C1 + pi**14*C2)*C3*C4*C5 + ((pi**14*C1 + pi**14*C2)*C3*C4 + (pi**14*C1 + pi**14*C2)*C3*C5)*C6)*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7*C8 + ((pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C5*C6*C7*C8 + (pi**14*C1*C10*C3*C5*C6*C7 + pi**14*C1*C3*C5*C6*C7*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C5*C6*C7*C8 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7*C8 + ((pi**14*C1 + pi**14*C2)*C3*C5*C6*C7*C8 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7)*C9)*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7*C8 + ((pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7)*C9)*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7*C8 + (((pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2 + pi**14*C3)*C4)*C5*C6*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7)*C9)*L10)*L2 + ((pi**14*C1*C3*C4*C5*C6*C7*C8 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L1 + (pi**14*C10*C3*C4*C5*C6*C7*C8 + (pi**14*C10*C3*C4*C5*C6*C7 + pi**14*C3*C4*C5*C6*C7*C8)*C9)*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C8 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + (pi**14*C1*C10*C2*C3*C4*C5*C9*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6 + pi**14*C1*C10*C2*C3*C5*C7)*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6 + pi**14*C1*C10*C3*C4*C5*C7)*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C9*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7*C9*L1*L10*L2*L3*L4 + (pi**14*C1*C10*C2*C3*C5*C7*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C4*C5*C7*C9*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C7*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7*C9*L10)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7*C9*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C5*C6*C7*C9*L1*L10 + (pi**14*C1*C2*C3*C5*C6*C7*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7*C9*L10)*L2)*L3 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7*C9*L1*L10 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7*C9*L10)*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C9*L1 + pi**14*C10*C3*C4*C5*C6*C7*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + (((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C8)*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C7 + pi**14*C1*C10*C2*C3*C5*C8)*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C8)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C7 + pi**14*C1*C10*C3*C4*C5*C8)*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C8)*C9*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6 + pi**14*C1*C10*C2*C3*C7)*C8)*C9*L1*L10*L2*L3 + ((((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C7)*C8)*C9*L1*L10*L2 + (((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7 + (pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C7)*C8)*C9*L1*L10 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C7)*C8)*C9*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C7)*C8)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C5*C6*C7 + (pi**14*C1*C10*C3*C5*C6 + pi**14*C1*C10*C3*C5*C7)*C8)*C9*L1*L10 + ((pi**14*C1*C2*C3*C5*C6*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C7)*C8)*C9*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C7)*C8)*C9*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C7)*C8)*C9*L10)*L2 + ((pi**14*C1*C3*C4*C5*C6*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9*L1 + (pi**14*C10*C3*C4*C5*C6*C7 + (pi**14*C10*C3*C4*C5*C6 + pi**14*C10*C3*C4*C5*C7)*C8)*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + (pi**14*C1*C10*C2*C3*C7*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C7*C8*C9*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C7*C8*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C5*C7*C8*C9*L1*L10 + (pi**14*C1*C2*C3*C5*C7*C8*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C7*C8*C9*L10)*L2)*L3 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C7*C8*C9*L10)*L2 + (pi**14*C1*C3*C4*C5*C7*C8*C9*L1 + pi**14*C10*C3*C4*C5*C7*C8*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C6)*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C5 + pi**14*C1*C10*C3*C6)*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C6)*C7*C8*C9*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4 + pi**14*C1*C10*C5)*C6)*C7*C8*C9*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C5)*C6)*C7*C8*C9*L10)*L2 + ((pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8*C9*L1 + (pi**14*C10*C3*C4*C5 + (pi**14*C10*C3*C4 + pi**14*C10*C3*C5)*C6)*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5 + ((pi**14*C1 + pi**14*C2)*C3*C4 + (pi**14*C1 + pi**14*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + (pi**14*C1*C10*C5*C6*C7*C8*C9*L1*L10 + ((pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C5*C6*C7*C8*C9*L10)*L2 + (pi**14*C1*C3*C5*C6*C7*C8*C9*L1 + pi**14*C10*C3*C5*C6*C7*C8*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (pi**14*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8*C9*L1 + (pi**14*C10*C3 + pi**14*C10*C4)*C5*C6*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2 + pi**14*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZL + (pi**14*C1*C2*C3*C4*C5*C6*C7*L10*L2*L3*L4*L5*L6*L7 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C2*C3*C4*C5*C7*C8 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L10*L2*L3*L4 + ((pi**14*C1*C2*C3*C5*C6*C7*C8 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L10*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C8 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L10*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9*L10*L2*L3*L4*L5*L6 + (pi**14*C1*C2*C3*C4*C5*C7*C9*L10*L2*L3*L4*L5 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9*L10*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C6*C7*C9*L10*L2*L3 + (pi**14*C1*C3*C4*C5*C6*C7*C9*L10*L3 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9*L10*L2)*L4)*L5)*L6)*L7 + ((pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L10*L2*L3*L4 + ((pi**14*C1*C2*C3*C5*C6*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + (pi**14*C1*C3*C4*C5*C6*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9*L10*L3)*L4)*L5)*L6 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8*C9*L10*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C7*C8*C9*L10*L2*L3 + (pi**14*C1*C3*C4*C5*C7*C8*C9*L10*L3 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8*C9*L10*L2)*L4)*L5 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8*C9*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L10*L2 + (pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8*C9*L10*L3)*L4 + (pi**14*C1*C3*C5*C6*C7*C8*C9*L10*L3 + (pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8*C9*L10*L2 + (pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8*C9*L10*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**14 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*L1*L10*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9)*L10*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9)*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6)*C7)*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C6*C7 + 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9)*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6*C7)*L10*L2 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7*L2 + (8192*I*pi**13*C1*C10*C3*C4*C5*C6*C7 + 8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9)*L10)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C5*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8)*C9)*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C2*C3*C4)*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8)*C9)*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3*C5*C6 + 8192*I*pi**13*C1*C10*C2*C3*C5*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C5*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8)*C9)*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5)*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8)*C9)*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10*C3*C4*C5*C6 + 8192*I*pi**13*C1*C10*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C10*C3*C4*C5*C6 + (8192*I*pi**13*C1*C10*C3*C4*C5 + 8192*I*pi**13*C1*C3*C4*C5*C6)*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8)*C9)*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7*C8 + ((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3*C5*C7 + 8192*I*pi**13*C1*C2*C3*C5*C7*C8)*C9)*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C9)*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C7*C8 + (8192*I*pi**13*C1*C10*C3*C4*C5*C7 + 8192*I*pi**13*C1*C3*C4*C5*C7*C8)*C9)*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*C8 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7*C8 + ((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7)*C9)*L10*L2*L3 + ((((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7*C8 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7)*C9)*L10*L2 + (((8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7)*C9)*L10 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7)*C9)*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C5*C6*C7*C8 + (8192*I*pi**13*C1*C10*C3*C5*C6*C7 + 8192*I*pi**13*C1*C3*C5*C6*C7*C8)*C9)*L10 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*C8 + 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9)*L2)*L3 + (((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7)*C9)*L10 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9)*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*C8 + 8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5*C9*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C9*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C6 + 8192*I*pi**13*C1*C10*C2*C3*C5*C7)*C9*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C6 + 8192*I*pi**13*C1*C10*C3*C4*C5*C7)*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7*C9*L10*L2*L3*L4 + (8192*I*pi**13*C1*C10*C2*C3*C5*C7*C9*L10*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7*C9*L10*L2 + (8192*I*pi**13*C1*C10*C3*C4*C5*C7*C9*L10 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7*C9*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7*C9*L10*L2 + (8192*I*pi**13*C1*C10*C3*C5*C6*C7*C9*L10 + 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9*L2)*L3 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9*L3 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7*C9*L10 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C8)*C9*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C7 + 8192*I*pi**13*C1*C10*C2*C3*C5*C8)*C9*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C8)*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C7 + 8192*I*pi**13*C1*C10*C3*C4*C5*C8)*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6 + 8192*I*pi**13*C1*C10*C2*C3*C7)*C8)*C9*L10*L2*L3 + ((((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C7)*C8)*C9*L10*L2 + (((8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C7)*C8)*C9*L10 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7 + ((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C7)*C8)*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C5*C6*C7 + (8192*I*pi**13*C1*C10*C3*C5*C6 + 8192*I*pi**13*C1*C10*C3*C5*C7)*C8)*C9*L10 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8)*C9*L2)*L3 + (((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C7)*C8)*C9*L10 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (8192*I*pi**13*C1*C10*C2*C3*C7*C8*C9*L10*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C7*C8*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C7*C8*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C7*C8*C9*L10*L2 + (8192*I*pi**13*C1*C10*C3*C5*C7*C8*C9*L10 + 8192*I*pi**13*C1*C2*C3*C5*C7*C8*C9*L2)*L3 + (8192*I*pi**13*C1*C3*C4*C5*C7*C8*C9*L3 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C7*C8*C9*L10 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C6)*C7*C8*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C5 + 8192*I*pi**13*C1*C10*C3*C6)*C7*C8*C9*L10 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8*C9*L2)*L3 + (((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4 + 8192*I*pi**13*C1*C10*C5)*C6)*C7*C8*C9*L10 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (8192*I*pi**13*C1*C10*C5*C6*C7*C8*C9*L10 + 8192*I*pi**13*C1*C3*C5*C6*C7*C8*C9*L3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8*C9*L2 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*L1*L10*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*L1*L10*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7*L10*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8 + 8192*I*pi**13*C1*C2*C3*C4*C5*C9)*L1*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C9)*L10*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C9)*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C7*C8 + 8192*I*pi**13*C1*C2*C3*C5*C7*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C7*C8 + 8192*I*pi**13*C1*C3*C4*C5*C7*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C8 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C9)*L10*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C9)*L1*L10*L2*L3 + ((((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C9)*L1*L10*L2 + (((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C9)*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C9)*L10*L2)*L3)*L4 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5*C6*C7*C8 + 8192*I*pi**13*C1*C3*C5*C6*C7*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C8 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C9)*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C9)*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C9)*L10*L2 + (8192*I*pi**13*C3*C4*C5*C6*C7*C8 + 8192*I*pi**13*C3*C4*C5*C6*C7*C9)*L10*L3)*L4)*L5)*L6)*L7)*L8 + (8192*I*pi**13*C1*C2*C3*C4*C5*C9*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C9*L10*L2)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C9*L1*L10*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C7*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C4*C5*C7*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C9*L10*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C9*L10*L2)*L3)*L4 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C5*C6*C7*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C9*L10*L2)*L3 + (8192*I*pi**13*C3*C4*C5*C6*C7*C9*L10*L3 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C9*L10*L2)*L4)*L5)*L6)*L7 + (((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C8)*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C7 + 8192*I*pi**13*C1*C2*C3*C5*C8)*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C8)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C7 + 8192*I*pi**13*C1*C3*C4*C5*C8)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C8)*C9*L10*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6 + 8192*I*pi**13*C1*C2*C3*C7)*C8)*C9*L1*L10*L2*L3 + ((((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C7)*C8)*C9*L1*L10*L2 + (((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C7)*C8)*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C7)*C8)*C9*L10*L2)*L3)*L4 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C7)*C8)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5*C6*C7 + (8192*I*pi**13*C1*C3*C5*C6 + 8192*I*pi**13*C1*C3*C5*C7)*C8)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C7)*C8)*C9*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C7)*C8)*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + (8192*I*pi**13*C3*C4*C5*C6*C7 + (8192*I*pi**13*C3*C4*C5*C6 + 8192*I*pi**13*C3*C4*C5*C7)*C8)*C9*L10*L3)*L4)*L5)*L6 + (8192*I*pi**13*C1*C2*C3*C7*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C7*C8*C9*L10*L2)*L3)*L4 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C7*C8*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C5*C7*C8*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C7*C8*C9*L10*L2)*L3 + (8192*I*pi**13*C3*C4*C5*C7*C8*C9*L10*L3 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C7*C8*C9*L10*L2)*L4)*L5 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C6)*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5 + 8192*I*pi**13*C1*C3*C6)*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C6)*C7*C8*C9*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4 + 8192*I*pi**13*C1*C5)*C6)*C7*C8*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C5)*C6)*C7*C8*C9*L10*L2 + (8192*I*pi**13*C3*C4*C5 + (8192*I*pi**13*C3*C4 + 8192*I*pi**13*C3*C5)*C6)*C7*C8*C9*L10*L3)*L4 + (8192*I*pi**13*C1*C5*C6*C7*C8*C9*L1*L10 + 8192*I*pi**13*C3*C5*C6*C7*C8*C9*L10*L3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C5*C6*C7*C8*C9*L10*L2 + (8192*I*pi**13*C3 + 8192*I*pi**13*C4)*C5*C6*C7*C8*C9*L10*L4)*L5)*L6)*L7)*L8)*L9)*freq**13 + 4096*(((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C5*C9)*L1*L10*L2*L3*L4*L5 + ((pi**12*C1*C10*C2*C3*C4*C5 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C6 + pi**12*C1*C10*C2*C3*C5*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C6 + pi**12*C1*C10*C3*C4*C5*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C7*C9)*L1*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C7*C9)*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C7*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6)*C7)*L1*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6)*C7)*L1*L10*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6)*C7)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L1 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6)*C7)*L10)*L2)*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6*C7)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6*C7 + pi**12*C1*C3*C5*C6*C7*C9)*L1*L10 + (pi**12*C1*C2*C3*C5*C6*C7*L1 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6*C7)*L10)*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6*C7)*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L1 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6*C7)*L10)*L2 + (pi**12*C1*C3*C4*C5*C6*C7*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7*L2 + (pi**12*C10*C3*C4*C5*C6*C7 + pi**12*C3*C4*C5*C6*C7*C9)*L10)*L3)*L4)*L5)*L6)*L7 + (((pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C8 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C7 + pi**12*C1*C10*C2*C3*C5*C8 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C7 + pi**12*C1*C10*C3*C4*C5*C8 + (pi**12*C1*C10*C3*C4*C5 + pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8 + pi**12*C1*C2*C3*C4*C5*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6)*C7 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + pi**12*C1*C10*C2*C3*C7)*C8 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9)*L1*L10*L2*L3 + ((((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6)*C7 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C8 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C1*C2)*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6)*C7 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C8 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + (pi**12*C1*C10*C3 + pi**12*C1*C3*C4)*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7)*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6*C7 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C8 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6*C7 + (pi**12*C1*C10*C3*C5*C6 + pi**12*C1*C10*C3*C5*C7)*C8 + (pi**12*C1*C10*C3*C5*C6 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C3*C5*C6)*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C5*C7)*C8)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6*C7 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C8 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5)*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9)*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6*C7 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5)*C7 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7)*C8)*C9)*L10)*L2 + ((pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L1 + (pi**12*C10*C3*C4*C5*C6*C7 + (pi**12*C10*C3*C4*C5*C6 + pi**12*C10*C3*C4*C5*C7)*C8 + (pi**12*C10*C3*C4*C5*C6 + (pi**12*C10*C3*C4*C5 + pi**12*C3*C4*C5*C6)*C7 + (pi**12*C3*C4*C5*C6 + pi**12*C3*C4*C5*C7)*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C3*C7*C8 + (pi**12*C1*C10*C2*C3*C7 + pi**12*C1*C2*C3*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7*C8 + ((pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7*C8 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C7*C8 + (pi**12*C1*C10*C3*C5*C7 + pi**12*C1*C3*C5*C7*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C5*C7*C8 + pi**12*C1*C2*C3*C5*C7*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3*C5*C7*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7*C8 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C9)*L10)*L2 + ((pi**12*C1*C3*C4*C5*C7*C8 + pi**12*C1*C3*C4*C5*C7*C9)*L1 + (pi**12*C10*C3*C4*C5*C7*C8 + (pi**12*C10*C3*C4*C5*C7 + pi**12*C3*C4*C5*C7*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C8 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + ((((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7*C8 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7*C8 + ((pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3*C5 + (pi**12*C1 + pi**12*C2)*C3*C6)*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7)*C9)*L10)*L2)*L3 + ((((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7*C8 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7)*C9)*L1*L10 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9)*L1 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7*C8 + ((((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5)*C6)*C7*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7)*C9)*L10)*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9)*L1 + ((pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7*C8 + ((pi**12*C3*C4*C5 + (pi**12*C3*C4 + pi**12*C3*C5)*C6)*C7*C8 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7)*C9)*L10 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + ((pi**12*C1*C10*C5*C6*C7*C8 + (pi**12*C1*C10*C5*C6*C7 + pi**12*C1*C5*C6*C7*C8)*C9)*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7*C8 + ((pi**12*C1 + pi**12*C2 + pi**12*C3)*C5*C6*C7*C8 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7)*C9)*L10)*L2 + ((pi**12*C1*C3*C5*C6*C7*C8 + pi**12*C1*C3*C5*C6*C7*C9)*L1 + (pi**12*C10*C3*C5*C6*C7*C8 + (pi**12*C10*C3*C5*C6*C7 + pi**12*C3*C5*C6*C7*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C8 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9)*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9)*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7*C8 + ((pi**12*C3 + pi**12*C4)*C5*C6*C7*C8 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7)*C9)*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9)*L2 + (pi**12*C3*C4*C5*C6*C7*C8 + pi**12*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C9*L1*L10*L2*L3*L4 + (pi**12*C1*C10*C2*C3*C5*C9*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C4*C5*C9*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C9*L10)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + pi**12*C1*C10*C2*C3*C7)*C9*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C9*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C9*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6 + pi**12*C1*C10*C3*C5*C7)*C9*L1*L10 + ((pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9*L1 + (pi**12*C10*C3*C4*C5*C6 + pi**12*C10*C3*C4*C5*C7)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + (pi**12*C1*C10*C2*C3*C7*C9*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7*C9*L1*L10 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7*C9*L10)*L2)*L3)*L4 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C5*C7*C9*L1*L10 + (pi**12*C1*C2*C3*C5*C7*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7*C9*L10)*L2)*L3 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7*C9*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7*C9*L10)*L2 + (pi**12*C1*C3*C4*C5*C7*C9*L1 + pi**12*C10*C3*C4*C5*C7*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7*C9*L1*L10 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9*L1 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + (pi**12*C1*C10*C5*C6*C7*C9*L1*L10 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7*C9*L10)*L2 + (pi**12*C1*C3*C5*C6*C7*C9*L1 + pi**12*C10*C3*C5*C6*C7*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9*L2)*L3 + (pi**12*C3*C4*C5*C6*C7*C9*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9*L1 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((pi**12*C1*C10*C2*C3*C7 + pi**12*C1*C10*C2*C3*C8)*C9*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C8)*C9*L1*L10*L2 + (((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C8)*C9*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C8)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C7 + pi**12*C1*C10*C3*C5*C8)*C9*L1*L10 + ((pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C8)*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C8)*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9*L1 + (pi**12*C10*C3*C4*C5*C7 + pi**12*C10*C3*C4*C5*C8)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + ((((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C7)*C8)*C9*L1*L10*L2 + (((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6 + pi**12*C1*C10*C3*C7)*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C7)*C8)*C9*L10)*L2)*L3 + ((((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C7)*C8)*C9*L1*L10 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9*L1 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C7)*C8)*C9*L10)*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9*L1 + ((pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C7)*C8)*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + ((pi**12*C1*C10*C5*C6*C7 + (pi**12*C1*C10*C5*C6 + pi**12*C1*C10*C5*C7)*C8)*C9*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C7)*C8)*C9*L10)*L2 + ((pi**12*C1*C3*C5*C6*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9*L1 + (pi**12*C10*C3*C5*C6*C7 + (pi**12*C10*C3*C5*C6 + pi**12*C10*C3*C5*C7)*C8)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C7)*C8)*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**12*C3*C4*C5*C6*C7 + (pi**12*C3*C4*C5*C6 + pi**12*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C7*C8*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C7*C8*C9*L1*L10 + (pi**12*C1*C2*C3*C7*C8*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C7*C8*C9*L10)*L2)*L3 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C7*C8*C9*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C7*C8*C9*L10)*L2 + ((pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8*C9*L1 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + (pi**12*C1*C10*C5*C7*C8*C9*L1*L10 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C7*C8*C9*L10)*L2 + (pi**12*C1*C3*C5*C7*C8*C9*L1 + pi**12*C10*C3*C5*C7*C8*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C5*C7*C8*C9*L2)*L3 + (pi**12*C3*C4*C5*C7*C8*C9*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8*C9*L1 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((pi**12*C1*C10*C5 + pi**12*C1*C10*C6)*C7*C8*C9*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C6)*C7*C8*C9*L10)*L2 + ((pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8*C9*L1 + (pi**12*C10*C3*C5 + pi**12*C10*C3*C6)*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5 + (pi**12*C1 + pi**12*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8*C9*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C3 + pi**12*C10*C4 + pi**12*C10*C5)*C6)*C7*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**12*C3*C4*C5 + (pi**12*C3*C4 + pi**12*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**12*C1*C5*C6*C7*C8*C9*L1 + pi**12*C10*C5*C6*C7*C8*C9*L10 + pi**12*C3*C5*C6*C7*C8*C9*L3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5*C6*C7*C8*C9*L2 + (pi**12*C3 + pi**12*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L10*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L10*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L10*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L10*L2*L3 + (pi**12*C1*C3*C4*C5*C6*C7*L10*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L10*L2)*L4)*L5)*L6)*L7 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8 + pi**12*C1*C2*C3*C4*C5*C9)*L10*L2*L3*L4*L5 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L10*L2 + (pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L10*L3)*L4)*L5)*L6 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9)*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C7*C8 + pi**12*C1*C2*C3*C5*C7*C9)*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9)*L10*L2 + (pi**12*C1*C3*C4*C5*C7*C8 + pi**12*C1*C3*C4*C5*C7*C9)*L10*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9)*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9)*L10*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9)*L10*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9)*L10*L2 + (pi**12*C1*C3*C5*C6*C7*C8 + pi**12*C1*C3*C5*C6*C7*C9)*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9)*L10*L4)*L5)*L6)*L7)*L8 + (pi**12*C1*C2*C3*C4*C5*C9*L10*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9*L10*L2 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9*L10*L3)*L4)*L5)*L6 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9*L10*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C7*C9*L10*L2*L3 + (pi**12*C1*C3*C4*C5*C7*C9*L10*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9*L10*L2)*L4)*L5 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9*L10*L2 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9*L10*L3)*L4 + (pi**12*C1*C3*C5*C6*C7*C9*L10*L3 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9*L10*L2 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9*L10*L4)*L5)*L6)*L7 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8)*C9*L10*L2 + (pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9*L10*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9*L10*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9*L10*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9*L10*L2 + (pi**12*C1*C3*C5*C6*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9*L10*L4)*L5)*L6 + (pi**12*C1*C2*C3*C7*C8*C9*L10*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8*C9*L10*L2 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8*C9*L10*L3)*L4 + (pi**12*C1*C3*C5*C7*C8*C9*L10*L3 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8*C9*L10*L2 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8*C9*L10*L4)*L5 + (pi**12*C1*C5*C6*C7*C8*C9*L10*L5 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8*C9*L10*L2 + (pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8*C9*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8*C9*L10*L4)*L6)*L7)*L8)*L9)*ZS)*freq**12 + (-2048*I*pi**11*C1*C2*C3*C4*C5*L1*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 - 2048*I*pi**11*C1*C2*C3*C4*C5*C9)*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C5*C6 - 2048*I*pi**11*C1*C10*C2*C3*C5*C7 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4*C5*C6 - 2048*I*pi**11*C1*C10*C3*C4*C5*C7 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6 - 2048*I*pi**11*C1*C2*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C9 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C7)*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C7*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7)*L10*L2 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C7*L2 + (-2048*I*pi**11*C1*C10*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C7*C9)*L10)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C9 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6)*C7)*L10*L2*L3 + ((((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6)*C7)*L10*L2 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9 + (-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6)*C7)*L10)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C9 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6*C7)*L10*L2 + (-2048*I*pi**11*C1*C2*C3*C5*C6*C7*L2 + (-2048*I*pi**11*C1*C10*C3*C5*C6*C7 - 2048*I*pi**11*C1*C3*C5*C6*C7*C9)*L10)*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7*L2 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C9 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6*C7)*L10)*L4)*L5)*L6)*L7 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8)*C9)*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C5*C7 - 2048*I*pi**11*C1*C10*C2*C3*C5*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8)*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4*C5*C7 - 2048*I*pi**11*C1*C10*C3*C4*C5*C8 + (-2048*I*pi**11*C1*C10*C3*C4*C5 - 2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C7 - 2048*I*pi**11*C1*C2*C3*C4*C5*C8 - 2048*I*pi**11*C1*C2*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6 - 2048*I*pi**11*C1*C10*C2*C3*C7)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8)*C9)*L10*L2*L3 + ((((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C1*C2)*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8)*C9)*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C3*C4 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C3*C4)*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C10*C3*C5*C6 - 2048*I*pi**11*C1*C10*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C10*C3*C5*C6 + (-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C3*C5*C6)*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5)*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9)*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C8 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C3*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C7 - 2048*I*pi**11*C1*C2*C3*C7*C8)*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C9)*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7*C8 + ((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C7*C8 + (-2048*I*pi**11*C1*C10*C3*C5*C7 - 2048*I*pi**11*C1*C3*C5*C7*C8)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C7*C8 - 2048*I*pi**11*C1*C2*C3*C5*C7*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9)*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*C8 - 2048*I*pi**11*C1*C3*C4*C5*C7*C9)*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7*C8 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7)*C9)*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7*C8 + ((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C9)*L2)*L3 + ((((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7*C8 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7)*C9)*L10 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9)*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C8 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C5*C6*C7*C8 + (-2048*I*pi**11*C1*C10*C5*C6*C7 - 2048*I*pi**11*C1*C5*C6*C7*C8)*C9)*L10 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C8 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C9)*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*C8 - 2048*I*pi**11*C1*C3*C5*C6*C7*C9)*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C8 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C9*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C10*C2*C3*C5*C9*L10*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C9*L10*L2 + (-2048*I*pi**11*C1*C10*C3*C4*C5*C9*L10 - 2048*I*pi**11*C1*C2*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6 - 2048*I*pi**11*C1*C10*C2*C3*C7)*C9*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7)*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7)*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C6 - 2048*I*pi**11*C1*C10*C3*C5*C7)*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (-2048*I*pi**11*C1*C10*C2*C3*C7*C9*L10*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C9*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7*C9*L10*L2 + (-2048*I*pi**11*C1*C10*C3*C5*C7*C9*L10 - 2048*I*pi**11*C1*C2*C3*C5*C7*C9*L2)*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C7*C9*L3 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7*C9*L10 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7*C9*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9*L2 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (-2048*I*pi**11*C1*C10*C5*C6*C7*C9*L10 - 2048*I*pi**11*C1*C3*C5*C6*C7*C9*L3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C9*L2 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C10*C2*C3*C7 - 2048*I*pi**11*C1*C10*C2*C3*C8)*C9*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C8)*C9*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8)*C9*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C8)*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C7 - 2048*I*pi**11*C1*C10*C3*C5*C8)*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8)*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8)*C9*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C7)*C8)*C9*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7 + (-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6 - 2048*I*pi**11*C1*C10*C3*C7)*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8)*C9*L2)*L3 + ((((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C7)*C8)*C9*L10 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8)*C9*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + ((-2048*I*pi**11*C1*C10*C5*C6*C7 + (-2048*I*pi**11*C1*C10*C5*C6 - 2048*I*pi**11*C1*C10*C5*C7)*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8)*C9*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8)*C9*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C1*C10*C3*C7*C8*C9*L10 - 2048*I*pi**11*C1*C2*C3*C7*C8*C9*L2)*L3 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C7*C8*C9*L10 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8*C9*L2 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8*C9*L3)*L4 + (-2048*I*pi**11*C1*C10*C5*C7*C8*C9*L10 - 2048*I*pi**11*C1*C3*C5*C7*C8*C9*L3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8*C9*L2 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8*C9*L4)*L5 + (-2048*I*pi**11*C1*C5*C6*C7*C8*C9*L5 + (-2048*I*pi**11*C1*C10*C5 - 2048*I*pi**11*C1*C10*C6)*C7*C8*C9*L10 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8*C9*L2 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8*C9*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZL*ZS + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7)*L10*L2)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*L1*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7*L10*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7*L10*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7*L10*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C6*C7*L10*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7*L10*L2)*L4)*L5)*L6)*L7 + (((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C9)*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8 - 2048*I*pi**11*C1*C2*C3*C5*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8 - 2048*I*pi**11*C1*C3*C4*C5*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C9)*L10*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C9)*L1*L10*L2*L3 + ((((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C9)*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C9)*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C8 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C9)*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C8 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C9)*L10*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C7*C8 - 2048*I*pi**11*C1*C2*C3*C7*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C9)*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C7*C8 - 2048*I*pi**11*C1*C3*C5*C7*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C9)*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C9)*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C7*C8 - 2048*I*pi**11*C3*C4*C5*C7*C9)*L10*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C9)*L10*L2)*L3 + ((((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C9)*L1*L10 + ((((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C8 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C9)*L10*L2 + ((-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C8 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C9)*L10*L3)*L4 + ((-2048*I*pi**11*C1*C5*C6*C7*C8 - 2048*I*pi**11*C1*C5*C6*C7*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C9)*L10*L2 + (-2048*I*pi**11*C3*C5*C6*C7*C8 - 2048*I*pi**11*C3*C5*C6*C7*C9)*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C8 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C9)*L10*L4)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C9*L1*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C9*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C9*L10*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C9*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C9*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C9*L10*L3)*L4)*L5)*L6 + (-2048*I*pi**11*C1*C2*C3*C7*C9*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C9*L10*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C5*C7*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C9*L10*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C7*C9*L10*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C9*L10*L2)*L4)*L5 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C9*L10*L3)*L4 + (-2048*I*pi**11*C1*C5*C6*C7*C9*L1*L10 - 2048*I*pi**11*C3*C5*C6*C7*C9*L10*L3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C9*L10*L2 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C9*L10*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C2*C3*C7 - 2048*I*pi**11*C1*C2*C3*C8)*C9*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C8)*C9*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C8)*C9*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C8)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C7 - 2048*I*pi**11*C1*C3*C5*C8)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C8)*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C8)*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C7 - 2048*I*pi**11*C3*C4*C5*C8)*C9*L10*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C7)*C8)*C9*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6 - 2048*I*pi**11*C1*C3*C7)*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C7)*C8)*C9*L10*L2)*L3 + ((((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C7)*C8)*C9*L1*L10 + ((((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C7)*C8)*C9*L10*L2 + ((-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C7)*C8)*C9*L10*L3)*L4 + ((-2048*I*pi**11*C1*C5*C6*C7 + (-2048*I*pi**11*C1*C5*C6 - 2048*I*pi**11*C1*C5*C7)*C8)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C7)*C8)*C9*L10*L2 + (-2048*I*pi**11*C3*C5*C6*C7 + (-2048*I*pi**11*C3*C5*C6 - 2048*I*pi**11*C3*C5*C7)*C8)*C9*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C7)*C8)*C9*L10*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C7*C8*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C7*C8*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C7*C8*C9*L10*L2)*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C7*C8*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C7*C8*C9*L10*L3)*L4 + (-2048*I*pi**11*C1*C5*C7*C8*C9*L1*L10 - 2048*I*pi**11*C3*C5*C7*C8*C9*L10*L3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C7*C8*C9*L10*L4)*L5 + (-2048*I*pi**11*C5*C6*C7*C8*C9*L10*L5 + (-2048*I*pi**11*C1*C5 - 2048*I*pi**11*C1*C6)*C7*C8*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C6)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3*C5 - 2048*I*pi**11*C3*C6)*C7*C8*C9*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4 - 2048*I*pi**11*C5)*C6)*C7*C8*C9*L10*L4)*L6)*L7)*L8)*L9)*freq**11 - 1024*(((pi**10*C1*C10*C2*C3*C4 + pi**10*C1*C10*C2*C3*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L1*L10*L2*L3*L4 + ((pi**10*C1*C10*C2*C3*C5 + pi**10*C1*C2*C3*C5*C9)*L1*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4)*C5)*L1*L10*L2 + ((pi**10*C1*C10*C3*C4*C5 + pi**10*C1*C3*C4*C5*C9)*L1*L10 + (pi**10*C1*C2*C3*C4*C5*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C4*C5)*L10)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C3*C5 + pi**10*C1*C10*C2*C3*C6 + pi**10*C1*C10*C2*C3*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L1*L10*L2*L3 + (((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4)*C5 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C6 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C4*C5 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C6 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C6 + pi**10*C1*C10*C3*C5*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9)*L10)*L2 + ((pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L1 + (pi**10*C10*C3*C4*C5*C6 + pi**10*C10*C3*C4*C5*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2*C3*C7 + pi**10*C1*C2*C3*C7*C9)*L1*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7)*L1*L10*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7)*L1*L10 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7)*L10)*L2)*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C7 + pi**10*C1*C3*C5*C7*C9)*L1*L10 + (pi**10*C1*C2*C3*C5*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7)*L10)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7)*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7)*L10)*L2 + (pi**10*C1*C3*C4*C5*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7*L2 + (pi**10*C10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C7*C9)*L10)*L3)*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6)*C7)*L1*L10*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6)*C7)*L1*L10 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6)*C7)*L10)*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6)*C7)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L1 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6)*C7)*L10)*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6)*C7)*L10)*L3)*L4 + ((pi**10*C1*C10*C5*C6*C7 + pi**10*C1*C5*C6*C7*C9)*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6*C7)*L10)*L2 + (pi**10*C1*C3*C5*C6*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C6*C7*L2 + (pi**10*C10*C3*C5*C6*C7 + pi**10*C3*C5*C6*C7*C9)*L10)*L3 + (pi**10*C3*C4*C5*C6*C7*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7*L2 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7*C9 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C6*C7)*L10)*L4)*L5)*L6)*L7 + ((pi**10*C1*C10*C2*C3*C7 + pi**10*C1*C10*C2*C3*C8 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9)*L1*L10*L2*L3 + (((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C8 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9)*L1*L10*L2 + (((pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C8 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9)*L1*L10 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C7 + pi**10*C1*C10*C3*C5*C8 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8 + pi**10*C1*C2*C3*C5*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C5*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5)*C9)*L10)*L2 + ((pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8 + pi**10*C1*C3*C4*C5*C9)*L1 + (pi**10*C10*C3*C4*C5*C7 + pi**10*C10*C3*C4*C5*C8 + (pi**10*C10*C3*C4*C5 + pi**10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C8 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + ((((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6)*C7 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C8 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9)*L1*L10*L2 + (((pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6)*C7 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + pi**10*C1*C10*C3*C7)*C8 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9)*L1*L10 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1 + pi**10*C2)*C3*C7)*C8)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6)*C7 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C8 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + (pi**10*C1*C10 + pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9)*L1*L10 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L1 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6)*C7 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C8 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + (pi**10*C1 + pi**10*C10 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7)*C8)*C9)*L10)*L2 + (((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L1 + ((pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6)*C7 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C8 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + (pi**10*C10*C3 + pi**10*C3*C4)*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6 + (pi**10*C3*C4 + pi**10*C3*C5)*C7)*C8)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9)*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C6*C7 + (pi**10*C1*C10*C5*C6 + pi**10*C1*C10*C5*C7)*C8 + (pi**10*C1*C10*C5*C6 + (pi**10*C1*C10*C5 + pi**10*C1*C5*C6)*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9)*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7)*C8)*C9)*L10)*L2 + ((pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L1 + (pi**10*C10*C3*C5*C6*C7 + (pi**10*C10*C3*C5*C6 + pi**10*C10*C3*C5*C7)*C8 + (pi**10*C10*C3*C5*C6 + (pi**10*C10*C3*C5 + pi**10*C3*C5*C6)*C7 + (pi**10*C3*C5*C6 + pi**10*C3*C5*C7)*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6*C7 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C8 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5)*C7 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C3 + pi**10*C4)*C5*C7)*C8)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9)*L2 + (pi**10*C3*C4*C5*C6*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C8 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C7*C8 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C7*C8 + (pi**10*C1*C10*C3*C7 + pi**10*C1*C3*C7*C8)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C7*C8 + pi**10*C1*C2*C3*C7*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C7*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C9)*L10)*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9)*L1 + ((pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7*C8 + ((pi**10*C3*C4 + pi**10*C3*C5)*C7*C8 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9)*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C7*C8 + (pi**10*C1*C10*C5*C7 + pi**10*C1*C5*C7*C8)*C9)*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7*C8 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7*C8 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C9)*L10)*L2 + ((pi**10*C1*C3*C5*C7*C8 + pi**10*C1*C3*C5*C7*C9)*L1 + (pi**10*C10*C3*C5*C7*C8 + (pi**10*C10*C3*C5*C7 + pi**10*C3*C5*C7*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7*C8 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C9)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9)*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C7*C8 + ((pi**10*C3 + pi**10*C4)*C5*C7*C8 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9)*L2 + (pi**10*C3*C4*C5*C7*C8 + pi**10*C3*C4*C5*C7*C9)*L3)*L4)*L5 + (((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7*C8 + ((pi**10*C1*C5 + pi**10*C1*C6)*C7*C8 + (pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7)*C9)*L1*L10 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7*C8 + (((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C6)*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7)*C9)*L10)*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9)*L1 + ((pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7*C8 + ((pi**10*C3*C5 + pi**10*C3*C6)*C7*C8 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9)*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9)*L1 + (((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7*C8 + (((pi**10*C3 + pi**10*C4)*C5 + (pi**10*C3 + pi**10*C4 + pi**10*C5)*C6)*C7*C8 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7)*C9)*L10 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9)*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C8 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9)*L3)*L4 + ((pi**10*C1*C5*C6*C7*C8 + pi**10*C1*C5*C6*C7*C9)*L1 + (pi**10*C10*C5*C6*C7*C8 + (pi**10*C10*C5*C6*C7 + pi**10*C5*C6*C7*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C8 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9)*L2 + (pi**10*C3*C5*C6*C7*C8 + pi**10*C3*C5*C6*C7*C9)*L3 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7*C8 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + (pi**10*C1*C10*C2*C3*C9*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C9*L1*L10 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C9*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C9*L1*L10*L2 + (pi**10*C1*C10*C3*C5*C9*L1*L10 + (pi**10*C1*C2*C3*C5*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C9*L10)*L2)*L3 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C9*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C9*L10)*L2 + (pi**10*C1*C3*C4*C5*C9*L1 + pi**10*C10*C3*C4*C5*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + pi**10*C1*C10*C3*C7)*C9*L1*L10 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C9*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C9*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C9*L10)*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9*L1 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C6 + pi**10*C1*C10*C5*C7)*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C9*L10)*L2 + ((pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9*L1 + (pi**10*C10*C3*C5*C6 + pi**10*C10*C3*C5*C7)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9*L2 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7*C9*L1*L10*L2 + (pi**10*C1*C10*C3*C7*C9*L1*L10 + (pi**10*C1*C2*C3*C7*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7*C9*L10)*L2)*L3 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7*C9*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7*C9*L10)*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9*L1 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + (pi**10*C1*C10*C5*C7*C9*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7*C9*L10)*L2 + (pi**10*C1*C3*C5*C7*C9*L1 + pi**10*C10*C3*C5*C7*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C9*L2)*L3 + (pi**10*C3*C4*C5*C7*C9*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9*L1 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7*C9*L10)*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9*L1 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9*L2 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**10*C1*C5*C6*C7*C9*L1 + pi**10*C10*C5*C6*C7*C9*L10 + pi**10*C3*C5*C6*C7*C9*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9*L2 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C8)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C7 + pi**10*C1*C10*C3*C8)*C9*L1*L10 + ((pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C8)*C9*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C8)*C9*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C8)*C9*L10)*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9*L1 + ((pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C7 + pi**10*C1*C10*C5*C8)*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C8)*C9*L10)*L2 + ((pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9*L1 + (pi**10*C10*C3*C5*C7 + pi**10*C10*C3*C5*C8)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C5*C8)*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8)*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C7 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C8)*C9*L2 + (pi**10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7 + (pi**10*C1*C10*C5 + pi**10*C1*C10*C6 + pi**10*C1*C10*C7)*C8)*C9*L1*L10 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C7)*C8)*C9*L10)*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9*L1 + ((pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6 + pi**10*C10*C3*C7)*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1 + pi**10*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9*L1 + (((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C7)*C8)*C9*L10 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7)*C8)*C9*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6 + (pi**10*C3*C4 + pi**10*C3*C5)*C7)*C8)*C9*L3)*L4 + ((pi**10*C1*C5*C6*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9*L1 + (pi**10*C10*C5*C6*C7 + (pi**10*C10*C5*C6 + pi**10*C10*C5*C7)*C8)*C9*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7)*C8)*C9*L2 + (pi**10*C3*C5*C6*C7 + (pi**10*C3*C5*C6 + pi**10*C3*C5*C7)*C8)*C9*L3 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C3 + pi**10*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (pi**10*C1*C10*C7*C8*C9*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C7*C8*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C7*C8*C9*L10)*L2 + (pi**10*C1*C3*C7*C8*C9*L1 + pi**10*C10*C3*C7*C8*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C7*C8*C9*L2)*L3 + ((pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8*C9*L1 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7*C8*C9*L2 + (pi**10*C3*C4 + pi**10*C3*C5)*C7*C8*C9*L3)*L4 + (pi**10*C1*C5*C7*C8*C9*L1 + pi**10*C10*C5*C7*C8*C9*L10 + pi**10*C3*C5*C7*C8*C9*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7*C8*C9*L2 + (pi**10*C3 + pi**10*C4)*C5*C7*C8*C9*L4)*L5 + (pi**10*C5*C6*C7*C8*C9*L5 + (pi**10*C1*C5 + pi**10*C1*C6)*C7*C8*C9*L1 + (pi**10*C10*C5 + pi**10*C10*C6)*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C6)*C7*C8*C9*L2 + (pi**10*C3*C5 + pi**10*C3*C6)*C7*C8*C9*L3 + ((pi**10*C3 + pi**10*C4)*C5 + (pi**10*C3 + pi**10*C4 + pi**10*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZL + (pi**10*C1*C2*C3*C4*C5*L10*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L10*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L10*L2 + (pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L10*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L10*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L10*L2*L3 + (pi**10*C1*C3*C4*C5*C7*L10*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L10*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L10*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L10*L3)*L4 + (pi**10*C1*C3*C5*C6*C7*L10*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L10*L4)*L5)*L6)*L7 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L10*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8 + pi**10*C1*C2*C3*C5*C9)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9)*L10*L2 + (pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8 + pi**10*C1*C3*C4*C5*C9)*L10*L3)*L4)*L5 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L10*L2*L3 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L10*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L10*L2 + (pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L10*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C7*C8 + pi**10*C1*C2*C3*C7*C9)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9)*L10*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9)*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9)*L10*L2 + (pi**10*C1*C3*C5*C7*C8 + pi**10*C1*C3*C5*C7*C9)*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9)*L10*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9)*L10*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9)*L10*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9)*L10*L4 + (pi**10*C1*C5*C6*C7*C8 + pi**10*C1*C5*C6*C7*C9)*L10*L5)*L6)*L7)*L8 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9*L10*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C9*L10*L2*L3 + (pi**10*C1*C3*C4*C5*C9*L10*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9*L10*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9*L10*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9*L10*L2 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9*L10*L4)*L5)*L6 + (pi**10*C1*C2*C3*C7*C9*L10*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9*L10*L2 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9*L10*L3)*L4 + (pi**10*C1*C3*C5*C7*C9*L10*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9*L10*L4)*L5 + (pi**10*C1*C5*C6*C7*C9*L10*L5 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9*L10*L2 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9*L10*L4)*L6)*L7 + ((pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9*L10*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8)*C9*L10*L2 + (pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8)*C9*L10*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9*L10*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9*L10*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9*L10*L4 + (pi**10*C1*C5*C6*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9*L10*L5)*L6 + (pi**10*C1*C3*C7*C8*C9*L10*L3 + pi**10*C1*C5*C7*C8*C9*L10*L5 + (pi**10*C1*C2 + pi**10*C1*C3)*C7*C8*C9*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8*C9*L10*L4 + (pi**10*C1*C5 + pi**10*C1*C6)*C7*C8*C9*L10*L6)*L7)*L8)*L9)*ZS)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L10*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C4 + 512*I*pi**9*C1*C10*C2*C3*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C9)*L10*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C5*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C9 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4)*C5)*L10*L2 + (512*I*pi**9*C1*C2*C3*C4*C5*L2 + (512*I*pi**9*C1*C10*C3*C4*C5 + 512*I*pi**9*C1*C3*C4*C5*C9)*L10)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C3*C5 + 512*I*pi**9*C1*C10*C2*C3*C6 + 512*I*pi**9*C1*C10*C2*C3*C7 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4)*C5 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C6 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C7 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C4*C5 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C6 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C5*C6 + 512*I*pi**9*C1*C10*C3*C5*C7 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C5*C6 + 512*I*pi**9*C1*C2*C3*C5*C7)*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C9)*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C1*C3*C4*C5*C6 + 512*I*pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((512*I*pi**9*C1*C10*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C7*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C9 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C7)*L10*L2 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C9 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C7)*L10)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C9 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C7)*L10*L2 + (512*I*pi**9*C1*C2*C3*C5*C7*L2 + (512*I*pi**9*C1*C10*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C7*C9)*L10)*L3 + (512*I*pi**9*C1*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7*L2 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C9 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C7)*L10)*L4)*L5 + ((((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C9 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6)*C7)*L10*L2 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C9 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6)*C7)*L10)*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C9 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6)*C7)*L10)*L4 + (512*I*pi**9*C1*C3*C5*C6*C7*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7*L4 + (512*I*pi**9*C1*C10*C5*C6*C7 + 512*I*pi**9*C1*C5*C6*C7*C9)*L10)*L5)*L6)*L7 + ((512*I*pi**9*C1*C10*C2*C3*C7 + 512*I*pi**9*C1*C10*C2*C3*C8 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8)*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C7 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C8 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8)*C9)*L10*L2 + (((512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C7 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C8 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8)*C9)*L10 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C8 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C9)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C7 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C5*C7 + 512*I*pi**9*C1*C10*C3*C5*C8 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C5*C7 + 512*I*pi**9*C1*C2*C3*C5*C8 + 512*I*pi**9*C1*C2*C3*C5*C9)*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C7 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5)*C9)*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C9)*L2 + (512*I*pi**9*C1*C3*C4*C5*C7 + 512*I*pi**9*C1*C3*C4*C5*C8 + 512*I*pi**9*C1*C3*C4*C5*C9)*L3)*L4)*L5 + ((((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6)*C7 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7)*C8 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8)*C9)*L10*L2 + (((512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6)*C7 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6 + 512*I*pi**9*C1*C10*C3*C7)*C8 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8)*C9)*L10 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C8 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6)*C7 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7)*C8 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8)*C9)*L10 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C8 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C9)*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C8 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C9)*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C6*C7 + (512*I*pi**9*C1*C10*C5*C6 + 512*I*pi**9*C1*C10*C5*C7)*C8 + (512*I*pi**9*C1*C10*C5*C6 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C5*C6)*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8)*C9)*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C9)*L2 + (512*I*pi**9*C1*C3*C5*C6*C7 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C8 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C9)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C9)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C7*C8 + (512*I*pi**9*C1*C10*C3*C7 + 512*I*pi**9*C1*C3*C7*C8)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C7*C8 + 512*I*pi**9*C1*C2*C3*C7*C9)*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7)*C9)*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C9)*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C8 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C9)*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C7*C8 + (512*I*pi**9*C1*C10*C5*C7 + 512*I*pi**9*C1*C5*C7*C8)*C9)*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C9)*L2 + (512*I*pi**9*C1*C3*C5*C7*C8 + 512*I*pi**9*C1*C3*C5*C7*C9)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C9)*L4)*L5 + (((512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7*C8 + ((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7)*C9)*L10 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C9)*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C8 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C9)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C9)*L4 + (512*I*pi**9*C1*C5*C6*C7*C8 + 512*I*pi**9*C1*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + (512*I*pi**9*C1*C10*C2*C3*C9*L10*L2*L3 + ((512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C9*L10*L2 + ((512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C9*L10 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C9*L2)*L3)*L4 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C9*L10*L2 + (512*I*pi**9*C1*C10*C3*C5*C9*L10 + 512*I*pi**9*C1*C2*C3*C5*C9*L2)*L3 + (512*I*pi**9*C1*C3*C4*C5*C9*L3 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C9*L10 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7)*C9*L10*L2 + ((512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6 + 512*I*pi**9*C1*C10*C3*C7)*C9*L10 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C9*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7)*C9*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C9*L2 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C9*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C6 + 512*I*pi**9*C1*C10*C5*C7)*C9*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C9*L2 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C9*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7*C9*L10*L2 + (512*I*pi**9*C1*C10*C3*C7*C9*L10 + 512*I*pi**9*C1*C2*C3*C7*C9*L2)*L3 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7*C9*L10 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C9*L2 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C9*L3)*L4 + (512*I*pi**9*C1*C10*C5*C7*C9*L10 + 512*I*pi**9*C1*C3*C5*C7*C9*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C9*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C9*L4)*L5 + (512*I*pi**9*C1*C5*C6*C7*C9*L5 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7*C9*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C9*L2 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C9*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C8)*C9*L10*L2 + ((512*I*pi**9*C1*C10*C3*C7 + 512*I*pi**9*C1*C10*C3*C8)*C9*L10 + (512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8)*C9*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C8)*C9*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8)*C9*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8)*C9*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C7 + 512*I*pi**9*C1*C10*C5*C8)*C9*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8)*C9*L2 + (512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8)*C9*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8)*C9*L4)*L5 + (((512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6 + 512*I*pi**9*C1*C10*C7)*C8)*C9*L10 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8)*C9*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8)*C9*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8)*C9*L4 + (512*I*pi**9*C1*C5*C6*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8)*C9*L5)*L6 + (512*I*pi**9*C1*C10*C7*C8*C9*L10 + 512*I*pi**9*C1*C3*C7*C8*C9*L3 + 512*I*pi**9*C1*C5*C7*C8*C9*L5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8*C9*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8*C9*L4 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZL*ZS + (512*I*pi**9*C1*C2*C3*C5*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L10*L2 + (512*I*pi**9*C1*C3*C4*C5*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L10*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*L1*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7)*L10*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7)*L10*L2 + (512*I*pi**9*C3*C4*C5*C6 + 512*I*pi**9*C3*C4*C5*C7)*L10*L3)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7*L10*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*L1*L10*L2 + (512*I*pi**9*C1*C3*C5*C7*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7*L10*L2)*L3 + (512*I*pi**9*C3*C4*C5*C7*L10*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7*L10*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7*L10*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7*L10*L3)*L4 + (512*I*pi**9*C1*C5*C6*C7*L1*L10 + 512*I*pi**9*C3*C5*C6*C7*L10*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7*L10*L4)*L5)*L6)*L7 + ((512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8 + 512*I*pi**9*C1*C2*C3*C9)*L1*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C9)*L1*L10*L2 + (((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C9)*L10*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C9)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8 + 512*I*pi**9*C1*C3*C5*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C9)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C9)*L10*L2 + (512*I*pi**9*C3*C4*C5*C7 + 512*I*pi**9*C3*C4*C5*C8 + 512*I*pi**9*C3*C4*C5*C9)*L10*L3)*L4)*L5 + ((((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C9)*L1*L10*L2 + (((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C9)*L10*L2)*L3 + ((((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C9)*L1*L10 + ((((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C8 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C9)*L10*L2 + ((512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C8 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C9)*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C6*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C9)*L10*L2 + (512*I*pi**9*C3*C5*C6*C7 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C8 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C9)*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C8 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C9)*L10*L4)*L5)*L6 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C9)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C7*C8 + 512*I*pi**9*C1*C3*C7*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C9)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C9)*L10*L2 + ((512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C8 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C9)*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C7*C8 + 512*I*pi**9*C1*C5*C7*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C9)*L10*L2 + (512*I*pi**9*C3*C5*C7*C8 + 512*I*pi**9*C3*C5*C7*C9)*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C8 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C9)*L10*L4)*L5 + (((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C9)*L10*L2 + ((512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C8 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C9)*L10*L3 + (((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C8 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C9)*L10*L4 + (512*I*pi**9*C5*C6*C7*C8 + 512*I*pi**9*C5*C6*C7*C9)*L10*L5)*L6)*L7)*L8 + (512*I*pi**9*C1*C2*C3*C9*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C9*L10*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C9*L1*L10*L2 + (512*I*pi**9*C1*C3*C5*C9*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C9*L10*L2)*L3 + (512*I*pi**9*C3*C4*C5*C9*L10*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C9*L10*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C9*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C9*L10*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C9*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C9*L10*L2 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C9*L10*L4)*L5)*L6 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C9*L1*L10*L2 + (512*I*pi**9*C1*C3*C7*C9*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C9*L10*L2)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C9*L10*L2 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C9*L10*L3)*L4 + (512*I*pi**9*C1*C5*C7*C9*L1*L10 + 512*I*pi**9*C3*C5*C7*C9*L10*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C9*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C9*L10*L4)*L5 + (512*I*pi**9*C5*C6*C7*C9*L10*L5 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C9*L10*L2 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C9*L10*L4)*L6)*L7 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C8)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C7 + 512*I*pi**9*C1*C3*C8)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C8)*C9*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C8)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C8)*C9*L10*L2 + ((512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C8)*C9*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C7 + 512*I*pi**9*C1*C5*C8)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C8)*C9*L10*L2 + (512*I*pi**9*C3*C5*C7 + 512*I*pi**9*C3*C5*C8)*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C8)*C9*L10*L4)*L5 + (((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6 + 512*I*pi**9*C1*C7)*C8)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C7)*C8)*C9*L10*L2 + ((512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6 + 512*I*pi**9*C3*C7)*C8)*C9*L10*L3 + (((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C7)*C8)*C9*L10*L4 + (512*I*pi**9*C5*C6*C7 + (512*I*pi**9*C5*C6 + 512*I*pi**9*C5*C7)*C8)*C9*L10*L5)*L6 + (512*I*pi**9*C1*C7*C8*C9*L1*L10 + 512*I*pi**9*C3*C7*C8*C9*L10*L3 + 512*I*pi**9*C5*C7*C8*C9*L10*L5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C7*C8*C9*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C7*C8*C9*L10*L4 + (512*I*pi**9*C5 + 512*I*pi**9*C6)*C7*C8*C9*L10*L6)*L7)*L8)*L9)*freq**9 + 256*(((pi**8*C1*C10*C2*C3 + pi**8*C1*C2*C3*C9)*L1*L10*L2*L3 + ((pi**8*C1*C10*C2*C3 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C4 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C4 + pi**8*C1*C10*C3*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9)*L10)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C9 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5)*L1*L10*L2 + ((pi**8*C1*C10*C3*C5 + pi**8*C1*C3*C5*C9)*L1*L10 + (pi**8*C1*C2*C3*C5*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C5)*L10)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C9 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4)*C5)*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4)*C5)*L10)*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2 + (pi**8*C10*C3*C4*C5 + pi**8*C3*C4*C5*C9)*L10)*L3)*L4)*L5 + (((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C6 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C5 + pi**8*C1*C10*C3*C6 + pi**8*C1*C10*C3*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10*C3 + pi**8*C1*C10*C4)*C5 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C6 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L1*L10 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4)*C5 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L1 + (pi**8*C10*C3*C4*C5 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C6 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + ((pi**8*C1*C10*C5*C6 + pi**8*C1*C10*C5*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L1 + (pi**8*C10*C3*C5*C6 + pi**8*C10*C3*C5*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5*C6 + (pi**8*C1 + pi**8*C2)*C3*C5*C7)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5*C6 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7)*L2 + (pi**8*C3*C4*C5*C6 + pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C9 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7)*L1*L10*L2 + ((pi**8*C1*C10*C3*C7 + pi**8*C1*C3*C7*C9)*L1*L10 + (pi**8*C1*C2*C3*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C7*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C7)*L10)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7)*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7)*L10)*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7*C9 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7)*L10)*L3)*L4 + ((pi**8*C1*C10*C5*C7 + pi**8*C1*C5*C7*C9)*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7)*L10)*L2 + (pi**8*C1*C3*C5*C7*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C7*L2 + (pi**8*C10*C3*C5*C7 + pi**8*C3*C5*C7*C9)*L10)*L3 + (pi**8*C3*C4*C5*C7*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7*L2 + ((pi**8*C3 + pi**8*C4)*C5*C7*C9 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C7)*L10)*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7*C9 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6)*C7)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6)*C7)*L10)*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7*C9 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6)*C7)*L10)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6)*C7)*L10)*L4 + (pi**8*C1*C5*C6*C7*L1 + pi**8*C3*C5*C6*C7*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7*L2 + (pi**8*C3 + pi**8*C4)*C5*C6*C7*L4 + (pi**8*C10*C5*C6*C7 + pi**8*C5*C6*C7*C9)*L10)*L5)*L6)*L7 + (((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C8 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C7 + pi**8*C1*C10*C3*C8 + (pi**8*C1*C10*C3 + pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8 + pi**8*C1*C2*C3*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C8 + ((pi**8*C1 + pi**8*C2)*C3*C7 + (pi**8*C1 + pi**8*C2)*C3*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C8 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9)*L1*L10 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C8)*C9)*L10)*L2 + (((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L1 + ((pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C8 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C7 + (pi**8*C3*C4 + pi**8*C3*C5)*C8)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C8 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9)*L2)*L3)*L4 + ((pi**8*C1*C10*C5*C7 + pi**8*C1*C10*C5*C8 + (pi**8*C1*C10*C5 + pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C8 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C9)*L10)*L2 + ((pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8 + pi**8*C1*C3*C5*C9)*L1 + (pi**8*C10*C3*C5*C7 + pi**8*C10*C3*C5*C8 + (pi**8*C10*C3*C5 + pi**8*C3*C5*C7 + pi**8*C3*C5*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5*C7 + (pi**8*C1 + pi**8*C2)*C3*C5*C8 + (pi**8*C1 + pi**8*C2)*C3*C5*C9)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5*C7 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C8 + ((pi**8*C3 + pi**8*C4)*C5*C7 + (pi**8*C3 + pi**8*C4)*C5*C8 + (pi**8*C10*C3 + pi**8*C10*C4)*C5)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C8 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9)*L2 + (pi**8*C3*C4*C5*C7 + pi**8*C3*C4*C5*C8 + pi**8*C3*C4*C5*C9)*L3)*L4)*L5 + (((pi**8*C1*C10*C5 + pi**8*C1*C10*C6)*C7 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + pi**8*C1*C10*C7)*C8 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + (pi**8*C1*C10 + pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9)*L1*L10 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7)*C8)*C9)*L10)*L2 + (((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L1 + ((pi**8*C10*C3*C5 + pi**8*C10*C3*C6)*C7 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + pi**8*C10*C3*C7)*C8 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + (pi**8*C10*C3 + pi**8*C3*C5 + pi**8*C3*C6)*C7 + (pi**8*C3*C5 + pi**8*C3*C6 + pi**8*C3*C7)*C8)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C8 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9)*L2)*L3 + ((((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L1 + (((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6)*C7 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C8 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + (pi**8*C10 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7)*C8)*C9)*L10 + ((((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C8 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9)*L2 + ((pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C8 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9)*L3)*L4 + ((pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L1 + (pi**8*C10*C5*C6*C7 + (pi**8*C10*C5*C6 + pi**8*C10*C5*C7)*C8 + (pi**8*C10*C5*C6 + (pi**8*C10*C5 + pi**8*C5*C6)*C7 + (pi**8*C5*C6 + pi**8*C5*C7)*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9)*L2 + (pi**8*C3*C5*C6*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C8 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C8 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9)*L4)*L5)*L6 + ((pi**8*C1*C10*C7*C8 + (pi**8*C1*C10*C7 + pi**8*C1*C7*C8)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C7*C8 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C7*C8 + pi**8*C1*C3*C7*C9)*L1 + (pi**8*C10*C3*C7*C8 + (pi**8*C10*C3*C7 + pi**8*C3*C7*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C7*C8 + (pi**8*C1 + pi**8*C2)*C3*C7*C9)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7*C8 + ((pi**8*C3 + pi**8*C4 + pi**8*C5)*C7*C8 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C8 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9)*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7*C8 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C9)*L3)*L4 + ((pi**8*C1*C5*C7*C8 + pi**8*C1*C5*C7*C9)*L1 + (pi**8*C10*C5*C7*C8 + (pi**8*C10*C5*C7 + pi**8*C5*C7*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C8 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9)*L2 + (pi**8*C3*C5*C7*C8 + pi**8*C3*C5*C7*C9)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C7*C8 + (pi**8*C3 + pi**8*C4)*C5*C7*C9)*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7*C8 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9)*L1 + ((pi**8*C10*C5 + pi**8*C10*C6)*C7*C8 + ((pi**8*C5 + pi**8*C6)*C7*C8 + (pi**8*C10*C5 + pi**8*C10*C6)*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9)*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7*C8 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C9)*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C8 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9)*L4 + (pi**8*C5*C6*C7*C8 + pi**8*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + ((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C9*L1*L10*L2 + (pi**8*C1*C10*C3*C9*L1*L10 + (pi**8*C1*C2*C3*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C9*L10)*L2)*L3 + ((pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C9*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C9*L10)*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9*L1 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9*L2)*L3)*L4 + (pi**8*C1*C10*C5*C9*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C9*L10)*L2 + (pi**8*C1*C3*C5*C9*L1 + pi**8*C10*C3*C5*C9*L10 + (pi**8*C1 + pi**8*C2)*C3*C5*C9*L2)*L3 + (pi**8*C3*C4*C5*C9*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9*L1 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9*L2)*L4)*L5 + ((pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + pi**8*C1*C10*C7)*C9*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C9*L10)*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9*L1 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + pi**8*C10*C3*C7)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C9*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9*L3)*L4 + ((pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9*L1 + (pi**8*C10*C5*C6 + pi**8*C10*C5*C7)*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9*L2 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9*L4)*L5)*L6 + (pi**8*C1*C10*C7*C9*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7*C9*L10)*L2 + (pi**8*C1*C3*C7*C9*L1 + pi**8*C10*C3*C7*C9*L10 + (pi**8*C1 + pi**8*C2)*C3*C7*C9*L2)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9*L1 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9*L2 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C9*L3)*L4 + (pi**8*C1*C5*C7*C9*L1 + pi**8*C10*C5*C7*C9*L10 + pi**8*C3*C5*C7*C9*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9*L2 + (pi**8*C3 + pi**8*C4)*C5*C7*C9*L4)*L5 + (pi**8*C5*C6*C7*C9*L5 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9*L1 + (pi**8*C10*C5 + pi**8*C10*C6)*C7*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9*L2 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9*L4)*L6)*L7 + ((pi**8*C1*C10*C7 + pi**8*C1*C10*C8)*C9*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C8)*C9*L10)*L2 + ((pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9*L1 + (pi**8*C10*C3*C7 + pi**8*C10*C3*C8)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C7 + (pi**8*C1 + pi**8*C2)*C3*C8)*C9*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9*L1 + ((pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C8)*C9*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C8)*C9*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7 + (pi**8*C3*C4 + pi**8*C3*C5)*C8)*C9*L3)*L4 + ((pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9*L1 + (pi**8*C10*C5*C7 + pi**8*C10*C5*C8)*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C8)*C9*L2 + (pi**8*C3*C5*C7 + pi**8*C3*C5*C8)*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5*C7 + (pi**8*C3 + pi**8*C4)*C5*C8)*C9*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9*L1 + ((pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C5 + pi**8*C10*C6 + pi**8*C10*C7)*C8)*C9*L10 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7)*C8)*C9*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7 + (pi**8*C3*C5 + pi**8*C3*C6 + pi**8*C3*C7)*C8)*C9*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7)*C8)*C9*L4 + (pi**8*C5*C6*C7 + (pi**8*C5*C6 + pi**8*C5*C7)*C8)*C9*L5)*L6 + (pi**8*C1*C7*C8*C9*L1 + pi**8*C10*C7*C8*C9*L10 + pi**8*C3*C7*C8*C9*L3 + pi**8*C5*C7*C8*C9*L5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7*C8*C9*L2 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7*C8*C9*L4 + (pi**8*C5 + pi**8*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZL + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L10*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L10*L2*L3 + (pi**8*C1*C3*C4*C5*L10*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L10*L2)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L10*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L10*L2 + (pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L10*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L10*L2 + (pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L10*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L10*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L10*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L10*L3)*L4 + (pi**8*C1*C3*C5*C7*L10*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L10*L4)*L5 + (pi**8*C1*C5*C6*C7*L10*L5 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L10*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L10*L4)*L6)*L7 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8 + pi**8*C1*C2*C3*C9)*L10*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L10*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L10*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9)*L10*L2 + (pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8 + pi**8*C1*C3*C5*C9)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9)*L10*L4)*L5 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L10*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L10*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L10*L4 + (pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L10*L5)*L6 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9)*L10*L2 + (pi**8*C1*C3*C7*C8 + pi**8*C1*C3*C7*C9)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9)*L10*L4 + (pi**8*C1*C5*C7*C8 + pi**8*C1*C5*C7*C9)*L10*L5 + ((pi**8*C1*C5 + pi**8*C1*C6)*C7*C8 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9)*L10*L6)*L7)*L8 + (pi**8*C1*C2*C3*C9*L10*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9*L10*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9*L10*L3)*L4 + (pi**8*C1*C3*C5*C9*L10*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9*L10*L4)*L5 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9*L10*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9*L10*L4 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9*L10*L5)*L6 + (pi**8*C1*C3*C7*C9*L10*L3 + pi**8*C1*C5*C7*C9*L10*L5 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9*L10*L4 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9*L10*L6)*L7 + (pi**8*C1*C7*C8*C9*L10*L7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9*L10*L2 + (pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9*L10*L4 + (pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9*L10*L5 + ((pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9*L10*L6)*L8)*L9)*ZS)*freq**8 + (-128*I*pi**7*C1*C2*C3*L1*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 - 128*I*pi**7*C1*C2*C3*C9)*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C4 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C9)*L10*L2 + ((-128*I*pi**7*C1*C10*C3*C4 - 128*I*pi**7*C1*C10*C3*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C9)*L10 + (-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2)*L3)*L4 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C9 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C5)*L10*L2 + (-128*I*pi**7*C1*C2*C3*C5*L2 + (-128*I*pi**7*C1*C10*C3*C5 - 128*I*pi**7*C1*C3*C5*C9)*L10)*L3 + (-128*I*pi**7*C1*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5*L2 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C9 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4)*C5)*L10)*L4)*L5 + (((-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C5 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C6 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C7 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C9)*L10*L2 + ((-128*I*pi**7*C1*C10*C3*C5 - 128*I*pi**7*C1*C10*C3*C6 - 128*I*pi**7*C1*C10*C3*C7 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C9)*L10 + (-128*I*pi**7*C1*C2*C3*C5 - 128*I*pi**7*C1*C2*C3*C6 - 128*I*pi**7*C1*C2*C3*C7)*L2)*L3 + (((-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4)*C5 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C6 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C7 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C9)*L10 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7)*L2 + (-128*I*pi**7*C1*C3*C4*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C6 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7)*L3)*L4 + ((-128*I*pi**7*C1*C10*C5*C6 - 128*I*pi**7*C1*C10*C5*C7 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C9)*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7)*L2 + (-128*I*pi**7*C1*C3*C5*C6 - 128*I*pi**7*C1*C3*C5*C7)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C9 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C7)*L10*L2 + (-128*I*pi**7*C1*C2*C3*C7*L2 + (-128*I*pi**7*C1*C10*C3*C7 - 128*I*pi**7*C1*C3*C7*C9)*L10)*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7*L2 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C9 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C7)*L10)*L4 + (-128*I*pi**7*C1*C3*C5*C7*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7*L4 + (-128*I*pi**7*C1*C10*C5*C7 - 128*I*pi**7*C1*C5*C7*C9)*L10)*L5 + (-128*I*pi**7*C1*C5*C6*C7*L5 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7*L2 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7*L4 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C9 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6)*C7)*L10)*L6)*L7 + (((-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C7 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C8 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8)*C9)*L10*L2 + ((-128*I*pi**7*C1*C10*C3*C7 - 128*I*pi**7*C1*C10*C3*C8 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8)*C9)*L10 + (-128*I*pi**7*C1*C2*C3*C7 - 128*I*pi**7*C1*C2*C3*C8 - 128*I*pi**7*C1*C2*C3*C9)*L2)*L3 + (((-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C7 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C8 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8)*C9)*L10 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C8 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C9)*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C8 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C9)*L3)*L4 + ((-128*I*pi**7*C1*C10*C5*C7 - 128*I*pi**7*C1*C10*C5*C8 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8)*C9)*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C9)*L2 + (-128*I*pi**7*C1*C3*C5*C7 - 128*I*pi**7*C1*C3*C5*C8 - 128*I*pi**7*C1*C3*C5*C9)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C9)*L4)*L5 + (((-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6)*C7 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6 - 128*I*pi**7*C1*C10*C7)*C8 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8)*C9)*L10 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C9)*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C8 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C9)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C8 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C9)*L4 + (-128*I*pi**7*C1*C5*C6*C7 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C8 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C9)*L5)*L6 + ((-128*I*pi**7*C1*C10*C7*C8 + (-128*I*pi**7*C1*C10*C7 - 128*I*pi**7*C1*C7*C8)*C9)*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C9)*L2 + (-128*I*pi**7*C1*C3*C7*C8 - 128*I*pi**7*C1*C3*C7*C9)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C9)*L4 + (-128*I*pi**7*C1*C5*C7*C8 - 128*I*pi**7*C1*C5*C7*C9)*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C8 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C9)*L6)*L7)*L8 + ((-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C9*L10*L2 + (-128*I*pi**7*C1*C10*C3*C9*L10 - 128*I*pi**7*C1*C2*C3*C9*L2)*L3 + ((-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C9*L10 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C9*L2 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C9*L3)*L4 + (-128*I*pi**7*C1*C10*C5*C9*L10 - 128*I*pi**7*C1*C3*C5*C9*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C9*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C9*L4)*L5 + ((-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6 - 128*I*pi**7*C1*C10*C7)*C9*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C9*L2 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C9*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C9*L4 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C9*L5)*L6 + (-128*I*pi**7*C1*C10*C7*C9*L10 - 128*I*pi**7*C1*C3*C7*C9*L3 - 128*I*pi**7*C1*C5*C7*C9*L5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C9*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C9*L4 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C9*L6)*L7 + (-128*I*pi**7*C1*C7*C8*C9*L7 + (-128*I*pi**7*C1*C10*C7 - 128*I*pi**7*C1*C10*C8)*C9*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8)*C9*L2 + (-128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8)*C9*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8)*C9*L4 + (-128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8)*C9*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8)*C9*L6)*L8)*L9)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L10*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L10*L2 + (-128*I*pi**7*C1*C3*C5*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L10*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L10*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L10*L2)*L4)*L5 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7)*L10*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7)*L10*L2 + (-128*I*pi**7*C3*C4*C5 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C6 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7)*L10*L3)*L4 + ((-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7)*L10*L2 + (-128*I*pi**7*C3*C5*C6 - 128*I*pi**7*C3*C5*C7)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7)*L10*L4)*L5)*L6 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*L1*L10*L2 + (-128*I*pi**7*C1*C3*C7*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7*L10*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7*L10*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7*L10*L3)*L4 + (-128*I*pi**7*C1*C5*C7*L1*L10 - 128*I*pi**7*C3*C5*C7*L10*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7*L10*L4)*L5 + (-128*I*pi**7*C5*C6*C7*L10*L5 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7*L10*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7*L10*L4)*L6)*L7 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C9)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8 - 128*I*pi**7*C1*C3*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C9)*L10*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C9)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C8 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C9)*L10*L2 + ((-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C8 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C9)*L10*L3)*L4 + ((-128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8 - 128*I*pi**7*C1*C5*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C9)*L10*L2 + (-128*I*pi**7*C3*C5*C7 - 128*I*pi**7*C3*C5*C8 - 128*I*pi**7*C3*C5*C9)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C8 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C9)*L10*L4)*L5 + (((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C9)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C8 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C9)*L10*L2 + ((-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C8 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C9)*L10*L3 + (((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C8 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C9)*L10*L4 + (-128*I*pi**7*C5*C6*C7 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C8 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C9)*L10*L5)*L6 + ((-128*I*pi**7*C1*C7*C8 - 128*I*pi**7*C1*C7*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C9)*L10*L2 + (-128*I*pi**7*C3*C7*C8 - 128*I*pi**7*C3*C7*C9)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C8 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C9)*L10*L4 + (-128*I*pi**7*C5*C7*C8 - 128*I*pi**7*C5*C7*C9)*L10*L5 + ((-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C8 + (-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C9)*L10*L6)*L7)*L8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C9*L1*L10*L2 + (-128*I*pi**7*C1*C3*C9*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C9*L10*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C9*L10*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C9*L10*L3)*L4 + (-128*I*pi**7*C1*C5*C9*L1*L10 - 128*I*pi**7*C3*C5*C9*L10*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C9*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C9*L10*L4)*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C9*L10*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C9*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C9*L10*L4 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C9*L10*L5)*L6 + (-128*I*pi**7*C1*C7*C9*L1*L10 - 128*I*pi**7*C3*C7*C9*L10*L3 - 128*I*pi**7*C5*C7*C9*L10*L5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C9*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C9*L10*L4 + (-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C9*L10*L6)*L7 + (-128*I*pi**7*C7*C8*C9*L10*L7 + (-128*I*pi**7*C1*C7 - 128*I*pi**7*C1*C8)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C8)*C9*L10*L2 + (-128*I*pi**7*C3*C7 - 128*I*pi**7*C3*C8)*C9*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C8)*C9*L10*L4 + (-128*I*pi**7*C5*C7 - 128*I*pi**7*C5*C8)*C9*L10*L5 + ((-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7 + (-128*I*pi**7*C5 - 128*I*pi**7*C6 - 128*I*pi**7*C7)*C8)*C9*L10*L6)*L8)*L9)*freq**7 - 64*(((pi**6*C1*C10*C2 + pi**6*C1*C10*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L1*L10*L2 + ((pi**6*C1*C10*C3 + pi**6*C1*C3*C9)*L1*L10 + (pi**6*C1*C2*C3*L1 + ((pi**6*C1 + pi**6*C2)*C3*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C3)*L10)*L2)*L3 + ((pi**6*C1*C10*C3 + pi**6*C1*C10*C4 + pi**6*C1*C10*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L1*L10 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9)*L10)*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + (pi**6*C10*C3*C4 + pi**6*C10*C3*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C10*C5 + pi**6*C1*C5*C9)*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5)*L10)*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2 + (pi**6*C10*C3*C5 + pi**6*C3*C5*C9)*L10)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2 + ((pi**6*C3 + pi**6*C4)*C5*C9 + (pi**6*C10*C3 + pi**6*C10*C4)*C5)*L10)*L4)*L5 + ((pi**6*C1*C10*C5 + pi**6*C1*C10*C6 + pi**6*C1*C10*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L1*L10 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C6 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9)*L10)*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L1 + (pi**6*C10*C3*C5 + pi**6*C10*C3*C6 + pi**6*C10*C3*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6 + (pi**6*C1 + pi**6*C2)*C3*C7)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L1 + ((pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9)*L10 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6 + (pi**6*C3*C4 + pi**6*C3*C5)*C7)*L3)*L4 + ((pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L1 + (pi**6*C10*C5*C6 + pi**6*C10*C5*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7)*L2 + (pi**6*C3*C5*C6 + pi**6*C3*C5*C7)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C6 + (pi**6*C3 + pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((pi**6*C1*C10*C7 + pi**6*C1*C7*C9)*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7)*L10)*L2 + (pi**6*C1*C3*C7*L1 + (pi**6*C1 + pi**6*C2)*C3*C7*L2 + (pi**6*C10*C3*C7 + pi**6*C3*C7*C9)*L10)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C7*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7)*L10)*L4 + (pi**6*C1*C5*C7*L1 + pi**6*C3*C5*C7*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7*L2 + (pi**6*C3 + pi**6*C4)*C5*C7*L4 + (pi**6*C10*C5*C7 + pi**6*C5*C7*C9)*L10)*L5 + (pi**6*C5*C6*C7*L5 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7*L2 + (pi**6*C3*C5 + pi**6*C3*C6)*C7*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7*L4 + ((pi**6*C5 + pi**6*C6)*C7*C9 + (pi**6*C10*C5 + pi**6*C10*C6)*C7)*L10)*L6)*L7 + ((pi**6*C1*C10*C7 + pi**6*C1*C10*C8 + (pi**6*C1*C10 + pi**6*C1*C7 + pi**6*C1*C8)*C9)*L1*L10 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C8 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C8)*C9)*L10)*L2 + ((pi**6*C1*C3*C7 + pi**6*C1*C3*C8 + pi**6*C1*C3*C9)*L1 + (pi**6*C10*C3*C7 + pi**6*C10*C3*C8 + (pi**6*C10*C3 + pi**6*C3*C7 + pi**6*C3*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C7 + (pi**6*C1 + pi**6*C2)*C3*C8 + (pi**6*C1 + pi**6*C2)*C3*C9)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L1 + ((pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C8 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C8)*C9)*L10 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C8 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9)*L2 + ((pi**6*C3*C4 + pi**6*C3*C5)*C7 + (pi**6*C3*C4 + pi**6*C3*C5)*C8 + (pi**6*C3*C4 + pi**6*C3*C5)*C9)*L3)*L4 + ((pi**6*C1*C5*C7 + pi**6*C1*C5*C8 + pi**6*C1*C5*C9)*L1 + (pi**6*C10*C5*C7 + pi**6*C10*C5*C8 + (pi**6*C10*C5 + pi**6*C5*C7 + pi**6*C5*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C8 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9)*L2 + (pi**6*C3*C5*C7 + pi**6*C3*C5*C8 + pi**6*C3*C5*C9)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C7 + (pi**6*C3 + pi**6*C4)*C5*C8 + (pi**6*C3 + pi**6*C4)*C5*C9)*L4)*L5 + (((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L1 + ((pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C5 + pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C5 + pi**6*C10*C6 + (pi**6*C10 + pi**6*C5 + pi**6*C6)*C7 + (pi**6*C5 + pi**6*C6 + pi**6*C7)*C8)*C9)*L10 + (((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C8 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9)*L2 + ((pi**6*C3*C5 + pi**6*C3*C6)*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C8 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9)*L3 + (((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C8 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9)*L4 + (pi**6*C5*C6*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C8 + (pi**6*C5*C6 + pi**6*C5*C7)*C9)*L5)*L6 + ((pi**6*C1*C7*C8 + pi**6*C1*C7*C9)*L1 + (pi**6*C10*C7*C8 + (pi**6*C10*C7 + pi**6*C7*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C8 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9)*L2 + (pi**6*C3*C7*C8 + pi**6*C3*C7*C9)*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C8 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9)*L4 + (pi**6*C5*C7*C8 + pi**6*C5*C7*C9)*L5 + ((pi**6*C5 + pi**6*C6)*C7*C8 + (pi**6*C5 + pi**6*C6)*C7*C9)*L6)*L7)*L8 + (pi**6*C1*C10*C9*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C9*L1 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C9*L10)*L2 + (pi**6*C1*C3*C9*L1 + pi**6*C10*C3*C9*L10 + (pi**6*C1 + pi**6*C2)*C3*C9*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9*L1 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C9*L10 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C9*L3)*L4 + (pi**6*C1*C5*C9*L1 + pi**6*C10*C5*C9*L10 + pi**6*C3*C5*C9*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9*L2 + (pi**6*C3 + pi**6*C4)*C5*C9*L4)*L5 + ((pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9*L1 + (pi**6*C10*C5 + pi**6*C10*C6 + pi**6*C10*C7)*C9*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9*L2 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9*L4 + (pi**6*C5*C6 + pi**6*C5*C7)*C9*L5)*L6 + (pi**6*C1*C7*C9*L1 + pi**6*C10*C7*C9*L10 + pi**6*C3*C7*C9*L3 + pi**6*C5*C7*C9*L5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9*L2 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9*L4 + (pi**6*C5 + pi**6*C6)*C7*C9*L6)*L7 + (pi**6*C7*C8*C9*L7 + (pi**6*C1*C7 + pi**6*C1*C8)*C9*L1 + (pi**6*C10*C7 + pi**6*C10*C8)*C9*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C8)*C9*L2 + (pi**6*C3*C7 + pi**6*C3*C8)*C9*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C8)*C9*L4 + (pi**6*C5*C7 + pi**6*C5*C8)*C9*L5 + ((pi**6*C5 + pi**6*C6)*C7 + (pi**6*C5 + pi**6*C6 + pi**6*C7)*C8)*C9*L6)*L8)*L9)*ZL + (pi**6*C1*C2*C3*L10*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L10*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L10*L3)*L4 + (pi**6*C1*C3*C5*L10*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L10*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L10*L2 + (pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L10*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L10*L4 + (pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L10*L5)*L6 + (pi**6*C1*C3*C7*L10*L3 + pi**6*C1*C5*C7*L10*L5 + (pi**6*C1*C2 + pi**6*C1*C3)*C7*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L10*L4 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L10*L6)*L7 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L10*L2 + (pi**6*C1*C3*C7 + pi**6*C1*C3*C8 + pi**6*C1*C3*C9)*L10*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L10*L4 + (pi**6*C1*C5*C7 + pi**6*C1*C5*C8 + pi**6*C1*C5*C9)*L10*L5 + ((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L10*L6 + (pi**6*C1*C7*C8 + pi**6*C1*C7*C9)*L10*L7)*L8 + (pi**6*C1*C3*C9*L10*L3 + pi**6*C1*C5*C9*L10*L5 + pi**6*C1*C7*C9*L10*L7 + (pi**6*C1*C2 + pi**6*C1*C3)*C9*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9*L10*L4 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9*L10*L6 + (pi**6*C1*C7 + pi**6*C1*C8)*C9*L10*L8)*L9)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L10*L2 + ((32*I*pi**5*C1*C10*C2 + 32*I*pi**5*C1*C10*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C9)*L10*L2 + (32*I*pi**5*C1*C2*C3*L2 + (32*I*pi**5*C1*C10*C3 + 32*I*pi**5*C1*C3*C9)*L10)*L3 + ((32*I*pi**5*C1*C10*C3 + 32*I*pi**5*C1*C10*C4 + 32*I*pi**5*C1*C10*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C9)*L10 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + (32*I*pi**5*C1*C3*C4 + 32*I*pi**5*C1*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C3*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L4 + (32*I*pi**5*C1*C10*C5 + 32*I*pi**5*C1*C5*C9)*L10)*L5 + ((32*I*pi**5*C1*C10*C5 + 32*I*pi**5*C1*C10*C6 + 32*I*pi**5*C1*C10*C7 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C9)*L10 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7)*L2 + (32*I*pi**5*C1*C3*C5 + 32*I*pi**5*C1*C3*C6 + 32*I*pi**5*C1*C3*C7)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7)*L4 + (32*I*pi**5*C1*C5*C6 + 32*I*pi**5*C1*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C3*C7*L3 + 32*I*pi**5*C1*C5*C7*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7*L4 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7*L6 + (32*I*pi**5*C1*C10*C7 + 32*I*pi**5*C1*C7*C9)*L10)*L7 + ((32*I*pi**5*C1*C10*C7 + 32*I*pi**5*C1*C10*C8 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8)*C9)*L10 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C8 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C9)*L2 + (32*I*pi**5*C1*C3*C7 + 32*I*pi**5*C1*C3*C8 + 32*I*pi**5*C1*C3*C9)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C8 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C9)*L4 + (32*I*pi**5*C1*C5*C7 + 32*I*pi**5*C1*C5*C8 + 32*I*pi**5*C1*C5*C9)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C8 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C9)*L6 + (32*I*pi**5*C1*C7*C8 + 32*I*pi**5*C1*C7*C9)*L7)*L8 + (32*I*pi**5*C1*C10*C9*L10 + 32*I*pi**5*C1*C3*C9*L3 + 32*I*pi**5*C1*C5*C9*L5 + 32*I*pi**5*C1*C7*C9*L7 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C9*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C9*L4 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C9*L6 + (32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8)*C9*L8)*L9)*ZL*ZS + (32*I*pi**5*C1*C3*L1*L10 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L10*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L10*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L10*L3)*L4 + (32*I*pi**5*C1*C5*L1*L10 + 32*I*pi**5*C3*C5*L10*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L10*L4)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7)*L10*L2 + (32*I*pi**5*C3*C5 + 32*I*pi**5*C3*C6 + 32*I*pi**5*C3*C7)*L10*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7)*L10*L4 + (32*I*pi**5*C5*C6 + 32*I*pi**5*C5*C7)*L10*L5)*L6 + (32*I*pi**5*C1*C7*L1*L10 + 32*I*pi**5*C3*C7*L10*L3 + 32*I*pi**5*C5*C7*L10*L5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7*L10*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6)*C7*L10*L6)*L7 + ((32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8 + 32*I*pi**5*C1*C9)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C8 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C9)*L10*L2 + (32*I*pi**5*C3*C7 + 32*I*pi**5*C3*C8 + 32*I*pi**5*C3*C9)*L10*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C8 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C9)*L10*L4 + (32*I*pi**5*C5*C7 + 32*I*pi**5*C5*C8 + 32*I*pi**5*C5*C9)*L10*L5 + ((32*I*pi**5*C5 + 32*I*pi**5*C6)*C7 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C8 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C9)*L10*L6 + (32*I*pi**5*C7*C8 + 32*I*pi**5*C7*C9)*L10*L7)*L8 + (32*I*pi**5*C1*C9*L1*L10 + 32*I*pi**5*C3*C9*L10*L3 + 32*I*pi**5*C5*C9*L10*L5 + 32*I*pi**5*C7*C9*L10*L7 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C9*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C9*L10*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C9*L10*L6 + (32*I*pi**5*C7 + 32*I*pi**5*C8)*C9*L10*L8)*L9)*freq**5 + 16*(((pi**4*C1*C10 + pi**4*C1*C9)*L1*L10 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C10 + pi**4*C10*C2 + pi**4*C10*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9)*L10)*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C10*C3 + pi**4*C3*C9)*L10)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C10*C3 + pi**4*C10*C4 + pi**4*C10*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9)*L10 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4 + (pi**4*C10*C5 + pi**4*C5*C9)*L10)*L5 + ((pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L1 + (pi**4*C10*C5 + pi**4*C10*C6 + pi**4*C10*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9)*L10 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7)*L2 + (pi**4*C3*C5 + pi**4*C3*C6 + pi**4*C3*C7)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7)*L4 + (pi**4*C5*C6 + pi**4*C5*C7)*L5)*L6 + (pi**4*C1*C7*L1 + pi**4*C3*C7*L3 + pi**4*C5*C7*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7*L4 + (pi**4*C5 + pi**4*C6)*C7*L6 + (pi**4*C10*C7 + pi**4*C7*C9)*L10)*L7 + ((pi**4*C1*C7 + pi**4*C1*C8 + pi**4*C1*C9)*L1 + (pi**4*C10*C7 + pi**4*C10*C8 + (pi**4*C10 + pi**4*C7 + pi**4*C8)*C9)*L10 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C8 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9)*L2 + (pi**4*C3*C7 + pi**4*C3*C8 + pi**4*C3*C9)*L3 + ((pi**4*C3 + pi**4*C4 + pi**4*C5)*C7 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C8 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9)*L4 + (pi**4*C5*C7 + pi**4*C5*C8 + pi**4*C5*C9)*L5 + ((pi**4*C5 + pi**4*C6)*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C8 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9)*L6 + (pi**4*C7*C8 + pi**4*C7*C9)*L7)*L8 + (pi**4*C1*C9*L1 + pi**4*C10*C9*L10 + pi**4*C3*C9*L3 + pi**4*C5*C9*L5 + pi**4*C7*C9*L7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9*L4 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9*L6 + (pi**4*C7 + pi**4*C8)*C9*L8)*L9)*ZL + (pi**4*C1*C3*L10*L3 + pi**4*C1*C5*L10*L5 + pi**4*C1*C7*L10*L7 + pi**4*C1*C9*L10*L9 + (pi**4*C1*C2 + pi**4*C1*C3)*L10*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L10*L4 + (pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L10*L6 + (pi**4*C1*C7 + pi**4*C1*C8 + pi**4*C1*C9)*L10*L8)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L10 - 8*I*pi**3*C3*L10*L3 - 8*I*pi**3*C5*L10*L5 - 8*I*pi**3*C7*L10*L7 - 8*I*pi**3*C9*L10*L9 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L10*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L10*L4 + (-8*I*pi**3*C5 - 8*I*pi**3*C6 - 8*I*pi**3*C7)*L10*L6 + (-8*I*pi**3*C7 - 8*I*pi**3*C8 - 8*I*pi**3*C9)*L10*L8 + (-8*I*pi**3*C1*C3*L3 - 8*I*pi**3*C1*C5*L5 - 8*I*pi**3*C1*C7*L7 - 8*I*pi**3*C1*C9*L9 + (-8*I*pi**3*C1*C10 - 8*I*pi**3*C1*C9)*L10 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L4 + (-8*I*pi**3*C1*C5 - 8*I*pi**3*C1*C6 - 8*I*pi**3*C1*C7)*L6 + (-8*I*pi**3*C1*C7 - 8*I*pi**3*C1*C8 - 8*I*pi**3*C1*C9)*L8)*ZL*ZS)*freq**3 - 4*(pi**2*C1*L10*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + pi**2*C7*L7 + pi**2*C9*L9 + (pi**2*C10 + pi**2*C9)*L10 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6 + pi**2*C7)*L6 + (pi**2*C7 + pi**2*C8 + pi**2*C9)*L8)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L10)*freq + ZL)

                    S21 = -2048*pi**10*C1*C3*C5*C7*C9*L10*L2*L4*L6*L8*ZL*ZS*freq**10/((1048576*pi**20*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZL*freq**20 + (-524288*I*pi**19*C1*C10*C2*C3*C4*C5*C6*C7*C8*C9*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZL*ZS - 524288*I*pi**19*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1*L10*L2*L3*L4*L5*L6*L7*L8*L9)*freq**19 - 262144*(pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L10*L2*L3*L4*L5*L6*L7*L8*L9*ZS + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + pi**18*C1*C2*C3*C4*C5*C6*C7*C8)*C9)*L1*L10*L2*L3*L4*L5*L6*L7*L8 + (pi**18*C1*C10*C2*C3*C4*C5*C6*C7*C9*L1*L10*L2*L3*L4*L5*L6*L7 + ((pi**18*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**18*C1*C10*C2*C3*C4*C5*C6 + pi**18*C1*C10*C2*C3*C4*C5*C7)*C8)*C9*L1*L10*L2*L3*L4*L5*L6 + (pi**18*C1*C10*C2*C3*C4*C5*C7*C8*C9*L1*L10*L2*L3*L4*L5 + ((pi**18*C1*C10*C2*C3*C4*C5 + (pi**18*C1*C10*C2*C3*C4 + pi**18*C1*C10*C2*C3*C5)*C6)*C7*C8*C9*L1*L10*L2*L3*L4 + (pi**18*C1*C10*C2*C3*C5*C6*C7*C8*C9*L1*L10*L2*L3 + ((pi**18*C1*C10*C2*C3 + (pi**18*C1*C10*C2 + pi**18*C1*C10*C3)*C4)*C5*C6*C7*C8*C9*L1*L10*L2 + (pi**18*C1*C10*C3*C4*C5*C6*C7*C8*C9*L1*L10 + (pi**18*C1*C2*C3*C4*C5*C6*C7*C8*C9*L1 + (pi**18*C1*C10 + pi**18*C10*C2)*C3*C4*C5*C6*C7*C8*C9*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL)*freq**18 + ((131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L10*L2*L3*L4*L5*L6*L7*L8 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8)*C9)*L10*L2*L3*L4*L5*L6*L7*L8 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7*C9*L10*L2*L3*L4*L5*L6*L7 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6*C7 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C6 + 131072*I*pi**17*C1*C10*C2*C3*C4*C5*C7)*C8)*C9*L10*L2*L3*L4*L5*L6 + (131072*I*pi**17*C1*C10*C2*C3*C4*C5*C7*C8*C9*L10*L2*L3*L4*L5 + ((131072*I*pi**17*C1*C10*C2*C3*C4*C5 + (131072*I*pi**17*C1*C10*C2*C3*C4 + 131072*I*pi**17*C1*C10*C2*C3*C5)*C6)*C7*C8*C9*L10*L2*L3*L4 + (131072*I*pi**17*C1*C10*C2*C3*C5*C6*C7*C8*C9*L10*L2*L3 + ((131072*I*pi**17*C1*C10*C2*C3 + (131072*I*pi**17*C1*C10*C2 + 131072*I*pi**17*C1*C10*C3)*C4)*C5*C6*C7*C8*C9*L10*L2 + (131072*I*pi**17*C1*C10*C3*C4*C5*C6*C7*C8*C9*L10 + 131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7*C9*L1*L10*L2*L3*L4*L5*L6*L7 + ((131072*I*pi**17*C1*C2*C3*C4*C5*C6*C7 + (131072*I*pi**17*C1*C2*C3*C4*C5*C6 + 131072*I*pi**17*C1*C2*C3*C4*C5*C7)*C8)*C9*L1*L10*L2*L3*L4*L5*L6 + (131072*I*pi**17*C1*C2*C3*C4*C5*C7*C8*C9*L1*L10*L2*L3*L4*L5 + ((131072*I*pi**17*C1*C2*C3*C4*C5 + (131072*I*pi**17*C1*C2*C3*C4 + 131072*I*pi**17*C1*C2*C3*C5)*C6)*C7*C8*C9*L1*L10*L2*L3*L4 + (131072*I*pi**17*C1*C2*C3*C5*C6*C7*C8*C9*L1*L10*L2*L3 + ((131072*I*pi**17*C1*C2*C3 + (131072*I*pi**17*C1*C2 + 131072*I*pi**17*C1*C3)*C4)*C5*C6*C7*C8*C9*L1*L10*L2 + (131072*I*pi**17*C1*C3*C4*C5*C6*C7*C8*C9*L1*L10 + (131072*I*pi**17*C1 + 131072*I*pi**17*C2)*C3*C4*C5*C6*C7*C8*C9*L10*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**17 + 65536*(((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1*L10*L2*L3*L4*L5*L6*L7 + ((pi**16*C1*C10*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C10*C2*C3*C4*C5*C7)*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C6 + (pi**16*C1*C10*C2*C3*C4*C5 + pi**16*C1*C2*C3*C4*C5*C6)*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((pi**16*C1*C10*C2*C3*C4*C5*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C5*C7 + pi**16*C1*C2*C3*C4*C5*C7*C8)*C9)*L1*L10*L2*L3*L4*L5 + (((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7*C8 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8 + (pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C3*C5*C6*C7 + pi**16*C1*C2*C3*C5*C6*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7*C8 + ((pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7)*C9)*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5*C6*C7*C8 + (pi**16*C1*C10*C3*C4*C5*C6*C7 + pi**16*C1*C3*C4*C5*C6*C7*C8)*C9)*L1*L10 + ((pi**16*C1*C2*C3*C4*C5*C6*C7*C8 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7*C8 + ((pi**16*C1 + pi**16*C2)*C3*C4*C5*C6*C7*C8 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7)*C9)*L10)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**16*C1*C10*C2*C3*C4*C5*C6 + pi**16*C1*C10*C2*C3*C4*C5*C7)*C9*L1*L10*L2*L3*L4*L5*L6 + (pi**16*C1*C10*C2*C3*C4*C5*C7*C9*L1*L10*L2*L3*L4*L5 + ((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7*C9*L1*L10*L2*L3*L4 + (pi**16*C1*C10*C2*C3*C5*C6*C7*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C4*C5*C6*C7*C9*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7*C9*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**16*C1*C10*C2*C3*C4*C5*C7 + pi**16*C1*C10*C2*C3*C4*C5*C8)*C9*L1*L10*L2*L3*L4*L5 + (((pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6)*C7 + (pi**16*C1*C10*C2*C3*C4*C5 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C6 + (pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C7)*C8)*C9*L1*L10*L2*L3*L4 + ((pi**16*C1*C10*C2*C3*C5*C6*C7 + (pi**16*C1*C10*C2*C3*C5*C6 + pi**16*C1*C10*C2*C3*C5*C7)*C8)*C9*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6*C7 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C6 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C7)*C8)*C9*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5*C6*C7 + (pi**16*C1*C10*C3*C4*C5*C6 + pi**16*C1*C10*C3*C4*C5*C7)*C8)*C9*L1*L10 + ((pi**16*C1*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6*C7 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C6 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C7)*C8)*C9*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**16*C1*C10*C2*C3*C4 + pi**16*C1*C10*C2*C3*C5)*C7*C8*C9*L1*L10*L2*L3*L4 + (pi**16*C1*C10*C2*C3*C5*C7*C8*C9*L1*L10*L2*L3 + ((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5*C7*C8*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C4*C5*C7*C8*C9*L1*L10 + (pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5*C7*C8*C9*L10)*L2)*L3)*L4)*L5 + ((pi**16*C1*C10*C2*C3*C5 + pi**16*C1*C10*C2*C3*C6)*C7*C8*C9*L1*L10*L2*L3 + (((pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4)*C5 + (pi**16*C1*C10*C2*C3 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C4 + (pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C5)*C6)*C7*C8*C9*L1*L10*L2 + ((pi**16*C1*C10*C3*C4*C5 + (pi**16*C1*C10*C3*C4 + pi**16*C1*C10*C3*C5)*C6)*C7*C8*C9*L1*L10 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4*C5 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3*C4 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C5)*C6)*C7*C8*C9*L10)*L2)*L3)*L4 + ((pi**16*C1*C10*C2 + pi**16*C1*C10*C3)*C5*C6*C7*C8*C9*L1*L10*L2 + (pi**16*C1*C10*C3*C5*C6*C7*C8*C9*L1*L10 + (pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L1 + (pi**16*C1*C10 + pi**16*C10*C2)*C3*C5*C6*C7*C8*C9*L10)*L2)*L3 + ((pi**16*C1*C10*C3 + pi**16*C1*C10*C4)*C5*C6*C7*C8*C9*L1*L10 + ((pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L1 + ((pi**16*C1*C10 + pi**16*C10*C2)*C3 + (pi**16*C1*C10 + pi**16*C10*C2 + pi**16*C10*C3)*C4)*C5*C6*C7*C8*C9*L10)*L2 + (pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L1 + pi**16*C10*C3*C4*C5*C6*C7*C8*C9*L10 + (pi**16*C1 + pi**16*C2)*C3*C4*C5*C6*C7*C8*C9*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**16*C1*C2*C3*C4*C5*C6*C7*C8 + pi**16*C1*C2*C3*C4*C5*C6*C7*C9)*L10*L2*L3*L4*L5*L6*L7*L8 + (pi**16*C1*C2*C3*C4*C5*C6*C7*C9*L10*L2*L3*L4*L5*L6*L7 + ((pi**16*C1*C2*C3*C4*C5*C6*C7 + (pi**16*C1*C2*C3*C4*C5*C6 + pi**16*C1*C2*C3*C4*C5*C7)*C8)*C9*L10*L2*L3*L4*L5*L6 + (pi**16*C1*C2*C3*C4*C5*C7*C8*C9*L10*L2*L3*L4*L5 + ((pi**16*C1*C2*C3*C4*C5 + (pi**16*C1*C2*C3*C4 + pi**16*C1*C2*C3*C5)*C6)*C7*C8*C9*L10*L2*L3*L4 + (pi**16*C1*C2*C3*C5*C6*C7*C8*C9*L10*L2*L3 + (pi**16*C1*C3*C4*C5*C6*C7*C8*C9*L10*L3 + (pi**16*C1*C2*C3 + (pi**16*C1*C2 + pi**16*C1*C3)*C4)*C5*C6*C7*C8*C9*L10*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**16 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*L1*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L10*L2*L3*L4*L5*L6*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7)*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6)*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9)*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8)*C9)*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7*C8 + ((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7)*C9)*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8)*C9)*L10*L2*L3 + (((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7*C8 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7)*C9)*L10*L2 + ((-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7 - 32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8)*C9)*L10 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C8 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7)*C9*L10*L2*L3*L4*L5*L6 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7*C9*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7*C9*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7*C9*L10*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7*C9*L10*L2 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7*C9*L10 - 32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C10*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C10*C2*C3*C4*C5*C8)*C9*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6)*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C6 + (-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C7)*C8)*C9*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C10*C2*C3*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C6 - 32768*I*pi**15*C1*C10*C2*C3*C5*C7)*C8)*C9*L10*L2*L3 + (((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6*C7 + ((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C6 + (-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + ((-32768*I*pi**15*C1*C10*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C6 - 32768*I*pi**15*C1*C10*C3*C4*C5*C7)*C8)*C9*L10 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C10*C2*C3*C4 - 32768*I*pi**15*C1*C10*C2*C3*C5)*C7*C8*C9*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C10*C2*C3*C5*C7*C8*C9*L10*L2*L3 + ((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5*C7*C8*C9*L10*L2 + (-32768*I*pi**15*C1*C10*C3*C4*C5*C7*C8*C9*L10 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C10*C2*C3*C5 - 32768*I*pi**15*C1*C10*C2*C3*C6)*C7*C8*C9*L10*L2*L3 + (((-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4)*C5 + (-32768*I*pi**15*C1*C10*C2*C3 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C4 + (-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C5)*C6)*C7*C8*C9*L10*L2 + ((-32768*I*pi**15*C1*C10*C3*C4*C5 + (-32768*I*pi**15*C1*C10*C3*C4 - 32768*I*pi**15*C1*C10*C3*C5)*C6)*C7*C8*C9*L10 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + ((-32768*I*pi**15*C1*C10*C2 - 32768*I*pi**15*C1*C10*C3)*C5*C6*C7*C8*C9*L10*L2 + (-32768*I*pi**15*C1*C10*C3*C5*C6*C7*C8*C9*L10 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8*C9*L2)*L3 + (-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8*C9*L3 + (-32768*I*pi**15*C1*C10*C3 - 32768*I*pi**15*C1*C10*C4)*C5*C6*C7*C8*C9*L10 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C8 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C7*C8 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7*C9)*L1*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C8 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C9)*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C2*C3*C5*C6*C7*C8 - 32768*I*pi**15*C1*C2*C3*C5*C6*C7*C9)*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C8 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C9)*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C8 - 32768*I*pi**15*C1*C3*C4*C5*C6*C7*C9)*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C8 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C9)*L10*L2)*L3)*L4)*L5)*L6)*L7)*L8 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C6 - 32768*I*pi**15*C1*C2*C3*C4*C5*C7)*C9*L1*L10*L2*L3*L4*L5*L6 + (-32768*I*pi**15*C1*C2*C3*C4*C5*C7*C9*L1*L10*L2*L3*L4*L5 + ((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7*C9*L1*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C2*C3*C5*C6*C7*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C4*C5*C6*C7*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7*C9*L10*L2)*L3)*L4)*L5)*L6)*L7 + ((-32768*I*pi**15*C1*C2*C3*C4*C5*C7 - 32768*I*pi**15*C1*C2*C3*C4*C5*C8)*C9*L1*L10*L2*L3*L4*L5 + (((-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6)*C7 + (-32768*I*pi**15*C1*C2*C3*C4*C5 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C6 + (-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C7)*C8)*C9*L1*L10*L2*L3*L4 + ((-32768*I*pi**15*C1*C2*C3*C5*C6*C7 + (-32768*I*pi**15*C1*C2*C3*C5*C6 - 32768*I*pi**15*C1*C2*C3*C5*C7)*C8)*C9*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6*C7 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C6 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C7)*C8)*C9*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5*C6*C7 + (-32768*I*pi**15*C1*C3*C4*C5*C6 - 32768*I*pi**15*C1*C3*C4*C5*C7)*C8)*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6*C7 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C6 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C7)*C8)*C9*L10*L2)*L3)*L4)*L5)*L6 + ((-32768*I*pi**15*C1*C2*C3*C4 - 32768*I*pi**15*C1*C2*C3*C5)*C7*C8*C9*L1*L10*L2*L3*L4 + (-32768*I*pi**15*C1*C2*C3*C5*C7*C8*C9*L1*L10*L2*L3 + ((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5*C7*C8*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C4*C5*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5*C7*C8*C9*L10*L2)*L3)*L4)*L5 + ((-32768*I*pi**15*C1*C2*C3*C5 - 32768*I*pi**15*C1*C2*C3*C6)*C7*C8*C9*L1*L10*L2*L3 + (((-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4)*C5 + (-32768*I*pi**15*C1*C2*C3 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C4 + (-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C5)*C6)*C7*C8*C9*L1*L10*L2 + ((-32768*I*pi**15*C1*C3*C4*C5 + (-32768*I*pi**15*C1*C3*C4 - 32768*I*pi**15*C1*C3*C5)*C6)*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4*C5 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C4 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C5)*C6)*C7*C8*C9*L10*L2)*L3)*L4 + ((-32768*I*pi**15*C1*C2 - 32768*I*pi**15*C1*C3)*C5*C6*C7*C8*C9*L1*L10*L2 + (-32768*I*pi**15*C1*C3*C5*C6*C7*C8*C9*L1*L10 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3*C5*C6*C7*C8*C9*L10*L2)*L3 + (-32768*I*pi**15*C3*C4*C5*C6*C7*C8*C9*L10*L3 + (-32768*I*pi**15*C1*C3 - 32768*I*pi**15*C1*C4)*C5*C6*C7*C8*C9*L1*L10 + ((-32768*I*pi**15*C1 - 32768*I*pi**15*C2)*C3 + (-32768*I*pi**15*C1 - 32768*I*pi**15*C2 - 32768*I*pi**15*C3)*C4)*C5*C6*C7*C8*C9*L10*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**15 - 16384*(((pi**14*C1*C10*C2*C3*C4*C5*C6 + pi**14*C1*C10*C2*C3*C4*C5*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C10*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L1*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6)*C7)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6*C7 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L1*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6*C7)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6*C7 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C6*C7*L1 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6*C7)*L10)*L2)*L3)*L4)*L5)*L6)*L7 + ((pi**14*C1*C10*C2*C3*C4*C5*C7 + pi**14*C1*C10*C2*C3*C4*C5*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9)*L1*L10*L2*L3*L4*L5 + (((pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6)*C7 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C8 + (pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + (pi**14*C1*C10*C2*C3 + pi**14*C1*C2*C3*C4)*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6*C7 + (pi**14*C1*C10*C2*C3*C5*C6 + pi**14*C1*C10*C2*C3*C5*C7)*C8 + (pi**14*C1*C10*C2*C3*C5*C6 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C2*C3*C5*C6)*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C8 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5)*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6*C7 + (pi**14*C1*C10*C3*C4*C5*C6 + pi**14*C1*C10*C3*C4*C5*C7)*C8 + (pi**14*C1*C10*C3*C4*C5*C6 + (pi**14*C1*C10*C3*C4*C5 + pi**14*C1*C3*C4*C5*C6)*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5)*C7 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7)*C8)*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7*C8 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C7*C8 + (pi**14*C1*C10*C2*C3*C5*C7 + pi**14*C1*C2*C3*C5*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7*C8 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C7*C8 + (pi**14*C1*C10*C3*C4*C5*C7 + pi**14*C1*C3*C4*C5*C7*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C7*C8 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7*C8 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C7*C8 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7*C8 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7)*C9)*L1*L10*L2*L3 + ((((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7*C8 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7)*C9)*L1*L10*L2 + (((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7*C8 + ((pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8 + (pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7)*C9)*L1*L10 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7*C8 + (((pi**14*C1 + pi**14*C2)*C3*C4*C5 + ((pi**14*C1 + pi**14*C2)*C3*C4 + (pi**14*C1 + pi**14*C2)*C3*C5)*C6)*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7*C8 + ((pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7)*C9)*L1*L10*L2 + ((pi**14*C1*C10*C3*C5*C6*C7*C8 + (pi**14*C1*C10*C3*C5*C6*C7 + pi**14*C1*C3*C5*C6*C7*C8)*C9)*L1*L10 + ((pi**14*C1*C2*C3*C5*C6*C7*C8 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7*C8 + ((pi**14*C1 + pi**14*C2)*C3*C5*C6*C7*C8 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7)*C9)*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7*C8 + ((pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7)*C9)*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7*C8 + (((pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2 + pi**14*C3)*C4)*C5*C6*C7*C8 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7)*C9)*L10)*L2 + ((pi**14*C1*C3*C4*C5*C6*C7*C8 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L1 + (pi**14*C10*C3*C4*C5*C6*C7*C8 + (pi**14*C10*C3*C4*C5*C6*C7 + pi**14*C3*C4*C5*C6*C7*C8)*C9)*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C8 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9)*L2)*L3)*L4)*L5)*L6)*L7)*L8 + (pi**14*C1*C10*C2*C3*C4*C5*C9*L1*L10*L2*L3*L4*L5 + ((pi**14*C1*C10*C2*C3*C4*C5 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C6 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7)*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C6 + pi**14*C1*C10*C2*C3*C5*C7)*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C6 + pi**14*C1*C10*C3*C4*C5*C7)*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7)*C9*L10)*L2)*L3)*L4)*L5)*L6 + ((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7*C9*L1*L10*L2*L3*L4 + (pi**14*C1*C10*C2*C3*C5*C7*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C4*C5*C7*C9*L1*L10 + (pi**14*C1*C2*C3*C4*C5*C7*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7*C9*L10)*L2)*L3)*L4)*L5 + ((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7*C9*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C5*C6*C7*C9*L1*L10 + (pi**14*C1*C2*C3*C5*C6*C7*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7*C9*L10)*L2)*L3 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7*C9*L1*L10 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7*C9*L10)*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C9*L1 + pi**14*C10*C3*C4*C5*C6*C7*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7*C9*L2)*L3)*L4)*L5)*L6)*L7 + (((pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C7 + (pi**14*C1*C10*C2*C3*C4 + pi**14*C1*C10*C2*C3*C5)*C8)*C9*L1*L10*L2*L3*L4 + ((pi**14*C1*C10*C2*C3*C5*C7 + pi**14*C1*C10*C2*C3*C5*C8)*C9*L1*L10*L2*L3 + (((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C7 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5*C8)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4*C5*C7 + pi**14*C1*C10*C3*C4*C5*C8)*C9*L1*L10 + ((pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C7 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5*C8)*C9*L10)*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6)*C7 + (pi**14*C1*C10*C2*C3*C5 + pi**14*C1*C10*C2*C3*C6 + pi**14*C1*C10*C2*C3*C7)*C8)*C9*L1*L10*L2*L3 + ((((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6)*C7 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4)*C5 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C6 + (pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C7)*C8)*C9*L1*L10*L2 + (((pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6)*C7 + (pi**14*C1*C10*C3*C4*C5 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C6 + (pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C7)*C8)*C9*L1*L10 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6)*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C7)*C8)*C9*L10)*L2)*L3)*L4 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6*C7 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C6 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C7)*C8)*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C5*C6*C7 + (pi**14*C1*C10*C3*C5*C6 + pi**14*C1*C10*C3*C5*C7)*C8)*C9*L1*L10 + ((pi**14*C1*C2*C3*C5*C6*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6*C7 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C6 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C7)*C8)*C9*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6*C7 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C6 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C7)*C8)*C9*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6*C7 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C6 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C7)*C8)*C9*L10)*L2 + ((pi**14*C1*C3*C4*C5*C6*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9*L1 + (pi**14*C10*C3*C4*C5*C6*C7 + (pi**14*C10*C3*C4*C5*C6 + pi**14*C10*C3*C4*C5*C7)*C8)*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6*C7 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5*C6 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7)*C8)*C9*L2)*L3)*L4)*L5)*L6 + (pi**14*C1*C10*C2*C3*C7*C8*C9*L1*L10*L2*L3 + ((pi**14*C1*C10*C2*C3 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C4 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5)*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C4 + pi**14*C1*C10*C3*C5)*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C4 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5)*C7*C8*C9*L10)*L2)*L3)*L4 + ((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5*C7*C8*C9*L1*L10*L2 + (pi**14*C1*C10*C3*C5*C7*C8*C9*L1*L10 + (pi**14*C1*C2*C3*C5*C7*C8*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C5*C7*C8*C9*L10)*L2)*L3 + ((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5*C7*C8*C9*L10)*L2 + (pi**14*C1*C3*C4*C5*C7*C8*C9*L1 + pi**14*C10*C3*C4*C5*C7*C8*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C4*C5*C7*C8*C9*L2)*L3)*L4)*L5 + (((pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C5 + (pi**14*C1*C10*C2 + pi**14*C1*C10*C3)*C6)*C7*C8*C9*L1*L10*L2 + ((pi**14*C1*C10*C3*C5 + pi**14*C1*C10*C3*C6)*C7*C8*C9*L1*L10 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8*C9*L1 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3*C5 + (pi**14*C1*C10 + pi**14*C10*C2)*C3*C6)*C7*C8*C9*L10)*L2)*L3 + (((pi**14*C1*C10*C3 + pi**14*C1*C10*C4)*C5 + (pi**14*C1*C10*C3 + pi**14*C1*C10*C4 + pi**14*C1*C10*C5)*C6)*C7*C8*C9*L1*L10 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L1 + (((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4)*C5 + ((pi**14*C1*C10 + pi**14*C10*C2)*C3 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C4 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C5)*C6)*C7*C8*C9*L10)*L2 + ((pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8*C9*L1 + (pi**14*C10*C3*C4*C5 + (pi**14*C10*C3*C4 + pi**14*C10*C3*C5)*C6)*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3*C4*C5 + ((pi**14*C1 + pi**14*C2)*C3*C4 + (pi**14*C1 + pi**14*C2)*C3*C5)*C6)*C7*C8*C9*L2)*L3)*L4 + (pi**14*C1*C10*C5*C6*C7*C8*C9*L1*L10 + ((pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8*C9*L1 + (pi**14*C1*C10 + pi**14*C10*C2 + pi**14*C10*C3)*C5*C6*C7*C8*C9*L10)*L2 + (pi**14*C1*C3*C5*C6*C7*C8*C9*L1 + pi**14*C10*C3*C5*C6*C7*C8*C9*L10 + (pi**14*C1 + pi**14*C2)*C3*C5*C6*C7*C8*C9*L2)*L3 + (pi**14*C3*C4*C5*C6*C7*C8*C9*L3 + (pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8*C9*L1 + (pi**14*C10*C3 + pi**14*C10*C4)*C5*C6*C7*C8*C9*L10 + ((pi**14*C1 + pi**14*C2)*C3 + (pi**14*C1 + pi**14*C2 + pi**14*C3)*C4)*C5*C6*C7*C8*C9*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZL + (pi**14*C1*C2*C3*C4*C5*C6*C7*L10*L2*L3*L4*L5*L6*L7 + ((pi**14*C1*C2*C3*C4*C5*C6*C7 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C8 + (pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9)*L10*L2*L3*L4*L5*L6 + ((pi**14*C1*C2*C3*C4*C5*C7*C8 + pi**14*C1*C2*C3*C4*C5*C7*C9)*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C8 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9)*L10*L2*L3*L4 + ((pi**14*C1*C2*C3*C5*C6*C7*C8 + pi**14*C1*C2*C3*C5*C6*C7*C9)*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C8 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9)*L10*L2 + (pi**14*C1*C3*C4*C5*C6*C7*C8 + pi**14*C1*C3*C4*C5*C6*C7*C9)*L10*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**14*C1*C2*C3*C4*C5*C6 + pi**14*C1*C2*C3*C4*C5*C7)*C9*L10*L2*L3*L4*L5*L6 + (pi**14*C1*C2*C3*C4*C5*C7*C9*L10*L2*L3*L4*L5 + ((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7*C9*L10*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C6*C7*C9*L10*L2*L3 + (pi**14*C1*C3*C4*C5*C6*C7*C9*L10*L3 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7*C9*L10*L2)*L4)*L5)*L6)*L7 + ((pi**14*C1*C2*C3*C4*C5*C7 + pi**14*C1*C2*C3*C4*C5*C8)*C9*L10*L2*L3*L4*L5 + (((pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6)*C7 + (pi**14*C1*C2*C3*C4*C5 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C6 + (pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7)*C8)*C9*L10*L2*L3*L4 + ((pi**14*C1*C2*C3*C5*C6*C7 + (pi**14*C1*C2*C3*C5*C6 + pi**14*C1*C2*C3*C5*C7)*C8)*C9*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6*C7 + ((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C6 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + (pi**14*C1*C3*C4*C5*C6*C7 + (pi**14*C1*C3*C4*C5*C6 + pi**14*C1*C3*C4*C5*C7)*C8)*C9*L10*L3)*L4)*L5)*L6 + ((pi**14*C1*C2*C3*C4 + pi**14*C1*C2*C3*C5)*C7*C8*C9*L10*L2*L3*L4 + (pi**14*C1*C2*C3*C5*C7*C8*C9*L10*L2*L3 + (pi**14*C1*C3*C4*C5*C7*C8*C9*L10*L3 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5*C7*C8*C9*L10*L2)*L4)*L5 + ((pi**14*C1*C2*C3*C5 + pi**14*C1*C2*C3*C6)*C7*C8*C9*L10*L2*L3 + (((pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4)*C5 + (pi**14*C1*C2*C3 + (pi**14*C1*C2 + pi**14*C1*C3)*C4 + (pi**14*C1*C2 + pi**14*C1*C3)*C5)*C6)*C7*C8*C9*L10*L2 + (pi**14*C1*C3*C4*C5 + (pi**14*C1*C3*C4 + pi**14*C1*C3*C5)*C6)*C7*C8*C9*L10*L3)*L4 + (pi**14*C1*C3*C5*C6*C7*C8*C9*L10*L3 + (pi**14*C1*C2 + pi**14*C1*C3)*C5*C6*C7*C8*C9*L10*L2 + (pi**14*C1*C3 + pi**14*C1*C4)*C5*C6*C7*C8*C9*L10*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**14 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*L1*L10*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9)*L10*L2*L3*L4*L5*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9)*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6)*C7)*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C6*C7 + 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9)*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6*C7)*L10*L2 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7*L2 + (8192*I*pi**13*C1*C10*C3*C4*C5*C6*C7 + 8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9)*L10)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C10*C2*C3*C4*C5*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8)*C9)*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + (8192*I*pi**13*C1*C10*C2*C3 + 8192*I*pi**13*C1*C2*C3*C4)*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8)*C9)*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C10*C2*C3*C5*C6 + 8192*I*pi**13*C1*C10*C2*C3*C5*C7)*C8 + (8192*I*pi**13*C1*C10*C2*C3*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C5*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8)*C9)*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5)*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8)*C9)*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C10*C3*C4*C5*C6 + 8192*I*pi**13*C1*C10*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C10*C3*C4*C5*C6 + (8192*I*pi**13*C1*C10*C3*C4*C5 + 8192*I*pi**13*C1*C3*C4*C5*C6)*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8)*C9)*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7*C8 + ((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3*C5*C7 + 8192*I*pi**13*C1*C2*C3*C5*C7*C8)*C9)*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C9)*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C7*C8 + (8192*I*pi**13*C1*C10*C3*C4*C5*C7 + 8192*I*pi**13*C1*C3*C4*C5*C7*C8)*C9)*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*C8 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7*C8 + ((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8 + (8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7)*C9)*L10*L2*L3 + ((((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7*C8 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7)*C9)*L10*L2 + (((8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7)*C9)*L10 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7)*C9)*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C5*C6*C7*C8 + (8192*I*pi**13*C1*C10*C3*C5*C6*C7 + 8192*I*pi**13*C1*C3*C5*C6*C7*C8)*C9)*L10 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*C8 + 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9)*L2)*L3 + (((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7*C8 + ((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7)*C9)*L10 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9)*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*C8 + 8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + (8192*I*pi**13*C1*C10*C2*C3*C4*C5*C9*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C4*C5 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7)*C9*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C6 + 8192*I*pi**13*C1*C10*C2*C3*C5*C7)*C9*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7)*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C6 + 8192*I*pi**13*C1*C10*C3*C4*C5*C7)*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C6 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7*C9*L10*L2*L3*L4 + (8192*I*pi**13*C1*C10*C2*C3*C5*C7*C9*L10*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7*C9*L10*L2 + (8192*I*pi**13*C1*C10*C3*C4*C5*C7*C9*L10 + 8192*I*pi**13*C1*C2*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7*C9*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7*C9*L10*L2 + (8192*I*pi**13*C1*C10*C3*C5*C6*C7*C9*L10 + 8192*I*pi**13*C1*C2*C3*C5*C6*C7*C9*L2)*L3 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*C9*L3 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7*C9*L10 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + (((8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C4 + 8192*I*pi**13*C1*C10*C2*C3*C5)*C8)*C9*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C10*C2*C3*C5*C7 + 8192*I*pi**13*C1*C10*C2*C3*C5*C8)*C9*L10*L2*L3 + (((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C7 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5*C8)*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4*C5*C7 + 8192*I*pi**13*C1*C10*C3*C4*C5*C8)*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6)*C7 + (8192*I*pi**13*C1*C10*C2*C3*C5 + 8192*I*pi**13*C1*C10*C2*C3*C6 + 8192*I*pi**13*C1*C10*C2*C3*C7)*C8)*C9*L10*L2*L3 + ((((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6)*C7 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4)*C5 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C6 + (8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C7)*C8)*C9*L10*L2 + (((8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C10*C3*C4*C5 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C6 + (8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C7)*C8)*C9*L10 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + (((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6*C7 + ((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C6 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C7)*C8)*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C5*C6*C7 + (8192*I*pi**13*C1*C10*C3*C5*C6 + 8192*I*pi**13*C1*C10*C3*C5*C7)*C8)*C9*L10 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8)*C9*L2)*L3 + (((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C6 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C7)*C8)*C9*L10 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8)*C9*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + (8192*I*pi**13*C1*C10*C2*C3*C7*C8*C9*L10*L2*L3 + ((8192*I*pi**13*C1*C10*C2*C3 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C4 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5)*C7*C8*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C4 + 8192*I*pi**13*C1*C10*C3*C5)*C7*C8*C9*L10 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8*C9*L2)*L3)*L4 + ((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5*C7*C8*C9*L10*L2 + (8192*I*pi**13*C1*C10*C3*C5*C7*C8*C9*L10 + 8192*I*pi**13*C1*C2*C3*C5*C7*C8*C9*L2)*L3 + (8192*I*pi**13*C1*C3*C4*C5*C7*C8*C9*L3 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5*C7*C8*C9*L10 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + (((8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C5 + (8192*I*pi**13*C1*C10*C2 + 8192*I*pi**13*C1*C10*C3)*C6)*C7*C8*C9*L10*L2 + ((8192*I*pi**13*C1*C10*C3*C5 + 8192*I*pi**13*C1*C10*C3*C6)*C7*C8*C9*L10 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8*C9*L2)*L3 + (((8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4)*C5 + (8192*I*pi**13*C1*C10*C3 + 8192*I*pi**13*C1*C10*C4 + 8192*I*pi**13*C1*C10*C5)*C6)*C7*C8*C9*L10 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8*C9*L2 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (8192*I*pi**13*C1*C10*C5*C6*C7*C8*C9*L10 + 8192*I*pi**13*C1*C3*C5*C6*C7*C8*C9*L3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8*C9*L2 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZL*ZS + (8192*I*pi**13*C1*C2*C3*C4*C5*C7*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7*L1*L10*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C6*C7*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7*L1*L10*L2 + (8192*I*pi**13*C1*C3*C4*C5*C6*C7*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7*L10*L2)*L3)*L4)*L5)*L6)*L7 + ((8192*I*pi**13*C1*C2*C3*C4*C5*C7 + 8192*I*pi**13*C1*C2*C3*C4*C5*C8 + 8192*I*pi**13*C1*C2*C3*C4*C5*C9)*L1*L10*L2*L3*L4*L5 + (((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C6*C7 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C8 + (8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C6*C7 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C8 + (8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C9)*L10*L2)*L3)*L4)*L5)*L6 + (((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C9)*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C7*C8 + 8192*I*pi**13*C1*C2*C3*C5*C7*C9)*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C8 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C7*C8 + 8192*I*pi**13*C1*C3*C4*C5*C7*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C8 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C9)*L10*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C8 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C9)*L1*L10*L2*L3 + ((((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C9)*L1*L10*L2 + (((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C8 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C9)*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C9)*L10*L2)*L3)*L4 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C9)*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5*C6*C7*C8 + 8192*I*pi**13*C1*C3*C5*C6*C7*C9)*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C8 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C9)*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C8 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C9)*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C8 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C9)*L10*L2 + (8192*I*pi**13*C3*C4*C5*C6*C7*C8 + 8192*I*pi**13*C3*C4*C5*C6*C7*C9)*L10*L3)*L4)*L5)*L6)*L7)*L8 + (8192*I*pi**13*C1*C2*C3*C4*C5*C9*L1*L10*L2*L3*L4*L5 + ((8192*I*pi**13*C1*C2*C3*C4*C5 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C6 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7)*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C6 + 8192*I*pi**13*C1*C2*C3*C5*C7)*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C6 + 8192*I*pi**13*C1*C3*C4*C5*C7)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7)*C9*L10*L2)*L3)*L4)*L5)*L6 + ((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7*C9*L1*L10*L2*L3*L4 + (8192*I*pi**13*C1*C2*C3*C5*C7*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C4*C5*C7*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7*C9*L10*L2)*L3)*L4)*L5 + ((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7*C9*L10*L2)*L3)*L4 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C5*C6*C7*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7*C9*L10*L2)*L3 + (8192*I*pi**13*C3*C4*C5*C6*C7*C9*L10*L3 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7*C9*L10*L2)*L4)*L5)*L6)*L7 + (((8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C7 + (8192*I*pi**13*C1*C2*C3*C4 + 8192*I*pi**13*C1*C2*C3*C5)*C8)*C9*L1*L10*L2*L3*L4 + ((8192*I*pi**13*C1*C2*C3*C5*C7 + 8192*I*pi**13*C1*C2*C3*C5*C8)*C9*L1*L10*L2*L3 + (((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C7 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5*C8)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4*C5*C7 + 8192*I*pi**13*C1*C3*C4*C5*C8)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C7 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5*C8)*C9*L10*L2)*L3)*L4)*L5 + (((8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6)*C7 + (8192*I*pi**13*C1*C2*C3*C5 + 8192*I*pi**13*C1*C2*C3*C6 + 8192*I*pi**13*C1*C2*C3*C7)*C8)*C9*L1*L10*L2*L3 + ((((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6)*C7 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4)*C5 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C6 + (8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C7)*C8)*C9*L1*L10*L2 + (((8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6)*C7 + (8192*I*pi**13*C1*C3*C4*C5 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C6 + (8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C7)*C8)*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6)*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C6 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C7)*C8)*C9*L10*L2)*L3)*L4 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6*C7 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C6 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C7)*C8)*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5*C6*C7 + (8192*I*pi**13*C1*C3*C5*C6 + 8192*I*pi**13*C1*C3*C5*C7)*C8)*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6*C7 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C6 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C7)*C8)*C9*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6*C7 + ((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C6 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C7)*C8)*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6*C7 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C6 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C7)*C8)*C9*L10*L2 + (8192*I*pi**13*C3*C4*C5*C6*C7 + (8192*I*pi**13*C3*C4*C5*C6 + 8192*I*pi**13*C3*C4*C5*C7)*C8)*C9*L10*L3)*L4)*L5)*L6 + (8192*I*pi**13*C1*C2*C3*C7*C8*C9*L1*L10*L2*L3 + ((8192*I*pi**13*C1*C2*C3 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C4 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5)*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C4 + 8192*I*pi**13*C1*C3*C5)*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5)*C7*C8*C9*L10*L2)*L3)*L4 + ((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5*C7*C8*C9*L1*L10*L2 + (8192*I*pi**13*C1*C3*C5*C7*C8*C9*L1*L10 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5*C7*C8*C9*L10*L2)*L3 + (8192*I*pi**13*C3*C4*C5*C7*C8*C9*L10*L3 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5*C7*C8*C9*L10*L2)*L4)*L5 + (((8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C5 + (8192*I*pi**13*C1*C2 + 8192*I*pi**13*C1*C3)*C6)*C7*C8*C9*L1*L10*L2 + ((8192*I*pi**13*C1*C3*C5 + 8192*I*pi**13*C1*C3*C6)*C7*C8*C9*L1*L10 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C5 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3*C6)*C7*C8*C9*L10*L2)*L3 + (((8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4)*C5 + (8192*I*pi**13*C1*C3 + 8192*I*pi**13*C1*C4 + 8192*I*pi**13*C1*C5)*C6)*C7*C8*C9*L1*L10 + (((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4)*C5 + ((8192*I*pi**13*C1 + 8192*I*pi**13*C2)*C3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C4 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C5)*C6)*C7*C8*C9*L10*L2 + (8192*I*pi**13*C3*C4*C5 + (8192*I*pi**13*C3*C4 + 8192*I*pi**13*C3*C5)*C6)*C7*C8*C9*L10*L3)*L4 + (8192*I*pi**13*C1*C5*C6*C7*C8*C9*L1*L10 + 8192*I*pi**13*C3*C5*C6*C7*C8*C9*L10*L3 + (8192*I*pi**13*C1 + 8192*I*pi**13*C2 + 8192*I*pi**13*C3)*C5*C6*C7*C8*C9*L10*L2 + (8192*I*pi**13*C3 + 8192*I*pi**13*C4)*C5*C6*C7*C8*C9*L10*L4)*L5)*L6)*L7)*L8)*L9)*freq**13 + 4096*(((pi**12*C1*C10*C2*C3*C4*C5 + pi**12*C1*C2*C3*C4*C5*C9)*L1*L10*L2*L3*L4*L5 + ((pi**12*C1*C10*C2*C3*C4*C5 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C6 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C6 + pi**12*C1*C10*C2*C3*C5*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C6 + pi**12*C1*C10*C3*C4*C5*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9)*L10)*L2)*L3)*L4)*L5)*L6 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C7*C9)*L1*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C7*C9)*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C7*L1 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6)*C7)*L1*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6)*C7)*L1*L10*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6)*C7)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L1 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6)*C7)*L10)*L2)*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6*C7)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6*C7 + pi**12*C1*C3*C5*C6*C7*C9)*L1*L10 + (pi**12*C1*C2*C3*C5*C6*C7*L1 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6*C7)*L10)*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6*C7)*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L1 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6*C7)*L10)*L2 + (pi**12*C1*C3*C4*C5*C6*C7*L1 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7*L2 + (pi**12*C10*C3*C4*C5*C6*C7 + pi**12*C3*C4*C5*C6*C7*C9)*L10)*L3)*L4)*L5)*L6)*L7 + (((pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C7 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C8 + (pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9)*L1*L10*L2*L3*L4 + ((pi**12*C1*C10*C2*C3*C5*C7 + pi**12*C1*C10*C2*C3*C5*C8 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C7 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5*C7 + pi**12*C1*C10*C3*C4*C5*C8 + (pi**12*C1*C10*C3*C4*C5 + pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8 + pi**12*C1*C2*C3*C4*C5*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5)*C9)*L10)*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6)*C7 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + pi**12*C1*C10*C2*C3*C7)*C8 + (pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + (pi**12*C1*C10*C2*C3 + pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9)*L1*L10*L2*L3 + ((((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6)*C7 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C8 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + (pi**12*C1*C10 + pi**12*C1*C2)*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6)*C7 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C8 + (pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + (pi**12*C1*C10*C3 + pi**12*C1*C3*C4)*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3)*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7)*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6*C7 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C8 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6*C7 + (pi**12*C1*C10*C3*C5*C6 + pi**12*C1*C10*C3*C5*C7)*C8 + (pi**12*C1*C10*C3*C5*C6 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C3*C5*C6)*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C5*C7)*C8)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6*C7 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C8 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5)*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9)*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6*C7 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5)*C7 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7)*C8)*C9)*L10)*L2 + ((pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L1 + (pi**12*C10*C3*C4*C5*C6*C7 + (pi**12*C10*C3*C4*C5*C6 + pi**12*C10*C3*C4*C5*C7)*C8 + (pi**12*C10*C3*C4*C5*C6 + (pi**12*C10*C3*C4*C5 + pi**12*C3*C4*C5*C6)*C7 + (pi**12*C3*C4*C5*C6 + pi**12*C3*C4*C5*C7)*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9)*L2)*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2*C3*C7*C8 + (pi**12*C1*C10*C2*C3*C7 + pi**12*C1*C2*C3*C7*C8)*C9)*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7*C8 + ((pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7*C8 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C9)*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C7*C8 + (pi**12*C1*C10*C3*C5*C7 + pi**12*C1*C3*C5*C7*C8)*C9)*L1*L10 + ((pi**12*C1*C2*C3*C5*C7*C8 + pi**12*C1*C2*C3*C5*C7*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3*C5*C7*C8 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C9)*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7*C8 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C9)*L10)*L2 + ((pi**12*C1*C3*C4*C5*C7*C8 + pi**12*C1*C3*C4*C5*C7*C9)*L1 + (pi**12*C10*C3*C4*C5*C7*C8 + (pi**12*C10*C3*C4*C5*C7 + pi**12*C3*C4*C5*C7*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C8 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9)*L2)*L3)*L4)*L5 + ((((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7*C8 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7)*C9)*L1*L10*L2 + (((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7*C8 + ((pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7)*C9)*L1*L10 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9)*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7*C8 + (((pi**12*C1 + pi**12*C2)*C3*C5 + (pi**12*C1 + pi**12*C2)*C3*C6)*C7*C8 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7)*C9)*L10)*L2)*L3 + ((((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7*C8 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7)*C9)*L1*L10 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9)*L1 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7*C8 + ((((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5)*C6)*C7*C8 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7)*C9)*L10)*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9)*L1 + ((pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7*C8 + ((pi**12*C3*C4*C5 + (pi**12*C3*C4 + pi**12*C3*C5)*C6)*C7*C8 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7)*C9)*L10 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9)*L2)*L3)*L4 + ((pi**12*C1*C10*C5*C6*C7*C8 + (pi**12*C1*C10*C5*C6*C7 + pi**12*C1*C5*C6*C7*C8)*C9)*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9)*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7*C8 + ((pi**12*C1 + pi**12*C2 + pi**12*C3)*C5*C6*C7*C8 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7)*C9)*L10)*L2 + ((pi**12*C1*C3*C5*C6*C7*C8 + pi**12*C1*C3*C5*C6*C7*C9)*L1 + (pi**12*C10*C3*C5*C6*C7*C8 + (pi**12*C10*C3*C5*C6*C7 + pi**12*C3*C5*C6*C7*C8)*C9)*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C8 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9)*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9)*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7*C8 + ((pi**12*C3 + pi**12*C4)*C5*C6*C7*C8 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7)*C9)*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C8 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9)*L2 + (pi**12*C3*C4*C5*C6*C7*C8 + pi**12*C3*C4*C5*C6*C7*C9)*L3)*L4)*L5)*L6)*L7)*L8 + ((pi**12*C1*C10*C2*C3*C4 + pi**12*C1*C10*C2*C3*C5)*C9*L1*L10*L2*L3*L4 + (pi**12*C1*C10*C2*C3*C5*C9*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C4*C5*C9*L1*L10 + (pi**12*C1*C2*C3*C4*C5*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5*C9*L10)*L2)*L3)*L4)*L5 + ((pi**12*C1*C10*C2*C3*C5 + pi**12*C1*C10*C2*C3*C6 + pi**12*C1*C10*C2*C3*C7)*C9*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4)*C5 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C6 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C4*C5 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C6 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7)*C9*L1*L10 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7)*C9*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C6 + pi**12*C1*C10*C3*C5*C7)*C9*L1*L10 + ((pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7)*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7)*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7)*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9*L1 + (pi**12*C10*C3*C4*C5*C6 + pi**12*C10*C3*C4*C5*C7)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7)*C9*L2)*L3)*L4)*L5)*L6 + (pi**12*C1*C10*C2*C3*C7*C9*L1*L10*L2*L3 + ((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7*C9*L1*L10 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7*C9*L10)*L2)*L3)*L4 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C5*C7*C9*L1*L10 + (pi**12*C1*C2*C3*C5*C7*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7*C9*L10)*L2)*L3 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7*C9*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7*C9*L10)*L2 + (pi**12*C1*C3*C4*C5*C7*C9*L1 + pi**12*C10*C3*C4*C5*C7*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C7*C9*L2)*L3)*L4)*L5 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7*C9*L1*L10 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9*L1 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7*C9*L2)*L3)*L4 + (pi**12*C1*C10*C5*C6*C7*C9*L1*L10 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7*C9*L10)*L2 + (pi**12*C1*C3*C5*C6*C7*C9*L1 + pi**12*C10*C3*C5*C6*C7*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C5*C6*C7*C9*L2)*L3 + (pi**12*C3*C4*C5*C6*C7*C9*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9*L1 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7*C9*L2)*L4)*L5)*L6)*L7 + ((pi**12*C1*C10*C2*C3*C7 + pi**12*C1*C10*C2*C3*C8)*C9*L1*L10*L2*L3 + (((pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C7 + (pi**12*C1*C10*C2*C3 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C4 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5)*C8)*C9*L1*L10*L2 + (((pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C7 + (pi**12*C1*C10*C3*C4 + pi**12*C1*C10*C3*C5)*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C4 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5)*C8)*C9*L10)*L2)*L3)*L4 + (((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C7 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5*C8)*C9*L1*L10*L2 + ((pi**12*C1*C10*C3*C5*C7 + pi**12*C1*C10*C3*C5*C8)*C9*L1*L10 + ((pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C7 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C5*C8)*C9*L10)*L2)*L3 + (((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C7 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5*C8)*C9*L10)*L2 + ((pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9*L1 + (pi**12*C10*C3*C4*C5*C7 + pi**12*C10*C3*C4*C5*C8)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5*C7 + (pi**12*C1 + pi**12*C2)*C3*C4*C5*C8)*C9*L2)*L3)*L4)*L5 + ((((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6)*C7 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C5 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C6 + (pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C7)*C8)*C9*L1*L10*L2 + (((pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6)*C7 + (pi**12*C1*C10*C3*C5 + pi**12*C1*C10*C3*C6 + pi**12*C1*C10*C3*C7)*C8)*C9*L1*L10 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9*L1 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6)*C7 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3*C5 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C6 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C7)*C8)*C9*L10)*L2)*L3 + ((((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6)*C7 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4)*C5 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C6 + (pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C7)*C8)*C9*L1*L10 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9*L1 + ((((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6)*C7 + (((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4)*C5 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C6 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C7)*C8)*C9*L10)*L2 + (((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9*L1 + ((pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6)*C7 + (pi**12*C10*C3*C4*C5 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C6 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C7)*C8)*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6)*C7 + ((pi**12*C1 + pi**12*C2)*C3*C4*C5 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C6 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7)*C8)*C9*L2)*L3)*L4 + ((pi**12*C1*C10*C5*C6*C7 + (pi**12*C1*C10*C5*C6 + pi**12*C1*C10*C5*C7)*C8)*C9*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6*C7 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C6 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C7)*C8)*C9*L10)*L2 + ((pi**12*C1*C3*C5*C6*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9*L1 + (pi**12*C10*C3*C5*C6*C7 + (pi**12*C10*C3*C5*C6 + pi**12*C10*C3*C5*C7)*C8)*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6*C7 + ((pi**12*C1 + pi**12*C2)*C3*C5*C6 + (pi**12*C1 + pi**12*C2)*C3*C5*C7)*C8)*C9*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6*C7 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5*C6 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C7)*C8)*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6*C7 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C6 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7)*C8)*C9*L2 + (pi**12*C3*C4*C5*C6*C7 + (pi**12*C3*C4*C5*C6 + pi**12*C3*C4*C5*C7)*C8)*C9*L3)*L4)*L5)*L6 + ((pi**12*C1*C10*C2 + pi**12*C1*C10*C3)*C7*C8*C9*L1*L10*L2 + (pi**12*C1*C10*C3*C7*C8*C9*L1*L10 + (pi**12*C1*C2*C3*C7*C8*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2)*C3*C7*C8*C9*L10)*L2)*L3 + ((pi**12*C1*C10*C3 + pi**12*C1*C10*C4 + pi**12*C1*C10*C5)*C7*C8*C9*L1*L10 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2)*C3 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C4 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5)*C7*C8*C9*L10)*L2 + ((pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8*C9*L1 + (pi**12*C10*C3*C4 + pi**12*C10*C3*C5)*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C4 + (pi**12*C1 + pi**12*C2)*C3*C5)*C7*C8*C9*L2)*L3)*L4 + (pi**12*C1*C10*C5*C7*C8*C9*L1*L10 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8*C9*L1 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5*C7*C8*C9*L10)*L2 + (pi**12*C1*C3*C5*C7*C8*C9*L1 + pi**12*C10*C3*C5*C7*C8*C9*L10 + (pi**12*C1 + pi**12*C2)*C3*C5*C7*C8*C9*L2)*L3 + (pi**12*C3*C4*C5*C7*C8*C9*L3 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8*C9*L1 + (pi**12*C10*C3 + pi**12*C10*C4)*C5*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5*C7*C8*C9*L2)*L4)*L5 + ((pi**12*C1*C10*C5 + pi**12*C1*C10*C6)*C7*C8*C9*L1*L10 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8*C9*L1 + ((pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C5 + (pi**12*C1*C10 + pi**12*C10*C2 + pi**12*C10*C3)*C6)*C7*C8*C9*L10)*L2 + ((pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8*C9*L1 + (pi**12*C10*C3*C5 + pi**12*C10*C3*C6)*C7*C8*C9*L10 + ((pi**12*C1 + pi**12*C2)*C3*C5 + (pi**12*C1 + pi**12*C2)*C3*C6)*C7*C8*C9*L2)*L3 + (((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8*C9*L1 + ((pi**12*C10*C3 + pi**12*C10*C4)*C5 + (pi**12*C10*C3 + pi**12*C10*C4 + pi**12*C10*C5)*C6)*C7*C8*C9*L10 + (((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4)*C5 + ((pi**12*C1 + pi**12*C2)*C3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C4 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5)*C6)*C7*C8*C9*L2 + (pi**12*C3*C4*C5 + (pi**12*C3*C4 + pi**12*C3*C5)*C6)*C7*C8*C9*L3)*L4 + (pi**12*C1*C5*C6*C7*C8*C9*L1 + pi**12*C10*C5*C6*C7*C8*C9*L10 + pi**12*C3*C5*C6*C7*C8*C9*L3 + (pi**12*C1 + pi**12*C2 + pi**12*C3)*C5*C6*C7*C8*C9*L2 + (pi**12*C3 + pi**12*C4)*C5*C6*C7*C8*C9*L4)*L5)*L6)*L7)*L8)*L9)*ZL + ((pi**12*C1*C2*C3*C4*C5*C6 + pi**12*C1*C2*C3*C4*C5*C7)*L10*L2*L3*L4*L5*L6 + (pi**12*C1*C2*C3*C4*C5*C7*L10*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7*L10*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C6*C7*L10*L2*L3 + (pi**12*C1*C3*C4*C5*C6*C7*L10*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7*L10*L2)*L4)*L5)*L6)*L7 + ((pi**12*C1*C2*C3*C4*C5*C7 + pi**12*C1*C2*C3*C4*C5*C8 + pi**12*C1*C2*C3*C4*C5*C9)*L10*L2*L3*L4*L5 + (((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6)*C7 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C8 + (pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6*C7 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C8 + (pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9)*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9)*L10*L2 + (pi**12*C1*C3*C4*C5*C6*C7 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C8 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9)*L10*L3)*L4)*L5)*L6 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C8 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9)*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C7*C8 + pi**12*C1*C2*C3*C5*C7*C9)*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C8 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9)*L10*L2 + (pi**12*C1*C3*C4*C5*C7*C8 + pi**12*C1*C3*C4*C5*C7*C9)*L10*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C8 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9)*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C8 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9)*L10*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C8 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9)*L10*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C8 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9)*L10*L2 + (pi**12*C1*C3*C5*C6*C7*C8 + pi**12*C1*C3*C5*C6*C7*C9)*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C8 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9)*L10*L4)*L5)*L6)*L7)*L8 + (pi**12*C1*C2*C3*C4*C5*C9*L10*L2*L3*L4*L5 + ((pi**12*C1*C2*C3*C4*C5 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C6 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7)*C9*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C6 + pi**12*C1*C2*C3*C5*C7)*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7)*C9*L10*L2 + (pi**12*C1*C3*C4*C5*C6 + pi**12*C1*C3*C4*C5*C7)*C9*L10*L3)*L4)*L5)*L6 + ((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7*C9*L10*L2*L3*L4 + (pi**12*C1*C2*C3*C5*C7*C9*L10*L2*L3 + (pi**12*C1*C3*C4*C5*C7*C9*L10*L3 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7*C9*L10*L2)*L4)*L5 + ((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7*C9*L10*L2 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7*C9*L10*L3)*L4 + (pi**12*C1*C3*C5*C6*C7*C9*L10*L3 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7*C9*L10*L2 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7*C9*L10*L4)*L5)*L6)*L7 + (((pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C7 + (pi**12*C1*C2*C3*C4 + pi**12*C1*C2*C3*C5)*C8)*C9*L10*L2*L3*L4 + ((pi**12*C1*C2*C3*C5*C7 + pi**12*C1*C2*C3*C5*C8)*C9*L10*L2*L3 + (((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C7 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5*C8)*C9*L10*L2 + (pi**12*C1*C3*C4*C5*C7 + pi**12*C1*C3*C4*C5*C8)*C9*L10*L3)*L4)*L5 + (((pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6)*C7 + (pi**12*C1*C2*C3*C5 + pi**12*C1*C2*C3*C6 + pi**12*C1*C2*C3*C7)*C8)*C9*L10*L2*L3 + ((((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6)*C7 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4)*C5 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C6 + (pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7)*C8)*C9*L10*L2 + ((pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6)*C7 + (pi**12*C1*C3*C4*C5 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C6 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7)*C8)*C9*L10*L3)*L4 + (((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6*C7 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5*C6 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7)*C8)*C9*L10*L2 + (pi**12*C1*C3*C5*C6*C7 + (pi**12*C1*C3*C5*C6 + pi**12*C1*C3*C5*C7)*C8)*C9*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6*C7 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5*C6 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7)*C8)*C9*L10*L4)*L5)*L6 + (pi**12*C1*C2*C3*C7*C8*C9*L10*L2*L3 + ((pi**12*C1*C2*C3 + (pi**12*C1*C2 + pi**12*C1*C3)*C4 + (pi**12*C1*C2 + pi**12*C1*C3)*C5)*C7*C8*C9*L10*L2 + (pi**12*C1*C3*C4 + pi**12*C1*C3*C5)*C7*C8*C9*L10*L3)*L4 + (pi**12*C1*C3*C5*C7*C8*C9*L10*L3 + (pi**12*C1*C2 + pi**12*C1*C3)*C5*C7*C8*C9*L10*L2 + (pi**12*C1*C3 + pi**12*C1*C4)*C5*C7*C8*C9*L10*L4)*L5 + (pi**12*C1*C5*C6*C7*C8*C9*L10*L5 + ((pi**12*C1*C2 + pi**12*C1*C3)*C5 + (pi**12*C1*C2 + pi**12*C1*C3)*C6)*C7*C8*C9*L10*L2 + (pi**12*C1*C3*C5 + pi**12*C1*C3*C6)*C7*C8*C9*L10*L3 + ((pi**12*C1*C3 + pi**12*C1*C4)*C5 + (pi**12*C1*C3 + pi**12*C1*C4 + pi**12*C1*C5)*C6)*C7*C8*C9*L10*L4)*L6)*L7)*L8)*L9)*ZS)*freq**12 + (-2048*I*pi**11*C1*C2*C3*C4*C5*L1*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 - 2048*I*pi**11*C1*C2*C3*C4*C5*C9)*L10*L2*L3*L4*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9)*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C5*C6 - 2048*I*pi**11*C1*C10*C2*C3*C5*C7 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4*C5*C6 - 2048*I*pi**11*C1*C10*C3*C4*C5*C7 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6 - 2048*I*pi**11*C1*C2*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + (((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C9 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C7)*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C7*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7)*L10*L2 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C7*L2 + (-2048*I*pi**11*C1*C10*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C7*C9)*L10)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C9 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6)*C7)*L10*L2*L3 + ((((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6)*C7)*L10*L2 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9 + (-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6)*C7)*L10)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C9 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6*C7)*L10*L2 + (-2048*I*pi**11*C1*C2*C3*C5*C6*C7*L2 + (-2048*I*pi**11*C1*C10*C3*C5*C6*C7 - 2048*I*pi**11*C1*C3*C5*C6*C7*C9)*L10)*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7*L3 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7*L2 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C9 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6*C7)*L10)*L4)*L5)*L6)*L7 + (((-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8)*C9)*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C10*C2*C3*C5*C7 - 2048*I*pi**11*C1*C10*C2*C3*C5*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8)*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4*C5*C7 - 2048*I*pi**11*C1*C10*C3*C4*C5*C8 + (-2048*I*pi**11*C1*C10*C3*C4*C5 - 2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C7 - 2048*I*pi**11*C1*C2*C3*C4*C5*C8 - 2048*I*pi**11*C1*C2*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6 - 2048*I*pi**11*C1*C10*C2*C3*C7)*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6 + (-2048*I*pi**11*C1*C10*C2*C3 - 2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8)*C9)*L10*L2*L3 + ((((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 + (-2048*I*pi**11*C1*C10 - 2048*I*pi**11*C1*C2)*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8)*C9)*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C3*C4 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C3*C4)*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C10*C3*C5*C6 - 2048*I*pi**11*C1*C10*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C10*C3*C5*C6 + (-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C3*C5*C6)*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5)*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9)*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C8 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2*C3*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C3*C7 - 2048*I*pi**11*C1*C2*C3*C7*C8)*C9)*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C9)*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7*C8 + ((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C9)*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7)*C9)*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C7*C8 + (-2048*I*pi**11*C1*C10*C3*C5*C7 - 2048*I*pi**11*C1*C3*C5*C7*C8)*C9)*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C7*C8 - 2048*I*pi**11*C1*C2*C3*C5*C7*C9)*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9)*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*C8 - 2048*I*pi**11*C1*C3*C4*C5*C7*C9)*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7*C8 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7)*C9)*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7*C8 + ((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7)*C9)*L10 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C9)*L2)*L3 + ((((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7*C8 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7)*C9)*L10 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9)*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C8 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C5*C6*C7*C8 + (-2048*I*pi**11*C1*C10*C5*C6*C7 - 2048*I*pi**11*C1*C5*C6*C7*C8)*C9)*L10 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C8 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C9)*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*C8 - 2048*I*pi**11*C1*C3*C5*C6*C7*C9)*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C8 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C10*C2*C3*C4 - 2048*I*pi**11*C1*C10*C2*C3*C5)*C9*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C10*C2*C3*C5*C9*L10*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5*C9*L10*L2 + (-2048*I*pi**11*C1*C10*C3*C4*C5*C9*L10 - 2048*I*pi**11*C1*C2*C3*C4*C5*C9*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C10*C2*C3*C5 - 2048*I*pi**11*C1*C10*C2*C3*C6 - 2048*I*pi**11*C1*C10*C2*C3*C7)*C9*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4)*C5 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C6 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7)*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4*C5 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C6 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7)*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*C9*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7)*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C6 - 2048*I*pi**11*C1*C10*C3*C5*C7)*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*C9*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + (-2048*I*pi**11*C1*C10*C2*C3*C7*C9*L10*L2*L3 + ((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*C9*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7*C9*L10*L2 + (-2048*I*pi**11*C1*C10*C3*C5*C7*C9*L10 - 2048*I*pi**11*C1*C2*C3*C5*C7*C9*L2)*L3 + (-2048*I*pi**11*C1*C3*C4*C5*C7*C9*L3 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7*C9*L10 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7*C9*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*C9*L2 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*C9*L3)*L4 + (-2048*I*pi**11*C1*C10*C5*C6*C7*C9*L10 - 2048*I*pi**11*C1*C3*C5*C6*C7*C9*L3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*C9*L2 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C10*C2*C3*C7 - 2048*I*pi**11*C1*C10*C2*C3*C8)*C9*L10*L2*L3 + (((-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C7 + (-2048*I*pi**11*C1*C10*C2*C3 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C4 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5)*C8)*C9*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C7 + (-2048*I*pi**11*C1*C10*C3*C4 - 2048*I*pi**11*C1*C10*C3*C5)*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8)*C9*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C7 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5*C8)*C9*L10*L2 + ((-2048*I*pi**11*C1*C10*C3*C5*C7 - 2048*I*pi**11*C1*C10*C3*C5*C8)*C9*L10 + (-2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8)*C9*L2)*L3 + (((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C7 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8)*C9*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8)*C9*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C5 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C6 + (-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C7)*C8)*C9*L10*L2 + (((-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6)*C7 + (-2048*I*pi**11*C1*C10*C3*C5 - 2048*I*pi**11*C1*C10*C3*C6 - 2048*I*pi**11*C1*C10*C3*C7)*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8)*C9*L2)*L3 + ((((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4)*C5 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C6 + (-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C7)*C8)*C9*L10 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8)*C9*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8)*C9*L3)*L4 + ((-2048*I*pi**11*C1*C10*C5*C6*C7 + (-2048*I*pi**11*C1*C10*C5*C6 - 2048*I*pi**11*C1*C10*C5*C7)*C8)*C9*L10 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8)*C9*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8)*C9*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C10*C2 - 2048*I*pi**11*C1*C10*C3)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C1*C10*C3*C7*C8*C9*L10 - 2048*I*pi**11*C1*C2*C3*C7*C8*C9*L2)*L3 + ((-2048*I*pi**11*C1*C10*C3 - 2048*I*pi**11*C1*C10*C4 - 2048*I*pi**11*C1*C10*C5)*C7*C8*C9*L10 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8*C9*L2 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8*C9*L3)*L4 + (-2048*I*pi**11*C1*C10*C5*C7*C8*C9*L10 - 2048*I*pi**11*C1*C3*C5*C7*C8*C9*L3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8*C9*L2 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8*C9*L4)*L5 + (-2048*I*pi**11*C1*C5*C6*C7*C8*C9*L5 + (-2048*I*pi**11*C1*C10*C5 - 2048*I*pi**11*C1*C10*C6)*C7*C8*C9*L10 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8*C9*L2 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8*C9*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZL*ZS + ((-2048*I*pi**11*C1*C2*C3*C4*C5 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C6 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7)*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C6 - 2048*I*pi**11*C1*C2*C3*C5*C7)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C6 - 2048*I*pi**11*C1*C3*C4*C5*C7)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7)*L10*L2)*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7*L1*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C7*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C7*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7*L10*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7*L10*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C5*C6*C7*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7*L10*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C6*C7*L10*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7*L10*L2)*L4)*L5)*L6)*L7 + (((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C7 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C8 + (-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C9)*L1*L10*L2*L3*L4 + ((-2048*I*pi**11*C1*C2*C3*C5*C7 - 2048*I*pi**11*C1*C2*C3*C5*C8 - 2048*I*pi**11*C1*C2*C3*C5*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5*C7 - 2048*I*pi**11*C1*C3*C4*C5*C8 - 2048*I*pi**11*C1*C3*C4*C5*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C7 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C9)*L10*L2)*L3)*L4)*L5 + (((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6)*C7 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C8 + (-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C9)*L1*L10*L2*L3 + ((((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C8 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6)*C7 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C8 + (-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C9)*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C6*C7 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C8 + (-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C9)*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6*C7 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C8 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C9)*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C6*C7 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C8 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C9)*L10*L3)*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2*C3*C7*C8 - 2048*I*pi**11*C1*C2*C3*C7*C9)*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C8 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C8 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C9)*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C8 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C9)*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C7*C8 - 2048*I*pi**11*C1*C3*C5*C7*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C9)*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C8 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C9)*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C7*C8 - 2048*I*pi**11*C3*C4*C5*C7*C9)*L10*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C9)*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C8 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C9)*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C8 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C9)*L10*L2)*L3 + ((((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C8 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C9)*L1*L10 + ((((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C8 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C9)*L10*L2 + ((-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C8 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C9)*L10*L3)*L4 + ((-2048*I*pi**11*C1*C5*C6*C7*C8 - 2048*I*pi**11*C1*C5*C6*C7*C9)*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C8 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C9)*L10*L2 + (-2048*I*pi**11*C3*C5*C6*C7*C8 - 2048*I*pi**11*C3*C5*C6*C7*C9)*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C8 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C9)*L10*L4)*L5)*L6)*L7)*L8 + ((-2048*I*pi**11*C1*C2*C3*C4 - 2048*I*pi**11*C1*C2*C3*C5)*C9*L1*L10*L2*L3*L4 + (-2048*I*pi**11*C1*C2*C3*C5*C9*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C4*C5*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5*C9*L10*L2)*L3)*L4)*L5 + ((-2048*I*pi**11*C1*C2*C3*C5 - 2048*I*pi**11*C1*C2*C3*C6 - 2048*I*pi**11*C1*C2*C3*C7)*C9*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4)*C5 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C6 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4*C5 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C6 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7)*C9*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C6 - 2048*I*pi**11*C1*C3*C5*C7)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7)*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7)*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C6 - 2048*I*pi**11*C3*C4*C5*C7)*C9*L10*L3)*L4)*L5)*L6 + (-2048*I*pi**11*C1*C2*C3*C7*C9*L1*L10*L2*L3 + ((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7*C9*L10*L2)*L3)*L4 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C5*C7*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7*C9*L10*L2)*L3 + (-2048*I*pi**11*C3*C4*C5*C7*C9*L10*L3 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7*C9*L10*L2)*L4)*L5 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7*C9*L10*L3)*L4 + (-2048*I*pi**11*C1*C5*C6*C7*C9*L1*L10 - 2048*I*pi**11*C3*C5*C6*C7*C9*L10*L3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7*C9*L10*L2 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7*C9*L10*L4)*L5)*L6)*L7 + ((-2048*I*pi**11*C1*C2*C3*C7 - 2048*I*pi**11*C1*C2*C3*C8)*C9*L1*L10*L2*L3 + (((-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C7 + (-2048*I*pi**11*C1*C2*C3 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5)*C8)*C9*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C7 + (-2048*I*pi**11*C1*C3*C4 - 2048*I*pi**11*C1*C3*C5)*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5)*C8)*C9*L10*L2)*L3)*L4 + (((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C7 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5*C8)*C9*L1*L10*L2 + ((-2048*I*pi**11*C1*C3*C5*C7 - 2048*I*pi**11*C1*C3*C5*C8)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C7 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5*C8)*C9*L10*L2)*L3 + (((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C7 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5*C8)*C9*L10*L2 + (-2048*I*pi**11*C3*C4*C5*C7 - 2048*I*pi**11*C3*C4*C5*C8)*C9*L10*L3)*L4)*L5 + ((((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6)*C7 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C5 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C6 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C7)*C8)*C9*L1*L10*L2 + (((-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6)*C7 + (-2048*I*pi**11*C1*C3*C5 - 2048*I*pi**11*C1*C3*C6 - 2048*I*pi**11*C1*C3*C7)*C8)*C9*L1*L10 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6)*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C7)*C8)*C9*L10*L2)*L3 + ((((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6)*C7 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4)*C5 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C6 + (-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C7)*C8)*C9*L1*L10 + ((((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6)*C7 + (((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4)*C5 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C6 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C7)*C8)*C9*L10*L2 + ((-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6)*C7 + (-2048*I*pi**11*C3*C4*C5 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C6 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C7)*C8)*C9*L10*L3)*L4 + ((-2048*I*pi**11*C1*C5*C6*C7 + (-2048*I*pi**11*C1*C5*C6 - 2048*I*pi**11*C1*C5*C7)*C8)*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6*C7 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C6 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C7)*C8)*C9*L10*L2 + (-2048*I*pi**11*C3*C5*C6*C7 + (-2048*I*pi**11*C3*C5*C6 - 2048*I*pi**11*C3*C5*C7)*C8)*C9*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6*C7 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C6 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C7)*C8)*C9*L10*L4)*L5)*L6 + ((-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C1*C3)*C7*C8*C9*L1*L10*L2 + (-2048*I*pi**11*C1*C3*C7*C8*C9*L1*L10 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3*C7*C8*C9*L10*L2)*L3 + ((-2048*I*pi**11*C1*C3 - 2048*I*pi**11*C1*C4 - 2048*I*pi**11*C1*C5)*C7*C8*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2)*C3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C4 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3*C4 - 2048*I*pi**11*C3*C5)*C7*C8*C9*L10*L3)*L4 + (-2048*I*pi**11*C1*C5*C7*C8*C9*L1*L10 - 2048*I*pi**11*C3*C5*C7*C8*C9*L10*L3 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5*C7*C8*C9*L10*L4)*L5 + (-2048*I*pi**11*C5*C6*C7*C8*C9*L10*L5 + (-2048*I*pi**11*C1*C5 - 2048*I*pi**11*C1*C6)*C7*C8*C9*L1*L10 + ((-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C5 + (-2048*I*pi**11*C1 - 2048*I*pi**11*C2 - 2048*I*pi**11*C3)*C6)*C7*C8*C9*L10*L2 + (-2048*I*pi**11*C3*C5 - 2048*I*pi**11*C3*C6)*C7*C8*C9*L10*L3 + ((-2048*I*pi**11*C3 - 2048*I*pi**11*C4)*C5 + (-2048*I*pi**11*C3 - 2048*I*pi**11*C4 - 2048*I*pi**11*C5)*C6)*C7*C8*C9*L10*L4)*L6)*L7)*L8)*L9)*freq**11 - 1024*(((pi**10*C1*C10*C2*C3*C4 + pi**10*C1*C10*C2*C3*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L1*L10*L2*L3*L4 + ((pi**10*C1*C10*C2*C3*C5 + pi**10*C1*C2*C3*C5*C9)*L1*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4)*C5)*L1*L10*L2 + ((pi**10*C1*C10*C3*C4*C5 + pi**10*C1*C3*C4*C5*C9)*L1*L10 + (pi**10*C1*C2*C3*C4*C5*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C4*C5)*L10)*L2)*L3)*L4)*L5 + ((pi**10*C1*C10*C2*C3*C5 + pi**10*C1*C10*C2*C3*C6 + pi**10*C1*C10*C2*C3*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L1*L10*L2*L3 + (((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4)*C5 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C6 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C4*C5 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C6 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C6 + pi**10*C1*C10*C3*C5*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9)*L10)*L2 + ((pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L1 + (pi**10*C10*C3*C4*C5*C6 + pi**10*C10*C3*C4*C5*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7)*L2)*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2*C3*C7 + pi**10*C1*C2*C3*C7*C9)*L1*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7)*L1*L10*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7)*L1*L10 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7)*L10)*L2)*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C7 + pi**10*C1*C3*C5*C7*C9)*L1*L10 + (pi**10*C1*C2*C3*C5*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7*C9 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7)*L10)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7)*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7)*L10)*L2 + (pi**10*C1*C3*C4*C5*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C7*L2 + (pi**10*C10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C7*C9)*L10)*L3)*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6)*C7)*L1*L10*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6)*C7)*L1*L10 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L1 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6)*C7)*L10)*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6)*C7)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L1 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6)*C7)*L10)*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6)*C7)*L10)*L3)*L4 + ((pi**10*C1*C10*C5*C6*C7 + pi**10*C1*C5*C6*C7*C9)*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6*C7)*L10)*L2 + (pi**10*C1*C3*C5*C6*C7*L1 + (pi**10*C1 + pi**10*C2)*C3*C5*C6*C7*L2 + (pi**10*C10*C3*C5*C6*C7 + pi**10*C3*C5*C6*C7*C9)*L10)*L3 + (pi**10*C3*C4*C5*C6*C7*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L1 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7*L2 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7*C9 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C6*C7)*L10)*L4)*L5)*L6)*L7 + ((pi**10*C1*C10*C2*C3*C7 + pi**10*C1*C10*C2*C3*C8 + (pi**10*C1*C10*C2*C3 + pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9)*L1*L10*L2*L3 + (((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C7 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C8 + (pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9)*L1*L10*L2 + (((pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C7 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C8 + (pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9)*L1*L10 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C8)*C9)*L10)*L2)*L3)*L4 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C7 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C5*C7 + pi**10*C1*C10*C3*C5*C8 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8 + pi**10*C1*C2*C3*C5*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C5*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C7 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5)*C9)*L10)*L2 + ((pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8 + pi**10*C1*C3*C4*C5*C9)*L1 + (pi**10*C10*C3*C4*C5*C7 + pi**10*C10*C3*C4*C5*C8 + (pi**10*C10*C3*C4*C5 + pi**10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C8 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C9)*L2)*L3)*L4)*L5 + ((((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6)*C7 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C8 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9)*L1*L10*L2 + (((pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6)*C7 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + pi**10*C1*C10*C3*C7)*C8 + (pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9)*L1*L10 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1 + pi**10*C2)*C3*C7)*C8)*C9)*L10)*L2)*L3 + ((((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6)*C7 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C8 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + (pi**10*C1*C10 + pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9)*L1*L10 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L1 + ((((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6)*C7 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C8 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + (pi**10*C1 + pi**10*C10 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7)*C8)*C9)*L10)*L2 + (((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L1 + ((pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6)*C7 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C8 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + (pi**10*C10*C3 + pi**10*C3*C4)*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6 + (pi**10*C3*C4 + pi**10*C3*C5)*C7)*C8)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9)*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C6*C7 + (pi**10*C1*C10*C5*C6 + pi**10*C1*C10*C5*C7)*C8 + (pi**10*C1*C10*C5*C6 + (pi**10*C1*C10*C5 + pi**10*C1*C5*C6)*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9)*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6*C7 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C8 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7)*C8)*C9)*L10)*L2 + ((pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L1 + (pi**10*C10*C3*C5*C6*C7 + (pi**10*C10*C3*C5*C6 + pi**10*C10*C3*C5*C7)*C8 + (pi**10*C10*C3*C5*C6 + (pi**10*C10*C3*C5 + pi**10*C3*C5*C6)*C7 + (pi**10*C3*C5*C6 + pi**10*C3*C5*C7)*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6*C7 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C8 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5)*C7 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C3 + pi**10*C4)*C5*C7)*C8)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9)*L2 + (pi**10*C3*C4*C5*C6*C7 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C8 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9)*L3)*L4)*L5)*L6 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C7*C8 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C9)*L1*L10*L2 + ((pi**10*C1*C10*C3*C7*C8 + (pi**10*C1*C10*C3*C7 + pi**10*C1*C3*C7*C8)*C9)*L1*L10 + ((pi**10*C1*C2*C3*C7*C8 + pi**10*C1*C2*C3*C7*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C7*C8 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C9)*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C9)*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C9)*L10)*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9)*L1 + ((pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7*C8 + ((pi**10*C3*C4 + pi**10*C3*C5)*C7*C8 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9)*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C7*C8 + (pi**10*C1*C10*C5*C7 + pi**10*C1*C5*C7*C8)*C9)*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9)*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7*C8 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7*C8 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C9)*L10)*L2 + ((pi**10*C1*C3*C5*C7*C8 + pi**10*C1*C3*C5*C7*C9)*L1 + (pi**10*C10*C3*C5*C7*C8 + (pi**10*C10*C3*C5*C7 + pi**10*C3*C5*C7*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7*C8 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C9)*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9)*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C7*C8 + ((pi**10*C3 + pi**10*C4)*C5*C7*C8 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9)*L2 + (pi**10*C3*C4*C5*C7*C8 + pi**10*C3*C4*C5*C7*C9)*L3)*L4)*L5 + (((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7*C8 + ((pi**10*C1*C5 + pi**10*C1*C6)*C7*C8 + (pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7)*C9)*L1*L10 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9)*L1 + (((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7*C8 + (((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C6)*C7*C8 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7)*C9)*L10)*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9)*L1 + ((pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7*C8 + ((pi**10*C3*C5 + pi**10*C3*C6)*C7*C8 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7)*C9)*L10 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C8 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9)*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9)*L1 + (((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7*C8 + (((pi**10*C3 + pi**10*C4)*C5 + (pi**10*C3 + pi**10*C4 + pi**10*C5)*C6)*C7*C8 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7)*C9)*L10 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C8 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9)*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C8 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9)*L3)*L4 + ((pi**10*C1*C5*C6*C7*C8 + pi**10*C1*C5*C6*C7*C9)*L1 + (pi**10*C10*C5*C6*C7*C8 + (pi**10*C10*C5*C6*C7 + pi**10*C5*C6*C7*C8)*C9)*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C8 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9)*L2 + (pi**10*C3*C5*C6*C7*C8 + pi**10*C3*C5*C6*C7*C9)*L3 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7*C8 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C9)*L4)*L5)*L6)*L7)*L8 + (pi**10*C1*C10*C2*C3*C9*L1*L10*L2*L3 + ((pi**10*C1*C10*C2*C3 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C4 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C4 + pi**10*C1*C10*C3*C5)*C9*L1*L10 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C4 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5)*C9*L10)*L2)*L3)*L4 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5*C9*L1*L10*L2 + (pi**10*C1*C10*C3*C5*C9*L1*L10 + (pi**10*C1*C2*C3*C5*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C5*C9*L10)*L2)*L3 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5*C9*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5*C9*L10)*L2 + (pi**10*C1*C3*C4*C5*C9*L1 + pi**10*C10*C3*C4*C5*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C9*L2)*L3)*L4)*L5 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C5 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C6 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C5 + pi**10*C1*C10*C3*C6 + pi**10*C1*C10*C3*C7)*C9*L1*L10 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C5 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C6 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7)*C9*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4)*C5 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C6 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7)*C9*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4)*C5 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C6 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7)*C9*L10)*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9*L1 + (pi**10*C10*C3*C4*C5 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C6 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4*C5 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7)*C9*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C6 + pi**10*C1*C10*C5*C7)*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7)*C9*L10)*L2 + ((pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9*L1 + (pi**10*C10*C3*C5*C6 + pi**10*C10*C3*C5*C7)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C6 + (pi**10*C1 + pi**10*C2)*C3*C5*C7)*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C6 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7)*C9*L2 + (pi**10*C3*C4*C5*C6 + pi**10*C3*C4*C5*C7)*C9*L3)*L4)*L5)*L6 + ((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7*C9*L1*L10*L2 + (pi**10*C1*C10*C3*C7*C9*L1*L10 + (pi**10*C1*C2*C3*C7*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C7*C9*L10)*L2)*L3 + ((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7*C9*L1*L10 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7*C9*L10)*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9*L1 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7*C9*L2)*L3)*L4 + (pi**10*C1*C10*C5*C7*C9*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7*C9*L10)*L2 + (pi**10*C1*C3*C5*C7*C9*L1 + pi**10*C10*C3*C5*C7*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C5*C7*C9*L2)*L3 + (pi**10*C3*C4*C5*C7*C9*L3 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9*L1 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7*C9*L2)*L4)*L5 + ((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7*C9*L10)*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9*L1 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7*C9*L2 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7*C9*L3)*L4 + (pi**10*C1*C5*C6*C7*C9*L1 + pi**10*C10*C5*C6*C7*C9*L10 + pi**10*C3*C5*C6*C7*C9*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7*C9*L2 + (pi**10*C3 + pi**10*C4)*C5*C6*C7*C9*L4)*L5)*L6)*L7 + (((pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C7 + (pi**10*C1*C10*C2 + pi**10*C1*C10*C3)*C8)*C9*L1*L10*L2 + ((pi**10*C1*C10*C3*C7 + pi**10*C1*C10*C3*C8)*C9*L1*L10 + ((pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3*C7 + (pi**10*C1*C10 + pi**10*C10*C2)*C3*C8)*C9*L10)*L2)*L3 + (((pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C7 + (pi**10*C1*C10*C3 + pi**10*C1*C10*C4 + pi**10*C1*C10*C5)*C8)*C9*L1*L10 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2)*C3 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C4 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5)*C8)*C9*L10)*L2 + (((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9*L1 + ((pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C7 + (pi**10*C10*C3*C4 + pi**10*C10*C3*C5)*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C4 + (pi**10*C1 + pi**10*C2)*C3*C5)*C8)*C9*L2)*L3)*L4 + ((pi**10*C1*C10*C5*C7 + pi**10*C1*C10*C5*C8)*C9*L1*L10 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8)*C9*L1 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C7 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5*C8)*C9*L10)*L2 + ((pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9*L1 + (pi**10*C10*C3*C5*C7 + pi**10*C10*C3*C5*C8)*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3*C5*C7 + (pi**10*C1 + pi**10*C2)*C3*C5*C8)*C9*L2)*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8)*C9*L1 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5*C7 + (pi**10*C10*C3 + pi**10*C10*C4)*C5*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C7 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5*C8)*C9*L2 + (pi**10*C3*C4*C5*C7 + pi**10*C3*C4*C5*C8)*C9*L3)*L4)*L5 + (((pi**10*C1*C10*C5 + pi**10*C1*C10*C6)*C7 + (pi**10*C1*C10*C5 + pi**10*C1*C10*C6 + pi**10*C1*C10*C7)*C8)*C9*L1*L10 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9*L1 + (((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6)*C7 + ((pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C5 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C6 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C7)*C8)*C9*L10)*L2 + (((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9*L1 + ((pi**10*C10*C3*C5 + pi**10*C10*C3*C6)*C7 + (pi**10*C10*C3*C5 + pi**10*C10*C3*C6 + pi**10*C10*C3*C7)*C8)*C9*L10 + (((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6)*C7 + ((pi**10*C1 + pi**10*C2)*C3*C5 + (pi**10*C1 + pi**10*C2)*C3*C6 + (pi**10*C1 + pi**10*C2)*C3*C7)*C8)*C9*L2)*L3 + ((((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9*L1 + (((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6)*C7 + ((pi**10*C10*C3 + pi**10*C10*C4)*C5 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C6 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C7)*C8)*C9*L10 + ((((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6)*C7 + (((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4)*C5 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C6 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7)*C8)*C9*L2 + ((pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6)*C7 + (pi**10*C3*C4*C5 + (pi**10*C3*C4 + pi**10*C3*C5)*C6 + (pi**10*C3*C4 + pi**10*C3*C5)*C7)*C8)*C9*L3)*L4 + ((pi**10*C1*C5*C6*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9*L1 + (pi**10*C10*C5*C6*C7 + (pi**10*C10*C5*C6 + pi**10*C10*C5*C7)*C8)*C9*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6*C7 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C6 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7)*C8)*C9*L2 + (pi**10*C3*C5*C6*C7 + (pi**10*C3*C5*C6 + pi**10*C3*C5*C7)*C8)*C9*L3 + ((pi**10*C3 + pi**10*C4)*C5*C6*C7 + ((pi**10*C3 + pi**10*C4)*C5*C6 + (pi**10*C3 + pi**10*C4)*C5*C7)*C8)*C9*L4)*L5)*L6 + (pi**10*C1*C10*C7*C8*C9*L1*L10 + ((pi**10*C1*C2 + pi**10*C1*C3)*C7*C8*C9*L1 + (pi**10*C1*C10 + pi**10*C10*C2 + pi**10*C10*C3)*C7*C8*C9*L10)*L2 + (pi**10*C1*C3*C7*C8*C9*L1 + pi**10*C10*C3*C7*C8*C9*L10 + (pi**10*C1 + pi**10*C2)*C3*C7*C8*C9*L2)*L3 + ((pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8*C9*L1 + (pi**10*C10*C3 + pi**10*C10*C4 + pi**10*C10*C5)*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2)*C3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C4 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5)*C7*C8*C9*L2 + (pi**10*C3*C4 + pi**10*C3*C5)*C7*C8*C9*L3)*L4 + (pi**10*C1*C5*C7*C8*C9*L1 + pi**10*C10*C5*C7*C8*C9*L10 + pi**10*C3*C5*C7*C8*C9*L3 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C5*C7*C8*C9*L2 + (pi**10*C3 + pi**10*C4)*C5*C7*C8*C9*L4)*L5 + (pi**10*C5*C6*C7*C8*C9*L5 + (pi**10*C1*C5 + pi**10*C1*C6)*C7*C8*C9*L1 + (pi**10*C10*C5 + pi**10*C10*C6)*C7*C8*C9*L10 + ((pi**10*C1 + pi**10*C2 + pi**10*C3)*C5 + (pi**10*C1 + pi**10*C2 + pi**10*C3)*C6)*C7*C8*C9*L2 + (pi**10*C3*C5 + pi**10*C3*C6)*C7*C8*C9*L3 + ((pi**10*C3 + pi**10*C4)*C5 + (pi**10*C3 + pi**10*C4 + pi**10*C5)*C6)*C7*C8*C9*L4)*L6)*L7)*L8)*L9)*ZL + (pi**10*C1*C2*C3*C4*C5*L10*L2*L3*L4*L5 + ((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7)*L10*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C6 + pi**10*C1*C2*C3*C5*C7)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7)*L10*L2 + (pi**10*C1*C3*C4*C5*C6 + pi**10*C1*C3*C4*C5*C7)*L10*L3)*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7*L10*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C7*L10*L2*L3 + (pi**10*C1*C3*C4*C5*C7*L10*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7*L10*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7*L10*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7*L10*L3)*L4 + (pi**10*C1*C3*C5*C6*C7*L10*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7*L10*L4)*L5)*L6)*L7 + (((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C7 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C8 + (pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9)*L10*L2*L3*L4 + ((pi**10*C1*C2*C3*C5*C7 + pi**10*C1*C2*C3*C5*C8 + pi**10*C1*C2*C3*C5*C9)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9)*L10*L2 + (pi**10*C1*C3*C4*C5*C7 + pi**10*C1*C3*C4*C5*C8 + pi**10*C1*C3*C4*C5*C9)*L10*L3)*L4)*L5 + (((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6)*C7 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C8 + (pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9)*L10*L2*L3 + ((((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6)*C7 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C8 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9)*L10*L2 + ((pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6)*C7 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C8 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9)*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9)*L10*L2 + (pi**10*C1*C3*C5*C6*C7 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C8 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9)*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9)*L10*L4)*L5)*L6 + ((pi**10*C1*C2*C3*C7*C8 + pi**10*C1*C2*C3*C7*C9)*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C8 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9)*L10*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C8 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9)*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C8 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9)*L10*L2 + (pi**10*C1*C3*C5*C7*C8 + pi**10*C1*C3*C5*C7*C9)*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C8 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9)*L10*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C8 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9)*L10*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C8 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9)*L10*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C8 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9)*L10*L4 + (pi**10*C1*C5*C6*C7*C8 + pi**10*C1*C5*C6*C7*C9)*L10*L5)*L6)*L7)*L8 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C9*L10*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C9*L10*L2*L3 + (pi**10*C1*C3*C4*C5*C9*L10*L3 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5*C9*L10*L2)*L4)*L5 + ((pi**10*C1*C2*C3*C5 + pi**10*C1*C2*C3*C6 + pi**10*C1*C2*C3*C7)*C9*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4)*C5 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C6 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7)*C9*L10*L2 + (pi**10*C1*C3*C4*C5 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C6 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7)*C9*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7)*C9*L10*L2 + (pi**10*C1*C3*C5*C6 + pi**10*C1*C3*C5*C7)*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C6 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7)*C9*L10*L4)*L5)*L6 + (pi**10*C1*C2*C3*C7*C9*L10*L2*L3 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7*C9*L10*L2 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7*C9*L10*L3)*L4 + (pi**10*C1*C3*C5*C7*C9*L10*L3 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C7*C9*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C7*C9*L10*L4)*L5 + (pi**10*C1*C5*C6*C7*C9*L10*L5 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7*C9*L10*L2 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7*C9*L10*L4)*L6)*L7 + ((pi**10*C1*C2*C3*C7 + pi**10*C1*C2*C3*C8)*C9*L10*L2*L3 + (((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C7 + (pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C1*C3)*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C5)*C8)*C9*L10*L2 + ((pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C7 + (pi**10*C1*C3*C4 + pi**10*C1*C3*C5)*C8)*C9*L10*L3)*L4 + (((pi**10*C1*C2 + pi**10*C1*C3)*C5*C7 + (pi**10*C1*C2 + pi**10*C1*C3)*C5*C8)*C9*L10*L2 + (pi**10*C1*C3*C5*C7 + pi**10*C1*C3*C5*C8)*C9*L10*L3 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5*C7 + (pi**10*C1*C3 + pi**10*C1*C4)*C5*C8)*C9*L10*L4)*L5 + ((((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6)*C7 + ((pi**10*C1*C2 + pi**10*C1*C3)*C5 + (pi**10*C1*C2 + pi**10*C1*C3)*C6 + (pi**10*C1*C2 + pi**10*C1*C3)*C7)*C8)*C9*L10*L2 + ((pi**10*C1*C3*C5 + pi**10*C1*C3*C6)*C7 + (pi**10*C1*C3*C5 + pi**10*C1*C3*C6 + pi**10*C1*C3*C7)*C8)*C9*L10*L3 + (((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6)*C7 + ((pi**10*C1*C3 + pi**10*C1*C4)*C5 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C6 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7)*C8)*C9*L10*L4 + (pi**10*C1*C5*C6*C7 + (pi**10*C1*C5*C6 + pi**10*C1*C5*C7)*C8)*C9*L10*L5)*L6 + (pi**10*C1*C3*C7*C8*C9*L10*L3 + pi**10*C1*C5*C7*C8*C9*L10*L5 + (pi**10*C1*C2 + pi**10*C1*C3)*C7*C8*C9*L10*L2 + (pi**10*C1*C3 + pi**10*C1*C4 + pi**10*C1*C5)*C7*C8*C9*L10*L4 + (pi**10*C1*C5 + pi**10*C1*C6)*C7*C8*C9*L10*L6)*L7)*L8)*L9)*ZS)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*L1*L10*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C4 + 512*I*pi**9*C1*C10*C2*C3*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C9)*L10*L2*L3*L4 + ((512*I*pi**9*C1*C10*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C5*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C9 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4)*C5)*L10*L2 + (512*I*pi**9*C1*C2*C3*C4*C5*L2 + (512*I*pi**9*C1*C10*C3*C4*C5 + 512*I*pi**9*C1*C3*C4*C5*C9)*L10)*L3)*L4)*L5 + ((512*I*pi**9*C1*C10*C2*C3*C5 + 512*I*pi**9*C1*C10*C2*C3*C6 + 512*I*pi**9*C1*C10*C2*C3*C7 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4)*C5 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C6 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C7 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C4*C5 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C6 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C5*C6 + 512*I*pi**9*C1*C10*C3*C5*C7 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C5*C6 + 512*I*pi**9*C1*C2*C3*C5*C7)*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C9)*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7)*L2 + (512*I*pi**9*C1*C3*C4*C5*C6 + 512*I*pi**9*C1*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + ((512*I*pi**9*C1*C10*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C7*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C9 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C7)*L10*L2 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C9 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C7)*L10)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C9 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C7)*L10*L2 + (512*I*pi**9*C1*C2*C3*C5*C7*L2 + (512*I*pi**9*C1*C10*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C7*C9)*L10)*L3 + (512*I*pi**9*C1*C3*C4*C5*C7*L3 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7*L2 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C9 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C7)*L10)*L4)*L5 + ((((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C9 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6)*C7)*L10*L2 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C9 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6)*C7)*L10)*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7*L2 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C9 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6)*C7)*L10)*L4 + (512*I*pi**9*C1*C3*C5*C6*C7*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7*L4 + (512*I*pi**9*C1*C10*C5*C6*C7 + 512*I*pi**9*C1*C5*C6*C7*C9)*L10)*L5)*L6)*L7 + ((512*I*pi**9*C1*C10*C2*C3*C7 + 512*I*pi**9*C1*C10*C2*C3*C8 + (512*I*pi**9*C1*C10*C2*C3 + 512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8)*C9)*L10*L2*L3 + (((512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C7 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C8 + (512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8)*C9)*L10*L2 + (((512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C7 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C8 + (512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8)*C9)*L10 + ((512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C7 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C8 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C9)*L2)*L3)*L4 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C7 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C5*C7 + 512*I*pi**9*C1*C10*C3*C5*C8 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C5*C7 + 512*I*pi**9*C1*C2*C3*C5*C8 + 512*I*pi**9*C1*C2*C3*C5*C9)*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C7 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5)*C9)*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C9)*L2 + (512*I*pi**9*C1*C3*C4*C5*C7 + 512*I*pi**9*C1*C3*C4*C5*C8 + 512*I*pi**9*C1*C3*C4*C5*C9)*L3)*L4)*L5 + ((((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6)*C7 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7)*C8 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8)*C9)*L10*L2 + (((512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6)*C7 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6 + 512*I*pi**9*C1*C10*C3*C7)*C8 + (512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8)*C9)*L10 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6)*C7 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C8 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C9)*L2)*L3 + ((((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6)*C7 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7)*C8 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + (512*I*pi**9*C1*C10 + 512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8)*C9)*L10 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6)*C7 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C8 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C9)*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6)*C7 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C8 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C9)*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C6*C7 + (512*I*pi**9*C1*C10*C5*C6 + 512*I*pi**9*C1*C10*C5*C7)*C8 + (512*I*pi**9*C1*C10*C5*C6 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C5*C6)*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8)*C9)*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C9)*L2 + (512*I*pi**9*C1*C3*C5*C6*C7 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C8 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C9)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C9)*L4)*L5)*L6 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7)*C9)*L10*L2 + ((512*I*pi**9*C1*C10*C3*C7*C8 + (512*I*pi**9*C1*C10*C3*C7 + 512*I*pi**9*C1*C3*C7*C8)*C9)*L10 + (512*I*pi**9*C1*C2*C3*C7*C8 + 512*I*pi**9*C1*C2*C3*C7*C9)*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7)*C9)*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C9)*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C8 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C9)*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C7*C8 + (512*I*pi**9*C1*C10*C5*C7 + 512*I*pi**9*C1*C5*C7*C8)*C9)*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C9)*L2 + (512*I*pi**9*C1*C3*C5*C7*C8 + 512*I*pi**9*C1*C3*C5*C7*C9)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C9)*L4)*L5 + (((512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7*C8 + ((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7)*C9)*L10 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C9)*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C8 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C9)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C9)*L4 + (512*I*pi**9*C1*C5*C6*C7*C8 + 512*I*pi**9*C1*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + (512*I*pi**9*C1*C10*C2*C3*C9*L10*L2*L3 + ((512*I*pi**9*C1*C10*C2*C3 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C4 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5)*C9*L10*L2 + ((512*I*pi**9*C1*C10*C3*C4 + 512*I*pi**9*C1*C10*C3*C5)*C9*L10 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C9*L2)*L3)*L4 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5*C9*L10*L2 + (512*I*pi**9*C1*C10*C3*C5*C9*L10 + 512*I*pi**9*C1*C2*C3*C5*C9*L2)*L3 + (512*I*pi**9*C1*C3*C4*C5*C9*L3 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5*C9*L10 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C9*L2)*L4)*L5 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C5 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C6 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7)*C9*L10*L2 + ((512*I*pi**9*C1*C10*C3*C5 + 512*I*pi**9*C1*C10*C3*C6 + 512*I*pi**9*C1*C10*C3*C7)*C9*L10 + (512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*C9*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4)*C5 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C6 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7)*C9*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*C9*L2 + (512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*C9*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C6 + 512*I*pi**9*C1*C10*C5*C7)*C9*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*C9*L2 + (512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*C9*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*C9*L4)*L5)*L6 + ((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7*C9*L10*L2 + (512*I*pi**9*C1*C10*C3*C7*C9*L10 + 512*I*pi**9*C1*C2*C3*C7*C9*L2)*L3 + ((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7*C9*L10 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*C9*L2 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*C9*L3)*L4 + (512*I*pi**9*C1*C10*C5*C7*C9*L10 + 512*I*pi**9*C1*C3*C5*C7*C9*L3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*C9*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*C9*L4)*L5 + (512*I*pi**9*C1*C5*C6*C7*C9*L5 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7*C9*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*C9*L2 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*C9*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*C9*L4)*L6)*L7 + (((512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C7 + (512*I*pi**9*C1*C10*C2 + 512*I*pi**9*C1*C10*C3)*C8)*C9*L10*L2 + ((512*I*pi**9*C1*C10*C3*C7 + 512*I*pi**9*C1*C10*C3*C8)*C9*L10 + (512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8)*C9*L2)*L3 + (((512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C7 + (512*I*pi**9*C1*C10*C3 + 512*I*pi**9*C1*C10*C4 + 512*I*pi**9*C1*C10*C5)*C8)*C9*L10 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8)*C9*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8)*C9*L3)*L4 + ((512*I*pi**9*C1*C10*C5*C7 + 512*I*pi**9*C1*C10*C5*C8)*C9*L10 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8)*C9*L2 + (512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8)*C9*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8)*C9*L4)*L5 + (((512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6)*C7 + (512*I*pi**9*C1*C10*C5 + 512*I*pi**9*C1*C10*C6 + 512*I*pi**9*C1*C10*C7)*C8)*C9*L10 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8)*C9*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8)*C9*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8)*C9*L4 + (512*I*pi**9*C1*C5*C6*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8)*C9*L5)*L6 + (512*I*pi**9*C1*C10*C7*C8*C9*L10 + 512*I*pi**9*C1*C3*C7*C8*C9*L3 + 512*I*pi**9*C1*C5*C7*C8*C9*L5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8*C9*L2 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8*C9*L4 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZL*ZS + (512*I*pi**9*C1*C2*C3*C5*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*L1*L10*L2 + (512*I*pi**9*C1*C3*C4*C5*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5*L10*L2)*L3)*L4)*L5 + ((512*I*pi**9*C1*C2*C3*C5 + 512*I*pi**9*C1*C2*C3*C6 + 512*I*pi**9*C1*C2*C3*C7)*L1*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C6 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4*C5 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C6 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7)*L10*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5*C6 + 512*I*pi**9*C1*C3*C5*C7)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7)*L10*L2 + (512*I*pi**9*C3*C4*C5*C6 + 512*I*pi**9*C3*C4*C5*C7)*L10*L3)*L4)*L5)*L6 + (512*I*pi**9*C1*C2*C3*C7*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7*L10*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7*L1*L10*L2 + (512*I*pi**9*C1*C3*C5*C7*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7*L10*L2)*L3 + (512*I*pi**9*C3*C4*C5*C7*L10*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7*L10*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7*L10*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7*L10*L3)*L4 + (512*I*pi**9*C1*C5*C6*C7*L1*L10 + 512*I*pi**9*C3*C5*C6*C7*L10*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7*L10*L4)*L5)*L6)*L7 + ((512*I*pi**9*C1*C2*C3*C7 + 512*I*pi**9*C1*C2*C3*C8 + 512*I*pi**9*C1*C2*C3*C9)*L1*L10*L2*L3 + (((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C7 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C8 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C9)*L1*L10*L2 + (((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C7 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C8 + (512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C9)*L10*L2)*L3)*L4 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C9)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5*C7 + 512*I*pi**9*C1*C3*C5*C8 + 512*I*pi**9*C1*C3*C5*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C9)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C9)*L10*L2 + (512*I*pi**9*C3*C4*C5*C7 + 512*I*pi**9*C3*C4*C5*C8 + 512*I*pi**9*C3*C4*C5*C9)*L10*L3)*L4)*L5 + ((((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6)*C7 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C8 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C9)*L1*L10*L2 + (((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6)*C7 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C8 + (512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C9)*L10*L2)*L3 + ((((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6)*C7 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C8 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C9)*L1*L10 + ((((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6)*C7 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C8 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C9)*L10*L2 + ((512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6)*C7 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C8 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C9)*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C6*C7 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C8 + (512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C9)*L10*L2 + (512*I*pi**9*C3*C5*C6*C7 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C8 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C9)*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6*C7 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C8 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C9)*L10*L4)*L5)*L6 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C8 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C9)*L1*L10*L2 + ((512*I*pi**9*C1*C3*C7*C8 + 512*I*pi**9*C1*C3*C7*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C9)*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C8 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C9)*L10*L2 + ((512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C8 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C9)*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C7*C8 + 512*I*pi**9*C1*C5*C7*C9)*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C8 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C9)*L10*L2 + (512*I*pi**9*C3*C5*C7*C8 + 512*I*pi**9*C3*C5*C7*C9)*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C8 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C9)*L10*L4)*L5 + (((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C8 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C9)*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C8 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C9)*L10*L2 + ((512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C8 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C9)*L10*L3 + (((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C8 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C9)*L10*L4 + (512*I*pi**9*C5*C6*C7*C8 + 512*I*pi**9*C5*C6*C7*C9)*L10*L5)*L6)*L7)*L8 + (512*I*pi**9*C1*C2*C3*C9*L1*L10*L2*L3 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C4 + 512*I*pi**9*C1*C3*C5)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5)*C9*L10*L2)*L3)*L4 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5*C9*L1*L10*L2 + (512*I*pi**9*C1*C3*C5*C9*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5*C9*L10*L2)*L3 + (512*I*pi**9*C3*C4*C5*C9*L10*L3 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5*C9*L10*L2)*L4)*L5 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C5 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C6 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C5 + 512*I*pi**9*C1*C3*C6 + 512*I*pi**9*C1*C3*C7)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7)*C9*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4)*C5 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C6 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4)*C5 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C6 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7)*C9*L10*L2 + (512*I*pi**9*C3*C4*C5 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C6 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7)*C9*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C6 + 512*I*pi**9*C1*C5*C7)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7)*C9*L10*L2 + (512*I*pi**9*C3*C5*C6 + 512*I*pi**9*C3*C5*C7)*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7)*C9*L10*L4)*L5)*L6 + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7*C9*L1*L10*L2 + (512*I*pi**9*C1*C3*C7*C9*L1*L10 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7*C9*L10*L2)*L3 + ((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7*C9*L10*L2 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7*C9*L10*L3)*L4 + (512*I*pi**9*C1*C5*C7*C9*L1*L10 + 512*I*pi**9*C3*C5*C7*C9*L10*L3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7*C9*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7*C9*L10*L4)*L5 + (512*I*pi**9*C5*C6*C7*C9*L10*L5 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7*C9*L10*L2 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7*C9*L10*L4)*L6)*L7 + (((512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C7 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C8)*C9*L1*L10*L2 + ((512*I*pi**9*C1*C3*C7 + 512*I*pi**9*C1*C3*C8)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C8)*C9*L10*L2)*L3 + (((512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C7 + (512*I*pi**9*C1*C3 + 512*I*pi**9*C1*C4 + 512*I*pi**9*C1*C5)*C8)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5)*C8)*C9*L10*L2 + ((512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C7 + (512*I*pi**9*C3*C4 + 512*I*pi**9*C3*C5)*C8)*C9*L10*L3)*L4 + ((512*I*pi**9*C1*C5*C7 + 512*I*pi**9*C1*C5*C8)*C9*L1*L10 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C7 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5*C8)*C9*L10*L2 + (512*I*pi**9*C3*C5*C7 + 512*I*pi**9*C3*C5*C8)*C9*L10*L3 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C7 + (512*I*pi**9*C3 + 512*I*pi**9*C4)*C5*C8)*C9*L10*L4)*L5 + (((512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6)*C7 + (512*I*pi**9*C1*C5 + 512*I*pi**9*C1*C6 + 512*I*pi**9*C1*C7)*C8)*C9*L1*L10 + (((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6)*C7 + ((512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C6 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C7)*C8)*C9*L10*L2 + ((512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6)*C7 + (512*I*pi**9*C3*C5 + 512*I*pi**9*C3*C6 + 512*I*pi**9*C3*C7)*C8)*C9*L10*L3 + (((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6)*C7 + ((512*I*pi**9*C3 + 512*I*pi**9*C4)*C5 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C6 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C7)*C8)*C9*L10*L4 + (512*I*pi**9*C5*C6*C7 + (512*I*pi**9*C5*C6 + 512*I*pi**9*C5*C7)*C8)*C9*L10*L5)*L6 + (512*I*pi**9*C1*C7*C8*C9*L1*L10 + 512*I*pi**9*C3*C7*C8*C9*L10*L3 + 512*I*pi**9*C5*C7*C8*C9*L10*L5 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C7*C8*C9*L10*L2 + (512*I*pi**9*C3 + 512*I*pi**9*C4 + 512*I*pi**9*C5)*C7*C8*C9*L10*L4 + (512*I*pi**9*C5 + 512*I*pi**9*C6)*C7*C8*C9*L10*L6)*L7)*L8)*L9)*freq**9 + 256*(((pi**8*C1*C10*C2*C3 + pi**8*C1*C2*C3*C9)*L1*L10*L2*L3 + ((pi**8*C1*C10*C2*C3 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C4 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C4 + pi**8*C1*C10*C3*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C4 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9)*L10)*L2)*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C9 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5)*L1*L10*L2 + ((pi**8*C1*C10*C3*C5 + pi**8*C1*C3*C5*C9)*L1*L10 + (pi**8*C1*C2*C3*C5*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C5)*L10)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C9 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4)*C5)*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4)*C5)*L10)*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L2 + (pi**8*C10*C3*C4*C5 + pi**8*C3*C4*C5*C9)*L10)*L3)*L4)*L5 + (((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C5 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C6 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C5 + pi**8*C1*C10*C3*C6 + pi**8*C1*C10*C3*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C5 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C6 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10*C3 + pi**8*C1*C10*C4)*C5 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C6 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L1*L10 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4)*C5 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C6 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L1 + (pi**8*C10*C3*C4*C5 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C6 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7)*L2)*L3)*L4 + ((pi**8*C1*C10*C5*C6 + pi**8*C1*C10*C5*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L1 + (pi**8*C10*C3*C5*C6 + pi**8*C10*C3*C5*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5*C6 + (pi**8*C1 + pi**8*C2)*C3*C5*C7)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5*C6 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7)*L2 + (pi**8*C3*C4*C5*C6 + pi**8*C3*C4*C5*C7)*L3)*L4)*L5)*L6 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C9 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7)*L1*L10*L2 + ((pi**8*C1*C10*C3*C7 + pi**8*C1*C3*C7*C9)*L1*L10 + (pi**8*C1*C2*C3*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C7*C9 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C7)*L10)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7)*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7)*L10)*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7*C9 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7)*L10)*L3)*L4 + ((pi**8*C1*C10*C5*C7 + pi**8*C1*C5*C7*C9)*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7)*L10)*L2 + (pi**8*C1*C3*C5*C7*L1 + (pi**8*C1 + pi**8*C2)*C3*C5*C7*L2 + (pi**8*C10*C3*C5*C7 + pi**8*C3*C5*C7*C9)*L10)*L3 + (pi**8*C3*C4*C5*C7*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7*L2 + ((pi**8*C3 + pi**8*C4)*C5*C7*C9 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C7)*L10)*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7*C9 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6)*C7)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6)*C7)*L10)*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L1 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7*C9 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6)*C7)*L10)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L1 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6)*C7)*L10)*L4 + (pi**8*C1*C5*C6*C7*L1 + pi**8*C3*C5*C6*C7*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7*L2 + (pi**8*C3 + pi**8*C4)*C5*C6*C7*L4 + (pi**8*C10*C5*C6*C7 + pi**8*C5*C6*C7*C9)*L10)*L5)*L6)*L7 + (((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C7 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C8 + (pi**8*C1*C10*C2 + pi**8*C1*C10*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9)*L1*L10*L2 + ((pi**8*C1*C10*C3*C7 + pi**8*C1*C10*C3*C8 + (pi**8*C1*C10*C3 + pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9)*L1*L10 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8 + pi**8*C1*C2*C3*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3*C7 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C8 + ((pi**8*C1 + pi**8*C2)*C3*C7 + (pi**8*C1 + pi**8*C2)*C3*C8 + (pi**8*C1*C10 + pi**8*C10*C2)*C3)*C9)*L10)*L2)*L3 + (((pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C7 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C8 + (pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9)*L1*L10 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C8)*C9)*L10)*L2 + (((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L1 + ((pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C7 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C8 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C7 + (pi**8*C3*C4 + pi**8*C3*C5)*C8)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C8 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9)*L2)*L3)*L4 + ((pi**8*C1*C10*C5*C7 + pi**8*C1*C10*C5*C8 + (pi**8*C1*C10*C5 + pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C7 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C8 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C9)*L10)*L2 + ((pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8 + pi**8*C1*C3*C5*C9)*L1 + (pi**8*C10*C3*C5*C7 + pi**8*C10*C3*C5*C8 + (pi**8*C10*C3*C5 + pi**8*C3*C5*C7 + pi**8*C3*C5*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5*C7 + (pi**8*C1 + pi**8*C2)*C3*C5*C8 + (pi**8*C1 + pi**8*C2)*C3*C5*C9)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5*C7 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C8 + ((pi**8*C3 + pi**8*C4)*C5*C7 + (pi**8*C3 + pi**8*C4)*C5*C8 + (pi**8*C10*C3 + pi**8*C10*C4)*C5)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C8 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9)*L2 + (pi**8*C3*C4*C5*C7 + pi**8*C3*C4*C5*C8 + pi**8*C3*C4*C5*C9)*L3)*L4)*L5 + (((pi**8*C1*C10*C5 + pi**8*C1*C10*C6)*C7 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + pi**8*C1*C10*C7)*C8 + (pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + (pi**8*C1*C10 + pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9)*L1*L10 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L1 + (((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6)*C7 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C8 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7)*C8)*C9)*L10)*L2 + (((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L1 + ((pi**8*C10*C3*C5 + pi**8*C10*C3*C6)*C7 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + pi**8*C10*C3*C7)*C8 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + (pi**8*C10*C3 + pi**8*C3*C5 + pi**8*C3*C6)*C7 + (pi**8*C3*C5 + pi**8*C3*C6 + pi**8*C3*C7)*C8)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6)*C7 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C8 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9)*L2)*L3 + ((((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L1 + (((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6)*C7 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C8 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + (pi**8*C10 + pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7)*C8)*C9)*L10 + ((((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6)*C7 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C8 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9)*L2 + ((pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6)*C7 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C8 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9)*L3)*L4 + ((pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L1 + (pi**8*C10*C5*C6*C7 + (pi**8*C10*C5*C6 + pi**8*C10*C5*C7)*C8 + (pi**8*C10*C5*C6 + (pi**8*C10*C5 + pi**8*C5*C6)*C7 + (pi**8*C5*C6 + pi**8*C5*C7)*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9)*L2 + (pi**8*C3*C5*C6*C7 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C8 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6*C7 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C8 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9)*L4)*L5)*L6 + ((pi**8*C1*C10*C7*C8 + (pi**8*C1*C10*C7 + pi**8*C1*C7*C8)*C9)*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9)*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C7*C8 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C9)*L10)*L2 + ((pi**8*C1*C3*C7*C8 + pi**8*C1*C3*C7*C9)*L1 + (pi**8*C10*C3*C7*C8 + (pi**8*C10*C3*C7 + pi**8*C3*C7*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2)*C3*C7*C8 + (pi**8*C1 + pi**8*C2)*C3*C7*C9)*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9)*L1 + ((pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7*C8 + ((pi**8*C3 + pi**8*C4 + pi**8*C5)*C7*C8 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C8 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9)*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7*C8 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C9)*L3)*L4 + ((pi**8*C1*C5*C7*C8 + pi**8*C1*C5*C7*C9)*L1 + (pi**8*C10*C5*C7*C8 + (pi**8*C10*C5*C7 + pi**8*C5*C7*C8)*C9)*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C8 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9)*L2 + (pi**8*C3*C5*C7*C8 + pi**8*C3*C5*C7*C9)*L3 + ((pi**8*C3 + pi**8*C4)*C5*C7*C8 + (pi**8*C3 + pi**8*C4)*C5*C7*C9)*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7*C8 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9)*L1 + ((pi**8*C10*C5 + pi**8*C10*C6)*C7*C8 + ((pi**8*C5 + pi**8*C6)*C7*C8 + (pi**8*C10*C5 + pi**8*C10*C6)*C7)*C9)*L10 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C8 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9)*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7*C8 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C9)*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C8 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9)*L4 + (pi**8*C5*C6*C7*C8 + pi**8*C5*C6*C7*C9)*L5)*L6)*L7)*L8 + ((pi**8*C1*C10*C2 + pi**8*C1*C10*C3)*C9*L1*L10*L2 + (pi**8*C1*C10*C3*C9*L1*L10 + (pi**8*C1*C2*C3*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2)*C3*C9*L10)*L2)*L3 + ((pi**8*C1*C10*C3 + pi**8*C1*C10*C4 + pi**8*C1*C10*C5)*C9*L1*L10 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2)*C3 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C4 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5)*C9*L10)*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9*L1 + (pi**8*C10*C3*C4 + pi**8*C10*C3*C5)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2)*C3*C5)*C9*L2)*L3)*L4 + (pi**8*C1*C10*C5*C9*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5*C9*L10)*L2 + (pi**8*C1*C3*C5*C9*L1 + pi**8*C10*C3*C5*C9*L10 + (pi**8*C1 + pi**8*C2)*C3*C5*C9*L2)*L3 + (pi**8*C3*C4*C5*C9*L3 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9*L1 + (pi**8*C10*C3 + pi**8*C10*C4)*C5*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C9*L2)*L4)*L5 + ((pi**8*C1*C10*C5 + pi**8*C1*C10*C6 + pi**8*C1*C10*C7)*C9*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C5 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C6 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7)*C9*L10)*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9*L1 + (pi**8*C10*C3*C5 + pi**8*C10*C3*C6 + pi**8*C10*C3*C7)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C5 + (pi**8*C1 + pi**8*C2)*C3*C6 + (pi**8*C1 + pi**8*C2)*C3*C7)*C9*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9*L1 + ((pi**8*C10*C3 + pi**8*C10*C4)*C5 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C6 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7)*C9*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C6 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7)*C9*L2 + (pi**8*C3*C4*C5 + (pi**8*C3*C4 + pi**8*C3*C5)*C6 + (pi**8*C3*C4 + pi**8*C3*C5)*C7)*C9*L3)*L4 + ((pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9*L1 + (pi**8*C10*C5*C6 + pi**8*C10*C5*C7)*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7)*C9*L2 + (pi**8*C3*C5*C6 + pi**8*C3*C5*C7)*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5*C6 + (pi**8*C3 + pi**8*C4)*C5*C7)*C9*L4)*L5)*L6 + (pi**8*C1*C10*C7*C9*L1*L10 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7*C9*L1 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7*C9*L10)*L2 + (pi**8*C1*C3*C7*C9*L1 + pi**8*C10*C3*C7*C9*L10 + (pi**8*C1 + pi**8*C2)*C3*C7*C9*L2)*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9*L1 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7*C9*L2 + (pi**8*C3*C4 + pi**8*C3*C5)*C7*C9*L3)*L4 + (pi**8*C1*C5*C7*C9*L1 + pi**8*C10*C5*C7*C9*L10 + pi**8*C3*C5*C7*C9*L3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7*C9*L2 + (pi**8*C3 + pi**8*C4)*C5*C7*C9*L4)*L5 + (pi**8*C5*C6*C7*C9*L5 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9*L1 + (pi**8*C10*C5 + pi**8*C10*C6)*C7*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7*C9*L2 + (pi**8*C3*C5 + pi**8*C3*C6)*C7*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7*C9*L4)*L6)*L7 + ((pi**8*C1*C10*C7 + pi**8*C1*C10*C8)*C9*L1*L10 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9*L1 + ((pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C7 + (pi**8*C1*C10 + pi**8*C10*C2 + pi**8*C10*C3)*C8)*C9*L10)*L2 + ((pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9*L1 + (pi**8*C10*C3*C7 + pi**8*C10*C3*C8)*C9*L10 + ((pi**8*C1 + pi**8*C2)*C3*C7 + (pi**8*C1 + pi**8*C2)*C3*C8)*C9*L2)*L3 + (((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9*L1 + ((pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C7 + (pi**8*C10*C3 + pi**8*C10*C4 + pi**8*C10*C5)*C8)*C9*L10 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C7 + ((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5)*C8)*C9*L2 + ((pi**8*C3*C4 + pi**8*C3*C5)*C7 + (pi**8*C3*C4 + pi**8*C3*C5)*C8)*C9*L3)*L4 + ((pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9*L1 + (pi**8*C10*C5*C7 + pi**8*C10*C5*C8)*C9*L10 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C7 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C5*C8)*C9*L2 + (pi**8*C3*C5*C7 + pi**8*C3*C5*C8)*C9*L3 + ((pi**8*C3 + pi**8*C4)*C5*C7 + (pi**8*C3 + pi**8*C4)*C5*C8)*C9*L4)*L5 + (((pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9*L1 + ((pi**8*C10*C5 + pi**8*C10*C6)*C7 + (pi**8*C10*C5 + pi**8*C10*C6 + pi**8*C10*C7)*C8)*C9*L10 + (((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6)*C7 + ((pi**8*C1 + pi**8*C2 + pi**8*C3)*C5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C6 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7)*C8)*C9*L2 + ((pi**8*C3*C5 + pi**8*C3*C6)*C7 + (pi**8*C3*C5 + pi**8*C3*C6 + pi**8*C3*C7)*C8)*C9*L3 + (((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6)*C7 + ((pi**8*C3 + pi**8*C4)*C5 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C6 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7)*C8)*C9*L4 + (pi**8*C5*C6*C7 + (pi**8*C5*C6 + pi**8*C5*C7)*C8)*C9*L5)*L6 + (pi**8*C1*C7*C8*C9*L1 + pi**8*C10*C7*C8*C9*L10 + pi**8*C3*C7*C8*C9*L3 + pi**8*C5*C7*C8*C9*L5 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C7*C8*C9*L2 + (pi**8*C3 + pi**8*C4 + pi**8*C5)*C7*C8*C9*L4 + (pi**8*C5 + pi**8*C6)*C7*C8*C9*L6)*L7)*L8)*L9)*ZL + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L10*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L10*L2*L3 + (pi**8*C1*C3*C4*C5*L10*L3 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5*L10*L2)*L4)*L5 + ((pi**8*C1*C2*C3*C5 + pi**8*C1*C2*C3*C6 + pi**8*C1*C2*C3*C7)*L10*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7)*L10*L2 + (pi**8*C1*C3*C4*C5 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C6 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7)*L10*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7)*L10*L2 + (pi**8*C1*C3*C5*C6 + pi**8*C1*C3*C5*C7)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C6 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7)*L10*L4)*L5)*L6 + (pi**8*C1*C2*C3*C7*L10*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7*L10*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7*L10*L3)*L4 + (pi**8*C1*C3*C5*C7*L10*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C7*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C7*L10*L4)*L5 + (pi**8*C1*C5*C6*C7*L10*L5 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7*L10*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7*L10*L4)*L6)*L7 + ((pi**8*C1*C2*C3*C7 + pi**8*C1*C2*C3*C8 + pi**8*C1*C2*C3*C9)*L10*L2*L3 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C7 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C8 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9)*L10*L2 + ((pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C7 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C8 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9)*L10*L3)*L4 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9)*L10*L2 + (pi**8*C1*C3*C5*C7 + pi**8*C1*C3*C5*C8 + pi**8*C1*C3*C5*C9)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5*C7 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C8 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9)*L10*L4)*L5 + ((((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6)*C7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C8 + ((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9)*L10*L2 + ((pi**8*C1*C3*C5 + pi**8*C1*C3*C6)*C7 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C8 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9)*L10*L3 + (((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6)*C7 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C8 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9)*L10*L4 + (pi**8*C1*C5*C6*C7 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C8 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9)*L10*L5)*L6 + (((pi**8*C1*C2 + pi**8*C1*C3)*C7*C8 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9)*L10*L2 + (pi**8*C1*C3*C7*C8 + pi**8*C1*C3*C7*C9)*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C8 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9)*L10*L4 + (pi**8*C1*C5*C7*C8 + pi**8*C1*C5*C7*C9)*L10*L5 + ((pi**8*C1*C5 + pi**8*C1*C6)*C7*C8 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9)*L10*L6)*L7)*L8 + (pi**8*C1*C2*C3*C9*L10*L2*L3 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C9*L10*L2 + (pi**8*C1*C3*C4 + pi**8*C1*C3*C5)*C9*L10*L3)*L4 + (pi**8*C1*C3*C5*C9*L10*L3 + (pi**8*C1*C2 + pi**8*C1*C3)*C5*C9*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4)*C5*C9*L10*L4)*L5 + (((pi**8*C1*C2 + pi**8*C1*C3)*C5 + (pi**8*C1*C2 + pi**8*C1*C3)*C6 + (pi**8*C1*C2 + pi**8*C1*C3)*C7)*C9*L10*L2 + (pi**8*C1*C3*C5 + pi**8*C1*C3*C6 + pi**8*C1*C3*C7)*C9*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4)*C5 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C6 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7)*C9*L10*L4 + (pi**8*C1*C5*C6 + pi**8*C1*C5*C7)*C9*L10*L5)*L6 + (pi**8*C1*C3*C7*C9*L10*L3 + pi**8*C1*C5*C7*C9*L10*L5 + (pi**8*C1*C2 + pi**8*C1*C3)*C7*C9*L10*L2 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7*C9*L10*L4 + (pi**8*C1*C5 + pi**8*C1*C6)*C7*C9*L10*L6)*L7 + (pi**8*C1*C7*C8*C9*L10*L7 + ((pi**8*C1*C2 + pi**8*C1*C3)*C7 + (pi**8*C1*C2 + pi**8*C1*C3)*C8)*C9*L10*L2 + (pi**8*C1*C3*C7 + pi**8*C1*C3*C8)*C9*L10*L3 + ((pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C7 + (pi**8*C1*C3 + pi**8*C1*C4 + pi**8*C1*C5)*C8)*C9*L10*L4 + (pi**8*C1*C5*C7 + pi**8*C1*C5*C8)*C9*L10*L5 + ((pi**8*C1*C5 + pi**8*C1*C6)*C7 + (pi**8*C1*C5 + pi**8*C1*C6 + pi**8*C1*C7)*C8)*C9*L10*L6)*L8)*L9)*ZS)*freq**8 + (-128*I*pi**7*C1*C2*C3*L1*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 - 128*I*pi**7*C1*C2*C3*C9)*L10*L2*L3 + ((-128*I*pi**7*C1*C10*C2*C3 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C4 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C9)*L10*L2 + ((-128*I*pi**7*C1*C10*C3*C4 - 128*I*pi**7*C1*C10*C3*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C9)*L10 + (-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C5)*L2)*L3)*L4 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C9 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C5)*L10*L2 + (-128*I*pi**7*C1*C2*C3*C5*L2 + (-128*I*pi**7*C1*C10*C3*C5 - 128*I*pi**7*C1*C3*C5*C9)*L10)*L3 + (-128*I*pi**7*C1*C3*C4*C5*L3 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5*L2 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C9 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4)*C5)*L10)*L4)*L5 + (((-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C5 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C6 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C7 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C9)*L10*L2 + ((-128*I*pi**7*C1*C10*C3*C5 - 128*I*pi**7*C1*C10*C3*C6 - 128*I*pi**7*C1*C10*C3*C7 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C9)*L10 + (-128*I*pi**7*C1*C2*C3*C5 - 128*I*pi**7*C1*C2*C3*C6 - 128*I*pi**7*C1*C2*C3*C7)*L2)*L3 + (((-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4)*C5 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C6 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C7 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C9)*L10 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7)*L2 + (-128*I*pi**7*C1*C3*C4*C5 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C6 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7)*L3)*L4 + ((-128*I*pi**7*C1*C10*C5*C6 - 128*I*pi**7*C1*C10*C5*C7 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C9)*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7)*L2 + (-128*I*pi**7*C1*C3*C5*C6 - 128*I*pi**7*C1*C3*C5*C7)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7)*L4)*L5)*L6 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C9 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C7)*L10*L2 + (-128*I*pi**7*C1*C2*C3*C7*L2 + (-128*I*pi**7*C1*C10*C3*C7 - 128*I*pi**7*C1*C3*C7*C9)*L10)*L3 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7*L2 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C9 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C7)*L10)*L4 + (-128*I*pi**7*C1*C3*C5*C7*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7*L4 + (-128*I*pi**7*C1*C10*C5*C7 - 128*I*pi**7*C1*C5*C7*C9)*L10)*L5 + (-128*I*pi**7*C1*C5*C6*C7*L5 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7*L2 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7*L4 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C9 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6)*C7)*L10)*L6)*L7 + (((-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C7 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C8 + (-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8)*C9)*L10*L2 + ((-128*I*pi**7*C1*C10*C3*C7 - 128*I*pi**7*C1*C10*C3*C8 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8)*C9)*L10 + (-128*I*pi**7*C1*C2*C3*C7 - 128*I*pi**7*C1*C2*C3*C8 - 128*I*pi**7*C1*C2*C3*C9)*L2)*L3 + (((-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C7 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C8 + (-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8)*C9)*L10 + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C7 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C8 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C9)*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C7 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C8 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C9)*L3)*L4 + ((-128*I*pi**7*C1*C10*C5*C7 - 128*I*pi**7*C1*C10*C5*C8 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8)*C9)*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C9)*L2 + (-128*I*pi**7*C1*C3*C5*C7 - 128*I*pi**7*C1*C3*C5*C8 - 128*I*pi**7*C1*C3*C5*C9)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C9)*L4)*L5 + (((-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6)*C7 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6 - 128*I*pi**7*C1*C10*C7)*C8 + (-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6 + (-128*I*pi**7*C1*C10 - 128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8)*C9)*L10 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6)*C7 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C9)*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6)*C7 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C8 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C9)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6)*C7 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C8 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C9)*L4 + (-128*I*pi**7*C1*C5*C6*C7 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C8 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C9)*L5)*L6 + ((-128*I*pi**7*C1*C10*C7*C8 + (-128*I*pi**7*C1*C10*C7 - 128*I*pi**7*C1*C7*C8)*C9)*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C9)*L2 + (-128*I*pi**7*C1*C3*C7*C8 - 128*I*pi**7*C1*C3*C7*C9)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C9)*L4 + (-128*I*pi**7*C1*C5*C7*C8 - 128*I*pi**7*C1*C5*C7*C9)*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C8 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C9)*L6)*L7)*L8 + ((-128*I*pi**7*C1*C10*C2 - 128*I*pi**7*C1*C10*C3)*C9*L10*L2 + (-128*I*pi**7*C1*C10*C3*C9*L10 - 128*I*pi**7*C1*C2*C3*C9*L2)*L3 + ((-128*I*pi**7*C1*C10*C3 - 128*I*pi**7*C1*C10*C4 - 128*I*pi**7*C1*C10*C5)*C9*L10 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C9*L2 + (-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*C9*L3)*L4 + (-128*I*pi**7*C1*C10*C5*C9*L10 - 128*I*pi**7*C1*C3*C5*C9*L3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*C9*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*C9*L4)*L5 + ((-128*I*pi**7*C1*C10*C5 - 128*I*pi**7*C1*C10*C6 - 128*I*pi**7*C1*C10*C7)*C9*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*C9*L2 + (-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*C9*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*C9*L4 + (-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*C9*L5)*L6 + (-128*I*pi**7*C1*C10*C7*C9*L10 - 128*I*pi**7*C1*C3*C7*C9*L3 - 128*I*pi**7*C1*C5*C7*C9*L5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*C9*L2 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*C9*L4 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*C9*L6)*L7 + (-128*I*pi**7*C1*C7*C8*C9*L7 + (-128*I*pi**7*C1*C10*C7 - 128*I*pi**7*C1*C10*C8)*C9*L10 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8)*C9*L2 + (-128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8)*C9*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8)*C9*L4 + (-128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8)*C9*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8)*C9*L6)*L8)*L9)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C4 - 128*I*pi**7*C1*C3*C5)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5)*L10*L2)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5*L1*L10*L2 + (-128*I*pi**7*C1*C3*C5*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5*L10*L2)*L3 + (-128*I*pi**7*C3*C4*C5*L10*L3 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*L10*L2)*L4)*L5 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C6 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C5 - 128*I*pi**7*C1*C3*C6 - 128*I*pi**7*C1*C3*C7)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7)*L10*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C6 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7)*L10*L2 + (-128*I*pi**7*C3*C4*C5 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C6 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7)*L10*L3)*L4 + ((-128*I*pi**7*C1*C5*C6 - 128*I*pi**7*C1*C5*C7)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7)*L10*L2 + (-128*I*pi**7*C3*C5*C6 - 128*I*pi**7*C3*C5*C7)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7)*L10*L4)*L5)*L6 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7*L1*L10*L2 + (-128*I*pi**7*C1*C3*C7*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7*L10*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7*L10*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7*L10*L3)*L4 + (-128*I*pi**7*C1*C5*C7*L1*L10 - 128*I*pi**7*C3*C5*C7*L10*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7*L10*L4)*L5 + (-128*I*pi**7*C5*C6*C7*L10*L5 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7*L10*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7*L10*L4)*L6)*L7 + (((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C7 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C8 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C9)*L1*L10*L2 + ((-128*I*pi**7*C1*C3*C7 - 128*I*pi**7*C1*C3*C8 - 128*I*pi**7*C1*C3*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C9)*L10*L2)*L3 + (((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C7 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C8 + (-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C9)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C7 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C8 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C9)*L10*L2 + ((-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C7 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C8 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C9)*L10*L3)*L4 + ((-128*I*pi**7*C1*C5*C7 - 128*I*pi**7*C1*C5*C8 - 128*I*pi**7*C1*C5*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C9)*L10*L2 + (-128*I*pi**7*C3*C5*C7 - 128*I*pi**7*C3*C5*C8 - 128*I*pi**7*C3*C5*C9)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C7 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C8 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C9)*L10*L4)*L5 + (((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6)*C7 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C8 + (-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C9)*L1*L10 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6)*C7 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C8 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C9)*L10*L2 + ((-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6)*C7 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C8 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C9)*L10*L3 + (((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6)*C7 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C8 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C9)*L10*L4 + (-128*I*pi**7*C5*C6*C7 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C8 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C9)*L10*L5)*L6 + ((-128*I*pi**7*C1*C7*C8 - 128*I*pi**7*C1*C7*C9)*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C8 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C9)*L10*L2 + (-128*I*pi**7*C3*C7*C8 - 128*I*pi**7*C3*C7*C9)*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C8 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C9)*L10*L4 + (-128*I*pi**7*C5*C7*C8 - 128*I*pi**7*C5*C7*C9)*L10*L5 + ((-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C8 + (-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C9)*L10*L6)*L7)*L8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C9*L1*L10*L2 + (-128*I*pi**7*C1*C3*C9*L1*L10 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C9*L10*L2)*L3 + ((-128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4 - 128*I*pi**7*C1*C5)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C9*L10*L2 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C3*C5)*C9*L10*L3)*L4 + (-128*I*pi**7*C1*C5*C9*L1*L10 - 128*I*pi**7*C3*C5*C9*L10*L3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5*C9*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5*C9*L10*L4)*L5 + ((-128*I*pi**7*C1*C5 - 128*I*pi**7*C1*C6 - 128*I*pi**7*C1*C7)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C6 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7)*C9*L10*L2 + (-128*I*pi**7*C3*C5 - 128*I*pi**7*C3*C6 - 128*I*pi**7*C3*C7)*C9*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4)*C5 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C6 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7)*C9*L10*L4 + (-128*I*pi**7*C5*C6 - 128*I*pi**7*C5*C7)*C9*L10*L5)*L6 + (-128*I*pi**7*C1*C7*C9*L1*L10 - 128*I*pi**7*C3*C7*C9*L10*L3 - 128*I*pi**7*C5*C7*C9*L10*L5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7*C9*L10*L2 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7*C9*L10*L4 + (-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7*C9*L10*L6)*L7 + (-128*I*pi**7*C7*C8*C9*L10*L7 + (-128*I*pi**7*C1*C7 - 128*I*pi**7*C1*C8)*C9*L1*L10 + ((-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C7 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C8)*C9*L10*L2 + (-128*I*pi**7*C3*C7 - 128*I*pi**7*C3*C8)*C9*L10*L3 + ((-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C7 + (-128*I*pi**7*C3 - 128*I*pi**7*C4 - 128*I*pi**7*C5)*C8)*C9*L10*L4 + (-128*I*pi**7*C5*C7 - 128*I*pi**7*C5*C8)*C9*L10*L5 + ((-128*I*pi**7*C5 - 128*I*pi**7*C6)*C7 + (-128*I*pi**7*C5 - 128*I*pi**7*C6 - 128*I*pi**7*C7)*C8)*C9*L10*L6)*L8)*L9)*freq**7 - 64*(((pi**6*C1*C10*C2 + pi**6*C1*C10*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L1*L10*L2 + ((pi**6*C1*C10*C3 + pi**6*C1*C3*C9)*L1*L10 + (pi**6*C1*C2*C3*L1 + ((pi**6*C1 + pi**6*C2)*C3*C9 + (pi**6*C1*C10 + pi**6*C10*C2)*C3)*L10)*L2)*L3 + ((pi**6*C1*C10*C3 + pi**6*C1*C10*C4 + pi**6*C1*C10*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L1*L10 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2)*C3 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C4 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9)*L10)*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + (pi**6*C10*C3*C4 + pi**6*C10*C3*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2)*C3*C5)*L2)*L3)*L4 + ((pi**6*C1*C10*C5 + pi**6*C1*C5*C9)*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5)*L10)*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2 + (pi**6*C10*C3*C5 + pi**6*C3*C5*C9)*L10)*L3 + (pi**6*C3*C4*C5*L3 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L2 + ((pi**6*C3 + pi**6*C4)*C5*C9 + (pi**6*C10*C3 + pi**6*C10*C4)*C5)*L10)*L4)*L5 + ((pi**6*C1*C10*C5 + pi**6*C1*C10*C6 + pi**6*C1*C10*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L1*L10 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C5 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C6 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9)*L10)*L2 + ((pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L1 + (pi**6*C10*C3*C5 + pi**6*C10*C3*C6 + pi**6*C10*C3*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C5 + (pi**6*C1 + pi**6*C2)*C3*C6 + (pi**6*C1 + pi**6*C2)*C3*C7)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L1 + ((pi**6*C10*C3 + pi**6*C10*C4)*C5 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C6 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9)*L10 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C3*C5)*C6 + (pi**6*C3*C4 + pi**6*C3*C5)*C7)*L3)*L4 + ((pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L1 + (pi**6*C10*C5*C6 + pi**6*C10*C5*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7)*L2 + (pi**6*C3*C5*C6 + pi**6*C3*C5*C7)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C6 + (pi**6*C3 + pi**6*C4)*C5*C7)*L4)*L5)*L6 + ((pi**6*C1*C10*C7 + pi**6*C1*C7*C9)*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7)*L10)*L2 + (pi**6*C1*C3*C7*L1 + (pi**6*C1 + pi**6*C2)*C3*C7*L2 + (pi**6*C10*C3*C7 + pi**6*C3*C7*C9)*L10)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L1 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C7*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7)*L10)*L4 + (pi**6*C1*C5*C7*L1 + pi**6*C3*C5*C7*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7*L2 + (pi**6*C3 + pi**6*C4)*C5*C7*L4 + (pi**6*C10*C5*C7 + pi**6*C5*C7*C9)*L10)*L5 + (pi**6*C5*C6*C7*L5 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L1 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7*L2 + (pi**6*C3*C5 + pi**6*C3*C6)*C7*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7*L4 + ((pi**6*C5 + pi**6*C6)*C7*C9 + (pi**6*C10*C5 + pi**6*C10*C6)*C7)*L10)*L6)*L7 + ((pi**6*C1*C10*C7 + pi**6*C1*C10*C8 + (pi**6*C1*C10 + pi**6*C1*C7 + pi**6*C1*C8)*C9)*L1*L10 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L1 + ((pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C7 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C8 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C8)*C9)*L10)*L2 + ((pi**6*C1*C3*C7 + pi**6*C1*C3*C8 + pi**6*C1*C3*C9)*L1 + (pi**6*C10*C3*C7 + pi**6*C10*C3*C8 + (pi**6*C10*C3 + pi**6*C3*C7 + pi**6*C3*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2)*C3*C7 + (pi**6*C1 + pi**6*C2)*C3*C8 + (pi**6*C1 + pi**6*C2)*C3*C9)*L2)*L3 + (((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L1 + ((pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C7 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C8 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C8)*C9)*L10 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C7 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C8 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9)*L2 + ((pi**6*C3*C4 + pi**6*C3*C5)*C7 + (pi**6*C3*C4 + pi**6*C3*C5)*C8 + (pi**6*C3*C4 + pi**6*C3*C5)*C9)*L3)*L4 + ((pi**6*C1*C5*C7 + pi**6*C1*C5*C8 + pi**6*C1*C5*C9)*L1 + (pi**6*C10*C5*C7 + pi**6*C10*C5*C8 + (pi**6*C10*C5 + pi**6*C5*C7 + pi**6*C5*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C8 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9)*L2 + (pi**6*C3*C5*C7 + pi**6*C3*C5*C8 + pi**6*C3*C5*C9)*L3 + ((pi**6*C3 + pi**6*C4)*C5*C7 + (pi**6*C3 + pi**6*C4)*C5*C8 + (pi**6*C3 + pi**6*C4)*C5*C9)*L4)*L5 + (((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L1 + ((pi**6*C10*C5 + pi**6*C10*C6)*C7 + (pi**6*C10*C5 + pi**6*C10*C6 + pi**6*C10*C7)*C8 + (pi**6*C10*C5 + pi**6*C10*C6 + (pi**6*C10 + pi**6*C5 + pi**6*C6)*C7 + (pi**6*C5 + pi**6*C6 + pi**6*C7)*C8)*C9)*L10 + (((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6)*C7 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C8 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9)*L2 + ((pi**6*C3*C5 + pi**6*C3*C6)*C7 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C8 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9)*L3 + (((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6)*C7 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C8 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9)*L4 + (pi**6*C5*C6*C7 + (pi**6*C5*C6 + pi**6*C5*C7)*C8 + (pi**6*C5*C6 + pi**6*C5*C7)*C9)*L5)*L6 + ((pi**6*C1*C7*C8 + pi**6*C1*C7*C9)*L1 + (pi**6*C10*C7*C8 + (pi**6*C10*C7 + pi**6*C7*C8)*C9)*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C8 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9)*L2 + (pi**6*C3*C7*C8 + pi**6*C3*C7*C9)*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C8 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9)*L4 + (pi**6*C5*C7*C8 + pi**6*C5*C7*C9)*L5 + ((pi**6*C5 + pi**6*C6)*C7*C8 + (pi**6*C5 + pi**6*C6)*C7*C9)*L6)*L7)*L8 + (pi**6*C1*C10*C9*L1*L10 + ((pi**6*C1*C2 + pi**6*C1*C3)*C9*L1 + (pi**6*C1*C10 + pi**6*C10*C2 + pi**6*C10*C3)*C9*L10)*L2 + (pi**6*C1*C3*C9*L1 + pi**6*C10*C3*C9*L10 + (pi**6*C1 + pi**6*C2)*C3*C9*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9*L1 + (pi**6*C10*C3 + pi**6*C10*C4 + pi**6*C10*C5)*C9*L10 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C9*L2 + (pi**6*C3*C4 + pi**6*C3*C5)*C9*L3)*L4 + (pi**6*C1*C5*C9*L1 + pi**6*C10*C5*C9*L10 + pi**6*C3*C5*C9*L3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5*C9*L2 + (pi**6*C3 + pi**6*C4)*C5*C9*L4)*L5 + ((pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9*L1 + (pi**6*C10*C5 + pi**6*C10*C6 + pi**6*C10*C7)*C9*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C6 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7)*C9*L2 + (pi**6*C3*C5 + pi**6*C3*C6 + pi**6*C3*C7)*C9*L3 + ((pi**6*C3 + pi**6*C4)*C5 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C6 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7)*C9*L4 + (pi**6*C5*C6 + pi**6*C5*C7)*C9*L5)*L6 + (pi**6*C1*C7*C9*L1 + pi**6*C10*C7*C9*L10 + pi**6*C3*C7*C9*L3 + pi**6*C5*C7*C9*L5 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C7*C9*L2 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C7*C9*L4 + (pi**6*C5 + pi**6*C6)*C7*C9*L6)*L7 + (pi**6*C7*C8*C9*L7 + (pi**6*C1*C7 + pi**6*C1*C8)*C9*L1 + (pi**6*C10*C7 + pi**6*C10*C8)*C9*L10 + ((pi**6*C1 + pi**6*C2 + pi**6*C3)*C7 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C8)*C9*L2 + (pi**6*C3*C7 + pi**6*C3*C8)*C9*L3 + ((pi**6*C3 + pi**6*C4 + pi**6*C5)*C7 + (pi**6*C3 + pi**6*C4 + pi**6*C5)*C8)*C9*L4 + (pi**6*C5*C7 + pi**6*C5*C8)*C9*L5 + ((pi**6*C5 + pi**6*C6)*C7 + (pi**6*C5 + pi**6*C6 + pi**6*C7)*C8)*C9*L6)*L8)*L9)*ZL + (pi**6*C1*C2*C3*L10*L2*L3 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L10*L2 + (pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L10*L3)*L4 + (pi**6*C1*C3*C5*L10*L3 + (pi**6*C1*C2 + pi**6*C1*C3)*C5*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4)*C5*L10*L4)*L5 + (((pi**6*C1*C2 + pi**6*C1*C3)*C5 + (pi**6*C1*C2 + pi**6*C1*C3)*C6 + (pi**6*C1*C2 + pi**6*C1*C3)*C7)*L10*L2 + (pi**6*C1*C3*C5 + pi**6*C1*C3*C6 + pi**6*C1*C3*C7)*L10*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C6 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7)*L10*L4 + (pi**6*C1*C5*C6 + pi**6*C1*C5*C7)*L10*L5)*L6 + (pi**6*C1*C3*C7*L10*L3 + pi**6*C1*C5*C7*L10*L5 + (pi**6*C1*C2 + pi**6*C1*C3)*C7*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7*L10*L4 + (pi**6*C1*C5 + pi**6*C1*C6)*C7*L10*L6)*L7 + (((pi**6*C1*C2 + pi**6*C1*C3)*C7 + (pi**6*C1*C2 + pi**6*C1*C3)*C8 + (pi**6*C1*C2 + pi**6*C1*C3)*C9)*L10*L2 + (pi**6*C1*C3*C7 + pi**6*C1*C3*C8 + pi**6*C1*C3*C9)*L10*L3 + ((pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C7 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C8 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9)*L10*L4 + (pi**6*C1*C5*C7 + pi**6*C1*C5*C8 + pi**6*C1*C5*C9)*L10*L5 + ((pi**6*C1*C5 + pi**6*C1*C6)*C7 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C8 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9)*L10*L6 + (pi**6*C1*C7*C8 + pi**6*C1*C7*C9)*L10*L7)*L8 + (pi**6*C1*C3*C9*L10*L3 + pi**6*C1*C5*C9*L10*L5 + pi**6*C1*C7*C9*L10*L7 + (pi**6*C1*C2 + pi**6*C1*C3)*C9*L10*L2 + (pi**6*C1*C3 + pi**6*C1*C4 + pi**6*C1*C5)*C9*L10*L4 + (pi**6*C1*C5 + pi**6*C1*C6 + pi**6*C1*C7)*C9*L10*L6 + (pi**6*C1*C7 + pi**6*C1*C8)*C9*L10*L8)*L9)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*L1*L10*L2 + ((32*I*pi**5*C1*C10*C2 + 32*I*pi**5*C1*C10*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C9)*L10*L2 + (32*I*pi**5*C1*C2*C3*L2 + (32*I*pi**5*C1*C10*C3 + 32*I*pi**5*C1*C3*C9)*L10)*L3 + ((32*I*pi**5*C1*C10*C3 + 32*I*pi**5*C1*C10*C4 + 32*I*pi**5*C1*C10*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C9)*L10 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5)*L2 + (32*I*pi**5*C1*C3*C4 + 32*I*pi**5*C1*C3*C5)*L3)*L4 + (32*I*pi**5*C1*C3*C5*L3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5*L4 + (32*I*pi**5*C1*C10*C5 + 32*I*pi**5*C1*C5*C9)*L10)*L5 + ((32*I*pi**5*C1*C10*C5 + 32*I*pi**5*C1*C10*C6 + 32*I*pi**5*C1*C10*C7 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C9)*L10 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7)*L2 + (32*I*pi**5*C1*C3*C5 + 32*I*pi**5*C1*C3*C6 + 32*I*pi**5*C1*C3*C7)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7)*L4 + (32*I*pi**5*C1*C5*C6 + 32*I*pi**5*C1*C5*C7)*L5)*L6 + (32*I*pi**5*C1*C3*C7*L3 + 32*I*pi**5*C1*C5*C7*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7*L4 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7*L6 + (32*I*pi**5*C1*C10*C7 + 32*I*pi**5*C1*C7*C9)*L10)*L7 + ((32*I*pi**5*C1*C10*C7 + 32*I*pi**5*C1*C10*C8 + (32*I*pi**5*C1*C10 + 32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8)*C9)*L10 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C7 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C8 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C9)*L2 + (32*I*pi**5*C1*C3*C7 + 32*I*pi**5*C1*C3*C8 + 32*I*pi**5*C1*C3*C9)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C7 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C8 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C9)*L4 + (32*I*pi**5*C1*C5*C7 + 32*I*pi**5*C1*C5*C8 + 32*I*pi**5*C1*C5*C9)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6)*C7 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C8 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C9)*L6 + (32*I*pi**5*C1*C7*C8 + 32*I*pi**5*C1*C7*C9)*L7)*L8 + (32*I*pi**5*C1*C10*C9*L10 + 32*I*pi**5*C1*C3*C9*L3 + 32*I*pi**5*C1*C5*C9*L5 + 32*I*pi**5*C1*C7*C9*L7 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C9*L2 + (32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C9*L4 + (32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*C9*L6 + (32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8)*C9*L8)*L9)*ZL*ZS + (32*I*pi**5*C1*C3*L1*L10 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3*L10*L2)*L3 + ((32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L10*L2 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C3*C5)*L10*L3)*L4 + (32*I*pi**5*C1*C5*L1*L10 + 32*I*pi**5*C3*C5*L10*L3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L10*L4)*L5 + ((32*I*pi**5*C1*C5 + 32*I*pi**5*C1*C6 + 32*I*pi**5*C1*C7)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7)*L10*L2 + (32*I*pi**5*C3*C5 + 32*I*pi**5*C3*C6 + 32*I*pi**5*C3*C7)*L10*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7)*L10*L4 + (32*I*pi**5*C5*C6 + 32*I*pi**5*C5*C7)*L10*L5)*L6 + (32*I*pi**5*C1*C7*L1*L10 + 32*I*pi**5*C3*C7*L10*L3 + 32*I*pi**5*C5*C7*L10*L5 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7*L10*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6)*C7*L10*L6)*L7 + ((32*I*pi**5*C1*C7 + 32*I*pi**5*C1*C8 + 32*I*pi**5*C1*C9)*L1*L10 + ((32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C7 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C8 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C9)*L10*L2 + (32*I*pi**5*C3*C7 + 32*I*pi**5*C3*C8 + 32*I*pi**5*C3*C9)*L10*L3 + ((32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C7 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C8 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C9)*L10*L4 + (32*I*pi**5*C5*C7 + 32*I*pi**5*C5*C8 + 32*I*pi**5*C5*C9)*L10*L5 + ((32*I*pi**5*C5 + 32*I*pi**5*C6)*C7 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C8 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C9)*L10*L6 + (32*I*pi**5*C7*C8 + 32*I*pi**5*C7*C9)*L10*L7)*L8 + (32*I*pi**5*C1*C9*L1*L10 + 32*I*pi**5*C3*C9*L10*L3 + 32*I*pi**5*C5*C9*L10*L5 + 32*I*pi**5*C7*C9*L10*L7 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C9*L10*L2 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C9*L10*L4 + (32*I*pi**5*C5 + 32*I*pi**5*C6 + 32*I*pi**5*C7)*C9*L10*L6 + (32*I*pi**5*C7 + 32*I*pi**5*C8)*C9*L10*L8)*L9)*freq**5 + 16*(((pi**4*C1*C10 + pi**4*C1*C9)*L1*L10 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C10 + pi**4*C10*C2 + pi**4*C10*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9)*L10)*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2 + (pi**4*C10*C3 + pi**4*C3*C9)*L10)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C10*C3 + pi**4*C10*C4 + pi**4*C10*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9)*L10 + ((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C5*L2 + (pi**4*C3 + pi**4*C4)*C5*L4 + (pi**4*C10*C5 + pi**4*C5*C9)*L10)*L5 + ((pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L1 + (pi**4*C10*C5 + pi**4*C10*C6 + pi**4*C10*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9)*L10 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7)*L2 + (pi**4*C3*C5 + pi**4*C3*C6 + pi**4*C3*C7)*L3 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7)*L4 + (pi**4*C5*C6 + pi**4*C5*C7)*L5)*L6 + (pi**4*C1*C7*L1 + pi**4*C3*C7*L3 + pi**4*C5*C7*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C7*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C7*L4 + (pi**4*C5 + pi**4*C6)*C7*L6 + (pi**4*C10*C7 + pi**4*C7*C9)*L10)*L7 + ((pi**4*C1*C7 + pi**4*C1*C8 + pi**4*C1*C9)*L1 + (pi**4*C10*C7 + pi**4*C10*C8 + (pi**4*C10 + pi**4*C7 + pi**4*C8)*C9)*L10 + ((pi**4*C1 + pi**4*C2 + pi**4*C3)*C7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C8 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9)*L2 + (pi**4*C3*C7 + pi**4*C3*C8 + pi**4*C3*C9)*L3 + ((pi**4*C3 + pi**4*C4 + pi**4*C5)*C7 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C8 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9)*L4 + (pi**4*C5*C7 + pi**4*C5*C8 + pi**4*C5*C9)*L5 + ((pi**4*C5 + pi**4*C6)*C7 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C8 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9)*L6 + (pi**4*C7*C8 + pi**4*C7*C9)*L7)*L8 + (pi**4*C1*C9*L1 + pi**4*C10*C9*L10 + pi**4*C3*C9*L3 + pi**4*C5*C9*L5 + pi**4*C7*C9*L7 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C9*L2 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C9*L4 + (pi**4*C5 + pi**4*C6 + pi**4*C7)*C9*L6 + (pi**4*C7 + pi**4*C8)*C9*L8)*L9)*ZL + (pi**4*C1*C3*L10*L3 + pi**4*C1*C5*L10*L5 + pi**4*C1*C7*L10*L7 + pi**4*C1*C9*L10*L9 + (pi**4*C1*C2 + pi**4*C1*C3)*L10*L2 + (pi**4*C1*C3 + pi**4*C1*C4 + pi**4*C1*C5)*L10*L4 + (pi**4*C1*C5 + pi**4*C1*C6 + pi**4*C1*C7)*L10*L6 + (pi**4*C1*C7 + pi**4*C1*C8 + pi**4*C1*C9)*L10*L8)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L10 - 8*I*pi**3*C3*L10*L3 - 8*I*pi**3*C5*L10*L5 - 8*I*pi**3*C7*L10*L7 - 8*I*pi**3*C9*L10*L9 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L10*L2 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L10*L4 + (-8*I*pi**3*C5 - 8*I*pi**3*C6 - 8*I*pi**3*C7)*L10*L6 + (-8*I*pi**3*C7 - 8*I*pi**3*C8 - 8*I*pi**3*C9)*L10*L8 + (-8*I*pi**3*C1*C3*L3 - 8*I*pi**3*C1*C5*L5 - 8*I*pi**3*C1*C7*L7 - 8*I*pi**3*C1*C9*L9 + (-8*I*pi**3*C1*C10 - 8*I*pi**3*C1*C9)*L10 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C3 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C5)*L4 + (-8*I*pi**3*C1*C5 - 8*I*pi**3*C1*C6 - 8*I*pi**3*C1*C7)*L6 + (-8*I*pi**3*C1*C7 - 8*I*pi**3*C1*C8 - 8*I*pi**3*C1*C9)*L8)*ZL*ZS)*freq**3 - 4*(pi**2*C1*L10*ZS + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + pi**2*C7*L7 + pi**2*C9*L9 + (pi**2*C10 + pi**2*C9)*L10 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L2 + (pi**2*C3 + pi**2*C4 + pi**2*C5)*L4 + (pi**2*C5 + pi**2*C6 + pi**2*C7)*L6 + (pi**2*C7 + pi**2*C8 + pi**2*C9)*L8)*ZL)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L10)*freq + ZL)*np.sqrt(ZL*ZS))
        elif(network_type['Mask'] == 'Bandstop'):
            if (network_type['First_Element'] == 'Series'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']

                    S11 = (-2*I*pi*L1*freq + 4*(pi**2*C1*L1*ZL - pi**2*C1*L1*ZS)*freq**2 - ZL + ZS)/(-2*I*pi*L1*freq + 4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 - ZL - ZS)

                    S21 = 2*(4*pi**2*C1*L1*freq**2 - 1)*np.sqrt(ZL*ZS)/(-2*I*pi*L1*freq + 4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 - ZL - ZS)
                
                if(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']

                    S11 = (16*(pi**4*C1*C2*L1*L2*ZL - pi**4*C1*C2*L1*L2*ZS)*freq**4 - (-8*I*pi**3*C1*C2*L1*ZL*ZS + 8*I*pi**3*C2*L1*L2)*freq**3 - 4*((pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL - (pi**2*C1*L1 + pi**2*C2*L2)*ZS)*freq**2 - (2*I*pi*C2*ZL*ZS - 2*I*pi*L1)*freq + ZL - ZS)/(16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + (-8*I*pi**3*C1*C2*L1*ZL*ZS - 8*I*pi**3*C2*L1*L2)*freq**3 - 4*((pi**2*C2*L2 + (pi**2*C1 + pi**2*C2)*L1)*ZL + (pi**2*C1*L1 + pi**2*C2*L2)*ZS)*freq**2 + (2*I*pi*C2*ZL*ZS + 2*I*pi*L1)*freq + ZL + ZS)

                    S21 = (32*I*pi**4*C1*C2*L1*L2*ZL*ZS*freq**4 + (-8*I*pi**2*C1*L1 - 8*I*pi**2*C2*L2)*ZL*ZS*freq**2 + 2*I*ZL*ZS)/(((16*I*pi**4*C1*C2*L1*L2*ZL + 16*I*pi**4*C1*C2*L1*L2*ZS)*freq**4 + 8*(pi**3*C1*C2*L1*ZL*ZS + pi**3*C2*L1*L2)*freq**3 + ((-4*I*pi**2*C2*L2 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L1)*ZL + (-4*I*pi**2*C1*L1 - 4*I*pi**2*C2*L2)*ZS)*freq**2 - 2*(pi*C2*ZL*ZS + pi*L1)*freq + I*ZL + I*ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']

                    S11 = (64*(pi**6*C1*C2*C3*L1*L2*L3*ZL - pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 - (-32*I*pi**5*C1*C2*C3*L1*L3*ZL*ZS + (32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C3)*L1*L2*L3)*freq**5 - 16*((pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 - (-8*I*pi**3*C2*L1*L2 + (8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C2*C3*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C2*L2 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L1)*ZL - (pi**2*C1*L1 + pi**2*C2*L2 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 - (-2*I*pi*C2*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3)*freq - ZL + ZS)/(64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + (-32*I*pi**5*C1*C2*C3*L1*L3*ZL*ZS + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1*L2*L3)*freq**5 - 16*((pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1 + pi**4*C2)*C3*L1)*L3)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + (8*I*pi**3*C1*C2*L1 + 8*I*pi**3*C2*C3*L3)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3)*freq**3 + 4*((pi**2*C2*L2 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L1)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + (-2*I*pi*C2*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3)*freq - ZL - ZS)

                    S21 = (128*I*pi**6*C1*C2*C3*L1*L2*L3*ZL*ZS*freq**6 + (-32*I*pi**4*C1*C2*L1*L2 + (-32*I*pi**4*C1*C3*L1 - 32*I*pi**4*C2*C3*L2)*L3)*ZL*ZS*freq**4 + (8*I*pi**2*C1*L1 + 8*I*pi**2*C2*L2 + 8*I*pi**2*C3*L3)*ZL*ZS*freq**2 - 2*I*ZL*ZS)/(((64*I*pi**6*C1*C2*C3*L1*L2*L3*ZL + 64*I*pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + 32*(pi**5*C1*C2*C3*L1*L3*ZL*ZS + (pi**5*C1*C2 + pi**5*C2*C3)*L1*L2*L3)*freq**5 + ((-16*I*pi**4*C1*C2*L1*L2 + (-16*I*pi**4*C2*C3*L2 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L1)*L3)*ZL + (-16*I*pi**4*C1*C2*L1*L2 + (-16*I*pi**4*C2*C3*L2 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L1)*L3)*ZS)*freq**4 - 8*(pi**3*C2*L1*L2 + (pi**3*C1*C2*L1 + pi**3*C2*C3*L3)*ZL*ZS + (pi**3*C2*L2 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*L1)*L3)*freq**3 + ((4*I*pi**2*C2*L2 + 4*I*pi**2*C3*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L1)*ZL + (4*I*pi**2*C1*L1 + 4*I*pi**2*C2*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3)*ZS)*freq**2 + 2*(pi*C2*ZL*ZS + pi*L1 + pi*L3)*freq - I*ZL - I*ZS)*np.sqrt(ZL*ZS))
                
                if(network_type['N'] == 4):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']

                    S11 = (256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL - pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 - ((128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 - 128*I*pi**7*C1*C2*C3*C4*L1*L3*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4)*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 - ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1*L2*L3 + (32*I*pi**5*C1*C2*C4*L1*L2 + (32*I*pi**5*C2*C3*C4*L2 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L1)*L3 + (32*I*pi**5*C1*C2*C4*L1 + 32*I*pi**5*C2*C3*C4*L3)*L4)*ZL*ZS + (-32*I*pi**5*C2*C4*L1*L2 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C2*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C2*C4*L2 + pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1)*L4)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4)*ZS)*freq**4 - (8*I*pi**3*C2*L1*L2 + (-8*I*pi**3*C2*C4*L2 - 8*I*pi**3*C2*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C4)*L1 + (-8*I*pi**3*C2*C3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4)*L3)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L1 + 8*I*pi**3*C4*L3)*L4)*freq**3 - 4*((pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L3)*ZL - (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 - ((2*I*pi*C2 + 2*I*pi*C4)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3)*freq + ZL - ZS)/(256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 - 128*I*pi**7*C1*C2*C3*C4*L1*L3*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4)*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C3)*L1*L2*L3 + (32*I*pi**5*C1*C2*C4*L1*L2 + (32*I*pi**5*C2*C3*C4*L2 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L1)*L3 + (32*I*pi**5*C1*C2*C4*L1 + 32*I*pi**5*C2*C3*C4*L3)*L4)*ZL*ZS + (32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C2*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C2*C4*L2 + pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1)*L4)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + (-8*I*pi**3*C2*C4*L2 - 8*I*pi**3*C2*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C4)*L1 + (-8*I*pi**3*C2*C3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L1 - 8*I*pi**3*C4*L3)*L4)*freq**3 - 4*((pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((2*I*pi*C2 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3)*freq + ZL + ZS)

                    S21 = 2*(256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*ZS*freq**8 - 64*(pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4)*ZL*ZS*freq**6 + 16*(pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + pi**4*C3*C4*L3)*L4)*ZL*ZS*freq**4 - 4*(pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C3*L3 + pi**2*C4*L4)*ZL*ZS*freq**2 + ZL*ZS)/((256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 - 128*I*pi**7*C1*C2*C3*C4*L1*L3*L4)*ZL*ZS)*freq**7 - 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4)*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C3)*L1*L2*L3 + (32*I*pi**5*C1*C2*C4*L1*L2 + (32*I*pi**5*C2*C3*C4*L2 + (32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4)*L1)*L3 + (32*I*pi**5*C1*C2*C4*L1 + 32*I*pi**5*C2*C3*C4*L3)*L4)*ZL*ZS + (32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C2*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C2*C4*L2 + pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1)*L4)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + (-8*I*pi**3*C2*C4*L2 - 8*I*pi**3*C2*C4*L4 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C4)*L1 + (-8*I*pi**3*C2*C3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L1 - 8*I*pi**3*C4*L3)*L4)*freq**3 - 4*((pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C1 + pi**2*C2 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L3)*ZS)*freq**2 + ((2*I*pi*C2 + 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 5):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']

                    S11 = (1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL - pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 - ((512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 - 512*I*pi**9*C1*C2*C3*C4*C5*L1*L3*L4)*L5*ZL*ZS)*freq**9 - 256*((pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C5*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL - (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5)*L1)*L3)*L4)*L5)*ZS)*freq**8 - ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + 128*I*pi**7*C1*C2*C3*C4*L1*L3*L4 + (128*I*pi**7*C1*C2*C4*C5*L1*L2 + (128*I*pi**7*C2*C3*C4*C5*L2 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L1)*L3 + (128*I*pi**7*C1*C2*C4*C5*L1 + 128*I*pi**7*C2*C3*C4*C5*L3)*L4)*L5)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C5)*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C2*C4*C5)*L1*L2 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5)*L1 + (-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C4*C5)*L2)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4)*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C2*C4)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C5*L2)*L3 + (pi**6*C2*C4*C5*L2 + pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2)*C4*C5*L1)*L4)*L5)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3 + (pi**6*C2*C4*C5*L2 + (pi**6*C1*C2*C4 + pi**6*C1*C4*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2 + pi**6*C3)*C4*C5)*L3)*L4)*L5)*ZS)*freq**6 - ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C4*L1*L2 + (-32*I*pi**5*C2*C3*C4*L2 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L1)*L3 + (-32*I*pi**5*C1*C2*C4*L1 - 32*I*pi**5*C2*C3*C4*L3)*L4 + (-32*I*pi**5*C2*C4*C5*L2 - 32*I*pi**5*C2*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C4)*C5*L1 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*C5*L3)*L5)*ZL*ZS + (32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L2)*L3 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C4*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C4*C5)*L3)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C2*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C2*C4*L2 + pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1)*L4 + (pi**4*C2*C5*L2 + pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + ((pi**4*C1*C2 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C2*C4 + pi**4*C2*C5)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C2*C4 + pi**4*C4*C5)*L4)*L5)*ZS)*freq**4 - (-8*I*pi**3*C2*L1*L2 + (8*I*pi**3*C2*C4*L2 + 8*I*pi**3*C2*C4*L4 + (8*I*pi**3*C2 + 8*I*pi**3*C4)*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C4)*L1 + (8*I*pi**3*C2*C3 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*C4)*L3)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L1 - 8*I*pi**3*C4*L3)*L4 + (-8*I*pi**3*C2*L2 - 8*I*pi**3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L3)*L5)*freq**3 + 4*((pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L3)*ZL - (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C2 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 - ((-2*I*pi*C2 - 2*I*pi*C4)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3 + 2*I*pi*L5)*freq - ZL + ZS)/(1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C2*C3)*C4*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 - 512*I*pi**9*C1*C2*C3*C4*C5*L1*L3*L4)*L5*ZL*ZS)*freq**9 - 256*((pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C5*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5)*L1)*L3)*L4)*L5)*ZS)*freq**8 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + 128*I*pi**7*C1*C2*C3*C4*L1*L3*L4 + (128*I*pi**7*C1*C2*C4*C5*L1*L2 + (128*I*pi**7*C2*C3*C4*C5*L2 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L1)*L3 + (128*I*pi**7*C1*C2*C4*C5*L1 + 128*I*pi**7*C2*C3*C4*C5*L3)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C5)*L1*L2*L3 + ((128*I*pi**7*C1*C2*C4 + 128*I*pi**7*C2*C4*C5)*L1*L2 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + (128*I*pi**7*C1 + 128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C5)*L1 + (128*I*pi**7*C2*C3*C4 + 128*I*pi**7*C2*C4*C5)*L2)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4)*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C2*C4)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C5*L2)*L3 + (pi**6*C2*C4*C5*L2 + pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2)*C4*C5*L1)*L4)*L5)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3 + (pi**6*C2*C4*C5*L2 + (pi**6*C1*C2*C4 + pi**6*C1*C4*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2 + pi**6*C3)*C4*C5)*L3)*L4)*L5)*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C4*L1*L2 + (-32*I*pi**5*C2*C3*C4*L2 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L1)*L3 + (-32*I*pi**5*C1*C2*C4*L1 - 32*I*pi**5*C2*C3*C4*L3)*L4 + (-32*I*pi**5*C2*C4*C5*L2 - 32*I*pi**5*C2*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C4)*C5*L1 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*C5*L3)*L5)*ZL*ZS + (-32*I*pi**5*C2*C4*L1*L2 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L2)*L3 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C4*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C3*C4 - 32*I*pi**5*C4*C5)*L3)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C2*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C2*C4*L2 + pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1)*L4 + (pi**4*C2*C5*L2 + pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + ((pi**4*C1*C2 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C2*C4 + pi**4*C2*C5)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C2*C4 + pi**4*C4*C5)*L4)*L5)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + (8*I*pi**3*C2*C4*L2 + 8*I*pi**3*C2*C4*L4 + (8*I*pi**3*C2 + 8*I*pi**3*C4)*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C4)*L1 + (8*I*pi**3*C2*C3 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*C4)*L3)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L1 + 8*I*pi**3*C4*L3)*L4 + (8*I*pi**3*C2*L2 + 8*I*pi**3*C4*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L3)*L5)*freq**3 + 4*((pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C2 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((-2*I*pi*C2 - 2*I*pi*C4)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3 - 2*I*pi*L5)*freq - ZL - ZS)

                    S21 = 2*(1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*freq**10 - 256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + pi**8*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS*freq**8 + 64*(pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4 + (pi**6*C1*C2*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + pi**6*C2*C3*C5*L2)*L3 + (pi**6*C1*C4*C5*L1 + pi**6*C2*C4*C5*L2 + pi**6*C3*C4*C5*L3)*L4)*L5)*ZL*ZS*freq**6 - 16*(pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + pi**4*C3*C4*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C2*C5*L2 + pi**4*C3*C5*L3 + pi**4*C4*C5*L4)*L5)*ZL*ZS*freq**4 + 4*(pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C3*L3 + pi**2*C4*L4 + pi**2*C5*L5)*ZL*ZS*freq**2 - ZL*ZS)/((1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C2*C3)*C4*C5)*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3 - 512*I*pi**9*C1*C2*C3*C4*C5*L1*L3*L4)*L5*ZL*ZS)*freq**9 - 256*((pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C5*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C5*L1)*L3)*L4)*L5)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5)*L1)*L3)*L4)*L5)*ZS)*freq**8 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C4*L1*L2*L3 + 128*I*pi**7*C1*C2*C3*C4*L1*L3*L4 + (128*I*pi**7*C1*C2*C4*C5*L1*L2 + (128*I*pi**7*C2*C3*C4*C5*L2 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3)*C4)*C5*L1)*L3 + (128*I*pi**7*C1*C2*C4*C5*L1 + 128*I*pi**7*C2*C3*C4*C5*L3)*L4)*L5)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C5)*L1*L2*L3 + ((128*I*pi**7*C1*C2*C4 + 128*I*pi**7*C2*C4*C5)*L1*L2 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + (128*I*pi**7*C1 + 128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C5)*L1 + (128*I*pi**7*C2*C3*C4 + 128*I*pi**7*C2*C4*C5)*L2)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4)*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1 + pi**6*C2)*C3*C4*L1)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C2*C4)*C5*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C5*L2)*L3 + (pi**6*C2*C4*C5*L2 + pi**6*C3*C4*C5*L3 + (pi**6*C1 + pi**6*C2)*C4*C5*L1)*L4)*L5)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3 + (pi**6*C2*C4*C5*L2 + (pi**6*C1*C2*C4 + pi**6*C1*C4*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2 + pi**6*C3)*C4*C5)*L3)*L4)*L5)*ZS)*freq**6 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1*L2*L3 + (-32*I*pi**5*C1*C2*C4*L1*L2 + (-32*I*pi**5*C2*C3*C4*L2 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*C4)*L1)*L3 + (-32*I*pi**5*C1*C2*C4*L1 - 32*I*pi**5*C2*C3*C4*L3)*L4 + (-32*I*pi**5*C2*C4*C5*L2 - 32*I*pi**5*C2*C4*C5*L4 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C4)*C5*L1 + (-32*I*pi**5*C2*C3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4)*C5*L3)*L5)*ZL*ZS + (-32*I*pi**5*C2*C4*L1*L2 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L2)*L3 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C4*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C3*C4 - 32*I*pi**5*C4*C5)*L3)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C2*C4)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4)*L1 + (pi**4*C2*C3 + pi**4*C2*C4)*L2)*L3 + (pi**4*C2*C4*L2 + pi**4*C3*C4*L3 + (pi**4*C1 + pi**4*C2)*C4*L1)*L4 + (pi**4*C2*C5*L2 + pi**4*C4*C5*L4 + (pi**4*C1 + pi**4*C2 + pi**4*C4)*C5*L1 + (pi**4*C3 + pi**4*C4)*C5*L3)*L5)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + ((pi**4*C1*C2 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C2*C4 + pi**4*C2*C5)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C2*C4 + pi**4*C4*C5)*L4)*L5)*ZS)*freq**4 + (8*I*pi**3*C2*L1*L2 + (8*I*pi**3*C2*C4*L2 + 8*I*pi**3*C2*C4*L4 + (8*I*pi**3*C2 + 8*I*pi**3*C4)*C5*L5 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C4)*L1 + (8*I*pi**3*C2*C3 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*C4)*L3)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L1 + 8*I*pi**3*C4*L3)*L4 + (8*I*pi**3*C2*L2 + 8*I*pi**3*C4*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L3)*L5)*freq**3 + 4*((pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C4)*L1 + (pi**2*C3 + pi**2*C4)*L3)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C2 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((-2*I*pi*C2 - 2*I*pi*C4)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3 - 2*I*pi*L5)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
                    
                if(network_type['N'] == 6):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']
                    L6 = comp_val['L6']
                    C6 = comp_val['C6']

                    S11 = (4096*(pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL - pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZS)*freq**12 - ((2048*I*pi**11*C1*C2*C3*C4 + (2048*I*pi**11*C1*C2 + 2048*I*pi**11*C2*C3)*C4*C5)*C6*L1*L2*L3*L4*L5*L6 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L2*L3 - 2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L3*L4)*L5*L6)*ZL*ZS)*freq**11 - 1024*(((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2 + pi**10*C2*C3)*C4*C5)*C6)*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C2*C3)*C4)*C5*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*ZL - (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C4*C5)*C6*L1)*L3)*L4)*L5)*L6)*ZS)*freq**10 - ((-512*I*pi**9*C1*C2*C3*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C2*C3)*C4*C5)*L1*L2*L3*L4*L5 + (512*I*pi**9*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6)*L1*L2*L3 + (512*I*pi**9*C1*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2*C3*C4*C5*C6*L2 + (512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4*C5)*C6)*L1)*L3)*L4)*L5 + (512*I*pi**9*C1*C2*C3*C4*C6*L1*L2*L3 + 512*I*pi**9*C1*C2*C3*C4*C6*L1*L3*L4 + (512*I*pi**9*C1*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2*C3*C4*C5*C6*L2 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6*L1)*L3 + (512*I*pi**9*C1*C2*C4*C5*C6*L1 + 512*I*pi**9*C2*C3*C4*C5*C6*L3)*L4)*L5)*L6)*ZL*ZS + ((-512*I*pi**9*C1*C2 - 512*I*pi**9*C2*C3)*C4*C6*L1*L2*L3*L4 + ((-512*I*pi**9*C1*C2*C3 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C2*C3)*C4 + (-512*I*pi**9*C1*C2 - 512*I*pi**9*C2*C3)*C5)*C6*L1*L2*L3 + ((-512*I*pi**9*C1*C2*C4 - 512*I*pi**9*C2*C4*C5)*C6*L1*L2 + (((-512*I*pi**9*C1 - 512*I*pi**9*C2)*C3*C4 + (-512*I*pi**9*C1 - 512*I*pi**9*C2 - 512*I*pi**9*C3)*C4*C5)*C6*L1 + (-512*I*pi**9*C2*C3*C4 - 512*I*pi**9*C2*C4*C5)*C6*L2)*L3)*L4)*L5)*L6)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C2*C3)*C4*C6)*L1*L2*L3*L4 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4 + (pi**8*C1*C2 + pi**8*C2*C3)*C5)*C6)*L1*L2*L3 + ((pi**8*C1*C2*C4*C5 + (pi**8*C1*C2*C4 + pi**8*C2*C4*C5)*C6)*L1*L2 + (((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4*C5)*C6)*L1 + (pi**8*C2*C3*C4*C5 + (pi**8*C2*C3*C4 + pi**8*C2*C4*C5)*C6)*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C6*L1)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C2*C4)*C5*C6*L1*L2 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6*L1 + (pi**8*C2*C3 + pi**8*C2*C4)*C5*C6*L2)*L3 + (pi**8*C2*C4*C5*C6*L2 + pi**8*C3*C4*C5*C6*L3 + (pi**8*C1 + pi**8*C2)*C4*C5*C6*L1)*L4)*L5)*L6)*ZL - (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5)*L1)*L3)*L4)*L5 + (pi**8*C1*C2*C3*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C6*L1)*L3)*L4 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6*L1*L2 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6*L1 + (pi**8*C2*C3*C4 + pi**8*C2*C3*C5)*C6*L2)*L3 + (pi**8*C2*C4*C5*C6*L2 + (pi**8*C1*C2*C4 + pi**8*C1*C4*C5)*C6*L1 + (pi**8*C2*C3*C4 + (pi**8*C2 + pi**8*C3)*C4*C5)*C6*L3)*L4)*L5)*L6)*ZS)*freq**8 - ((128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C6)*L1*L2*L3 + (-128*I*pi**7*C1*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C3*C4*C6*L2 + (-128*I*pi**7*C1*C2*C3*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C6)*L1)*L3)*L4 + ((-128*I*pi**7*C1*C2*C4*C5 + (-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C1*C2*C5)*C6)*L1*L2 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6)*L1 + (-128*I*pi**7*C2*C3*C4*C5 + (-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C3*C5)*C6)*L2)*L3 + (-128*I*pi**7*C2*C4*C5*C6*L2 + (-128*I*pi**7*C1*C2*C4*C5 + (-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C1*C4*C5)*C6)*L1 + (-128*I*pi**7*C2*C3*C4*C5 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5)*C6)*L3)*L4)*L5 + (-128*I*pi**7*C1*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C3*C4*C6*L2 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C6*L1)*L3 + (-128*I*pi**7*C1*C2*C4*C6*L1 - 128*I*pi**7*C2*C3*C4*C6*L3)*L4 + (-128*I*pi**7*C2*C4*C5*C6*L2 - 128*I*pi**7*C2*C4*C5*C6*L4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C4)*C5*C6*L1 + (-128*I*pi**7*C2*C3 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*C6*L3)*L5)*L6)*ZL*ZS + ((128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C4 + (128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C5)*L1*L2*L3 + ((128*I*pi**7*C1*C2*C4 + 128*I*pi**7*C2*C4*C5)*L1*L2 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4 + (128*I*pi**7*C1 + 128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C5)*L1 + (128*I*pi**7*C2*C3*C4 + 128*I*pi**7*C2*C4*C5)*L2)*L3)*L4)*L5 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C3)*C6*L1*L2*L3 + (128*I*pi**7*C2*C4*C6*L1*L2 + (128*I*pi**7*C2*C4*C6*L2 + (128*I*pi**7*C1 + 128*I*pi**7*C2 + 128*I*pi**7*C3)*C4*C6*L1)*L3)*L4 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5)*C6*L1*L2 + (((128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2 + 128*I*pi**7*C3)*C4 + (128*I*pi**7*C1 + 128*I*pi**7*C2 + 128*I*pi**7*C3)*C5)*C6*L1 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C2*C4 + 128*I*pi**7*C2*C5)*C6*L2)*L3 + (128*I*pi**7*C2*C4*C6*L2 + (128*I*pi**7*C4*C5 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C6*L1 + (128*I*pi**7*C3*C4 + 128*I*pi**7*C4*C5)*C6*L3)*L4)*L5)*L6)*freq**7 - 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4 + (pi**6*C1*C2 + pi**6*C2*C3)*C6)*L1*L2*L3 + ((pi**6*C1*C2*C4 + pi**6*C2*C4*C6)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C6)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C4*C6)*L2)*L3)*L4 + (((pi**6*C1*C2 + pi**6*C2*C4)*C5 + (pi**6*C1*C2 + pi**6*C2*C4 + pi**6*C2*C5)*C6)*L1*L2 + ((((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6)*L1 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5 + (pi**6*C2*C3 + pi**6*C2*C4 + pi**6*C2*C5)*C6)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C5 + (pi**6*C4*C5 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1 + (pi**6*C2*C4*C5 + pi**6*C2*C4*C6)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C4*C5)*C6)*L3)*L4)*L5 + ((pi**6*C1*C2 + pi**6*C2*C4)*C6*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C6*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C6*L2)*L3 + (pi**6*C2*C4*C6*L2 + pi**6*C3*C4*C6*L3 + (pi**6*C1 + pi**6*C2)*C4*C6*L1)*L4 + (pi**6*C2*C5*C6*L2 + pi**6*C4*C5*C6*L4 + (pi**6*C1 + pi**6*C2 + pi**6*C4)*C5*C6*L1 + (pi**6*C3 + pi**6*C4)*C5*C6*L3)*L5)*L6)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3 + (pi**6*C2*C4*C5*L2 + (pi**6*C1*C2*C4 + pi**6*C1*C4*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2 + pi**6*C3)*C4*C5)*L3)*L4)*L5 + (pi**6*C1*C2*C6*L1*L2 + (pi**6*C2*C3*C6*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C6*L1)*L3 + (pi**6*C1*C4*C6*L1 + pi**6*C2*C4*C6*L2 + (pi**6*C2 + pi**6*C3)*C4*C6*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C4 + pi**6*C1*C5)*C6*L1 + (pi**6*C2*C4 + pi**6*C2*C5)*C6*L2 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3)*C5)*C6*L3 + (pi**6*C2*C4 + pi**6*C4*C5)*C6*L4)*L5)*L6)*ZS)*freq**6 - ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1*L2*L3 + ((32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C6)*L1*L2 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6)*L1 + (32*I*pi**5*C2*C3*C4 + 32*I*pi**5*C2*C3*C6)*L2)*L3 + (32*I*pi**5*C2*C4*C6*L2 + (32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C4*C6)*L1 + (32*I*pi**5*C2*C3*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C6)*L3)*L4 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6)*L1 + (32*I*pi**5*C2*C4*C5 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*C6)*L2 + ((32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*C5 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*C6)*L3 + (32*I*pi**5*C2*C4*C5 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C4*C5)*C6)*L4)*L5 + (32*I*pi**5*C2*C4*C6*L2 + 32*I*pi**5*C2*C4*C6*L4 + (32*I*pi**5*C2 + 32*I*pi**5*C4)*C5*C6*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4)*C6*L1 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*C6*L3)*L6)*ZL*ZS + (-32*I*pi**5*C2*C4*L1*L2 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L1*L2 + (((-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C5)*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C2*C4 - 32*I*pi**5*C2*C5)*L2)*L3 + (-32*I*pi**5*C2*C4*L2 + (-32*I*pi**5*C4*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*L1 + (-32*I*pi**5*C3*C4 - 32*I*pi**5*C4*C5)*L3)*L4)*L5 + (-32*I*pi**5*C2*C6*L1*L2 + (-32*I*pi**5*C2*C6*L2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C3)*C6*L1)*L3 + (-32*I*pi**5*C4*C6*L1 - 32*I*pi**5*C4*C6*L3)*L4 + (-32*I*pi**5*C2*C6*L2 - 32*I*pi**5*C4*C6*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2 - 32*I*pi**5*C4 - 32*I*pi**5*C5)*C6*L1 + (-32*I*pi**5*C3 - 32*I*pi**5*C4 - 32*I*pi**5*C5)*C6*L3)*L5)*L6)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C2*C4 + pi**4*C2*C6)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6)*L1 + (pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C6)*L2)*L3 + (pi**4*C2*C4*L2 + (pi**4*C4*C6 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C3*C4 + pi**4*C4*C6)*L3)*L4 + (((pi**4*C1 + pi**4*C2 + pi**4*C4)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C4 + pi**4*C5)*C6)*L1 + (pi**4*C2*C5 + pi**4*C2*C6)*L2 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6)*L3 + (pi**4*C4*C5 + pi**4*C4*C6)*L4)*L5 + (pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + pi**4*C5*C6*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C4)*C6*L1 + (pi**4*C3 + pi**4*C4)*C6*L3)*L6)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + ((pi**4*C1*C2 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C2*C4 + pi**4*C2*C5)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C2*C4 + pi**4*C4*C5)*L4)*L5 + (pi**4*C1*C6*L1 + pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + (pi**4*C2 + pi**4*C3)*C6*L3 + (pi**4*C2 + pi**4*C4 + pi**4*C5)*C6*L5)*L6)*ZS)*freq**4 - (8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C2 - 8*I*pi**3*C4)*C6*L6 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C6)*L1 + (-8*I*pi**3*C2*C4 - 8*I*pi**3*C2*C6)*L2 + (-8*I*pi**3*C2*C3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C6)*L3 + (-8*I*pi**3*C2*C4 - 8*I*pi**3*C4*C6)*L4 + ((-8*I*pi**3*C2 - 8*I*pi**3*C4)*C5 + (-8*I*pi**3*C2 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*C6)*L5)*ZL*ZS + (8*I*pi**3*C2*L2 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1)*L3 + (8*I*pi**3*C4*L1 + 8*I*pi**3*C4*L3)*L4 + (8*I*pi**3*C2*L2 + 8*I*pi**3*C4*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L1 + (8*I*pi**3*C3 + 8*I*pi**3*C4 + 8*I*pi**3*C5)*L3)*L5 + (8*I*pi**3*C6*L1 + 8*I*pi**3*C6*L3 + 8*I*pi**3*C6*L5)*L6)*freq**3 - 4*((pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + (pi**2*C1 + pi**2*C2 + pi**2*C4 + pi**2*C6)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C6)*L3 + (pi**2*C5 + pi**2*C6)*L5)*ZL - (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C2 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 - ((2*I*pi*C2 + 2*I*pi*C4 + 2*I*pi*C6)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3 - 2*I*pi*L5)*freq + ZL - ZS)/(4096*(pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL + pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZS)*freq**12 + ((-2048*I*pi**11*C1*C2*C3*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C2*C3)*C4*C5)*C6*L1*L2*L3*L4*L5*L6 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L2*L3 - 2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L3*L4)*L5*L6)*ZL*ZS)*freq**11 - 1024*(((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2 + pi**10*C2*C3)*C4*C5)*C6)*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C2*C3)*C4)*C5*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*ZL + (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C4*C5)*C6*L1)*L3)*L4)*L5)*L6)*ZS)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4*C5)*L1*L2*L3*L4*L5 + (512*I*pi**9*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6)*L1*L2*L3 + (512*I*pi**9*C1*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2*C3*C4*C5*C6*L2 + (512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4*C5)*C6)*L1)*L3)*L4)*L5 + (512*I*pi**9*C1*C2*C3*C4*C6*L1*L2*L3 + 512*I*pi**9*C1*C2*C3*C4*C6*L1*L3*L4 + (512*I*pi**9*C1*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2*C3*C4*C5*C6*L2 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6*L1)*L3 + (512*I*pi**9*C1*C2*C4*C5*C6*L1 + 512*I*pi**9*C2*C3*C4*C5*C6*L3)*L4)*L5)*L6)*ZL*ZS + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4*C6*L1*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C5)*C6*L1*L2*L3 + ((512*I*pi**9*C1*C2*C4 + 512*I*pi**9*C2*C4*C5)*C6*L1*L2 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5)*C6*L1 + (512*I*pi**9*C2*C3*C4 + 512*I*pi**9*C2*C4*C5)*C6*L2)*L3)*L4)*L5)*L6)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C2*C3)*C4*C6)*L1*L2*L3*L4 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4 + (pi**8*C1*C2 + pi**8*C2*C3)*C5)*C6)*L1*L2*L3 + ((pi**8*C1*C2*C4*C5 + (pi**8*C1*C2*C4 + pi**8*C2*C4*C5)*C6)*L1*L2 + (((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4*C5)*C6)*L1 + (pi**8*C2*C3*C4*C5 + (pi**8*C2*C3*C4 + pi**8*C2*C4*C5)*C6)*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C6*L1)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C2*C4)*C5*C6*L1*L2 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6*L1 + (pi**8*C2*C3 + pi**8*C2*C4)*C5*C6*L2)*L3 + (pi**8*C2*C4*C5*C6*L2 + pi**8*C3*C4*C5*C6*L3 + (pi**8*C1 + pi**8*C2)*C4*C5*C6*L1)*L4)*L5)*L6)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5)*L1)*L3)*L4)*L5 + (pi**8*C1*C2*C3*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C6*L1)*L3)*L4 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6*L1*L2 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6*L1 + (pi**8*C2*C3*C4 + pi**8*C2*C3*C5)*C6*L2)*L3 + (pi**8*C2*C4*C5*C6*L2 + (pi**8*C1*C2*C4 + pi**8*C1*C4*C5)*C6*L1 + (pi**8*C2*C3*C4 + (pi**8*C2 + pi**8*C3)*C4*C5)*C6*L3)*L4)*L5)*L6)*ZS)*freq**8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C6)*L1*L2*L3 + (-128*I*pi**7*C1*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C3*C4*C6*L2 + (-128*I*pi**7*C1*C2*C3*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C6)*L1)*L3)*L4 + ((-128*I*pi**7*C1*C2*C4*C5 + (-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C1*C2*C5)*C6)*L1*L2 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6)*L1 + (-128*I*pi**7*C2*C3*C4*C5 + (-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C3*C5)*C6)*L2)*L3 + (-128*I*pi**7*C2*C4*C5*C6*L2 + (-128*I*pi**7*C1*C2*C4*C5 + (-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C1*C4*C5)*C6)*L1 + (-128*I*pi**7*C2*C3*C4*C5 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5)*C6)*L3)*L4)*L5 + (-128*I*pi**7*C1*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C3*C4*C6*L2 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C6*L1)*L3 + (-128*I*pi**7*C1*C2*C4*C6*L1 - 128*I*pi**7*C2*C3*C4*C6*L3)*L4 + (-128*I*pi**7*C2*C4*C5*C6*L2 - 128*I*pi**7*C2*C4*C5*C6*L4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C4)*C5*C6*L1 + (-128*I*pi**7*C2*C3 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*C6*L3)*L5)*L6)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C5)*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C2*C4*C5)*L1*L2 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5)*L1 + (-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C4*C5)*L2)*L3)*L4)*L5 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C6*L1*L2*L3 + (-128*I*pi**7*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C4*C6*L2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6*L1)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6*L1*L2 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6*L1 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6*L2)*L3 + (-128*I*pi**7*C2*C4*C6*L2 + (-128*I*pi**7*C4*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C4)*C6*L1 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C4*C5)*C6*L3)*L4)*L5)*L6)*freq**7 - 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4 + (pi**6*C1*C2 + pi**6*C2*C3)*C6)*L1*L2*L3 + ((pi**6*C1*C2*C4 + pi**6*C2*C4*C6)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C6)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C4*C6)*L2)*L3)*L4 + (((pi**6*C1*C2 + pi**6*C2*C4)*C5 + (pi**6*C1*C2 + pi**6*C2*C4 + pi**6*C2*C5)*C6)*L1*L2 + ((((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6)*L1 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5 + (pi**6*C2*C3 + pi**6*C2*C4 + pi**6*C2*C5)*C6)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C5 + (pi**6*C4*C5 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1 + (pi**6*C2*C4*C5 + pi**6*C2*C4*C6)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C4*C5)*C6)*L3)*L4)*L5 + ((pi**6*C1*C2 + pi**6*C2*C4)*C6*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C6*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C6*L2)*L3 + (pi**6*C2*C4*C6*L2 + pi**6*C3*C4*C6*L3 + (pi**6*C1 + pi**6*C2)*C4*C6*L1)*L4 + (pi**6*C2*C5*C6*L2 + pi**6*C4*C5*C6*L4 + (pi**6*C1 + pi**6*C2 + pi**6*C4)*C5*C6*L1 + (pi**6*C3 + pi**6*C4)*C5*C6*L3)*L5)*L6)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3 + (pi**6*C2*C4*C5*L2 + (pi**6*C1*C2*C4 + pi**6*C1*C4*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2 + pi**6*C3)*C4*C5)*L3)*L4)*L5 + (pi**6*C1*C2*C6*L1*L2 + (pi**6*C2*C3*C6*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C6*L1)*L3 + (pi**6*C1*C4*C6*L1 + pi**6*C2*C4*C6*L2 + (pi**6*C2 + pi**6*C3)*C4*C6*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C4 + pi**6*C1*C5)*C6*L1 + (pi**6*C2*C4 + pi**6*C2*C5)*C6*L2 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3)*C5)*C6*L3 + (pi**6*C2*C4 + pi**6*C4*C5)*C6*L4)*L5)*L6)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C3)*L1*L2*L3 + ((32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C6)*L1*L2 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6)*L1 + (32*I*pi**5*C2*C3*C4 + 32*I*pi**5*C2*C3*C6)*L2)*L3 + (32*I*pi**5*C2*C4*C6*L2 + (32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C4*C6)*L1 + (32*I*pi**5*C2*C3*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C6)*L3)*L4 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6)*L1 + (32*I*pi**5*C2*C4*C5 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*C6)*L2 + ((32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*C5 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*C6)*L3 + (32*I*pi**5*C2*C4*C5 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C4*C5)*C6)*L4)*L5 + (32*I*pi**5*C2*C4*C6*L2 + 32*I*pi**5*C2*C4*C6*L4 + (32*I*pi**5*C2 + 32*I*pi**5*C4)*C5*C6*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4)*C6*L1 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*C6*L3)*L6)*ZL*ZS + (32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L2)*L3 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C4*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C4*C5)*L3)*L4)*L5 + (32*I*pi**5*C2*C6*L1*L2 + (32*I*pi**5*C2*C6*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6*L1)*L3 + (32*I*pi**5*C4*C6*L1 + 32*I*pi**5*C4*C6*L3)*L4 + (32*I*pi**5*C2*C6*L2 + 32*I*pi**5*C4*C6*L4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6*L1 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6*L3)*L5)*L6)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C2*C4 + pi**4*C2*C6)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6)*L1 + (pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C6)*L2)*L3 + (pi**4*C2*C4*L2 + (pi**4*C4*C6 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C3*C4 + pi**4*C4*C6)*L3)*L4 + (((pi**4*C1 + pi**4*C2 + pi**4*C4)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C4 + pi**4*C5)*C6)*L1 + (pi**4*C2*C5 + pi**4*C2*C6)*L2 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6)*L3 + (pi**4*C4*C5 + pi**4*C4*C6)*L4)*L5 + (pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + pi**4*C5*C6*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C4)*C6*L1 + (pi**4*C3 + pi**4*C4)*C6*L3)*L6)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + ((pi**4*C1*C2 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C2*C4 + pi**4*C2*C5)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C2*C4 + pi**4*C4*C5)*L4)*L5 + (pi**4*C1*C6*L1 + pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + (pi**4*C2 + pi**4*C3)*C6*L3 + (pi**4*C2 + pi**4*C4 + pi**4*C5)*C6*L5)*L6)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C2 - 8*I*pi**3*C4)*C6*L6 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C6)*L1 + (-8*I*pi**3*C2*C4 - 8*I*pi**3*C2*C6)*L2 + (-8*I*pi**3*C2*C3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C6)*L3 + (-8*I*pi**3*C2*C4 - 8*I*pi**3*C4*C6)*L4 + ((-8*I*pi**3*C2 - 8*I*pi**3*C4)*C5 + (-8*I*pi**3*C2 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*C6)*L5)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L1 - 8*I*pi**3*C4*L3)*L4 + (-8*I*pi**3*C2*L2 - 8*I*pi**3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L3)*L5 + (-8*I*pi**3*C6*L1 - 8*I*pi**3*C6*L3 - 8*I*pi**3*C6*L5)*L6)*freq**3 - 4*((pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + (pi**2*C1 + pi**2*C2 + pi**2*C4 + pi**2*C6)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C6)*L3 + (pi**2*C5 + pi**2*C6)*L5)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C2 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((2*I*pi*C2 + 2*I*pi*C4 + 2*I*pi*C6)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3 + 2*I*pi*L5)*freq + ZL + ZS)

                    S21 = 2*(4096*pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL*ZS*freq**12 - 1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + (pi**10*C1*C2*C3*C5*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C1*C3*C4*C5*C6*L1 + pi**10*C2*C3*C4*C5*C6*L2)*L3)*L4)*L5)*L6)*ZL*ZS*freq**10 + 256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + pi**8*C2*C3*C4*C5*L2)*L3)*L4)*L5 + (pi**8*C1*C2*C3*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C1*C3*C4*C6*L1 + pi**8*C2*C3*C4*C6*L2)*L3)*L4 + (pi**8*C1*C2*C5*C6*L1*L2 + (pi**8*C1*C3*C5*C6*L1 + pi**8*C2*C3*C5*C6*L2)*L3 + (pi**8*C1*C4*C5*C6*L1 + pi**8*C2*C4*C5*C6*L2 + pi**8*C3*C4*C5*C6*L3)*L4)*L5)*L6)*ZL*ZS*freq**8 - 64*(pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4 + (pi**6*C1*C2*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + pi**6*C2*C3*C5*L2)*L3 + (pi**6*C1*C4*C5*L1 + pi**6*C2*C4*C5*L2 + pi**6*C3*C4*C5*L3)*L4)*L5 + (pi**6*C1*C2*C6*L1*L2 + (pi**6*C1*C3*C6*L1 + pi**6*C2*C3*C6*L2)*L3 + (pi**6*C1*C4*C6*L1 + pi**6*C2*C4*C6*L2 + pi**6*C3*C4*C6*L3)*L4 + (pi**6*C1*C5*C6*L1 + pi**6*C2*C5*C6*L2 + pi**6*C3*C5*C6*L3 + pi**6*C4*C5*C6*L4)*L5)*L6)*ZL*ZS*freq**6 + 16*(pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + pi**4*C3*C4*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C2*C5*L2 + pi**4*C3*C5*L3 + pi**4*C4*C5*L4)*L5 + (pi**4*C1*C6*L1 + pi**4*C2*C6*L2 + pi**4*C3*C6*L3 + pi**4*C4*C6*L4 + pi**4*C5*C6*L5)*L6)*ZL*ZS*freq**4 - 4*(pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C3*L3 + pi**2*C4*L4 + pi**2*C5*L5 + pi**2*C6*L6)*ZL*ZS*freq**2 + ZL*ZS)/((4096*(pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZL + pi**12*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5*L6*ZS)*freq**12 + ((-2048*I*pi**11*C1*C2*C3*C4 + (-2048*I*pi**11*C1*C2 - 2048*I*pi**11*C2*C3)*C4*C5)*C6*L1*L2*L3*L4*L5*L6 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L2*L3*L4*L5 + (-2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L2*L3 - 2048*I*pi**11*C1*C2*C3*C4*C5*C6*L1*L3*L4)*L5*L6)*ZL*ZS)*freq**11 - 1024*(((pi**10*C1*C2*C3*C4*C5 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2 + pi**10*C2*C3)*C4*C5)*C6)*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C1*C2*C3 + (pi**10*C1*C2 + pi**10*C2*C3)*C4)*C5*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1 + pi**10*C2)*C3*C4*C5*C6*L1)*L3)*L4)*L5)*L6)*ZL + (pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5 + (pi**10*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((pi**10*C1*C2*C3*C4 + pi**10*C1*C2*C3*C5)*C6*L1*L2*L3 + (pi**10*C1*C2*C4*C5*C6*L1*L2 + (pi**10*C2*C3*C4*C5*C6*L2 + (pi**10*C1*C2*C3*C4 + (pi**10*C1*C2 + pi**10*C1*C3)*C4*C5)*C6*L1)*L3)*L4)*L5)*L6)*ZS)*freq**10 + ((512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4*C5)*L1*L2*L3*L4*L5 + (512*I*pi**9*C1*C2*C3*C4*C6*L1*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + 512*I*pi**9*C1*C2*C3*C5)*C6)*L1*L2*L3 + (512*I*pi**9*C1*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2*C3*C4*C5*C6*L2 + (512*I*pi**9*C1*C2*C3*C4*C5 + (512*I*pi**9*C1*C2*C3*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4*C5)*C6)*L1)*L3)*L4)*L5 + (512*I*pi**9*C1*C2*C3*C4*C6*L1*L2*L3 + 512*I*pi**9*C1*C2*C3*C4*C6*L1*L3*L4 + (512*I*pi**9*C1*C2*C4*C5*C6*L1*L2 + (512*I*pi**9*C2*C3*C4*C5*C6*L2 + (512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C1*C3)*C4)*C5*C6*L1)*L3 + (512*I*pi**9*C1*C2*C4*C5*C6*L1 + 512*I*pi**9*C2*C3*C4*C5*C6*L3)*L4)*L5)*L6)*ZL*ZS + ((512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4*C6*L1*L2*L3*L4 + ((512*I*pi**9*C1*C2*C3 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C4 + (512*I*pi**9*C1*C2 + 512*I*pi**9*C2*C3)*C5)*C6*L1*L2*L3 + ((512*I*pi**9*C1*C2*C4 + 512*I*pi**9*C2*C4*C5)*C6*L1*L2 + (((512*I*pi**9*C1 + 512*I*pi**9*C2)*C3*C4 + (512*I*pi**9*C1 + 512*I*pi**9*C2 + 512*I*pi**9*C3)*C4*C5)*C6*L1 + (512*I*pi**9*C2*C3*C4 + 512*I*pi**9*C2*C4*C5)*C6*L2)*L3)*L4)*L5)*L6)*freq**9 + 256*(((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C2*C3)*C4*C6)*L1*L2*L3*L4 + (((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C5 + (pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4 + (pi**8*C1*C2 + pi**8*C2*C3)*C5)*C6)*L1*L2*L3 + ((pi**8*C1*C2*C4*C5 + (pi**8*C1*C2*C4 + pi**8*C2*C4*C5)*C6)*L1*L2 + (((pi**8*C1 + pi**8*C2)*C3*C4*C5 + ((pi**8*C1 + pi**8*C2)*C3*C4 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4*C5)*C6)*L1 + (pi**8*C2*C3*C4*C5 + (pi**8*C2*C3*C4 + pi**8*C2*C4*C5)*C6)*L2)*L3)*L4)*L5 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C2*C3)*C4)*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1 + pi**8*C2)*C3*C4*C6*L1)*L3)*L4 + ((pi**8*C1*C2 + pi**8*C2*C4)*C5*C6*L1*L2 + (((pi**8*C1 + pi**8*C2)*C3 + (pi**8*C1 + pi**8*C2 + pi**8*C3)*C4)*C5*C6*L1 + (pi**8*C2*C3 + pi**8*C2*C4)*C5*C6*L2)*L3 + (pi**8*C2*C4*C5*C6*L2 + pi**8*C3*C4*C5*C6*L3 + (pi**8*C1 + pi**8*C2)*C4*C5*C6*L1)*L4)*L5)*L6)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + ((pi**8*C1*C2*C3*C4 + pi**8*C1*C2*C3*C5)*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C2*C3*C4*C5*L2 + (pi**8*C1*C2*C3*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C5)*L1)*L3)*L4)*L5 + (pi**8*C1*C2*C3*C6*L1*L2*L3 + (pi**8*C1*C2*C4*C6*L1*L2 + (pi**8*C2*C3*C4*C6*L2 + (pi**8*C1*C2 + pi**8*C1*C3)*C4*C6*L1)*L3)*L4 + ((pi**8*C1*C2*C4 + pi**8*C1*C2*C5)*C6*L1*L2 + ((pi**8*C1*C2*C3 + (pi**8*C1*C2 + pi**8*C1*C3)*C4 + (pi**8*C1*C2 + pi**8*C1*C3)*C5)*C6*L1 + (pi**8*C2*C3*C4 + pi**8*C2*C3*C5)*C6*L2)*L3 + (pi**8*C2*C4*C5*C6*L2 + (pi**8*C1*C2*C4 + pi**8*C1*C4*C5)*C6*L1 + (pi**8*C2*C3*C4 + (pi**8*C2 + pi**8*C3)*C4*C5)*C6*L3)*L4)*L5)*L6)*ZS)*freq**8 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4*L1*L2*L3*L4 + ((-128*I*pi**7*C1*C2*C3*C4 - 128*I*pi**7*C1*C2*C3*C6)*L1*L2*L3 + (-128*I*pi**7*C1*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C3*C4*C6*L2 + (-128*I*pi**7*C1*C2*C3*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4*C6)*L1)*L3)*L4 + ((-128*I*pi**7*C1*C2*C4*C5 + (-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C1*C2*C5)*C6)*L1*L2 + (((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C5 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C5)*C6)*L1 + (-128*I*pi**7*C2*C3*C4*C5 + (-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C3*C5)*C6)*L2)*L3 + (-128*I*pi**7*C2*C4*C5*C6*L2 + (-128*I*pi**7*C1*C2*C4*C5 + (-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C1*C4*C5)*C6)*L1 + (-128*I*pi**7*C2*C3*C4*C5 + (-128*I*pi**7*C2*C3*C4 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5)*C6)*L3)*L4)*L5 + (-128*I*pi**7*C1*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C3*C4*C6*L2 + (-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3)*C4)*C6*L1)*L3 + (-128*I*pi**7*C1*C2*C4*C6*L1 - 128*I*pi**7*C2*C3*C4*C6*L3)*L4 + (-128*I*pi**7*C2*C4*C5*C6*L2 - 128*I*pi**7*C2*C4*C5*C6*L4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C4)*C5*C6*L1 + (-128*I*pi**7*C2*C3 + (-128*I*pi**7*C2 - 128*I*pi**7*C3)*C4)*C5*C6*L3)*L5)*L6)*ZL*ZS + ((-128*I*pi**7*C1*C2*C3 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C4 + (-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C5)*L1*L2*L3 + ((-128*I*pi**7*C1*C2*C4 - 128*I*pi**7*C2*C4*C5)*L1*L2 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C5)*L1 + (-128*I*pi**7*C2*C3*C4 - 128*I*pi**7*C2*C4*C5)*L2)*L3)*L4)*L5 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C3)*C6*L1*L2*L3 + (-128*I*pi**7*C2*C4*C6*L1*L2 + (-128*I*pi**7*C2*C4*C6*L2 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4*C6*L1)*L3)*L4 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6*L1*L2 + (((-128*I*pi**7*C1 - 128*I*pi**7*C2)*C3 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C4 + (-128*I*pi**7*C1 - 128*I*pi**7*C2 - 128*I*pi**7*C3)*C5)*C6*L1 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C2*C4 - 128*I*pi**7*C2*C5)*C6*L2)*L3 + (-128*I*pi**7*C2*C4*C6*L2 + (-128*I*pi**7*C4*C5 + (-128*I*pi**7*C1 - 128*I*pi**7*C2)*C4)*C6*L1 + (-128*I*pi**7*C3*C4 - 128*I*pi**7*C4*C5)*C6*L3)*L4)*L5)*L6)*freq**7 - 64*(((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C2*C3)*C4 + (pi**6*C1*C2 + pi**6*C2*C3)*C6)*L1*L2*L3 + ((pi**6*C1*C2*C4 + pi**6*C2*C4*C6)*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4*C6)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C4*C6)*L2)*L3)*L4 + (((pi**6*C1*C2 + pi**6*C2*C4)*C5 + (pi**6*C1*C2 + pi**6*C2*C4 + pi**6*C2*C5)*C6)*L1*L2 + ((((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C5 + ((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C5)*C6)*L1 + ((pi**6*C2*C3 + pi**6*C2*C4)*C5 + (pi**6*C2*C3 + pi**6*C2*C4 + pi**6*C2*C5)*C6)*L2)*L3 + (((pi**6*C1 + pi**6*C2)*C4*C5 + (pi**6*C4*C5 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1 + (pi**6*C2*C4*C5 + pi**6*C2*C4*C6)*L2 + (pi**6*C3*C4*C5 + (pi**6*C3*C4 + pi**6*C4*C5)*C6)*L3)*L4)*L5 + ((pi**6*C1*C2 + pi**6*C2*C4)*C6*L1*L2 + (((pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2 + pi**6*C3)*C4)*C6*L1 + (pi**6*C2*C3 + pi**6*C2*C4)*C6*L2)*L3 + (pi**6*C2*C4*C6*L2 + pi**6*C3*C4*C6*L3 + (pi**6*C1 + pi**6*C2)*C4*C6*L1)*L4 + (pi**6*C2*C5*C6*L2 + pi**6*C4*C5*C6*L4 + (pi**6*C1 + pi**6*C2 + pi**6*C4)*C5*C6*L1 + (pi**6*C3 + pi**6*C4)*C5*C6*L3)*L5)*L6)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C2*C3*C4*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C4*L1)*L3)*L4 + ((pi**6*C1*C2*C4 + pi**6*C1*C2*C5)*L1*L2 + ((pi**6*C1*C2*C3 + (pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3)*C5)*L1 + (pi**6*C2*C3*C4 + pi**6*C2*C3*C5)*L2)*L3 + (pi**6*C2*C4*C5*L2 + (pi**6*C1*C2*C4 + pi**6*C1*C4*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2 + pi**6*C3)*C4*C5)*L3)*L4)*L5 + (pi**6*C1*C2*C6*L1*L2 + (pi**6*C2*C3*C6*L2 + (pi**6*C1*C2 + pi**6*C1*C3)*C6*L1)*L3 + (pi**6*C1*C4*C6*L1 + pi**6*C2*C4*C6*L2 + (pi**6*C2 + pi**6*C3)*C4*C6*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C4 + pi**6*C1*C5)*C6*L1 + (pi**6*C2*C4 + pi**6*C2*C5)*C6*L2 + (pi**6*C2*C3 + (pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3)*C5)*C6*L3 + (pi**6*C2*C4 + pi**6*C4*C5)*C6*L4)*L5)*L6)*ZS)*freq**6 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C3)*L1*L2*L3 + ((32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C2*C6)*L1*L2 + ((32*I*pi**5*C1*C2*C3 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C4 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3)*C6)*L1 + (32*I*pi**5*C2*C3*C4 + 32*I*pi**5*C2*C3*C6)*L2)*L3 + (32*I*pi**5*C2*C4*C6*L2 + (32*I*pi**5*C1*C2*C4 + 32*I*pi**5*C1*C4*C6)*L1 + (32*I*pi**5*C2*C3*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*C6)*L3)*L4 + (((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4)*C5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4 + 32*I*pi**5*C1*C5)*C6)*L1 + (32*I*pi**5*C2*C4*C5 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*C6)*L2 + ((32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*C5 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*C6)*L3 + (32*I*pi**5*C2*C4*C5 + (32*I*pi**5*C2*C4 + 32*I*pi**5*C4*C5)*C6)*L4)*L5 + (32*I*pi**5*C2*C4*C6*L2 + 32*I*pi**5*C2*C4*C6*L4 + (32*I*pi**5*C2 + 32*I*pi**5*C4)*C5*C6*L5 + (32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C4)*C6*L1 + (32*I*pi**5*C2*C3 + (32*I*pi**5*C2 + 32*I*pi**5*C3)*C4)*C6*L3)*L6)*ZL*ZS + (32*I*pi**5*C2*C4*L1*L2 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4*L1)*L3)*L4 + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L1*L2 + (((32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C5)*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C2*C4 + 32*I*pi**5*C2*C5)*L2)*L3 + (32*I*pi**5*C2*C4*L2 + (32*I*pi**5*C4*C5 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*L1 + (32*I*pi**5*C3*C4 + 32*I*pi**5*C4*C5)*L3)*L4)*L5 + (32*I*pi**5*C2*C6*L1*L2 + (32*I*pi**5*C2*C6*L2 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C3)*C6*L1)*L3 + (32*I*pi**5*C4*C6*L1 + 32*I*pi**5*C4*C6*L3)*L4 + (32*I*pi**5*C2*C6*L2 + 32*I*pi**5*C4*C6*L4 + (32*I*pi**5*C1 + 32*I*pi**5*C2 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6*L1 + (32*I*pi**5*C3 + 32*I*pi**5*C4 + 32*I*pi**5*C5)*C6*L3)*L5)*L6)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C2*C4 + pi**4*C2*C6)*L1*L2 + (((pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C2 + pi**4*C3)*C6)*L1 + (pi**4*C2*C3 + pi**4*C2*C4 + pi**4*C2*C6)*L2)*L3 + (pi**4*C2*C4*L2 + (pi**4*C4*C6 + (pi**4*C1 + pi**4*C2)*C4)*L1 + (pi**4*C3*C4 + pi**4*C4*C6)*L3)*L4 + (((pi**4*C1 + pi**4*C2 + pi**4*C4)*C5 + (pi**4*C1 + pi**4*C2 + pi**4*C4 + pi**4*C5)*C6)*L1 + (pi**4*C2*C5 + pi**4*C2*C6)*L2 + ((pi**4*C3 + pi**4*C4)*C5 + (pi**4*C3 + pi**4*C4 + pi**4*C5)*C6)*L3 + (pi**4*C4*C5 + pi**4*C4*C6)*L4)*L5 + (pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + pi**4*C5*C6*L5 + (pi**4*C1 + pi**4*C2 + pi**4*C4)*C6*L1 + (pi**4*C3 + pi**4*C4)*C6*L3)*L6)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C2*C3*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L1)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + (pi**4*C2 + pi**4*C3)*C4*L3)*L4 + ((pi**4*C1*C2 + pi**4*C1*C4 + pi**4*C1*C5)*L1 + (pi**4*C2*C4 + pi**4*C2*C5)*L2 + (pi**4*C2*C3 + (pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3)*C5)*L3 + (pi**4*C2*C4 + pi**4*C4*C5)*L4)*L5 + (pi**4*C1*C6*L1 + pi**4*C2*C6*L2 + pi**4*C4*C6*L4 + (pi**4*C2 + pi**4*C3)*C6*L3 + (pi**4*C2 + pi**4*C4 + pi**4*C5)*C6*L5)*L6)*ZS)*freq**4 + (-8*I*pi**3*C2*L1*L2 + ((-8*I*pi**3*C2 - 8*I*pi**3*C4)*C6*L6 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C4 - 8*I*pi**3*C1*C6)*L1 + (-8*I*pi**3*C2*C4 - 8*I*pi**3*C2*C6)*L2 + (-8*I*pi**3*C2*C3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C2 - 8*I*pi**3*C3)*C6)*L3 + (-8*I*pi**3*C2*C4 - 8*I*pi**3*C4*C6)*L4 + ((-8*I*pi**3*C2 - 8*I*pi**3*C4)*C5 + (-8*I*pi**3*C2 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*C6)*L5)*ZL*ZS + (-8*I*pi**3*C2*L2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C3)*L1)*L3 + (-8*I*pi**3*C4*L1 - 8*I*pi**3*C4*L3)*L4 + (-8*I*pi**3*C2*L2 - 8*I*pi**3*C4*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L1 + (-8*I*pi**3*C3 - 8*I*pi**3*C4 - 8*I*pi**3*C5)*L3)*L5 + (-8*I*pi**3*C6*L1 - 8*I*pi**3*C6*L3 - 8*I*pi**3*C6*L5)*L6)*freq**3 - 4*((pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + (pi**2*C1 + pi**2*C2 + pi**2*C4 + pi**2*C6)*L1 + (pi**2*C3 + pi**2*C4 + pi**2*C6)*L3 + (pi**2*C5 + pi**2*C6)*L5)*ZL + (pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C4*L4 + pi**2*C6*L6 + (pi**2*C2 + pi**2*C3)*L3 + (pi**2*C2 + pi**2*C4 + pi**2*C5)*L5)*ZS)*freq**2 + ((2*I*pi*C2 + 2*I*pi*C4 + 2*I*pi*C6)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3 + 2*I*pi*L5)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] >= 7):
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        x.append([comp_val['L' + str(i)], comp_val['C' + str(i)]])
                        if i % 2 == 0: # Even
                            code.append('SSR')
                        else: # Odd
                            code.append('SPR')

                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
              
            if (network_type['First_Element'] == 'Shunt'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']

                    S11 = (2*I*pi*C1*ZL*ZS*freq + 4*(pi**2*C1*L1*ZL - pi**2*C1*L1*ZS)*freq**2 - ZL + ZS)/(-2*I*pi*C1*ZL*ZS*freq + 4*(pi**2*C1*L1*ZL + pi**2*C1*L1*ZS)*freq**2 - ZL - ZS)

                    S21 = (8*I*pi**2*C1*L1*freq**2 - 2*I)*np.sqrt(ZL*ZS)/(2*pi*C1*ZL*ZS*freq + (4*I*pi**2*C1*L1*ZL + 4*I*pi**2*C1*L1*ZS)*freq**2 - I*ZL - I*ZS)
                
                if(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']

                    S11 = (16*(pi**4*C1*C2*L1*L2*ZL - pi**4*C1*C2*L1*L2*ZS)*freq**4 - (-8*I*pi**3*C1*C2*L2*ZL*ZS + 8*I*pi**3*C1*L1*L2)*freq**3 - 4*((pi**2*C1*L1 + pi**2*C2*L2)*ZL - (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 - (2*I*pi*C1*ZL*ZS - 2*I*pi*L2)*freq + ZL - ZS)/(16*(pi**4*C1*C2*L1*L2*ZL + pi**4*C1*C2*L1*L2*ZS)*freq**4 + (-8*I*pi**3*C1*C2*L2*ZL*ZS - 8*I*pi**3*C1*L1*L2)*freq**3 - 4*((pi**2*C1*L1 + pi**2*C2*L2)*ZL + (pi**2*C1*L1 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + (2*I*pi*C1*ZL*ZS + 2*I*pi*L2)*freq + ZL + ZS)

                    S21 = (32*I*pi**4*C1*C2*L1*L2*ZL*ZS*freq**4 + (-8*I*pi**2*C1*L1 - 8*I*pi**2*C2*L2)*ZL*ZS*freq**2 + 2*I*ZL*ZS)/(((16*I*pi**4*C1*C2*L1*L2*ZL + 16*I*pi**4*C1*C2*L1*L2*ZS)*freq**4 + 8*(pi**3*C1*C2*L2*ZL*ZS + pi**3*C1*L1*L2)*freq**3 + ((-4*I*pi**2*C1*L1 - 4*I*pi**2*C2*L2)*ZL + (-4*I*pi**2*C1*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*ZS)*freq**2 - 2*(pi*C1*ZL*ZS + pi*L2)*freq + I*ZL + I*ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']

                    S11 = (64*(pi**6*C1*C2*C3*L1*L2*L3*ZL - pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 - (32*I*pi**5*C1*C3*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 - 32*I*pi**5*C1*C2*C3*L2*L3)*ZL*ZS)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3)*ZS)*freq**4 - (-8*I*pi**3*C1*L1*L2 - 8*I*pi**3*C3*L2*L3 + (8*I*pi**3*C1*C3*L1 + 8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3)*L2)*ZL*ZS)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C2 + pi**2*C3)*L2)*ZL - (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 - ((-2*I*pi*C1 - 2*I*pi*C3)*ZL*ZS + 2*I*pi*L2)*freq - ZL + ZS)/(64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + (-32*I*pi**5*C1*C3*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 - 32*I*pi**5*C1*C2*C3*L2*L3)*ZL*ZS)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + 8*I*pi**3*C3*L2*L3 + (8*I*pi**3*C1*C3*L1 + 8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3)*L2)*ZL*ZS)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L2)*freq - ZL - ZS)

                    S21 = 2*(64*pi**6*C1*C2*C3*L1*L2*L3*ZL*ZS*freq**6 - 16*(pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3)*ZL*ZS*freq**4 + 4*(pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C3*L3)*ZL*ZS*freq**2 - ZL*ZS)/((64*(pi**6*C1*C2*C3*L1*L2*L3*ZL + pi**6*C1*C2*C3*L1*L2*L3*ZS)*freq**6 + (-32*I*pi**5*C1*C3*L1*L2*L3 + (-32*I*pi**5*C1*C2*C3*L1*L2 - 32*I*pi**5*C1*C2*C3*L2*L3)*ZL*ZS)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + 8*I*pi**3*C3*L2*L3 + (8*I*pi**3*C1*C3*L1 + 8*I*pi**3*C1*C3*L3 + (8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3)*L2)*ZL*ZS)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L2)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L2)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 4):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']

                    S11 = (256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL - pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 - ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C3*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 - 128*I*pi**7*C1*C2*C3*C4*L2*L3)*L4*ZL*ZS)*freq**7 - 64*((pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1*C2*C3 + (pi**6*C1 + pi**6*C2)*C3*C4)*L2)*L3)*L4)*ZS)*freq**6 - (-32*I*pi**5*C1*C3*L1*L2*L3 + (32*I*pi**5*C1*C2*C3*L1*L2 + 32*I*pi**5*C1*C2*C3*L2*L3 + (32*I*pi**5*C1*C3*C4*L1 + 32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4*L2)*L4)*ZL*ZS + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*L1*L2 + (-32*I*pi**5*C1*C3*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C3*C4)*L2)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C3*C4*L3 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C1*C3 + pi**4*C3*C4)*L3)*L4)*ZS)*freq**4 - (8*I*pi**3*C1*L1*L2 + 8*I*pi**3*C3*L2*L3 + (-8*I*pi**3*C1*C3*L1 - 8*I*pi**3*C1*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3)*L2)*ZL*ZS + (8*I*pi**3*C1*L1 + 8*I*pi**3*C3*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L2)*ZL - (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 - ((2*I*pi*C1 + 2*I*pi*C3)*ZL*ZS - 2*I*pi*L2 - 2*I*pi*L4)*freq + ZL - ZS)/(256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C3*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 - 128*I*pi**7*C1*C2*C3*C4*L2*L3)*L4*ZL*ZS)*freq**7 - 64*((pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1*C2*C3 + (pi**6*C1 + pi**6*C2)*C3*C4)*L2)*L3)*L4)*ZS)*freq**6 + (32*I*pi**5*C1*C3*L1*L2*L3 + (32*I*pi**5*C1*C2*C3*L1*L2 + 32*I*pi**5*C1*C2*C3*L2*L3 + (32*I*pi**5*C1*C3*C4*L1 + 32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C3*C4)*L2)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C3*C4*L3 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C1*C3 + pi**4*C3*C4)*L3)*L4)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 - 8*I*pi**3*C3*L2*L3 + (-8*I*pi**3*C1*C3*L1 - 8*I*pi**3*C1*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3)*L2)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C3)*ZL*ZS + 2*I*pi*L2 + 2*I*pi*L4)*freq + ZL + ZS)

                    S21 = 2*(256*pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL*ZS*freq**8 - 64*(pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4)*ZL*ZS*freq**6 + 16*(pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + pi**4*C3*C4*L3)*L4)*ZL*ZS*freq**4 - 4*(pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C3*L3 + pi**2*C4*L4)*ZL*ZS*freq**2 + ZL*ZS)/((256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZL + pi**8*C1*C2*C3*C4*L1*L2*L3*L4*ZS)*freq**8 + ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C3*C4)*L1*L2*L3*L4 + (-128*I*pi**7*C1*C2*C3*C4*L1*L2 - 128*I*pi**7*C1*C2*C3*C4*L2*L3)*L4*ZL*ZS)*freq**7 - 64*((pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2 + pi**6*C1*C3)*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1*C2*C3 + (pi**6*C1 + pi**6*C2)*C3*C4)*L2)*L3)*L4)*ZS)*freq**6 + (32*I*pi**5*C1*C3*L1*L2*L3 + (32*I*pi**5*C1*C2*C3*L1*L2 + 32*I*pi**5*C1*C2*C3*L2*L3 + (32*I*pi**5*C1*C3*C4*L1 + 32*I*pi**5*C1*C3*C4*L3 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4*L2)*L4)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C3*C4)*L2)*L3)*L4)*freq**5 + 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C3*C4*L3 + (pi**4*C2 + pi**4*C3)*C4*L2)*L4)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C1*C3 + pi**4*C3*C4)*L3)*L4)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 - 8*I*pi**3*C3*L2*L3 + (-8*I*pi**3*C1*C3*L1 - 8*I*pi**3*C1*C3*L3 + (-8*I*pi**3*C1 - 8*I*pi**3*C3)*C4*L4 + (-8*I*pi**3*C1*C2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3)*L2)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4)*freq**3 - 4*((pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C4*L4 + (pi**2*C2 + pi**2*C3)*L2)*ZL + (pi**2*C1*L1 + pi**2*C3*L3 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C3)*ZL*ZS + 2*I*pi*L2 + 2*I*pi*L4)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] == 5):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    L2 = comp_val['L2']
                    C2 = comp_val['C2']
                    L3 = comp_val['L3']
                    C3 = comp_val['C3']
                    L4 = comp_val['L4']
                    C4 = comp_val['C4']
                    L5 = comp_val['L5']
                    C5 = comp_val['C5']

                    S11 = (1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL - pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 - ((512*I*pi**9*C1*C2*C3 + 512*I*pi**9*C1*C3*C4)*C5*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 - 512*I*pi**9*C1*C2*C3*C4*C5*L2*L3)*L4*L5)*ZL*ZS)*freq**9 - 256*(((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C3*C4)*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + pi**8*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL - (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1*C2*C3 + (pi**8*C1 + pi**8*C2)*C3*C4)*C5*L2)*L3)*L4)*L5)*ZS)*freq**8 - ((-128*I*pi**7*C1*C2*C3 - 128*I*pi**7*C1*C3*C4)*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5)*L1*L2 + (128*I*pi**7*C1*C3*C4*C5*L1 + (128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4)*C5)*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2 + 128*I*pi**7*C1*C2*C3*C5*L2*L3 + (128*I*pi**7*C1*C3*C4*C5*L1 + 128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + (-128*I*pi**7*C1*C3*C5*L1*L2*L3 + ((-128*I*pi**7*C1*C2 - 128*I*pi**7*C1*C3 - 128*I*pi**7*C1*C4)*C5*L1*L2 + (-128*I*pi**7*C1*C3*C5*L1 + (-128*I*pi**7*C2*C3 - 128*I*pi**7*C3*C4)*C5*L2)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + pi**6*C1*C3*C5)*L1*L2*L3 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + pi**6*C3*C4)*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + pi**6*C2*C3*C5*L2)*L3 + (pi**6*C1*C4*C5*L1 + pi**6*C3*C4*C5*L3 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL - (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1*C2*C3 + (pi**6*C1 + pi**6*C2)*C3*C4)*L2)*L3)*L4 + (pi**6*C1*C2*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L2 + (pi**6*C1*C3 + pi**6*C3*C4)*C5*L3)*L4)*L5)*ZS)*freq**6 - (32*I*pi**5*C1*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C5)*L1*L2 + (-32*I*pi**5*C1*C3*C5*L1 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5)*L1 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C3*C4)*C5)*L3)*L4 + (-32*I*pi**5*C1*C3*C5*L1 - 32*I*pi**5*C1*C3*C5*L3 + (-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4*C5*L4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C5*L2)*L5)*ZL*ZS + ((32*I*pi**5*C1*C2 + 32*I*pi**5*C1*C3 + 32*I*pi**5*C1*C4)*L1*L2 + (32*I*pi**5*C1*C3*L1 + (32*I*pi**5*C2*C3 + 32*I*pi**5*C3*C4)*L2)*L3)*L4 + (32*I*pi**5*C1*C5*L1*L2 + 32*I*pi**5*C3*C5*L2*L3 + (32*I*pi**5*C1*C5*L1 + 32*I*pi**5*C3*C5*L3 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C5*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C5)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C2*C3 + pi**4*C3*C5)*L2)*L3 + ((pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + pi**4*C4*C5*L4 + (pi**4*C2 + pi**4*C3)*C5*L2)*L5)*ZL - (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C1*C3 + pi**4*C3*C4)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2)*C5*L2 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C5*L4)*L5)*ZS)*freq**4 - (-8*I*pi**3*C1*L1*L2 - 8*I*pi**3*C3*L2*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C5*L5 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C5)*L1 + (8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C3*C5)*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5)*L4)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C3*L3 + (-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L2)*L4 + (-8*I*pi**3*C5*L2 - 8*I*pi**3*C5*L4)*L5)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C2 + pi**2*C3 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L4)*ZL - (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 - ((-2*I*pi*C1 - 2*I*pi*C3 - 2*I*pi*C5)*ZL*ZS + 2*I*pi*L2 + 2*I*pi*L4)*freq - ZL + ZS)/(1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3 - 512*I*pi**9*C1*C3*C4)*C5*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 - 512*I*pi**9*C1*C2*C3*C4*C5*L2*L3)*L4*L5)*ZL*ZS)*freq**9 - 256*(((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C3*C4)*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + pi**8*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1*C2*C3 + (pi**8*C1 + pi**8*C2)*C3*C4)*C5*L2)*L3)*L4)*L5)*ZS)*freq**8 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C3*C4)*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5)*L1*L2 + (128*I*pi**7*C1*C3*C4*C5*L1 + (128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4)*C5)*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2 + 128*I*pi**7*C1*C2*C3*C5*L2*L3 + (128*I*pi**7*C1*C3*C4*C5*L1 + 128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + (128*I*pi**7*C1*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*L1*L2 + (128*I*pi**7*C1*C3*C5*L1 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C3*C4)*C5*L2)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + pi**6*C1*C3*C5)*L1*L2*L3 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + pi**6*C3*C4)*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + pi**6*C2*C3*C5*L2)*L3 + (pi**6*C1*C4*C5*L1 + pi**6*C3*C4*C5*L3 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1*C2*C3 + (pi**6*C1 + pi**6*C2)*C3*C4)*L2)*L3)*L4 + (pi**6*C1*C2*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L2 + (pi**6*C1*C3 + pi**6*C3*C4)*C5*L3)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C1*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C5)*L1*L2 + (-32*I*pi**5*C1*C3*C5*L1 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5)*L1 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C3*C4)*C5)*L3)*L4 + (-32*I*pi**5*C1*C3*C5*L1 - 32*I*pi**5*C1*C3*C5*L3 + (-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4*C5*L4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C5*L2)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*L1*L2 + (-32*I*pi**5*C1*C3*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C3*C4)*L2)*L3)*L4 + (-32*I*pi**5*C1*C5*L1*L2 - 32*I*pi**5*C3*C5*L2*L3 + (-32*I*pi**5*C1*C5*L1 - 32*I*pi**5*C3*C5*L3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C5)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C2*C3 + pi**4*C3*C5)*L2)*L3 + ((pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + pi**4*C4*C5*L4 + (pi**4*C2 + pi**4*C3)*C5*L2)*L5)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C1*C3 + pi**4*C3*C4)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2)*C5*L2 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C5*L4)*L5)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + 8*I*pi**3*C3*L2*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C5*L5 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C5)*L1 + (8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C3*C5)*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5)*L4)*ZL*ZS + (8*I*pi**3*C1*L1 + 8*I*pi**3*C3*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4 + (8*I*pi**3*C5*L2 + 8*I*pi**3*C5*L4)*L5)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C2 + pi**2*C3 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L4)*ZL + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3 - 2*I*pi*C5)*ZL*ZS - 2*I*pi*L2 - 2*I*pi*L4)*freq - ZL - ZS)

                    S21 = 2*(1024*pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL*ZS*freq**10 - 256*(pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + (pi**8*C1*C2*C4*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + pi**8*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL*ZS*freq**8 + 64*(pi**6*C1*C2*C3*L1*L2*L3 + (pi**6*C1*C2*C4*L1*L2 + (pi**6*C1*C3*C4*L1 + pi**6*C2*C3*C4*L2)*L3)*L4 + (pi**6*C1*C2*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + pi**6*C2*C3*C5*L2)*L3 + (pi**6*C1*C4*C5*L1 + pi**6*C2*C4*C5*L2 + pi**6*C3*C4*C5*L3)*L4)*L5)*ZL*ZS*freq**6 - 16*(pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + pi**4*C2*C3*L2)*L3 + (pi**4*C1*C4*L1 + pi**4*C2*C4*L2 + pi**4*C3*C4*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C2*C5*L2 + pi**4*C3*C5*L3 + pi**4*C4*C5*L4)*L5)*ZL*ZS*freq**4 + 4*(pi**2*C1*L1 + pi**2*C2*L2 + pi**2*C3*L3 + pi**2*C4*L4 + pi**2*C5*L5)*ZL*ZS*freq**2 - ZL*ZS)/((1024*(pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZL + pi**10*C1*C2*C3*C4*C5*L1*L2*L3*L4*L5*ZS)*freq**10 + ((-512*I*pi**9*C1*C2*C3 - 512*I*pi**9*C1*C3*C4)*C5*L1*L2*L3*L4*L5 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2*L3*L4 + (-512*I*pi**9*C1*C2*C3*C4*C5*L1*L2 - 512*I*pi**9*C1*C2*C3*C4*C5*L2*L3)*L4*L5)*ZL*ZS)*freq**9 - 256*(((pi**8*C1*C2*C3*C4 + (pi**8*C1*C2*C3 + pi**8*C1*C3*C4)*C5)*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2 + pi**8*C1*C3)*C4*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + pi**8*C2*C3*C4*C5*L2)*L3)*L4)*L5)*ZL + (pi**8*C1*C2*C3*C4*L1*L2*L3*L4 + (pi**8*C1*C2*C3*C5*L1*L2*L3 + ((pi**8*C1*C2*C3 + pi**8*C1*C2*C4)*C5*L1*L2 + (pi**8*C1*C3*C4*C5*L1 + (pi**8*C1*C2*C3 + (pi**8*C1 + pi**8*C2)*C3*C4)*C5*L2)*L3)*L4)*L5)*ZS)*freq**8 + ((128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C3*C4)*L1*L2*L3*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + 128*I*pi**7*C1*C2*C4)*C5)*L1*L2 + (128*I*pi**7*C1*C3*C4*C5*L1 + (128*I*pi**7*C1*C2*C3*C4 + (128*I*pi**7*C1*C2*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3*C4)*C5)*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*C5*L1*L2 + 128*I*pi**7*C1*C2*C3*C5*L2*L3 + (128*I*pi**7*C1*C3*C4*C5*L1 + 128*I*pi**7*C1*C3*C4*C5*L3 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4*C5*L2)*L4)*L5)*ZL*ZS + (128*I*pi**7*C1*C3*C5*L1*L2*L3 + ((128*I*pi**7*C1*C2 + 128*I*pi**7*C1*C3 + 128*I*pi**7*C1*C4)*C5*L1*L2 + (128*I*pi**7*C1*C3*C5*L1 + (128*I*pi**7*C2*C3 + 128*I*pi**7*C3*C4)*C5*L2)*L3)*L4)*L5)*freq**7 + 64*(((pi**6*C1*C2*C3 + pi**6*C1*C3*C5)*L1*L2*L3 + (((pi**6*C1*C2 + pi**6*C1*C3)*C4 + (pi**6*C1*C2 + pi**6*C1*C3 + pi**6*C1*C4)*C5)*L1*L2 + ((pi**6*C1*C3*C4 + pi**6*C1*C3*C5)*L1 + (pi**6*C2*C3*C4 + (pi**6*C2*C3 + pi**6*C3*C4)*C5)*L2)*L3)*L4 + ((pi**6*C1*C2 + pi**6*C1*C3)*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + pi**6*C2*C3*C5*L2)*L3 + (pi**6*C1*C4*C5*L1 + pi**6*C3*C4*C5*L3 + (pi**6*C2 + pi**6*C3)*C4*C5*L2)*L4)*L5)*ZL + (pi**6*C1*C2*C3*L1*L2*L3 + ((pi**6*C1*C2*C3 + pi**6*C1*C2*C4)*L1*L2 + (pi**6*C1*C3*C4*L1 + (pi**6*C1*C2*C3 + (pi**6*C1 + pi**6*C2)*C3*C4)*L2)*L3)*L4 + (pi**6*C1*C2*C5*L1*L2 + (pi**6*C1*C3*C5*L1 + (pi**6*C1 + pi**6*C2)*C3*C5*L2)*L3 + ((pi**6*C1*C3 + pi**6*C1*C4)*C5*L1 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5*L2 + (pi**6*C1*C3 + pi**6*C3*C4)*C5*L3)*L4)*L5)*ZS)*freq**6 + (-32*I*pi**5*C1*C3*L1*L2*L3 + ((-32*I*pi**5*C1*C2*C3 - 32*I*pi**5*C1*C2*C5)*L1*L2 + (-32*I*pi**5*C1*C3*C5*L1 + (-32*I*pi**5*C1*C2*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*C5)*L2)*L3 + ((-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*C5)*L1 + ((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5)*L2 + (-32*I*pi**5*C1*C3*C4 + (-32*I*pi**5*C1*C3 - 32*I*pi**5*C3*C4)*C5)*L3)*L4 + (-32*I*pi**5*C1*C3*C5*L1 - 32*I*pi**5*C1*C3*C5*L3 + (-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4*C5*L4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C5*L2)*L5)*ZL*ZS + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3 - 32*I*pi**5*C1*C4)*L1*L2 + (-32*I*pi**5*C1*C3*L1 + (-32*I*pi**5*C2*C3 - 32*I*pi**5*C3*C4)*L2)*L3)*L4 + (-32*I*pi**5*C1*C5*L1*L2 - 32*I*pi**5*C3*C5*L2*L3 + (-32*I*pi**5*C1*C5*L1 - 32*I*pi**5*C3*C5*L3 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5*L2)*L4)*L5)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3 + pi**4*C1*C5)*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C2*C3 + pi**4*C3*C5)*L2)*L3 + ((pi**4*C1*C4 + pi**4*C1*C5)*L1 + ((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5)*L2 + (pi**4*C3*C4 + pi**4*C3*C5)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + pi**4*C4*C5*L4 + (pi**4*C2 + pi**4*C3)*C5*L2)*L5)*ZL + (pi**4*C1*C2*L1*L2 + (pi**4*C1*C3*L1 + (pi**4*C1 + pi**4*C2)*C3*L2)*L3 + ((pi**4*C1*C3 + pi**4*C1*C4)*L1 + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L2 + (pi**4*C1*C3 + pi**4*C3*C4)*L3)*L4 + (pi**4*C1*C5*L1 + pi**4*C3*C5*L3 + (pi**4*C1 + pi**4*C2)*C5*L2 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C5*L4)*L5)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + 8*I*pi**3*C3*L2*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C5*L5 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C1*C5)*L1 + (8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5)*L2 + (8*I*pi**3*C1*C3 + 8*I*pi**3*C3*C5)*L3 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5)*L4)*ZL*ZS + (8*I*pi**3*C1*L1 + 8*I*pi**3*C3*L3 + (8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L2)*L4 + (8*I*pi**3*C5*L2 + 8*I*pi**3*C5*L4)*L5)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C2 + pi**2*C3 + pi**2*C5)*L2 + (pi**2*C4 + pi**2*C5)*L4)*ZL + (pi**2*C1*L1 + pi**2*C3*L3 + pi**2*C5*L5 + (pi**2*C1 + pi**2*C2)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L4)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3 - 2*I*pi*C5)*ZL*ZS - 2*I*pi*L2 - 2*I*pi*L4)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                if(network_type['N'] >= 6):
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        x.append([comp_val['L' + str(i)], comp_val['C' + str(i)]])
                        if i % 2 == 0: # Even
                            code.append('SPR')
                        else: # Odd
                            code.append('SSR')

                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
    elif(network_type['Network'] == 'Elliptic'):
        if(network_type['Mask'] == 'Lowpass'):
            if (network_type['First_Element'] == 'Shunt'):
                if(network_type['N'] == 1):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']
                    S11 = -((8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3)*L1*ZL*ZS*freq**3 - 4*((pi**2*C2 + pi**2*C3)*L1*ZL - (pi**2*C1 + pi**2*C2)*L1*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3)*ZL*ZS + 2*I*pi*L1)*freq + ZL - ZS)/((8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3)*L1*ZL*ZS*freq**3 + 4*((pi**2*C2 + pi**2*C3)*L1*ZL + (pi**2*C1 + pi**2*C2)*L1*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)
                    
                    S21 = 2*(4*pi**2*C2*L1*ZL*ZS*freq**2 - ZL*ZS)/(((8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3)*L1*ZL*ZS*freq**3 + 4*((pi**2*C2 + pi**2*C3)*L1*ZL + (pi**2*C1 + pi**2*C2)*L1*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
                elif(network_type['N'] == 2):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']
                    L2 = comp_val['L2']
                    if (network_type['Elliptic_Type'] == 'Type A' or network_type['Elliptic_Type'] == 'Type S'):
                        C4 = comp_val['C4']
                        C5 = comp_val['C5']
                    else:
                        C4 = 0
                        C5 = 0

                    S11 = -(((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5)*L1*L2*ZL*ZS*freq**5 - 16*(((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5)*L1*L2*ZL - (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1*L2*ZS)*freq**4 + ((8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L2 + ((-8*I*pi**3*C1*C2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5)*L2)*ZL*ZS)*freq**3 + 4*(((pi**2*C2 + pi**2*C3 + pi**2*C5)*L1 + (pi**2*C4 + pi**2*C5)*L2)*ZL - ((pi**2*C1 + pi**2*C2)*L1 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C3 + 2*I*pi*C5)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2)*freq - ZL + ZS)/(((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5)*L1*L2*ZL*ZS*freq**5 + 16*(((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5)*L1*L2*ZL + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1*L2*ZS)*freq**4 + ((-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L2 + ((-8*I*pi**3*C1*C2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5)*L2)*ZL*ZS)*freq**3 - 4*(((pi**2*C2 + pi**2*C3 + pi**2*C5)*L1 + (pi**2*C4 + pi**2*C5)*L2)*ZL + ((pi**2*C1 + pi**2*C2)*L1 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C3 + 2*I*pi*C5)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)

                    S21 = 2*(16*pi**4*C2*C4*L1*L2*ZL*ZS*freq**4 - 4*(pi**2*C2*L1 + pi**2*C4*L2)*ZL*ZS*freq**2 + ZL*ZS)/((((32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3)*C4 + (32*I*pi**5*C1*C2 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C3 + (32*I*pi**5*C1 + 32*I*pi**5*C2)*C4)*C5)*L1*L2*ZL*ZS*freq**5 + 16*(((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5)*L1*L2*ZL + (pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1*L2*ZS)*freq**4 + ((-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L2 + ((-8*I*pi**3*C1*C2 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C5)*L1 + ((-8*I*pi**3*C1 - 8*I*pi**3*C3)*C4 + (-8*I*pi**3*C1 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*C5)*L2)*ZL*ZS)*freq**3 - 4*(((pi**2*C2 + pi**2*C3 + pi**2*C5)*L1 + (pi**2*C4 + pi**2*C5)*L2)*ZL + ((pi**2*C1 + pi**2*C2)*L1 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L2)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C3 + 2*I*pi*C5)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2)*freq + ZL + ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 3):
                    C1 = comp_val['C1']
                    L1 = comp_val['L1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']

                    L2 = comp_val['L2']
                    C4 = comp_val['C4']
                    C5 = comp_val['C5']

                    L3 = comp_val['L3']
                    

                    if (network_type['Elliptic_Type'] == 'Type A' or network_type['Elliptic_Type'] == 'Type S'):
                        C6 = comp_val['C6']
                        C7 = comp_val['C7']
                    else:
                        C6 = 0
                        C7 = 0
                    S11 = -((((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*C6 + ((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C6)*C7)*L1*L2*L3*ZL*ZS*freq**7 - 64*((((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C7)*L1*L2*L3*ZL - ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1*L2*L3*ZS)*freq**6 + (((32*I*pi**5*C2 + 32*I*pi**5*C3)*C4 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C5 + (32*I*pi**5*C2 + 32*I*pi**5*C3 + 32*I*pi**5*C4)*C6)*L1*L2*L3 + (((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C7)*L1*L2 + (((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*C6 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C6)*C7)*L1 + (((-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*C6 + ((-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6)*C7)*L2)*L3)*ZL*ZS)*freq**5 + 16*((((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C7)*L1*L2 + (((pi**4*C2 + pi**4*C3 + pi**4*C5)*C6 + (pi**4*C2 + pi**4*C3 + pi**4*C5 + pi**4*C6)*C7)*L1 + ((pi**4*C4 + pi**4*C5)*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C7)*L2)*L3)*ZL - ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1*L2 + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C5 + (pi**4*C1 + pi**4*C2)*C6)*L1 + ((pi**4*C1 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C6)*L2)*L3)*ZS)*freq**4 + ((-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C4)*L1*L2 + ((8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C7)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C7)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C5)*C6 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*C7)*L3)*ZL*ZS + ((-8*I*pi**3*C2 - 8*I*pi**3*C3 - 8*I*pi**3*C5 - 8*I*pi**3*C6)*L1 + (-8*I*pi**3*C4 - 8*I*pi**3*C5 - 8*I*pi**3*C6)*L2)*L3)*freq**3 - 4*(((pi**2*C2 + pi**2*C3 + pi**2*C5 + pi**2*C7)*L1 + (pi**2*C4 + pi**2*C5 + pi**2*C7)*L2 + (pi**2*C6 + pi**2*C7)*L3)*ZL - ((pi**2*C1 + pi**2*C2)*L1 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C5 + pi**2*C6)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3 - 2*I*pi*C5 - 2*I*pi*C7)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L2 + 2*I*pi*L3)*freq + ZL - ZS)/((((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*C6 + ((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C6)*C7)*L1*L2*L3*ZL*ZS*freq**7 + 64*((((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C7)*L1*L2*L3*ZL + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1*L2*L3*ZS)*freq**6 + (((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6)*L1*L2*L3 + (((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C7)*L1*L2 + (((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*C6 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C6)*C7)*L1 + (((-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*C6 + ((-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6)*C7)*L2)*L3)*ZL*ZS)*freq**5 - 16*((((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C7)*L1*L2 + (((pi**4*C2 + pi**4*C3 + pi**4*C5)*C6 + (pi**4*C2 + pi**4*C3 + pi**4*C5 + pi**4*C6)*C7)*L1 + ((pi**4*C4 + pi**4*C5)*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C7)*L2)*L3)*ZL + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1*L2 + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C5 + (pi**4*C1 + pi**4*C2)*C6)*L1 + ((pi**4*C1 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C6)*L2)*L3)*ZS)*freq**4 + ((8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L2 + ((8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C7)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C7)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C5)*C6 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*C7)*L3)*ZL*ZS + ((8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*L1 + (8*I*pi**3*C4 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*L2)*L3)*freq**3 + 4*(((pi**2*C2 + pi**2*C3 + pi**2*C5 + pi**2*C7)*L1 + (pi**2*C4 + pi**2*C5 + pi**2*C7)*L2 + (pi**2*C6 + pi**2*C7)*L3)*ZL + ((pi**2*C1 + pi**2*C2)*L1 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C5 + pi**2*C6)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3 - 2*I*pi*C5 - 2*I*pi*C7)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)

                    S21 = 2*(64*pi**6*C2*C4*C6*L1*L2*L3*ZL*ZS*freq**6 - 16*(pi**4*C2*C4*L1*L2 + (pi**4*C2*C6*L1 + pi**4*C4*C6*L2)*L3)*ZL*ZS*freq**4 + 4*(pi**2*C2*L1 + pi**2*C4*L2 + pi**2*C6*L3)*ZL*ZS*freq**2 - ZL*ZS)/(((((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5)*C6 + ((128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3)*C4 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C5 + (128*I*pi**7*C1*C2 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C3 + (128*I*pi**7*C1 + 128*I*pi**7*C2)*C4)*C6)*C7)*L1*L2*L3*ZL*ZS*freq**7 + 64*((((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5)*C6 + ((pi**6*C2 + pi**6*C3)*C4 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C5 + (pi**6*C2 + pi**6*C3 + pi**6*C4)*C6)*C7)*L1*L2*L3*ZL + ((pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3)*C4 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C5 + (pi**6*C1*C2 + (pi**6*C1 + pi**6*C2)*C3 + (pi**6*C1 + pi**6*C2)*C4)*C6)*L1*L2*L3*ZS)*freq**6 + (((-32*I*pi**5*C2 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5 + (-32*I*pi**5*C2 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6)*L1*L2*L3 + (((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3)*C4 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C5 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C4)*C7)*L1*L2 + (((-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5)*C6 + (-32*I*pi**5*C1*C2 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C6)*C7)*L1 + (((-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5)*C6 + ((-32*I*pi**5*C1 - 32*I*pi**5*C3)*C4 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C5 + (-32*I*pi**5*C1 - 32*I*pi**5*C3 - 32*I*pi**5*C4)*C6)*C7)*L2)*L3)*ZL*ZS)*freq**5 - 16*((((pi**4*C2 + pi**4*C3)*C4 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C2 + pi**4*C3 + pi**4*C4)*C7)*L1*L2 + (((pi**4*C2 + pi**4*C3 + pi**4*C5)*C6 + (pi**4*C2 + pi**4*C3 + pi**4*C5 + pi**4*C6)*C7)*L1 + ((pi**4*C4 + pi**4*C5)*C6 + (pi**4*C4 + pi**4*C5 + pi**4*C6)*C7)*L2)*L3)*ZL + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C4)*L1*L2 + ((pi**4*C1*C2 + (pi**4*C1 + pi**4*C2)*C3 + (pi**4*C1 + pi**4*C2)*C5 + (pi**4*C1 + pi**4*C2)*C6)*L1 + ((pi**4*C1 + pi**4*C3)*C4 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C5 + (pi**4*C1 + pi**4*C3 + pi**4*C4)*C6)*L2)*L3)*ZS)*freq**4 + ((8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*L1*L2 + ((8*I*pi**3*C1*C2 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C7)*L1 + ((8*I*pi**3*C1 + 8*I*pi**3*C3)*C4 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C5 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C4)*C7)*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C5)*C6 + (8*I*pi**3*C1 + 8*I*pi**3*C3 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*C7)*L3)*ZL*ZS + ((8*I*pi**3*C2 + 8*I*pi**3*C3 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*L1 + (8*I*pi**3*C4 + 8*I*pi**3*C5 + 8*I*pi**3*C6)*L2)*L3)*freq**3 + 4*(((pi**2*C2 + pi**2*C3 + pi**2*C5 + pi**2*C7)*L1 + (pi**2*C4 + pi**2*C5 + pi**2*C7)*L2 + (pi**2*C6 + pi**2*C7)*L3)*ZL + ((pi**2*C1 + pi**2*C2)*L1 + (pi**2*C1 + pi**2*C3 + pi**2*C4)*L2 + (pi**2*C1 + pi**2*C3 + pi**2*C5 + pi**2*C6)*L3)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C3 - 2*I*pi*C5 - 2*I*pi*C7)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L2 - 2*I*pi*L3)*freq - ZL - ZS)*np.sqrt(ZL*ZS))

                elif(network_type['N'] >= 4):
                    
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        x.append(comp_val['C' + str(2*i-1)])
                        code.append('CP')
                        x.append([comp_val['L' + str(i)], comp_val['C' + str(2*i)]])
                        code.append('SPR')
                    x.append(comp_val['C' + str(2*network_type['N']+1)])
                    code.append('CP')


                       
                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
            if (network_type['First_Element'] == 'Series'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    L2 = comp_val['L2']
                    C1 = comp_val['C1']
                    L3 = comp_val['L3']

                    S11 = ((8*I*pi**3*C1*L1*L2 + (8*I*pi**3*C1*L1 + 8*I*pi**3*C1*L2)*L3)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C1*L2)*ZL - (pi**2*C1*L2 + pi**2*C1*L3)*ZS)*freq**2 + (2*I*pi*C1*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3)*freq - ZL + ZS)/((8*I*pi**3*C1*L1*L2 + (8*I*pi**3*C1*L1 + 8*I*pi**3*C1*L2)*L3)*freq**3 + 4*((pi**2*C1*L1 + pi**2*C1*L2)*ZL + (pi**2*C1*L2 + pi**2*C1*L3)*ZS)*freq**2 + (-2*I*pi*C1*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3)*freq - ZL - ZS)

                    S21 = (-8*I*pi**2*C1*L2*ZL*ZS*freq**2 + 2*I*ZL*ZS)/((8*(pi**3*C1*L1*L2 + (pi**3*C1*L1 + pi**3*C1*L2)*L3)*freq**3 + ((-4*I*pi**2*C1*L1 - 4*I*pi**2*C1*L2)*ZL + (-4*I*pi**2*C1*L2 - 4*I*pi**2*C1*L3)*ZS)*freq**2 - 2*(pi*C1*ZL*ZS + pi*L1 + pi*L3)*freq + I*ZL + I*ZS)*np.sqrt(ZL*ZS))
                
                if(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    L2 = comp_val['L2']
                    C1 = comp_val['C1']
                    L3 = comp_val['L3']
                    L4 = comp_val['L4']
                    C2 = comp_val['C2']
                    L5 = comp_val['L5']

                    S11 = (((32*I*pi**5*C1*C2*L1*L2 + (32*I*pi**5*C1*C2*L1 + 32*I*pi**5*C1*C2*L2)*L3)*L4 + (32*I*pi**5*C1*C2*L1*L2 + (32*I*pi**5*C1*C2*L1 + 32*I*pi**5*C1*C2*L2)*L3 + (32*I*pi**5*C1*C2*L1 + 32*I*pi**5*C1*C2*L2)*L4)*L5)*freq**5 + 16*((pi**4*C1*C2*L1*L2 + (pi**4*C1*C2*L1 + pi**4*C1*C2*L2)*L3 + (pi**4*C1*C2*L1 + pi**4*C1*C2*L2)*L4)*ZL - ((pi**4*C1*C2*L2 + pi**4*C1*C2*L3)*L4 + (pi**4*C1*C2*L2 + pi**4*C1*C2*L3 + pi**4*C1*C2*L4)*L5)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + (8*I*pi**3*C1*C2*L2 + 8*I*pi**3*C1*C2*L3 + 8*I*pi**3*C1*C2*L4)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C1*L2)*L3 + (-8*I*pi**3*C2*L1 - 8*I*pi**3*C2*L3)*L4 + (-8*I*pi**3*C1*L2 - 8*I*pi**3*C2*L3 - 8*I*pi**3*C2*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L5)*freq**3 - 4*((pi**2*C1*L2 + pi**2*C2*L3 + pi**2*C2*L4 + (pi**2*C1 + pi**2*C2)*L1)*ZL - (pi**2*C1*L2 + pi**2*C1*L3 + pi**2*C2*L4 + (pi**2*C1 + pi**2*C2)*L5)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3 + 2*I*pi*L5)*freq + ZL - ZS)/(((32*I*pi**5*C1*C2*L1*L2 + (32*I*pi**5*C1*C2*L1 + 32*I*pi**5*C1*C2*L2)*L3)*L4 + (32*I*pi**5*C1*C2*L1*L2 + (32*I*pi**5*C1*C2*L1 + 32*I*pi**5*C1*C2*L2)*L3 + (32*I*pi**5*C1*C2*L1 + 32*I*pi**5*C1*C2*L2)*L4)*L5)*freq**5 + 16*((pi**4*C1*C2*L1*L2 + (pi**4*C1*C2*L1 + pi**4*C1*C2*L2)*L3 + (pi**4*C1*C2*L1 + pi**4*C1*C2*L2)*L4)*ZL + ((pi**4*C1*C2*L2 + pi**4*C1*C2*L3)*L4 + (pi**4*C1*C2*L2 + pi**4*C1*C2*L3 + pi**4*C1*C2*L4)*L5)*ZS)*freq**4 + (-8*I*pi**3*C1*L1*L2 + (-8*I*pi**3*C1*C2*L2 - 8*I*pi**3*C1*C2*L3 - 8*I*pi**3*C1*C2*L4)*ZL*ZS + (-8*I*pi**3*C1*L1 - 8*I*pi**3*C1*L2)*L3 + (-8*I*pi**3*C2*L1 - 8*I*pi**3*C2*L3)*L4 + (-8*I*pi**3*C1*L2 - 8*I*pi**3*C2*L3 - 8*I*pi**3*C2*L4 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*L1)*L5)*freq**3 - 4*((pi**2*C1*L2 + pi**2*C2*L3 + pi**2*C2*L4 + (pi**2*C1 + pi**2*C2)*L1)*ZL + (pi**2*C1*L2 + pi**2*C1*L3 + pi**2*C2*L4 + (pi**2*C1 + pi**2*C2)*L5)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2)*ZL*ZS + 2*I*pi*L1 + 2*I*pi*L3 + 2*I*pi*L5)*freq + ZL + ZS)

                    S21 = (-8*I*pi**2*C1*L2*ZL*ZS*freq**2 + 2*I*ZL*ZS)/((8*(pi**3*C1*L1*L2 + (pi**3*C1*L1 + pi**3*C1*L2)*L3)*freq**3 + ((-4*I*pi**2*C1*L1 - 4*I*pi**2*C1*L2)*ZL + (-4*I*pi**2*C1*L2 - 4*I*pi**2*C1*L3)*ZS)*freq**2 - 2*(pi*C1*ZL*ZS + pi*L1 + pi*L3)*freq + I*ZL + I*ZS)*np.sqrt(ZL*ZS))
                
                if(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    L2 = comp_val['L2']
                    C1 = comp_val['C1']
                    L3 = comp_val['L3']
                    L4 = comp_val['L4']
                    C2 = comp_val['C2']
                    L5 = comp_val['L5']
                    L6 = comp_val['L6']
                    C3 = comp_val['C3']
                    L7 = comp_val['L7']

                    S11 = ((((128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L5)*L6 + ((128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L5 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L6)*L7)*freq**7 + 64*(((pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3)*L4 + (pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L4)*L5 + (pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L4)*L6)*ZL - (((pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3)*L4 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L5)*L6 + ((pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3)*L4 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L5 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L6)*L7)*ZS)*freq**6 + (((32*I*pi**5*C1*C2*C3*L2 + 32*I*pi**5*C1*C2*C3*L3)*L4 + (32*I*pi**5*C1*C2*C3*L2 + 32*I*pi**5*C1*C2*C3*L3 + 32*I*pi**5*C1*C2*C3*L4)*L5 + (32*I*pi**5*C1*C2*C3*L2 + 32*I*pi**5*C1*C2*C3*L3 + 32*I*pi**5*C1*C2*C3*L4)*L6)*ZL*ZS + (-32*I*pi**5*C1*C2*L1*L2 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L3)*L4 + (-32*I*pi**5*C1*C2*L1*L2 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L3 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L4)*L5 + (-32*I*pi**5*C1*C3*L1*L2 + (-32*I*pi**5*C1*C3*L1 - 32*I*pi**5*C1*C3*L2)*L3 + (-32*I*pi**5*C2*C3*L1 - 32*I*pi**5*C2*C3*L3)*L4 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L5)*L6 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L2)*L3 + (-32*I*pi**5*C1*C2*L2 - 32*I*pi**5*C2*C3*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1)*L4 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L5 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L6)*L7)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L3 + (pi**4*C1*C2*L2 + pi**4*C2*C3*L3 + (pi**4*C1*C2 + pi**4*C2*C3)*L1)*L4 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L1)*L5 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L1)*L6)*ZL - ((pi**4*C1*C2*L2 + pi**4*C1*C2*L3)*L4 + (pi**4*C1*C2*L2 + pi**4*C1*C2*L3 + pi**4*C1*C2*L4)*L5 + (pi**4*C1*C3*L2 + pi**4*C1*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L5)*L6 + ((pi**4*C1 + pi**4*C2)*C3*L5 + (pi**4*C1 + pi**4*C2)*C3*L6 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L3 + (pi**4*C1*C2 + pi**4*C2*C3)*L4)*L7)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L5 + (-8*I*pi**3*C1 - 8*I*pi**3*C2)*C3*L6 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L2 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C1*C3)*L3 + (-8*I*pi**3*C1*C2 - 8*I*pi**3*C2*C3)*L4)*ZL*ZS + (8*I*pi**3*C1*L1 + 8*I*pi**3*C1*L2)*L3 + (8*I*pi**3*C2*L1 + 8*I*pi**3*C2*L3)*L4 + (8*I*pi**3*C1*L2 + 8*I*pi**3*C2*L3 + 8*I*pi**3*C2*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L5 + (8*I*pi**3*C3*L1 + 8*I*pi**3*C3*L3 + 8*I*pi**3*C3*L5)*L6 + (8*I*pi**3*C1*L2 + 8*I*pi**3*C2*L4 + 8*I*pi**3*C3*L5 + 8*I*pi**3*C3*L6 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L3)*L7)*freq**3 + 4*((pi**2*C1*L2 + pi**2*C2*L4 + pi**2*C3*L5 + pi**2*C3*L6 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L3)*ZL - (pi**2*C1*L2 + pi**2*C1*L3 + pi**2*C2*L4 + pi**2*C3*L6 + (pi**2*C1 + pi**2*C2)*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L7)*ZS)*freq**2 + ((2*I*pi*C1 + 2*I*pi*C2 + 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3 - 2*I*pi*L5 - 2*I*pi*L7)*freq - ZL + ZS)/((((128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L5)*L6 + ((128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L5 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L6)*L7)*freq**7 + 64*(((pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3)*L4 + (pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L4)*L5 + (pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L4)*L6)*ZL + (((pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3)*L4 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L5)*L6 + ((pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3)*L4 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L5 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L6)*L7)*ZS)*freq**6 + (((-32*I*pi**5*C1*C2*C3*L2 - 32*I*pi**5*C1*C2*C3*L3)*L4 + (-32*I*pi**5*C1*C2*C3*L2 - 32*I*pi**5*C1*C2*C3*L3 - 32*I*pi**5*C1*C2*C3*L4)*L5 + (-32*I*pi**5*C1*C2*C3*L2 - 32*I*pi**5*C1*C2*C3*L3 - 32*I*pi**5*C1*C2*C3*L4)*L6)*ZL*ZS + (-32*I*pi**5*C1*C2*L1*L2 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L3)*L4 + (-32*I*pi**5*C1*C2*L1*L2 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L3 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L4)*L5 + (-32*I*pi**5*C1*C3*L1*L2 + (-32*I*pi**5*C1*C3*L1 - 32*I*pi**5*C1*C3*L2)*L3 + (-32*I*pi**5*C2*C3*L1 - 32*I*pi**5*C2*C3*L3)*L4 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L5)*L6 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L2)*L3 + (-32*I*pi**5*C1*C2*L2 - 32*I*pi**5*C2*C3*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1)*L4 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L5 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L6)*L7)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L3 + (pi**4*C1*C2*L2 + pi**4*C2*C3*L3 + (pi**4*C1*C2 + pi**4*C2*C3)*L1)*L4 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L1)*L5 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L1)*L6)*ZL + ((pi**4*C1*C2*L2 + pi**4*C1*C2*L3)*L4 + (pi**4*C1*C2*L2 + pi**4*C1*C2*L3 + pi**4*C1*C2*L4)*L5 + (pi**4*C1*C3*L2 + pi**4*C1*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L5)*L6 + ((pi**4*C1 + pi**4*C2)*C3*L5 + (pi**4*C1 + pi**4*C2)*C3*L6 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L3 + (pi**4*C1*C2 + pi**4*C2*C3)*L4)*L7)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L6 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C2*C3)*L4)*ZL*ZS + (8*I*pi**3*C1*L1 + 8*I*pi**3*C1*L2)*L3 + (8*I*pi**3*C2*L1 + 8*I*pi**3*C2*L3)*L4 + (8*I*pi**3*C1*L2 + 8*I*pi**3*C2*L3 + 8*I*pi**3*C2*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L5 + (8*I*pi**3*C3*L1 + 8*I*pi**3*C3*L3 + 8*I*pi**3*C3*L5)*L6 + (8*I*pi**3*C1*L2 + 8*I*pi**3*C2*L4 + 8*I*pi**3*C3*L5 + 8*I*pi**3*C3*L6 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L3)*L7)*freq**3 + 4*((pi**2*C1*L2 + pi**2*C2*L4 + pi**2*C3*L5 + pi**2*C3*L6 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L3)*ZL + (pi**2*C1*L2 + pi**2*C1*L3 + pi**2*C2*L4 + pi**2*C3*L6 + (pi**2*C1 + pi**2*C2)*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L7)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3 - 2*I*pi*L5 - 2*I*pi*L7)*freq - ZL - ZS)

                    S21 = 2*(64*pi**6*C1*C2*C3*L2*L4*L6*ZL*ZS*freq**6 - 16*(pi**4*C1*C2*L2*L4 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L4)*L6)*ZL*ZS*freq**4 + 4*(pi**2*C1*L2 + pi**2*C2*L4 + pi**2*C3*L6)*ZL*ZS*freq**2 - ZL*ZS)/(((((128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L5)*L6 + ((128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3)*L4 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L5 + (128*I*pi**7*C1*C2*C3*L1*L2 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L3 + (128*I*pi**7*C1*C2*C3*L1 + 128*I*pi**7*C1*C2*C3*L2)*L4)*L6)*L7)*freq**7 + 64*(((pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3)*L4 + (pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L4)*L5 + (pi**6*C1*C2*C3*L1*L2 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L3 + (pi**6*C1*C2*C3*L1 + pi**6*C1*C2*C3*L2)*L4)*L6)*ZL + (((pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3)*L4 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L5)*L6 + ((pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3)*L4 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L5 + (pi**6*C1*C2*C3*L2 + pi**6*C1*C2*C3*L3 + pi**6*C1*C2*C3*L4)*L6)*L7)*ZS)*freq**6 + (((-32*I*pi**5*C1*C2*C3*L2 - 32*I*pi**5*C1*C2*C3*L3)*L4 + (-32*I*pi**5*C1*C2*C3*L2 - 32*I*pi**5*C1*C2*C3*L3 - 32*I*pi**5*C1*C2*C3*L4)*L5 + (-32*I*pi**5*C1*C2*C3*L2 - 32*I*pi**5*C1*C2*C3*L3 - 32*I*pi**5*C1*C2*C3*L4)*L6)*ZL*ZS + (-32*I*pi**5*C1*C2*L1*L2 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L3)*L4 + (-32*I*pi**5*C1*C2*L1*L2 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L3 + (-32*I*pi**5*C1*C2*L1 - 32*I*pi**5*C1*C2*L2)*L4)*L5 + (-32*I*pi**5*C1*C3*L1*L2 + (-32*I*pi**5*C1*C3*L1 - 32*I*pi**5*C1*C3*L2)*L3 + (-32*I*pi**5*C2*C3*L1 - 32*I*pi**5*C2*C3*L3)*L4 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L5)*L6 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1*L2 + ((-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L1 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C1*C3)*L2)*L3 + (-32*I*pi**5*C1*C2*L2 - 32*I*pi**5*C2*C3*L3 + (-32*I*pi**5*C1*C2 - 32*I*pi**5*C2*C3)*L1)*L4 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L5 + (-32*I*pi**5*C1*C3*L2 - 32*I*pi**5*C2*C3*L3 - 32*I*pi**5*C2*C3*L4 + (-32*I*pi**5*C1 - 32*I*pi**5*C2)*C3*L1)*L6)*L7)*freq**5 - 16*(((pi**4*C1*C2 + pi**4*C1*C3)*L1*L2 + ((pi**4*C1*C2 + pi**4*C1*C3)*L1 + (pi**4*C1*C2 + pi**4*C1*C3)*L2)*L3 + (pi**4*C1*C2*L2 + pi**4*C2*C3*L3 + (pi**4*C1*C2 + pi**4*C2*C3)*L1)*L4 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L1)*L5 + (pi**4*C1*C3*L2 + pi**4*C2*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L1)*L6)*ZL + ((pi**4*C1*C2*L2 + pi**4*C1*C2*L3)*L4 + (pi**4*C1*C2*L2 + pi**4*C1*C2*L3 + pi**4*C1*C2*L4)*L5 + (pi**4*C1*C3*L2 + pi**4*C1*C3*L3 + pi**4*C2*C3*L4 + (pi**4*C1 + pi**4*C2)*C3*L5)*L6 + ((pi**4*C1 + pi**4*C2)*C3*L5 + (pi**4*C1 + pi**4*C2)*C3*L6 + (pi**4*C1*C2 + pi**4*C1*C3)*L2 + (pi**4*C1*C2 + pi**4*C1*C3)*L3 + (pi**4*C1*C2 + pi**4*C2*C3)*L4)*L7)*ZS)*freq**4 + (8*I*pi**3*C1*L1*L2 + ((8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L5 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*C3*L6 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L2 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C1*C3)*L3 + (8*I*pi**3*C1*C2 + 8*I*pi**3*C2*C3)*L4)*ZL*ZS + (8*I*pi**3*C1*L1 + 8*I*pi**3*C1*L2)*L3 + (8*I*pi**3*C2*L1 + 8*I*pi**3*C2*L3)*L4 + (8*I*pi**3*C1*L2 + 8*I*pi**3*C2*L3 + 8*I*pi**3*C2*L4 + (8*I*pi**3*C1 + 8*I*pi**3*C2)*L1)*L5 + (8*I*pi**3*C3*L1 + 8*I*pi**3*C3*L3 + 8*I*pi**3*C3*L5)*L6 + (8*I*pi**3*C1*L2 + 8*I*pi**3*C2*L4 + 8*I*pi**3*C3*L5 + 8*I*pi**3*C3*L6 + (8*I*pi**3*C1 + 8*I*pi**3*C2 + 8*I*pi**3*C3)*L1 + (8*I*pi**3*C2 + 8*I*pi**3*C3)*L3)*L7)*freq**3 + 4*((pi**2*C1*L2 + pi**2*C2*L4 + pi**2*C3*L5 + pi**2*C3*L6 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L1 + (pi**2*C2 + pi**2*C3)*L3)*ZL + (pi**2*C1*L2 + pi**2*C1*L3 + pi**2*C2*L4 + pi**2*C3*L6 + (pi**2*C1 + pi**2*C2)*L5 + (pi**2*C1 + pi**2*C2 + pi**2*C3)*L7)*ZS)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2 - 2*I*pi*C3)*ZL*ZS - 2*I*pi*L1 - 2*I*pi*L3 - 2*I*pi*L5 - 2*I*pi*L7)*freq - ZL - ZS)*np.sqrt(ZL*ZS))
    
                elif(network_type['N'] >= 4):
                    
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        x.append(comp_val['L' + str(2*i-1)])
                        code.append('LS')
                        x.append([comp_val['L' + str(2*i)], comp_val['C' + str(i)]])
                        code.append('SSR')
                    x.append(comp_val['L' + str(2*network_type['N']+1)])
                    code.append('LS')
                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
        elif(network_type['Mask'] == 'Highpass'):
            if (network_type['First_Element'] == 'Shunt'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    L2 = comp_val['L2']
                    L3 = comp_val['L3']
                    C1 = comp_val['C1']
                    S11 = (8*(pi**3*C1*L1*L2*L3*ZL - pi**3*C1*L1*L2*L3*ZS)*freq**3 - (I*L1 + I*L2 + I*L3)*ZL*ZS - (4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 - 4*I*pi**2*C1*L2*L3)*ZL*ZS)*freq**2 + 2*((pi*L1 + pi*L2)*L3*ZS - (pi*L1*L2 + pi*L1*L3)*ZL)*freq)/(8*(pi**3*C1*L1*L2*L3*ZL + pi**3*C1*L1*L2*L3*ZS)*freq**3 + (I*L1 + I*L2 + I*L3)*ZL*ZS + (-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 - 4*I*pi**2*C1*L2*L3)*ZL*ZS)*freq**2 - 2*((pi*L1 + pi*L2)*L3*ZS + (pi*L1*L2 + pi*L1*L3)*ZL)*freq)

                    S21 = 4*(4*pi**3*C1*L1*L2*L3*ZL*ZS*freq**3 - pi*L1*L3*ZL*ZS*freq)/((8*(pi**3*C1*L1*L2*L3*ZL + pi**3*C1*L1*L2*L3*ZS)*freq**3 + (I*L1 + I*L2 + I*L3)*ZL*ZS + (-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 - 4*I*pi**2*C1*L2*L3)*ZL*ZS)*freq**2 - 2*((pi*L1 + pi*L2)*L3*ZS + (pi*L1*L2 + pi*L1*L3)*ZL)*freq)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    L2 = comp_val['L2']
                    L3 = comp_val['L3']
                    L4 = comp_val['L4']
                    L5 = comp_val['L5']
                    C1 = comp_val['C1']
                    C2 = comp_val['C2']

                    S11 = (32*(pi**5*C1*C2*L1*L2*L3*L4*L5*ZL - pi**5*C1*C2*L1*L2*L3*L4*L5*ZS)*freq**5 - ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2*L3*L4*L5 + (-16*I*pi**4*C1*C2*L1*L2*L3*L4 + (-16*I*pi**4*C1*C2*L1*L2 - 16*I*pi**4*C1*C2*L2*L3)*L4*L5)*ZL*ZS)*freq**4 + 8*((pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4)*L5*ZS - ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + (pi**3*C2*L1*L2 + pi**3*C2*L1*L3)*L4)*L5)*ZL)*freq**3 - ((-I*L1 - I*L2)*L3 + (-I*L1 - I*L2 - I*L3)*L4 + (-I*L1 - I*L2 - I*L3)*L5)*ZL*ZS - ((4*I*pi**2*C1*L1*L2*L3 + (4*I*pi**2*C1*L1*L2 + (4*I*pi**2*C2*L1 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L3)*L4 + (4*I*pi**2*C1*L1*L2 + 4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L1 + 4*I*pi**2*C2*L2 + 4*I*pi**2*C2*L3)*L4)*L5)*ZL*ZS + (-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L4)*L5)*freq**2 - 2*(((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4)*L5*ZS - (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*ZL)*freq)/(32*(pi**5*C1*C2*L1*L2*L3*L4*L5*ZL + pi**5*C1*C2*L1*L2*L3*L4*L5*ZS)*freq**5 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2*L3*L4*L5 + (-16*I*pi**4*C1*C2*L1*L2*L3*L4 + (-16*I*pi**4*C1*C2*L1*L2 - 16*I*pi**4*C1*C2*L2*L3)*L4*L5)*ZL*ZS)*freq**4 - 8*((pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4)*L5*ZS + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + (pi**3*C2*L1*L2 + pi**3*C2*L1*L3)*L4)*L5)*ZL)*freq**3 + ((-I*L1 - I*L2)*L3 + (-I*L1 - I*L2 - I*L3)*L4 + (-I*L1 - I*L2 - I*L3)*L5)*ZL*ZS + ((4*I*pi**2*C1*L1*L2*L3 + (4*I*pi**2*C1*L1*L2 + (4*I*pi**2*C2*L1 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L3)*L4 + (4*I*pi**2*C1*L1*L2 + 4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L1 + 4*I*pi**2*C2*L2 + 4*I*pi**2*C2*L3)*L4)*L5)*ZL*ZS + (4*I*pi**2*L1*L2*L3 + (4*I*pi**2*L1*L2 + 4*I*pi**2*L1*L3)*L4)*L5)*freq**2 + 2*(((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4)*L5*ZS + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*ZL)*freq)

                    S21 = 4*(16*pi**5*C1*C2*L1*L2*L3*L4*L5*ZL*ZS*freq**5 + pi*L1*L3*L5*ZL*ZS*freq - 4*(pi**3*C1*L1*L2*L3 + pi**3*C2*L1*L3*L4)*L5*ZL*ZS*freq**3)/((32*(pi**5*C1*C2*L1*L2*L3*L4*L5*ZL + pi**5*C1*C2*L1*L2*L3*L4*L5*ZS)*freq**5 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2*L3*L4*L5 + (-16*I*pi**4*C1*C2*L1*L2*L3*L4 + (-16*I*pi**4*C1*C2*L1*L2 - 16*I*pi**4*C1*C2*L2*L3)*L4*L5)*ZL*ZS)*freq**4 - 8*((pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4)*L5*ZS + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + (pi**3*C2*L1*L2 + pi**3*C2*L1*L3)*L4)*L5)*ZL)*freq**3 + ((-I*L1 - I*L2)*L3 + (-I*L1 - I*L2 - I*L3)*L4 + (-I*L1 - I*L2 - I*L3)*L5)*ZL*ZS + ((4*I*pi**2*C1*L1*L2*L3 + (4*I*pi**2*C1*L1*L2 + (4*I*pi**2*C2*L1 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L3)*L4 + (4*I*pi**2*C1*L1*L2 + 4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L1 + 4*I*pi**2*C2*L2 + 4*I*pi**2*C2*L3)*L4)*L5)*ZL*ZS + (4*I*pi**2*L1*L2*L3 + (4*I*pi**2*L1*L2 + 4*I*pi**2*L1*L3)*L4)*L5)*freq**2 + 2*(((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4)*L5*ZS + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*ZL)*freq)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    L2 = comp_val['L2']
                    L3 = comp_val['L3']
                    L4 = comp_val['L4']
                    L5 = comp_val['L5']
                    L6 = comp_val['L6']
                    L7 = comp_val['L7']
                    C1 = comp_val['C1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']

                    S11 = (128*(pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZL - pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZS)*freq**7 - ((64*I*pi**6*C1*C2 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3)*L1*L2*L3*L4*L5*L6*L7 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3*L4 + (-64*I*pi**6*C1*C2*C3*L1*L2 - 64*I*pi**6*C1*C2*C3*L2*L3)*L4*L5)*L6*L7)*ZL*ZS)*freq**6 + 32*((pi**5*C1*C2*L1*L2*L3*L4*L5 + (pi**5*C1*C2*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2 + (pi**5*C2*C3*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3)*L4)*L5)*L6)*L7*ZS - ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + (pi**5*C2*C3*L1*L2 + pi**5*C2*C3*L1*L3)*L4)*L5)*L6)*L7)*ZL)*freq**5 - ((16*I*pi**4*C1*C2*L1*L2*L3*L4*L5 + (16*I*pi**4*C1*C2*L1*L2*L3*L4 + (16*I*pi**4*C1*C3*L1*L2*L3 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L1*L2 + (16*I*pi**4*C2*C3*L1 + (16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L2)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*C2*L1*L2*L3*L4 + (16*I*pi**4*C1*C2*L1*L2 + 16*I*pi**4*C1*C2*L2*L3)*L4*L5 + (16*I*pi**4*C1*C3*L1*L2*L3 + (16*I*pi**4*C1*C3*L1*L2 + (16*I*pi**4*C2*C3*L1 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L3)*L4 + (16*I*pi**4*C1*C3*L1*L2 + 16*I*pi**4*C1*C3*L2*L3 + (16*I*pi**4*C2*C3*L1 + 16*I*pi**4*C2*C3*L2 + 16*I*pi**4*C2*C3*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2*L3*L4*L5 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2*L3*L4 + ((-16*I*pi**4*C1 - 16*I*pi**4*C3)*L1*L2*L3 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L3)*L4)*L5)*L6)*L7)*freq**4 - 8*(((pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4 + (pi**3*C1*L1*L2 + (pi**3*C3*L1 + (pi**3*C1 + pi**3*C3)*L2)*L3 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4)*L5)*L6)*L7*ZS - ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4*L5 + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + ((pi**3*C1 + pi**3*C3)*L1*L2*L3 + ((pi**3*C2 + pi**3*C3)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3)*L4)*L5)*L6 + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + (pi**3*C2*L1*L2 + pi**3*C2*L1*L3)*L4)*L5 + (pi**3*C3*L1*L2*L3 + (pi**3*C3*L1*L2 + pi**3*C3*L1*L3)*L4 + (pi**3*C3*L1*L2 + pi**3*C3*L1*L3)*L5)*L6)*L7)*ZL)*freq**3 - (((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4)*L5 + ((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4 + (I*L1 + I*L2 + I*L3)*L5)*L6 + ((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4 + (I*L1 + I*L2 + I*L3)*L5)*L7)*ZL*ZS - (((-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4)*L5 + (-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C3*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C3)*L2)*L3 + ((-4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*L4)*L5)*L6 + (-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4 + (-4*I*pi**2*C1*L1*L2 - 4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L1 - 4*I*pi**2*C2*L2 - 4*I*pi**2*C2*L3)*L4)*L5 + ((-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2)*L3 + (-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3)*L4 + (-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3)*L5)*L6)*L7)*ZL*ZS + ((4*I*pi**2*L1*L2*L3 + (4*I*pi**2*L1*L2 + 4*I*pi**2*L1*L3)*L4)*L5 + (4*I*pi**2*L1*L2*L3 + (4*I*pi**2*L1*L2 + 4*I*pi**2*L1*L3)*L4 + (4*I*pi**2*L1*L2 + 4*I*pi**2*L1*L3)*L5)*L6)*L7)*freq**2 + 2*((((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4)*L5 + ((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4 + (pi*L1 + pi*L2 + pi*L3)*L5)*L6)*L7*ZS - ((pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4)*L5 + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*L6 + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*L7)*ZL)*freq)/(128*(pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZL + pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZS)*freq**7 + ((-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*L1*L2*L3*L4*L5*L6*L7 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3*L4 + (-64*I*pi**6*C1*C2*C3*L1*L2 - 64*I*pi**6*C1*C2*C3*L2*L3)*L4*L5)*L6*L7)*ZL*ZS)*freq**6 - 32*((pi**5*C1*C2*L1*L2*L3*L4*L5 + (pi**5*C1*C2*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2 + (pi**5*C2*C3*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3)*L4)*L5)*L6)*L7*ZS + ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + (pi**5*C2*C3*L1*L2 + pi**5*C2*C3*L1*L3)*L4)*L5)*L6)*L7)*ZL)*freq**5 + ((16*I*pi**4*C1*C2*L1*L2*L3*L4*L5 + (16*I*pi**4*C1*C2*L1*L2*L3*L4 + (16*I*pi**4*C1*C3*L1*L2*L3 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L1*L2 + (16*I*pi**4*C2*C3*L1 + (16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L2)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*C2*L1*L2*L3*L4 + (16*I*pi**4*C1*C2*L1*L2 + 16*I*pi**4*C1*C2*L2*L3)*L4*L5 + (16*I*pi**4*C1*C3*L1*L2*L3 + (16*I*pi**4*C1*C3*L1*L2 + (16*I*pi**4*C2*C3*L1 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L3)*L4 + (16*I*pi**4*C1*C3*L1*L2 + 16*I*pi**4*C1*C3*L2*L3 + (16*I*pi**4*C2*C3*L1 + 16*I*pi**4*C2*C3*L2 + 16*I*pi**4*C2*C3*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2*L3*L4*L5 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2*L3*L4 + ((16*I*pi**4*C1 + 16*I*pi**4*C3)*L1*L2*L3 + ((16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L2 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L3)*L4)*L5)*L6)*L7)*freq**4 + 8*(((pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4 + (pi**3*C1*L1*L2 + (pi**3*C3*L1 + (pi**3*C1 + pi**3*C3)*L2)*L3 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4)*L5)*L6)*L7*ZS + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4*L5 + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + ((pi**3*C1 + pi**3*C3)*L1*L2*L3 + ((pi**3*C2 + pi**3*C3)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3)*L4)*L5)*L6 + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + (pi**3*C2*L1*L2 + pi**3*C2*L1*L3)*L4)*L5 + (pi**3*C3*L1*L2*L3 + (pi**3*C3*L1*L2 + pi**3*C3*L1*L3)*L4 + (pi**3*C3*L1*L2 + pi**3*C3*L1*L3)*L5)*L6)*L7)*ZL)*freq**3 + (((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4)*L5 + ((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4 + (I*L1 + I*L2 + I*L3)*L5)*L6 + ((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4 + (I*L1 + I*L2 + I*L3)*L5)*L7)*ZL*ZS + (((-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4)*L5 + (-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C3*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C3)*L2)*L3 + ((-4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*L4)*L5)*L6 + (-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4 + (-4*I*pi**2*C1*L1*L2 - 4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L1 - 4*I*pi**2*C2*L2 - 4*I*pi**2*C2*L3)*L4)*L5 + ((-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2)*L3 + (-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3)*L4 + (-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3)*L5)*L6)*L7)*ZL*ZS + ((-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L4)*L5 + (-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L4 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L5)*L6)*L7)*freq**2 - 2*((((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4)*L5 + ((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4 + (pi*L1 + pi*L2 + pi*L3)*L5)*L6)*L7*ZS + ((pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4)*L5 + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*L6 + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*L7)*ZL)*freq)

                    S21 = 4*(64*pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZL*ZS*freq**7 - 16*(pi**5*C1*C2*L1*L2*L3*L4*L5 + (pi**5*C1*C3*L1*L2*L3 + pi**5*C2*C3*L1*L3*L4)*L5*L6)*L7*ZL*ZS*freq**5 - pi*L1*L3*L5*L7*ZL*ZS*freq + 4*(pi**3*C3*L1*L3*L5*L6 + (pi**3*C1*L1*L2*L3 + pi**3*C2*L1*L3*L4)*L5)*L7*ZL*ZS*freq**3)/((128*(pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZL + pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*ZS)*freq**7 + ((-64*I*pi**6*C1*C2 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3)*L1*L2*L3*L4*L5*L6*L7 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*C3*L1*L2*L3*L4 + (-64*I*pi**6*C1*C2*C3*L1*L2 - 64*I*pi**6*C1*C2*C3*L2*L3)*L4*L5)*L6*L7)*ZL*ZS)*freq**6 - 32*((pi**5*C1*C2*L1*L2*L3*L4*L5 + (pi**5*C1*C2*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2 + (pi**5*C2*C3*L1 + (pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L2)*L3)*L4)*L5)*L6)*L7*ZS + ((pi**5*C1*C2 + (pi**5*C1 + pi**5*C2)*C3)*L1*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + (pi**5*C2*C3*L1*L2 + pi**5*C2*C3*L1*L3)*L4)*L5)*L6)*L7)*ZL)*freq**5 + ((16*I*pi**4*C1*C2*L1*L2*L3*L4*L5 + (16*I*pi**4*C1*C2*L1*L2*L3*L4 + (16*I*pi**4*C1*C3*L1*L2*L3 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L1*L2 + (16*I*pi**4*C2*C3*L1 + (16*I*pi**4*C1*C2 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3)*L2)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*C2*L1*L2*L3*L4 + (16*I*pi**4*C1*C2*L1*L2 + 16*I*pi**4*C1*C2*L2*L3)*L4*L5 + (16*I*pi**4*C1*C3*L1*L2*L3 + (16*I*pi**4*C1*C3*L1*L2 + (16*I*pi**4*C2*C3*L1 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L3)*L4 + (16*I*pi**4*C1*C3*L1*L2 + 16*I*pi**4*C1*C3*L2*L3 + (16*I*pi**4*C2*C3*L1 + 16*I*pi**4*C2*C3*L2 + 16*I*pi**4*C2*C3*L3)*L4)*L5)*L6)*L7)*ZL*ZS + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2*L3*L4*L5 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2*L3*L4 + ((16*I*pi**4*C1 + 16*I*pi**4*C3)*L1*L2*L3 + ((16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L2 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L3)*L4)*L5)*L6)*L7)*freq**4 + 8*(((pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + (pi**3*C1*L1*L2 + (pi**3*C2*L1 + (pi**3*C1 + pi**3*C2)*L2)*L3)*L4 + (pi**3*C1*L1*L2 + (pi**3*C3*L1 + (pi**3*C1 + pi**3*C3)*L2)*L3 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4)*L5)*L6)*L7*ZS + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4*L5 + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + ((pi**3*C1 + pi**3*C3)*L1*L2*L3 + ((pi**3*C2 + pi**3*C3)*L1*L2 + (pi**3*C2 + pi**3*C3)*L1*L3)*L4)*L5)*L6 + ((pi**3*C1 + pi**3*C2)*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + (pi**3*C2*L1*L2 + pi**3*C2*L1*L3)*L4)*L5 + (pi**3*C3*L1*L2*L3 + (pi**3*C3*L1*L2 + pi**3*C3*L1*L3)*L4 + (pi**3*C3*L1*L2 + pi**3*C3*L1*L3)*L5)*L6)*L7)*ZL)*freq**3 + (((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4)*L5 + ((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4 + (I*L1 + I*L2 + I*L3)*L5)*L6 + ((I*L1 + I*L2)*L3 + (I*L1 + I*L2 + I*L3)*L4 + (I*L1 + I*L2 + I*L3)*L5)*L7)*ZL*ZS + (((-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4)*L5 + (-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C3*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C3)*L2)*L3 + ((-4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*L4)*L5)*L6 + (-4*I*pi**2*C1*L1*L2*L3 + (-4*I*pi**2*C1*L1*L2 + (-4*I*pi**2*C2*L1 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L3)*L4 + (-4*I*pi**2*C1*L1*L2 - 4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L1 - 4*I*pi**2*C2*L2 - 4*I*pi**2*C2*L3)*L4)*L5 + ((-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2)*L3 + (-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3)*L4 + (-4*I*pi**2*C3*L1 - 4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3)*L5)*L6)*L7)*ZL*ZS + ((-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L4)*L5 + (-4*I*pi**2*L1*L2*L3 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L4 + (-4*I*pi**2*L1*L2 - 4*I*pi**2*L1*L3)*L5)*L6)*L7)*freq**2 - 2*((((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4)*L5 + ((pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2 + pi*L3)*L4 + (pi*L1 + pi*L2 + pi*L3)*L5)*L6)*L7*ZS + ((pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4)*L5 + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*L6 + (pi*L1*L2*L3 + (pi*L1*L2 + pi*L1*L3)*L4 + (pi*L1*L2 + pi*L1*L3)*L5)*L7)*ZL)*freq)*np.sqrt(ZL*ZS))

                else:
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        x.append(comp_val['L' + str(2*i-1)])
                        code.append('LP')
                        x.append([comp_val['L' + str(2*i)], comp_val['C' + str(i)]])
                        code.append('SPR')
                    x.append(comp_val['L' + str(2*network_type['N']+1)])
                    code.append('LP')


                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
            elif (network_type['First_Element'] == 'Series'):
                if(network_type['N'] == 1):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']

                    S11 = (8*(pi**3*C1*C2*C3*L1*ZL - pi**3*C1*C2*C3*L1*ZS)*freq**3 - (-4*I*pi**2*C1*C2*C3*ZL*ZS + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*L1)*freq**2 - 2*((pi*C1 + pi*C2)*C3*ZL - (pi*C1*C2 + pi*C1*C3)*ZS)*freq + I*C1 + I*C2 + I*C3)/(8*(pi**3*C1*C2*C3*L1*ZL + pi**3*C1*C2*C3*L1*ZS)*freq**3 + (-4*I*pi**2*C1*C2*C3*ZL*ZS + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*L1)*freq**2 - 2*((pi*C1 + pi*C2)*C3*ZL + (pi*C1*C2 + pi*C1*C3)*ZS)*freq + I*C1 + I*C2 + I*C3)

                    S21 = (16*I*pi**3*C1*C2*C3*L1*ZL*ZS*freq**3 - 4*I*pi*C1*C3*ZL*ZS*freq)/(((8*I*pi**3*C1*C2*C3*L1*ZL + 8*I*pi**3*C1*C2*C3*L1*ZS)*freq**3 + 4*(pi**2*C1*C2*C3*ZL*ZS + (pi**2*C1*C2 + pi**2*C2*C3)*L1)*freq**2 + ((-2*I*pi*C1 - 2*I*pi*C2)*C3*ZL + (-2*I*pi*C1*C2 - 2*I*pi*C1*C3)*ZS)*freq - C1 - C2 - C3)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 2):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']

                    L2 = comp_val['L2']
                    C4 = comp_val['C4']
                    C5 = comp_val['C5']

                    S11 = (32*(pi**5*C1*C2*C3*C4*C5*L1*L2*ZL - pi**5*C1*C2*C3*C4*C5*L1*L2*ZS)*freq**5 - ((16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4*C5)*L1*L2 + (-16*I*pi**4*C1*C2*C3*C4*C5*L1 - 16*I*pi**4*C1*C2*C3*C4*C5*L2)*ZL*ZS)*freq**4 - 8*(((pi**3*C1 + pi**3*C2)*C3*C4*C5*L2 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4)*C5*L1)*ZL - ((pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*L1 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*L2)*ZS)*freq**3 - ((4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C1*C3)*C4)*C5*ZL*ZS + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C5)*L1 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4*C5)*L2)*freq**2 - (I*C1 + I*C2)*C3 - (I*C1 + I*C2 + I*C3)*C4 - (I*C1 + I*C2 + I*C3)*C5 + 2*(((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4)*C5*ZL - (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*ZS)*freq)/(32*(pi**5*C1*C2*C3*C4*C5*L1*L2*ZL + pi**5*C1*C2*C3*C4*C5*L1*L2*ZS)*freq**5 + ((-16*I*pi**4*C1*C2*C3*C4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C4*C5)*L1*L2 + (-16*I*pi**4*C1*C2*C3*C4*C5*L1 - 16*I*pi**4*C1*C2*C3*C4*C5*L2)*ZL*ZS)*freq**4 - 8*(((pi**3*C1 + pi**3*C2)*C3*C4*C5*L2 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4)*C5*L1)*ZL + ((pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*L1 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*L2)*ZS)*freq**3 + ((4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C1*C3)*C4)*C5*ZL*ZS + (4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C4 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C5)*L1 + ((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3*C4 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C4*C5)*L2)*freq**2 + (-I*C1 - I*C2)*C3 + (-I*C1 - I*C2 - I*C3)*C4 + (-I*C1 - I*C2 - I*C3)*C5 + 2*(((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4)*C5*ZL + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*ZS)*freq)

                    S21 = 4*(16*pi**5*C1*C2*C3*C4*C5*L1*L2*ZL*ZS*freq**5 + pi*C1*C3*C5*ZL*ZS*freq - 4*(pi**3*C1*C2*C3*C5*L1 + pi**3*C1*C3*C4*C5*L2)*ZL*ZS*freq**3)/((32*(pi**5*C1*C2*C3*C4*C5*L1*L2*ZL + pi**5*C1*C2*C3*C4*C5*L1*L2*ZS)*freq**5 + ((-16*I*pi**4*C1*C2*C3*C4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C4*C5)*L1*L2 + (-16*I*pi**4*C1*C2*C3*C4*C5*L1 - 16*I*pi**4*C1*C2*C3*C4*C5*L2)*ZL*ZS)*freq**4 - 8*(((pi**3*C1 + pi**3*C2)*C3*C4*C5*L2 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4)*C5*L1)*ZL + ((pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*L1 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*L2)*ZS)*freq**3 + ((4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C1*C3)*C4)*C5*ZL*ZS + (4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C4 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C5)*L1 + ((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3*C4 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C4*C5)*L2)*freq**2 + (-I*C1 - I*C2)*C3 + (-I*C1 - I*C2 - I*C3)*C4 + (-I*C1 - I*C2 - I*C3)*C5 + 2*(((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4)*C5*ZL + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*ZS)*freq)*np.sqrt(ZL*ZS))

                elif(network_type['N'] == 3):
                    L1 = comp_val['L1']
                    C1 = comp_val['C1']
                    C2 = comp_val['C2']
                    C3 = comp_val['C3']

                    L2 = comp_val['L2']
                    C4 = comp_val['C4']
                    C5 = comp_val['C5']

                    L3 = comp_val['L3']
                    C6 = comp_val['C6']
                    C7 = comp_val['C7']

                    S11 = (128*(pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZL - pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZS)*freq**7 - ((64*I*pi**6*C1*C2*C3*C4*C5*C6 + (64*I*pi**6*C1*C2*C3*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C2*C3)*C4*C5)*C6*C7)*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L1*L2 + (-64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L1 - 64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L2)*L3)*ZL*ZS)*freq**6 - 32*(((pi**5*C1*C2*C3*C4*C5 + (pi**5*C1*C2*C3*C4 + (pi**5*C1*C2 + pi**5*C2*C3)*C4*C5)*C6)*C7*L1*L2 + ((pi**5*C1 + pi**5*C2)*C3*C4*C5*C6*C7*L2 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C2*C3)*C4)*C5*C6*C7*L1)*L3)*ZL - ((pi**5*C1*C2*C3*C4*C5*C6 + pi**5*C1*C2*C3*C4*C5*C7)*L1*L2 + ((pi**5*C1*C2*C3*C4*C5*C6 + (pi**5*C1*C2*C3*C4 + pi**5*C1*C2*C3*C5)*C6*C7)*L1 + (pi**5*C1*C2*C3*C4*C5*C6 + (pi**5*C1*C2*C3*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C4*C5)*C6*C7)*L2)*L3)*ZS)*freq**5 - ((-16*I*pi**4*C1*C2*C3*C4*C5 + (-16*I*pi**4*C1*C2*C3*C4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C4*C5)*C6 + (-16*I*pi**4*C1*C2*C3*C4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C4*C5)*C7)*L1*L2 + ((16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4)*C5*C6*C7*L3 + (16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + 16*I*pi**4*C1*C2*C3*C5)*C6)*C7*L1 + (16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4*C5)*C6)*C7*L2)*ZL*ZS + (((-16*I*pi**4*C1*C2*C3 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C4)*C5*C6 + (-16*I*pi**4*C1*C2*C3 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C4 + (-16*I*pi**4*C1*C2 - 16*I*pi**4*C2*C3)*C5)*C6*C7)*L1 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*C4*C5*C6 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*C5)*C6*C7)*L2)*L3)*freq**4 + 8*((((pi**3*C1 + pi**3*C2)*C3 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C4)*C5*C6*C7*L3 + ((pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4)*C5 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4 + (pi**3*C1*C2 + pi**3*C2*C3)*C5)*C6)*C7*L1 + ((pi**3*C1 + pi**3*C2)*C3*C4*C5 + ((pi**3*C1 + pi**3*C2)*C3*C4 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C4*C5)*C6)*C7*L2)*ZL - ((pi**3*C1*C2*C3*C4*C5 + (pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*C6 + (pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*C7)*L1 + (pi**3*C1*C2*C3*C4*C5 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*C6 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*C7)*L2 + ((pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C1*C3)*C4)*C5*C6 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C1*C3)*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C5)*C6*C7)*L3)*ZS)*freq**3 - (((-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C4)*C5 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C5)*C6)*C7*ZL*ZS + ((4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C4)*C5 + (4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C4 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C5)*C6 + (4*I*pi**2*C1*C2*C3 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C4 + (4*I*pi**2*C1*C2 + 4*I*pi**2*C2*C3)*C5)*C7)*L1 + ((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3*C4*C5 + ((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3*C4 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C4*C5)*C6 + ((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3*C4 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C4*C5)*C7)*L2 + (((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C4)*C5*C6 + ((4*I*pi**2*C1 + 4*I*pi**2*C2)*C3 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C4 + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*C5)*C6*C7)*L3)*freq**2 - ((-I*C1 - I*C2)*C3 + (-I*C1 - I*C2 - I*C3)*C4)*C5 - ((-I*C1 - I*C2)*C3 + (-I*C1 - I*C2 - I*C3)*C4 + (-I*C1 - I*C2 - I*C3)*C5)*C6 - ((-I*C1 - I*C2)*C3 + (-I*C1 - I*C2 - I*C3)*C4 + (-I*C1 - I*C2 - I*C3)*C5)*C7 - 2*((((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4)*C5 + ((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4 + (pi*C1 + pi*C2 + pi*C3)*C5)*C6)*C7*ZL - ((pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4)*C5 + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*C6 + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*C7)*ZS)*freq)/(128*(pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZL + pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZS)*freq**7 + ((-64*I*pi**6*C1*C2*C3*C4*C5*C6 + (-64*I*pi**6*C1*C2*C3*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C2*C3)*C4*C5)*C6*C7)*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L1*L2 + (-64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L1 - 64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L2)*L3)*ZL*ZS)*freq**6 - 32*(((pi**5*C1*C2*C3*C4*C5 + (pi**5*C1*C2*C3*C4 + (pi**5*C1*C2 + pi**5*C2*C3)*C4*C5)*C6)*C7*L1*L2 + ((pi**5*C1 + pi**5*C2)*C3*C4*C5*C6*C7*L2 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C2*C3)*C4)*C5*C6*C7*L1)*L3)*ZL + ((pi**5*C1*C2*C3*C4*C5*C6 + pi**5*C1*C2*C3*C4*C5*C7)*L1*L2 + ((pi**5*C1*C2*C3*C4*C5*C6 + (pi**5*C1*C2*C3*C4 + pi**5*C1*C2*C3*C5)*C6*C7)*L1 + (pi**5*C1*C2*C3*C4*C5*C6 + (pi**5*C1*C2*C3*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C4*C5)*C6*C7)*L2)*L3)*ZS)*freq**5 + ((16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4*C5)*C6 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4*C5)*C7)*L1*L2 + ((16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4)*C5*C6*C7*L3 + (16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + 16*I*pi**4*C1*C2*C3*C5)*C6)*C7*L1 + (16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4*C5)*C6)*C7*L2)*ZL*ZS + (((16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4)*C5*C6 + (16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C5)*C6*C7)*L1 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*C4*C5*C6 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4*C5)*C6*C7)*L2)*L3)*freq**4 + 8*((((pi**3*C1 + pi**3*C2)*C3 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C4)*C5*C6*C7*L3 + ((pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4)*C5 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4 + (pi**3*C1*C2 + pi**3*C2*C3)*C5)*C6)*C7*L1 + ((pi**3*C1 + pi**3*C2)*C3*C4*C5 + ((pi**3*C1 + pi**3*C2)*C3*C4 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C4*C5)*C6)*C7*L2)*ZL + ((pi**3*C1*C2*C3*C4*C5 + (pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*C6 + (pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*C7)*L1 + (pi**3*C1*C2*C3*C4*C5 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*C6 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*C7)*L2 + ((pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C1*C3)*C4)*C5*C6 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C1*C3)*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C5)*C6*C7)*L3)*ZS)*freq**3 + (((-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C4)*C5 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C5)*C6)*C7*ZL*ZS + ((-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4)*C5 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C5)*C6 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C5)*C7)*L1 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4*C5 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4*C5)*C6 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4*C5)*C7)*L2 + (((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4)*C5*C6 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C5)*C6*C7)*L3)*freq**2 + ((I*C1 + I*C2)*C3 + (I*C1 + I*C2 + I*C3)*C4)*C5 + ((I*C1 + I*C2)*C3 + (I*C1 + I*C2 + I*C3)*C4 + (I*C1 + I*C2 + I*C3)*C5)*C6 + ((I*C1 + I*C2)*C3 + (I*C1 + I*C2 + I*C3)*C4 + (I*C1 + I*C2 + I*C3)*C5)*C7 - 2*((((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4)*C5 + ((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4 + (pi*C1 + pi*C2 + pi*C3)*C5)*C6)*C7*ZL + ((pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4)*C5 + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*C6 + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*C7)*ZS)*freq)

                    S21 = 4*(64*pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZL*ZS*freq**7 - pi*C1*C3*C5*C7*ZL*ZS*freq - 16*(pi**5*C1*C2*C3*C4*C5*C7*L1*L2 + (pi**5*C1*C2*C3*C5*C6*C7*L1 + pi**5*C1*C3*C4*C5*C6*C7*L2)*L3)*ZL*ZS*freq**5 + 4*(pi**3*C1*C2*C3*C5*C7*L1 + pi**3*C1*C3*C4*C5*C7*L2 + pi**3*C1*C3*C5*C6*C7*L3)*ZL*ZS*freq**3)/((128*(pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZL + pi**7*C1*C2*C3*C4*C5*C6*C7*L1*L2*L3*ZS)*freq**7 + ((-64*I*pi**6*C1*C2*C3*C4*C5*C6 + (-64*I*pi**6*C1*C2*C3*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C2*C3)*C4*C5)*C6*C7)*L1*L2*L3 + (-64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L1*L2 + (-64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L1 - 64*I*pi**6*C1*C2*C3*C4*C5*C6*C7*L2)*L3)*ZL*ZS)*freq**6 - 32*(((pi**5*C1*C2*C3*C4*C5 + (pi**5*C1*C2*C3*C4 + (pi**5*C1*C2 + pi**5*C2*C3)*C4*C5)*C6)*C7*L1*L2 + ((pi**5*C1 + pi**5*C2)*C3*C4*C5*C6*C7*L2 + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C2*C3)*C4)*C5*C6*C7*L1)*L3)*ZL + ((pi**5*C1*C2*C3*C4*C5*C6 + pi**5*C1*C2*C3*C4*C5*C7)*L1*L2 + ((pi**5*C1*C2*C3*C4*C5*C6 + (pi**5*C1*C2*C3*C4 + pi**5*C1*C2*C3*C5)*C6*C7)*L1 + (pi**5*C1*C2*C3*C4*C5*C6 + (pi**5*C1*C2*C3*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C4*C5)*C6*C7)*L2)*L3)*ZS)*freq**5 + ((16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4*C5)*C6 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4*C5)*C7)*L1*L2 + ((16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4)*C5*C6*C7*L3 + (16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + 16*I*pi**4*C1*C2*C3*C5)*C6)*C7*L1 + (16*I*pi**4*C1*C2*C3*C4*C5 + (16*I*pi**4*C1*C2*C3*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C4*C5)*C6)*C7*L2)*ZL*ZS + (((16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4)*C5*C6 + (16*I*pi**4*C1*C2*C3 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C4 + (16*I*pi**4*C1*C2 + 16*I*pi**4*C2*C3)*C5)*C6*C7)*L1 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*C4*C5*C6 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4*C5)*C6*C7)*L2)*L3)*freq**4 + 8*((((pi**3*C1 + pi**3*C2)*C3 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C4)*C5*C6*C7*L3 + ((pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4)*C5 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C2*C3)*C4 + (pi**3*C1*C2 + pi**3*C2*C3)*C5)*C6)*C7*L1 + ((pi**3*C1 + pi**3*C2)*C3*C4*C5 + ((pi**3*C1 + pi**3*C2)*C3*C4 + (pi**3*C1 + pi**3*C2 + pi**3*C3)*C4*C5)*C6)*C7*L2)*ZL + ((pi**3*C1*C2*C3*C4*C5 + (pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*C6 + (pi**3*C1*C2*C3*C4 + pi**3*C1*C2*C3*C5)*C7)*L1 + (pi**3*C1*C2*C3*C4*C5 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*C6 + (pi**3*C1*C2*C3*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C4*C5)*C7)*L2 + ((pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C1*C3)*C4)*C5*C6 + (pi**3*C1*C2*C3 + (pi**3*C1*C2 + pi**3*C1*C3)*C4 + (pi**3*C1*C2 + pi**3*C1*C3)*C5)*C6*C7)*L3)*ZS)*freq**3 + (((-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C4)*C5 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C1*C3)*C5)*C6)*C7*ZL*ZS + ((-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4)*C5 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C5)*C6 + (-4*I*pi**2*C1*C2*C3 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C4 + (-4*I*pi**2*C1*C2 - 4*I*pi**2*C2*C3)*C5)*C7)*L1 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4*C5 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4*C5)*C6 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4*C5)*C7)*L2 + (((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4)*C5*C6 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2)*C3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C4 + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*C5)*C6*C7)*L3)*freq**2 + ((I*C1 + I*C2)*C3 + (I*C1 + I*C2 + I*C3)*C4)*C5 + ((I*C1 + I*C2)*C3 + (I*C1 + I*C2 + I*C3)*C4 + (I*C1 + I*C2 + I*C3)*C5)*C6 + ((I*C1 + I*C2)*C3 + (I*C1 + I*C2 + I*C3)*C4 + (I*C1 + I*C2 + I*C3)*C5)*C7 - 2*((((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4)*C5 + ((pi*C1 + pi*C2)*C3 + (pi*C1 + pi*C2 + pi*C3)*C4 + (pi*C1 + pi*C2 + pi*C3)*C5)*C6)*C7*ZL + ((pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4)*C5 + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*C6 + (pi*C1*C2*C3 + (pi*C1*C2 + pi*C1*C3)*C4 + (pi*C1*C2 + pi*C1*C3)*C5)*C7)*ZS)*freq)*np.sqrt(ZL*ZS))

                else:
                    x = []
                    code = []
                    for i in range(1, network_type['N']+1):
                        x.append(comp_val['C' + str(2*i-1)])
                        code.append('CS')
                        x.append([comp_val['L' + str(i)], comp_val['C' + str(2*i)]])
                        code.append('SSR')
                    x.append(comp_val['C' + str(2*network_type['N']+1)])
                    code.append('CS')


                    S = get_SPAR([ZS], [ZL], code, x, freq)
                    S11 = S[:, 0,0]
                    S21 = S[:, 1,0]
        elif(network_type['Mask'] == 'Bandpass'):
            if (network_type['First_Element'] == 'Shunt'):
                x = []
                code = []
                for i in range(1, network_type['N']+1):
                    x.append(comp_val['L' + str(3*i-2)])
                    code.append('LP')
                    x.append(comp_val['C' + str(3*i-2)])
                    code.append('CP')

                    x.append([comp_val['L' + str(3*i-1)], comp_val['C' + str(3*i-1)], comp_val['L' + str(3*i)], comp_val['C' + str(3*i)]])
                    code.append('DSPR')
                x.append(comp_val['C' + str(3*network_type['N']+1)])
                code.append('CP')
                x.append(comp_val['L' + str(3*network_type['N']+1)])
                code.append('LP')


                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
            
            if (network_type['First_Element'] == 'Series'):
                x = []
                code = []
                for i in range(1, network_type['N']+1):
                    x.append(comp_val['L' + str(3*i-2)])
                    code.append('LS')
                    x.append(comp_val['C' + str(3*i-2)])
                    code.append('CS')

                    x.append([comp_val['L' + str(3*i-1)], comp_val['C' + str(3*i-1)], comp_val['L' + str(3*i)], comp_val['C' + str(3*i)]])
                    code.append('DSPSR')


                x.append(comp_val['C' + str(3*network_type['N']+1)])
                code.append('CS')
                x.append(comp_val['L' + str(3*network_type['N']+1)])
                code.append('LS')


                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
        elif(network_type['Mask'] == 'Bandstop'):
            if (network_type['First_Element'] == 'Shunt'):
                x = []
                code = []
                for i in range(1, network_type['N']+1):
                    x.append([comp_val['L' + str(3*i-2)], comp_val['C' + str(3*i-2)]])
                    code.append('SSR')

                    x.append([comp_val['L' + str(3*i)], comp_val['C' + str(3*i)], comp_val['L' + str(3*i-1)], comp_val['C' + str(3*i-1)]])
                    code.append('DSPR')

                x.append([comp_val['L' + str(3*network_type['N']+1)], comp_val['C' + str(3*network_type['N']+1)]])
                code.append('SSR')

                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
            if (network_type['First_Element'] == 'Series'):
                x = []
                code = []
                for i in range(1, network_type['N']+1):
                    x.append([comp_val['L' + str(3*i-2)], comp_val['C' + str(3*i-2)]])
                    code.append('SPR')

                    x.append([comp_val['L' + str(3*i)], comp_val['C' + str(3*i)], comp_val['L' + str(3*i-1)], comp_val['C' + str(3*i-1)]])
                    code.append('DSPSR')

                x.append([comp_val['L' + str(3*network_type['N']+1)], comp_val['C' + str(3*network_type['N']+1)]])
                code.append('SPR')

                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
    elif(network_type['Network'] == 'Direct-Coupled'):
        if(network_type['DC_Type'] == 'C-Coupled Shunt Resonators'):
            if(network_type['N'] == 1):
                C1 = comp_val['C1']
                L1 = comp_val['L1']
                C2 = comp_val['C2']
                C3 = comp_val['C3']

                S11 = (-16*I*pi**4*C1*C2*C3*L1*ZL*ZS*freq**4 + 8*((pi**3*C1 + pi**3*C2)*C3*L1*ZL - (pi**3*C1*C2 + pi**3*C1*C3)*L1*ZS)*freq**3 - (-4*I*pi**2*C1*C3*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L1)*freq**2 - 2*(pi*C3*ZL - pi*C1*ZS)*freq + I)/(16*I*pi**4*C1*C2*C3*L1*ZL*ZS*freq**4 + 8*((pi**3*C1 + pi**3*C2)*C3*L1*ZL + (pi**3*C1*C2 + pi**3*C1*C3)*L1*ZS)*freq**3 + (-4*I*pi**2*C1*C3*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L1)*freq**2 - 2*(pi*C3*ZL + pi*C1*ZS)*freq + I)

                S21 = 16*pi**3*C1*C3*L1*ZL*ZS*freq**3/((16*I*pi**4*C1*C2*C3*L1*ZL*ZS*freq**4 + 8*((pi**3*C1 + pi**3*C2)*C3*L1*ZL + (pi**3*C1*C2 + pi**3*C1*C3)*L1*ZS)*freq**3 + (-4*I*pi**2*C1*C3*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L1)*freq**2 - 2*(pi*C3*ZL + pi*C1*ZS)*freq + I)*np.sqrt(ZL*ZS))
            
            elif(network_type['N'] == 2):
                C1 = comp_val['C1']
                L1 = comp_val['L1']
                C2 = comp_val['C2']
                C3 = comp_val['C3']
                L2 = comp_val['L2']
                C4 = comp_val['C4']
                C5 = comp_val['C5']

                S11 = -((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L1*L2*ZL*ZS*freq**6 - 32*(((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4)*C5*L1*L2*ZL - (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2*ZS)*freq**5 + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5)*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L1 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L2)*ZL*ZS)*freq**4 + 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C5*L1 + (pi**3*C3 + pi**3*C4)*C5*L2)*ZL - ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C3 - 4*I*pi**2*C4 - 4*I*pi**2*C5)*L2)*freq**2 - 2*(pi*C5*ZL - pi*C1*ZS)*freq + I)/((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L1*L2*ZL*ZS*freq**6 + 32*(((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4)*C5*L1*L2*ZL + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2*ZS)*freq**5 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L1 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L2)*ZL*ZS)*freq**4 - 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C5*L1 + (pi**3*C3 + pi**3*C4)*C5*L2)*ZL + ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L1 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L2)*freq**2 + 2*(pi*C5*ZL + pi*C1*ZS)*freq - I)

                S21 = 64*pi**5*C1*C3*C5*L1*L2*ZL*ZS*freq**5/(((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4)*C5*L1*L2*ZL*ZS*freq**6 + 32*(((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4)*C5*L1*L2*ZL + (pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2*ZS)*freq**5 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C5*L1 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*C5*L2)*ZL*ZS)*freq**4 - 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C5*L1 + (pi**3*C3 + pi**3*C4)*C5*L2)*ZL + ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2)*ZS)*freq**3 + (4*I*pi**2*C1*C5*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L1 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L2)*freq**2 + 2*(pi*C5*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))
            
            elif(network_type['N'] == 3):
                C1 = comp_val['C1']
                L1 = comp_val['L1']
                C2 = comp_val['C2']
                C3 = comp_val['C3']
                L2 = comp_val['L2']
                C4 = comp_val['C4']
                C5 = comp_val['C5']
                L3 = comp_val['L3']
                C6 = comp_val['C6']
                C7 = comp_val['C7']

                S11 = -(((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C6)*C7*L1*L2*L3*ZL*ZS*freq**8 - 128*((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6)*C7*L1*L2*L3*ZL - ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L1*L2*L3*ZS)*freq**7 + ((((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L1*L2*L3 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5)*C7*L1*L2 + (((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C6)*C7*L1 + ((-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C6)*C7*L2)*L3)*ZL*ZS)*freq**6 + 32*((((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C7*L1*L2 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6)*C7*L1 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6)*C7*L2)*L3)*ZL - ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L2)*L3)*ZS)*freq**5 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L1*L2 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C7*L1 + (16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4 + 16*I*pi**4*C1*C5)*C7*L2 + (16*I*pi**4*C1*C5 + 16*I*pi**4*C1*C6)*C7*L3)*ZL*ZS + (((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L1 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L2)*L3)*freq**4 - 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C7*L1 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C7*L2 + (pi**3*C5 + pi**3*C6)*C7*L3)*ZL - ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L3)*ZS)*freq**3 + (-4*I*pi**2*C1*C7*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L1 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L2 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L3)*freq**2 + 2*(pi*C7*ZL - pi*C1*ZS)*freq - I)/(((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C6)*C7*L1*L2*L3*ZL*ZS*freq**8 + 128*((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6)*C7*L1*L2*L3*ZL + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L1*L2*L3*ZS)*freq**7 + ((((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4)*C5 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C6 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C7)*L1*L2*L3 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5)*C7*L1*L2 + (((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C6)*C7*L1 + ((-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C6)*C7*L2)*L3)*ZL*ZS)*freq**6 - 32*((((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C7*L1*L2 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6)*C7*L1 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6)*C7*L2)*L3)*ZL + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L2)*L3)*ZS)*freq**5 + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5)*L1*L2 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C7*L1 + (16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4 + 16*I*pi**4*C1*C5)*C7*L2 + (16*I*pi**4*C1*C5 + 16*I*pi**4*C1*C6)*C7*L3)*ZL*ZS + (((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C6 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C7)*L1 + ((16*I*pi**4*C3 + 16*I*pi**4*C4)*C5 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C6 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C7)*L2)*L3)*freq**4 + 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C7*L1 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C7*L2 + (pi**3*C5 + pi**3*C6)*C7*L3)*ZL + ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L3)*ZS)*freq**3 + (-4*I*pi**2*C1*C7*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C3 - 4*I*pi**2*C4 - 4*I*pi**2*C5)*L2 + (-4*I*pi**2*C5 - 4*I*pi**2*C6 - 4*I*pi**2*C7)*L3)*freq**2 - 2*(pi*C7*ZL + pi*C1*ZS)*freq + I)

                S21 = 256*pi**7*C1*C3*C5*C7*L1*L2*L3*ZL*ZS*freq**7/((((256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4)*C5 + (256*I*pi**8*C1*C2*C3 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C4 + (256*I*pi**8*C1*C2 + 256*I*pi**8*C1*C3)*C5)*C6)*C7*L1*L2*L3*ZL*ZS*freq**8 + 128*((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6)*C7*L1*L2*L3*ZL + ((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L1*L2*L3*ZS)*freq**7 + ((((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4)*C5 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C6 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C7)*L1*L2*L3 + ((-64*I*pi**6*C1*C2*C3 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5)*C7*L1*L2 + (((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C5 + (-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C6)*C7*L1 + ((-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4)*C5 + (-64*I*pi**6*C1*C3 - 64*I*pi**6*C1*C4 - 64*I*pi**6*C1*C5)*C6)*C7*L2)*L3)*ZL*ZS)*freq**6 - 32*((((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C7*L1*L2 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6)*C7*L1 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6)*C7*L2)*L3)*ZL + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L2)*L3)*ZS)*freq**5 + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5)*L1*L2 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*C7*L1 + (16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4 + 16*I*pi**4*C1*C5)*C7*L2 + (16*I*pi**4*C1*C5 + 16*I*pi**4*C1*C6)*C7*L3)*ZL*ZS + (((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C6 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C7)*L1 + ((16*I*pi**4*C3 + 16*I*pi**4*C4)*C5 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C6 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C7)*L2)*L3)*freq**4 + 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C7*L1 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C7*L2 + (pi**3*C5 + pi**3*C6)*C7*L3)*ZL + ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L3)*ZS)*freq**3 + (-4*I*pi**2*C1*C7*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C3 - 4*I*pi**2*C4 - 4*I*pi**2*C5)*L2 + (-4*I*pi**2*C5 - 4*I*pi**2*C6 - 4*I*pi**2*C7)*L3)*freq**2 - 2*(pi*C7*ZL + pi*C1*ZS)*freq + I)*np.sqrt(ZL*ZS))
            
            elif(network_type['N'] == 4):
                C1 = comp_val['C1']
                L1 = comp_val['L1']
                C2 = comp_val['C2']
                C3 = comp_val['C3']
                L2 = comp_val['L2']
                C4 = comp_val['C4']
                C5 = comp_val['C5']
                L3 = comp_val['L3']
                C6 = comp_val['C6']
                C7 = comp_val['C7']
                L4 = comp_val['L4']
                C8 = comp_val['C8']
                C9 = comp_val['C9']

                S11 = -((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8)*C9*L1*L2*L3*L4*ZL*ZS*freq**10 - 512*(((((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7)*C8)*C9*L1*L2*L3*L4*ZL - (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C8 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9)*L1*L2*L3*L4*ZS)*freq**9 + (((((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4)*C5 + ((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C5)*C6)*C7 + (((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4)*C5 + ((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C5)*C6 + ((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C5)*C7)*C8 + (((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4)*C5 + ((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C5)*C6 + ((256*I*pi**8*C1 + 256*I*pi**8*C2)*C3 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C4 + (256*I*pi**8*C1 + 256*I*pi**8*C2 + 256*I*pi**8*C3)*C5)*C7)*C9)*L1*L2*L3*L4 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*C9*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8)*C9*L1*L2 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8)*C9*L1 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8)*C9*L2)*L3)*L4)*ZL*ZS)*freq**8 + 128*(((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7)*C9*L1*L2*L3 + ((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C8)*C9*L1*L2 + ((((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7)*C8)*C9*L1 + (((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7)*C8)*C9*L2)*L3)*L4)*ZL - (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L1*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C8 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9)*L1*L2 + ((((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C8 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9)*L1 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C8 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9)*L2)*L3)*L4)*ZS)*freq**7 + ((((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4)*C5 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C6 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C7)*L1*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C9*L1*L2 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*C9*L1 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*C9*L2)*L3 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8)*C9*L1 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8)*C9*L2 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8)*C9*L3)*L4)*ZL*ZS + ((((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C7 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C8 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C4 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5)*C9)*L1*L2 + ((((-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C6)*C7 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C6 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C7)*C8 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C5 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C6 + (-64*I*pi**6*C1 - 64*I*pi**6*C2 - 64*I*pi**6*C3)*C7)*C9)*L1 + (((-64*I*pi**6*C3 - 64*I*pi**6*C4)*C5 + (-64*I*pi**6*C3 - 64*I*pi**6*C4 - 64*I*pi**6*C5)*C6)*C7 + ((-64*I*pi**6*C3 - 64*I*pi**6*C4)*C5 + (-64*I*pi**6*C3 - 64*I*pi**6*C4 - 64*I*pi**6*C5)*C6 + (-64*I*pi**6*C3 - 64*I*pi**6*C4 - 64*I*pi**6*C5)*C7)*C8 + ((-64*I*pi**6*C3 - 64*I*pi**6*C4)*C5 + (-64*I*pi**6*C3 - 64*I*pi**6*C4 - 64*I*pi**6*C5)*C6 + (-64*I*pi**6*C3 - 64*I*pi**6*C4 - 64*I*pi**6*C5)*C7)*C9)*L2)*L3)*L4)*freq**6 - 32*((((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C9*L1*L2 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7)*C9*L1 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7)*C9*L2)*L3 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C7 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C8)*C9*L1 + ((pi**5*C3 + pi**5*C4 + pi**5*C5)*C7 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C8)*C9*L2 + ((pi**5*C5 + pi**5*C6)*C7 + (pi**5*C5 + pi**5*C6 + pi**5*C7)*C8)*C9*L3)*L4)*ZL - ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L2)*L3 + (((pi**5*C1*C2 + pi**5*C1*C3)*C7 + (pi**5*C1*C2 + pi**5*C1*C3)*C8 + (pi**5*C1*C2 + pi**5*C1*C3)*C9)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C8 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9)*L2 + ((pi**5*C1*C5 + pi**5*C1*C6)*C7 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C8 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9)*L3)*L4)*ZS)*freq**5 + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5)*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C9*L1 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C9*L2 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*C9*L3 + (-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8)*C9*L4)*ZL*ZS + (((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C5 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C6 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C7)*L1 + ((16*I*pi**4*C3 + 16*I*pi**4*C4)*C5 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C6 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C7)*L2)*L3 + (((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C7 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C8 + (16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C9)*L1 + ((16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C7 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C8 + (16*I*pi**4*C3 + 16*I*pi**4*C4 + 16*I*pi**4*C5)*C9)*L2 + ((16*I*pi**4*C5 + 16*I*pi**4*C6)*C7 + (16*I*pi**4*C5 + 16*I*pi**4*C6 + 16*I*pi**4*C7)*C8 + (16*I*pi**4*C5 + 16*I*pi**4*C6 + 16*I*pi**4*C7)*C9)*L3)*L4)*freq**4 + 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C9*L1 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C9*L2 + (pi**3*C5 + pi**3*C6 + pi**3*C7)*C9*L3 + (pi**3*C7 + pi**3*C8)*C9*L4)*ZL - ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L3 + (pi**3*C1*C7 + pi**3*C1*C8 + pi**3*C1*C9)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C9*ZL*ZS + (-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L1 + (-4*I*pi**2*C3 - 4*I*pi**2*C4 - 4*I*pi**2*C5)*L2 + (-4*I*pi**2*C5 - 4*I*pi**2*C6 - 4*I*pi**2*C7)*L3 + (-4*I*pi**2*C7 - 4*I*pi**2*C8 - 4*I*pi**2*C9)*L4)*freq**2 - 2*(pi*C9*ZL - pi*C1*ZS)*freq + I)/((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8)*C9*L1*L2*L3*L4*ZL*ZS*freq**10 + 512*(((((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7)*C8)*C9*L1*L2*L3*L4*ZL + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C8 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9)*L1*L2*L3*L4*ZS)*freq**9 + (((((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C8 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9)*L1*L2*L3*L4 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*C9*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8)*C9*L1*L2 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8)*C9*L1 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8)*C9*L2)*L3)*L4)*ZL*ZS)*freq**8 - 128*(((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7)*C9*L1*L2*L3 + ((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C8)*C9*L1*L2 + ((((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7)*C8)*C9*L1 + (((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7)*C8)*C9*L2)*L3)*L4)*ZL + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L1*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C8 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9)*L1*L2 + ((((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C8 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9)*L1 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C8 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9)*L2)*L3)*L4)*ZS)*freq**7 + ((((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L1*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C9*L1*L2 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*C9*L1 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*C9*L2)*L3 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8)*C9*L1 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8)*C9*L2 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8)*C9*L3)*L4)*ZL*ZS + ((((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9)*L1*L2 + ((((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9)*L1 + (((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C8 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9)*L2)*L3)*L4)*freq**6 + 32*((((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C9*L1*L2 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7)*C9*L1 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7)*C9*L2)*L3 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C7 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C8)*C9*L1 + ((pi**5*C3 + pi**5*C4 + pi**5*C5)*C7 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C8)*C9*L2 + ((pi**5*C5 + pi**5*C6)*C7 + (pi**5*C5 + pi**5*C6 + pi**5*C7)*C8)*C9*L3)*L4)*ZL + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L2)*L3 + (((pi**5*C1*C2 + pi**5*C1*C3)*C7 + (pi**5*C1*C2 + pi**5*C1*C3)*C8 + (pi**5*C1*C2 + pi**5*C1*C3)*C9)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C8 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9)*L2 + ((pi**5*C1*C5 + pi**5*C1*C6)*C7 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C8 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9)*L3)*L4)*ZS)*freq**5 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C9*L1 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C9*L2 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*C9*L3 + (-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8)*C9*L4)*ZL*ZS + (((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L1 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L2)*L3 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C8 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9)*L1 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C8 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9)*L2 + ((-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C8 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9)*L3)*L4)*freq**4 - 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C9*L1 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C9*L2 + (pi**3*C5 + pi**3*C6 + pi**3*C7)*C9*L3 + (pi**3*C7 + pi**3*C8)*C9*L4)*ZL + ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L3 + (pi**3*C1*C7 + pi**3*C1*C8 + pi**3*C1*C9)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C9*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L1 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L2 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L3 + (4*I*pi**2*C7 + 4*I*pi**2*C8 + 4*I*pi**2*C9)*L4)*freq**2 + 2*(pi*C9*ZL + pi*C1*ZS)*freq - I)

                S21 = 1024*pi**9*C1*C3*C5*C7*C9*L1*L2*L3*L4*ZL*ZS*freq**9/(((((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6)*C7 + ((1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4)*C5 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C6 + (1024*I*pi**10*C1*C2*C3 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C4 + (1024*I*pi**10*C1*C2 + 1024*I*pi**10*C1*C3)*C5)*C7)*C8)*C9*L1*L2*L3*L4*ZL*ZS*freq**10 + 512*(((((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6)*C7 + (((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4)*C5 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C6 + ((pi**9*C1 + pi**9*C2)*C3 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C4 + (pi**9*C1 + pi**9*C2 + pi**9*C3)*C5)*C7)*C8)*C9*L1*L2*L3*L4*ZL + (((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6)*C7 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C8 + ((pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4)*C5 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C6 + (pi**9*C1*C2*C3 + (pi**9*C1*C2 + pi**9*C1*C3)*C4 + (pi**9*C1*C2 + pi**9*C1*C3)*C5)*C7)*C9)*L1*L2*L3*L4*ZS)*freq**9 + (((((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6)*C7 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C8 + (((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4)*C5 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C6 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C4 + (-256*I*pi**8*C1 - 256*I*pi**8*C2 - 256*I*pi**8*C3)*C5)*C7)*C9)*L1*L2*L3*L4 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4)*C5 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C6 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7)*C9*L1*L2*L3 + (((-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C7 + (-256*I*pi**8*C1*C2*C3 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5)*C8)*C9*L1*L2 + ((((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6)*C7 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C5 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C6 + (-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C7)*C8)*C9*L1 + (((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6)*C7 + ((-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4)*C5 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C6 + (-256*I*pi**8*C1*C3 - 256*I*pi**8*C1*C4 - 256*I*pi**8*C1*C5)*C7)*C8)*C9*L2)*L3)*L4)*ZL*ZS)*freq**8 - 128*(((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4)*C5 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C6 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7)*C9*L1*L2*L3 + ((((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C7 + ((pi**7*C1 + pi**7*C2)*C3 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C4 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C5)*C8)*C9*L1*L2 + ((((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6)*C7 + ((pi**7*C1 + pi**7*C2 + pi**7*C3)*C5 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C6 + (pi**7*C1 + pi**7*C2 + pi**7*C3)*C7)*C8)*C9*L1 + (((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6)*C7 + ((pi**7*C3 + pi**7*C4)*C5 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C6 + (pi**7*C3 + pi**7*C4 + pi**7*C5)*C7)*C8)*C9*L2)*L3)*L4)*ZL + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4)*C5 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C6 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7)*L1*L2*L3 + (((pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C7 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C8 + (pi**7*C1*C2*C3 + (pi**7*C1*C2 + pi**7*C1*C3)*C4 + (pi**7*C1*C2 + pi**7*C1*C3)*C5)*C9)*L1*L2 + ((((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6)*C7 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C8 + ((pi**7*C1*C2 + pi**7*C1*C3)*C5 + (pi**7*C1*C2 + pi**7*C1*C3)*C6 + (pi**7*C1*C2 + pi**7*C1*C3)*C7)*C9)*L1 + (((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6)*C7 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C8 + ((pi**7*C1*C3 + pi**7*C1*C4)*C5 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C6 + (pi**7*C1*C3 + pi**7*C1*C4 + pi**7*C1*C5)*C7)*C9)*L2)*L3)*L4)*ZS)*freq**7 + ((((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4)*C5 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C6 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7)*L1*L2*L3 + ((64*I*pi**6*C1*C2*C3 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5)*C9*L1*L2 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C5 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C6 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7)*C9*L1 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*C5 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C6 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7)*C9*L2)*L3 + (((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C7 + (64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C8)*C9*L1 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C7 + (64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4 + 64*I*pi**6*C1*C5)*C8)*C9*L2 + ((64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6)*C7 + (64*I*pi**6*C1*C5 + 64*I*pi**6*C1*C6 + 64*I*pi**6*C1*C7)*C8)*C9*L3)*L4)*ZL*ZS + ((((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5)*C9)*L1*L2 + ((((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6)*C7 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C8 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C5 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C6 + (64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C7)*C9)*L1 + (((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6)*C7 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C8 + ((64*I*pi**6*C3 + 64*I*pi**6*C4)*C5 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C6 + (64*I*pi**6*C3 + 64*I*pi**6*C4 + 64*I*pi**6*C5)*C7)*C9)*L2)*L3)*L4)*freq**6 + 32*((((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C4 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C5)*C9*L1*L2 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C5 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C6 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C7)*C9*L1 + ((pi**5*C3 + pi**5*C4)*C5 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C6 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C7)*C9*L2)*L3 + (((pi**5*C1 + pi**5*C2 + pi**5*C3)*C7 + (pi**5*C1 + pi**5*C2 + pi**5*C3)*C8)*C9*L1 + ((pi**5*C3 + pi**5*C4 + pi**5*C5)*C7 + (pi**5*C3 + pi**5*C4 + pi**5*C5)*C8)*C9*L2 + ((pi**5*C5 + pi**5*C6)*C7 + (pi**5*C5 + pi**5*C6 + pi**5*C7)*C8)*C9*L3)*L4)*ZL + ((pi**5*C1*C2*C3 + (pi**5*C1*C2 + pi**5*C1*C3)*C4 + (pi**5*C1*C2 + pi**5*C1*C3)*C5)*L1*L2 + (((pi**5*C1*C2 + pi**5*C1*C3)*C5 + (pi**5*C1*C2 + pi**5*C1*C3)*C6 + (pi**5*C1*C2 + pi**5*C1*C3)*C7)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4)*C5 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C6 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7)*L2)*L3 + (((pi**5*C1*C2 + pi**5*C1*C3)*C7 + (pi**5*C1*C2 + pi**5*C1*C3)*C8 + (pi**5*C1*C2 + pi**5*C1*C3)*C9)*L1 + ((pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C7 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C8 + (pi**5*C1*C3 + pi**5*C1*C4 + pi**5*C1*C5)*C9)*L2 + ((pi**5*C1*C5 + pi**5*C1*C6)*C7 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C8 + (pi**5*C1*C5 + pi**5*C1*C6 + pi**5*C1*C7)*C9)*L3)*L4)*ZS)*freq**5 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5)*L1*L2 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*C9*L1 + (-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4 - 16*I*pi**4*C1*C5)*C9*L2 + (-16*I*pi**4*C1*C5 - 16*I*pi**4*C1*C6 - 16*I*pi**4*C1*C7)*C9*L3 + (-16*I*pi**4*C1*C7 - 16*I*pi**4*C1*C8)*C9*L4)*ZL*ZS + (((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C5 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C6 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7)*L1 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*C5 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C6 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7)*L2)*L3 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C7 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C8 + (-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C9)*L1 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C7 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C8 + (-16*I*pi**4*C3 - 16*I*pi**4*C4 - 16*I*pi**4*C5)*C9)*L2 + ((-16*I*pi**4*C5 - 16*I*pi**4*C6)*C7 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C8 + (-16*I*pi**4*C5 - 16*I*pi**4*C6 - 16*I*pi**4*C7)*C9)*L3)*L4)*freq**4 - 8*(((pi**3*C1 + pi**3*C2 + pi**3*C3)*C9*L1 + (pi**3*C3 + pi**3*C4 + pi**3*C5)*C9*L2 + (pi**3*C5 + pi**3*C6 + pi**3*C7)*C9*L3 + (pi**3*C7 + pi**3*C8)*C9*L4)*ZL + ((pi**3*C1*C2 + pi**3*C1*C3)*L1 + (pi**3*C1*C3 + pi**3*C1*C4 + pi**3*C1*C5)*L2 + (pi**3*C1*C5 + pi**3*C1*C6 + pi**3*C1*C7)*L3 + (pi**3*C1*C7 + pi**3*C1*C8 + pi**3*C1*C9)*L4)*ZS)*freq**3 + (4*I*pi**2*C1*C9*ZL*ZS + (4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L1 + (4*I*pi**2*C3 + 4*I*pi**2*C4 + 4*I*pi**2*C5)*L2 + (4*I*pi**2*C5 + 4*I*pi**2*C6 + 4*I*pi**2*C7)*L3 + (4*I*pi**2*C7 + 4*I*pi**2*C8 + 4*I*pi**2*C9)*L4)*freq**2 + 2*(pi*C9*ZL + pi*C1*ZS)*freq - I)*np.sqrt(ZL*ZS))
            
            else:
                x = []
                code = []

                x.append([comp_val['C1']])
                code.append('CS')

                for i in range(1, network_type['N']+1):
                    x.append([comp_val['C' + str(2*i)]])
                    code.append('CP')
                    x.append([comp_val['L' + str(i)]])
                    code.append('LP')

                    x.append([comp_val['C'+ str(2*i+1)]])
                    code.append('CS')

                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
        if(network_type['DC_Type'] == 'L-Coupled Shunt Resonators'):
            if(network_type['N'] == 1):
                
                L1 = comp_val['L1']
                L2 = comp_val['L2']
                C1 = comp_val['C1']
                L3 = comp_val['L3']

                S11 = (16*I*pi**4*C1*L1*L2*L3*freq**4 + 8*(pi**3*C1*L1*L2*ZL - pi**3*C1*L2*L3*ZS)*freq**3 + (4*I*pi**2*C1*L2*ZL*ZS - 4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*freq**2 - I*ZL*ZS - 2*((pi*L1 + pi*L2)*ZL - (pi*L2 + pi*L3)*ZS)*freq)/(16*I*pi**4*C1*L1*L2*L3*freq**4 + 8*(pi**3*C1*L1*L2*ZL + pi**3*C1*L2*L3*ZS)*freq**3 + (-4*I*pi**2*C1*L2*ZL*ZS - 4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*freq**2 + I*ZL*ZS - 2*((pi*L1 + pi*L2)*ZL + (pi*L2 + pi*L3)*ZS)*freq)

                S21 = -4*pi*L2*ZL*ZS*freq/((16*I*pi**4*C1*L1*L2*L3*freq**4 + 8*(pi**3*C1*L1*L2*ZL + pi**3*C1*L2*L3*ZS)*freq**3 + (-4*I*pi**2*C1*L2*ZL*ZS - 4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*freq**2 + I*ZL*ZS - 2*((pi*L1 + pi*L2)*ZL + (pi*L2 + pi*L3)*ZS)*freq)*np.sqrt(ZL*ZS))
            
            elif(network_type['N'] == 2):
                
                L1 = comp_val['L1']
                L2 = comp_val['L2']
                C1 = comp_val['C1']
                L3 = comp_val['L3']
                L4 = comp_val['L4']
                C2 = comp_val['C2']
                L5 = comp_val['L5']

                S11 = (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*freq**6 + 32*(pi**5*C1*C2*L1*L2*L3*L4*ZL - pi**5*C1*C2*L2*L3*L4*L5*ZS)*freq**5 + (16*I*pi**4*C1*C2*L2*L3*L4*ZL*ZS - 16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*freq**4 - 8*((pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*ZL - (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*ZS)*freq**3 + (I*L2 + I*L3 + I*L4)*ZL*ZS + ((-4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L4)*ZL*ZS + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*freq**2 + 2*((pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*ZL - ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*ZS)*freq)/(64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*freq**6 + 32*(pi**5*C1*C2*L1*L2*L3*L4*ZL + pi**5*C1*C2*L2*L3*L4*L5*ZS)*freq**5 + (-16*I*pi**4*C1*C2*L2*L3*L4*ZL*ZS - 16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*freq**4 - 8*((pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*ZL + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*ZS)*freq**3 + (-I*L2 - I*L3 - I*L4)*ZL*ZS + ((4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*ZL*ZS + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*freq**2 + 2*((pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*ZL + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*ZS)*freq)

                S21 = 4*pi*L2*L4*ZL*ZS*freq/((64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*freq**6 + 32*(pi**5*C1*C2*L1*L2*L3*L4*ZL + pi**5*C1*C2*L2*L3*L4*L5*ZS)*freq**5 + (-16*I*pi**4*C1*C2*L2*L3*L4*ZL*ZS - 16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*freq**4 - 8*((pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*ZL + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*ZS)*freq**3 + (-I*L2 - I*L3 - I*L4)*ZL*ZS + ((4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*ZL*ZS + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*freq**2 + 2*((pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*ZL + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*ZS)*freq)*np.sqrt(ZL*ZS))

            elif(network_type['N'] == 3):
                
                L1 = comp_val['L1']
                L2 = comp_val['L2']
                C1 = comp_val['C1']
                L3 = comp_val['L3']
                L4 = comp_val['L4']
                C2 = comp_val['C2']
                L5 = comp_val['L5']
                L6 = comp_val['L6']
                C3 = comp_val['C3']
                L7 = comp_val['L7']

                S11 = (256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*freq**8 + 128*(pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*ZL - pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7*ZS)*freq**7 + (64*I*pi**6*C1*C2*C3*L2*L3*L4*L5*L6*ZL*ZS - 64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (-64*I*pi**6*C1*C3*L1*L2*L3 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3*L1*L2 + (-64*I*pi**6*C2*C3*L1 - 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7)*freq**6 - 32*((pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2 + (pi**5*C2*C3*L1 + pi**5*C2*C3*L2)*L3)*L4)*L5)*L6)*ZL - (pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L2*L3*L4 + (-16*I*pi**4*C1*C3*L2*L3 + (-16*I*pi**4*C2*C3*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L4)*L5)*L6)*ZL*ZS + (16*I*pi**4*C1*L1*L2*L3*L4 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2*L1 + 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*L1*L2*L3*L4 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2*L1 + 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L2 + ((16*I*pi**4*C2 + 16*I*pi**4*C3)*L1 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L2)*L3)*L4 + (16*I*pi**4*C3*L1*L2 + (16*I*pi**4*C3*L1 + 16*I*pi**4*C3*L2)*L3 + (16*I*pi**4*C3*L1 + 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7)*freq**4 + 8*((pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L1*L2 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2)*L3)*L4 + (pi**3*C3*L1*L2 + (pi**3*C3*L1 + pi**3*C3*L2)*L3 + (pi**3*C3*L1 + pi**3*C3*L2)*L4)*L5)*L6)*ZL - ((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7)*ZS)*freq**3 + ((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5 + (-I*L2 - I*L3 - I*L4)*L6)*ZL*ZS + ((4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5 + (4*I*pi**2*C1*L2*L3 + ((4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3)*L4 + (4*I*pi**2*C3*L2 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C3*L4)*L5)*L6)*ZL*ZS + ((-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*L4 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L5)*L6 + ((-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*L4 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L5 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L6)*L7)*freq**2 - 2*(((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*ZL - (((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7)*ZS)*freq)/(256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*freq**8 + 128*(pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*ZL + pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7*ZS)*freq**7 + (-64*I*pi**6*C1*C2*C3*L2*L3*L4*L5*L6*ZL*ZS - 64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (-64*I*pi**6*C1*C3*L1*L2*L3 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3*L1*L2 + (-64*I*pi**6*C2*C3*L1 - 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7)*freq**6 - 32*((pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2 + (pi**5*C2*C3*L1 + pi**5*C2*C3*L2)*L3)*L4)*L5)*L6)*ZL + (pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7)*ZS)*freq**5 + ((16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L2*L3*L4 + (16*I*pi**4*C1*C3*L2*L3 + (16*I*pi**4*C2*C3*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L4)*L5)*L6)*ZL*ZS + (16*I*pi**4*C1*L1*L2*L3*L4 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2*L1 + 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*L1*L2*L3*L4 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2*L1 + 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L2 + ((16*I*pi**4*C2 + 16*I*pi**4*C3)*L1 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L2)*L3)*L4 + (16*I*pi**4*C3*L1*L2 + (16*I*pi**4*C3*L1 + 16*I*pi**4*C3*L2)*L3 + (16*I*pi**4*C3*L1 + 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7)*freq**4 + 8*((pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L1*L2 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2)*L3)*L4 + (pi**3*C3*L1*L2 + (pi**3*C3*L1 + pi**3*C3*L2)*L3 + (pi**3*C3*L1 + pi**3*C3*L2)*L4)*L5)*L6)*ZL + ((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7)*ZS)*freq**3 + ((I*L2 + I*L3)*L4 + (I*L2 + I*L3 + I*L4)*L5 + (I*L2 + I*L3 + I*L4)*L6)*ZL*ZS + ((-4*I*pi**2*C1*L2*L3*L4 + (-4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L4)*L5 + (-4*I*pi**2*C1*L2*L3 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*L4 + (-4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3 - 4*I*pi**2*C3*L4)*L5)*L6)*ZL*ZS + ((-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*L4 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L5)*L6 + ((-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*L4 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L5 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L6)*L7)*freq**2 - 2*(((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*ZL + (((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7)*ZS)*freq)

                S21 = -4*pi*L2*L4*L6*ZL*ZS*freq/((256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*freq**8 + 128*(pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*ZL + pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7*ZS)*freq**7 + (-64*I*pi**6*C1*C2*C3*L2*L3*L4*L5*L6*ZL*ZS - 64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (-64*I*pi**6*C1*C3*L1*L2*L3 + ((-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3*L1*L2 + (-64*I*pi**6*C2*C3*L1 - 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7)*freq**6 - 32*((pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2 + (pi**5*C2*C3*L1 + pi**5*C2*C3*L2)*L3)*L4)*L5)*L6)*ZL + (pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7)*ZS)*freq**5 + ((16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L2*L3*L4 + (16*I*pi**4*C1*C3*L2*L3 + (16*I*pi**4*C2*C3*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L4)*L5)*L6)*ZL*ZS + (16*I*pi**4*C1*L1*L2*L3*L4 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2*L1 + 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*L1*L2*L3*L4 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2)*L1*L2 + (16*I*pi**4*C2*L1 + 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (16*I*pi**4*C1*L1*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*L1*L2 + ((16*I*pi**4*C2 + 16*I*pi**4*C3)*L1 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*L2)*L3)*L4 + (16*I*pi**4*C3*L1*L2 + (16*I*pi**4*C3*L1 + 16*I*pi**4*C3*L2)*L3 + (16*I*pi**4*C3*L1 + 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7)*freq**4 + 8*((pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L1*L2 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2)*L3)*L4 + (pi**3*C3*L1*L2 + (pi**3*C3*L1 + pi**3*C3*L2)*L3 + (pi**3*C3*L1 + pi**3*C3*L2)*L4)*L5)*L6)*ZL + ((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7)*ZS)*freq**3 + ((I*L2 + I*L3)*L4 + (I*L2 + I*L3 + I*L4)*L5 + (I*L2 + I*L3 + I*L4)*L6)*ZL*ZS + ((-4*I*pi**2*C1*L2*L3*L4 + (-4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L4)*L5 + (-4*I*pi**2*C1*L2*L3 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*L4 + (-4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3 - 4*I*pi**2*C3*L4)*L5)*L6)*ZL*ZS + ((-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*L4 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L5)*L6 + ((-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3)*L4 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L5 + (-4*I*pi**2*L1*L2 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L3 + (-4*I*pi**2*L1 - 4*I*pi**2*L2)*L4)*L6)*L7)*freq**2 - 2*(((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*ZL + (((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7)*ZS)*freq)*np.sqrt(ZL*ZS))
            
            elif(network_type['N'] == 4):
                
                L1 = comp_val['L1']
                L2 = comp_val['L2']
                C1 = comp_val['C1']
                L3 = comp_val['L3']
                L4 = comp_val['L4']
                C2 = comp_val['C2']
                L5 = comp_val['L5']
                L6 = comp_val['L6']
                C3 = comp_val['C3']
                L7 = comp_val['L7']
                L8 = comp_val['L8']
                C4 = comp_val['C4']
                L9 = comp_val['L9']

                S11 = (1024*I*pi**10*C1*C2*C3*C4*L1*L2*L3*L4*L5*L6*L7*L8*L9*freq**10 + 512*(pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*L6*L7*L8*ZL - pi**9*C1*C2*C3*C4*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*freq**9 + (256*I*pi**8*C1*C2*C3*C4*L2*L3*L4*L5*L6*L7*L8*ZL*ZS - 256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*L8 + (-256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7 + ((-256*I*pi**8*C1*C2*C3 - 256*I*pi**8*C1*C2*C4)*L1*L2*L3*L4*L5*L6 + (-256*I*pi**8*C1*C2*C4*L1*L2*L3*L4*L5 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4*L1*L2*L3*L4 + (-256*I*pi**8*C1*C3*C4*L1*L2*L3 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*L1*L2 + (-256*I*pi**8*C2*C3*C4*L1 - 256*I*pi**8*C2*C3*C4*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**8 - 128*((pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L1*L2*L3*L4*L5*L6 + (pi**7*C1*C2*C4*L1*L2*L3*L4*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C4*L1*L2*L3*L4 + (pi**7*C1*C3*C4*L1*L2*L3 + ((pi**7*C1 + pi**7*C2)*C3*C4*L1*L2 + (pi**7*C2*C3*C4*L1 + pi**7*C2*C3*C4*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL - (pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7*L8 + (pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L2*L3*L4*L5*L6 + (pi**7*C1*C2*C4*L2*L3*L4*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C4*L2*L3*L4 + (pi**7*C1*C3*C4*L2*L3 + (pi**7*C2*C3*C4*L3 + (pi**7*C1 + pi**7*C2)*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**7 + ((-64*I*pi**6*C1*C2*C3*L2*L3*L4*L5*L6*L7 + ((-64*I*pi**6*C1*C2*C3 - 64*I*pi**6*C1*C2*C4)*L2*L3*L4*L5*L6 + (-64*I*pi**6*C1*C2*C4*L2*L3*L4*L5 + ((-64*I*pi**6*C1*C2 - 64*I*pi**6*C1*C3)*C4*L2*L3*L4 + (-64*I*pi**6*C1*C3*C4*L2*L3 + (-64*I*pi**6*C2*C3*C4*L3 + (-64*I*pi**6*C1 - 64*I*pi**6*C2)*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (64*I*pi**6*C1*C3*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*L1*L2 + (64*I*pi**6*C2*C3*L1 + 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7)*L8 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (64*I*pi**6*C1*C3*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*L1*L2 + (64*I*pi**6*C2*C3*L1 + 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*L1*L2*L3*L4 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*L1*L2*L3 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*L1*L2 + ((64*I*pi**6*C2*C3 + 64*I*pi**6*C2*C4)*L1 + (64*I*pi**6*C2*C3 + 64*I*pi**6*C2*C4)*L2)*L3)*L4)*L5)*L6 + (64*I*pi**6*C1*C4*L1*L2*L3*L4 + (64*I*pi**6*C1*C4*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C4*L1*L2 + (64*I*pi**6*C2*C4*L1 + 64*I*pi**6*C2*C4*L2)*L3)*L4)*L5 + (64*I*pi**6*C1*C4*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L1*L2 + ((64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L1 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L2)*L3)*L4 + (64*I*pi**6*C3*C4*L1*L2 + (64*I*pi**6*C3*C4*L1 + 64*I*pi**6*C3*C4*L2)*L3 + (64*I*pi**6*C3*C4*L1 + 64*I*pi**6*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**6 + 32*((pi**5*C1*C2*L1*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2 + (pi**5*C2*C3*L1 + pi**5*C2*C3*L2)*L3)*L4)*L5)*L6)*L7 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3 + pi**5*C1*C4)*L1*L2*L3*L4 + ((pi**5*C1*C3 + pi**5*C1*C4)*L1*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L1*L2 + ((pi**5*C2*C3 + pi**5*C2*C4)*L1 + (pi**5*C2*C3 + pi**5*C2*C4)*L2)*L3)*L4)*L5)*L6 + (pi**5*C1*C4*L1*L2*L3*L4 + (pi**5*C1*C4*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C4*L1*L2 + (pi**5*C2*C4*L1 + pi**5*C2*C4*L2)*L3)*L4)*L5 + (pi**5*C1*C4*L1*L2*L3 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C4*L1*L2 + ((pi**5*C2 + pi**5*C3)*C4*L1 + (pi**5*C2 + pi**5*C3)*C4*L2)*L3)*L4 + (pi**5*C3*C4*L1*L2 + (pi**5*C3*C4*L1 + pi**5*C3*C4*L2)*L3 + (pi**5*C3*C4*L1 + pi**5*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*ZL - ((pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7)*L8 + (pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3 + pi**5*C1*C4)*L2*L3*L4 + ((pi**5*C1*C3 + pi**5*C1*C4)*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L2 + (pi**5*C2*C3 + pi**5*C2*C4)*L3)*L4)*L5)*L6 + (pi**5*C1*C4*L2*L3*L4 + (pi**5*C1*C4*L2*L3 + (pi**5*C2*C4*L3 + (pi**5*C1 + pi**5*C2)*C4*L2)*L4)*L5 + (pi**5*C1*C4*L2*L3 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C4*L2 + (pi**5*C2 + pi**5*C3)*C4*L3)*L4 + (pi**5*C3*C4*L2 + pi**5*C3*C4*L3 + pi**5*C3*C4*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**5 + ((16*I*pi**4*C1*C2*L2*L3*L4*L5*L6 + (16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3)*L2*L3*L4 + (16*I*pi**4*C1*C3*L2*L3 + (16*I*pi**4*C2*C3*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C3*L2)*L4)*L5)*L6)*L7 + (16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((16*I*pi**4*C1*C2 + 16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4)*L2*L3*L4 + ((16*I*pi**4*C1*C3 + 16*I*pi**4*C1*C4)*L2*L3 + (((16*I*pi**4*C1 + 16*I*pi**4*C2)*C3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C4)*L2 + (16*I*pi**4*C2*C3 + 16*I*pi**4*C2*C4)*L3)*L4)*L5)*L6 + (16*I*pi**4*C1*C4*L2*L3*L4 + (16*I*pi**4*C1*C4*L2*L3 + (16*I*pi**4*C2*C4*L3 + (16*I*pi**4*C1 + 16*I*pi**4*C2)*C4*L2)*L4)*L5 + (16*I*pi**4*C1*C4*L2*L3 + ((16*I*pi**4*C1 + 16*I*pi**4*C2 + 16*I*pi**4*C3)*C4*L2 + (16*I*pi**4*C2 + 16*I*pi**4*C3)*C4*L3)*L4 + (16*I*pi**4*C3*C4*L2 + 16*I*pi**4*C3*C4*L3 + 16*I*pi**4*C3*C4*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L2)*L3)*L4 + (-16*I*pi**4*C3*L1*L2 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L3 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7)*L8 + ((-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L2)*L3)*L4 + (-16*I*pi**4*C3*L1*L2 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L3 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L3)*L4 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L2 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L4)*L5)*L6 + ((-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3)*L4 + (-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L4)*L5 + (-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L4)*L6)*L7)*L8)*L9)*freq**4 - 8*(((pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5)*L6 + (pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L1*L2 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2)*L3)*L4 + (pi**3*C3*L1*L2 + (pi**3*C3*L1 + pi**3*C3*L2)*L3 + (pi**3*C3*L1 + pi**3*C3*L2)*L4)*L5)*L6)*L7 + (pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3 + pi**3*C4)*L1*L2 + ((pi**3*C2 + pi**3*C3 + pi**3*C4)*L1 + (pi**3*C2 + pi**3*C3 + pi**3*C4)*L2)*L3)*L4 + ((pi**3*C3 + pi**3*C4)*L1*L2 + ((pi**3*C3 + pi**3*C4)*L1 + (pi**3*C3 + pi**3*C4)*L2)*L3 + ((pi**3*C3 + pi**3*C4)*L1 + (pi**3*C3 + pi**3*C4)*L2)*L4)*L5)*L6 + ((pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3)*L4 + (pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3 + (pi**3*C4*L1 + pi**3*C4*L2)*L4)*L5 + (pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3 + (pi**3*C4*L1 + pi**3*C4*L2)*L4)*L6)*L7)*L8)*ZL - (((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7)*L8 + ((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3 + pi**3*C4)*L2 + (pi**3*C2 + pi**3*C3 + pi**3*C4)*L3)*L4 + ((pi**3*C3 + pi**3*C4)*L2 + (pi**3*C3 + pi**3*C4)*L3 + (pi**3*C3 + pi**3*C4)*L4)*L5)*L6 + ((pi**3*C4*L2 + pi**3*C4*L3)*L4 + (pi**3*C4*L2 + pi**3*C4*L3 + pi**3*C4*L4)*L5 + (pi**3*C4*L2 + pi**3*C4*L3 + pi**3*C4*L4)*L6)*L7)*L8)*L9)*ZS)*freq**3 + (((I*L2 + I*L3)*L4 + (I*L2 + I*L3 + I*L4)*L5)*L6 + ((I*L2 + I*L3)*L4 + (I*L2 + I*L3 + I*L4)*L5 + (I*L2 + I*L3 + I*L4)*L6)*L7 + ((I*L2 + I*L3)*L4 + (I*L2 + I*L3 + I*L4)*L5 + (I*L2 + I*L3 + I*L4)*L6)*L8)*ZL*ZS + (((-4*I*pi**2*C1*L2*L3*L4 + (-4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L4)*L5)*L6 + (-4*I*pi**2*C1*L2*L3*L4 + (-4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L4)*L5 + (-4*I*pi**2*C1*L2*L3 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3)*L3)*L4 + (-4*I*pi**2*C3*L2 - 4*I*pi**2*C3*L3 - 4*I*pi**2*C3*L4)*L5)*L6)*L7 + (-4*I*pi**2*C1*L2*L3*L4 + (-4*I*pi**2*C1*L2*L3 + (-4*I*pi**2*C2*L3 + (-4*I*pi**2*C1 - 4*I*pi**2*C2)*L2)*L4)*L5 + (-4*I*pi**2*C1*L2*L3 + ((-4*I*pi**2*C1 - 4*I*pi**2*C2 - 4*I*pi**2*C3 - 4*I*pi**2*C4)*L2 + (-4*I*pi**2*C2 - 4*I*pi**2*C3 - 4*I*pi**2*C4)*L3)*L4 + ((-4*I*pi**2*C3 - 4*I*pi**2*C4)*L2 + (-4*I*pi**2*C3 - 4*I*pi**2*C4)*L3 + (-4*I*pi**2*C3 - 4*I*pi**2*C4)*L4)*L5)*L6 + ((-4*I*pi**2*C4*L2 - 4*I*pi**2*C4*L3)*L4 + (-4*I*pi**2*C4*L2 - 4*I*pi**2*C4*L3 - 4*I*pi**2*C4*L4)*L5 + (-4*I*pi**2*C4*L2 - 4*I*pi**2*C4*L3 - 4*I*pi**2*C4*L4)*L6)*L7)*L8)*ZL*ZS + (((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*L6 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L7)*L8 + (((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*L6 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L7 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L8)*L9)*freq**2 + 2*((((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5)*L6 + ((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*L7 + ((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*L8)*ZL - ((((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7)*L8 + (((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L8)*L9)*ZS)*freq)/(1024*I*pi**10*C1*C2*C3*C4*L1*L2*L3*L4*L5*L6*L7*L8*L9*freq**10 + 512*(pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*L6*L7*L8*ZL + pi**9*C1*C2*C3*C4*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*freq**9 + (-256*I*pi**8*C1*C2*C3*C4*L2*L3*L4*L5*L6*L7*L8*ZL*ZS - 256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*L8 + (-256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7 + ((-256*I*pi**8*C1*C2*C3 - 256*I*pi**8*C1*C2*C4)*L1*L2*L3*L4*L5*L6 + (-256*I*pi**8*C1*C2*C4*L1*L2*L3*L4*L5 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4*L1*L2*L3*L4 + (-256*I*pi**8*C1*C3*C4*L1*L2*L3 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*L1*L2 + (-256*I*pi**8*C2*C3*C4*L1 - 256*I*pi**8*C2*C3*C4*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**8 - 128*((pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L1*L2*L3*L4*L5*L6 + (pi**7*C1*C2*C4*L1*L2*L3*L4*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C4*L1*L2*L3*L4 + (pi**7*C1*C3*C4*L1*L2*L3 + ((pi**7*C1 + pi**7*C2)*C3*C4*L1*L2 + (pi**7*C2*C3*C4*L1 + pi**7*C2*C3*C4*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL + (pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7*L8 + (pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L2*L3*L4*L5*L6 + (pi**7*C1*C2*C4*L2*L3*L4*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C4*L2*L3*L4 + (pi**7*C1*C3*C4*L2*L3 + (pi**7*C2*C3*C4*L3 + (pi**7*C1 + pi**7*C2)*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**7 + ((64*I*pi**6*C1*C2*C3*L2*L3*L4*L5*L6*L7 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*C4*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*L2*L3*L4 + (64*I*pi**6*C1*C3*C4*L2*L3 + (64*I*pi**6*C2*C3*C4*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (64*I*pi**6*C1*C3*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*L1*L2 + (64*I*pi**6*C2*C3*L1 + 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7)*L8 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (64*I*pi**6*C1*C3*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*L1*L2 + (64*I*pi**6*C2*C3*L1 + 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*L1*L2*L3*L4 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*L1*L2*L3 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*L1*L2 + ((64*I*pi**6*C2*C3 + 64*I*pi**6*C2*C4)*L1 + (64*I*pi**6*C2*C3 + 64*I*pi**6*C2*C4)*L2)*L3)*L4)*L5)*L6 + (64*I*pi**6*C1*C4*L1*L2*L3*L4 + (64*I*pi**6*C1*C4*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C4*L1*L2 + (64*I*pi**6*C2*C4*L1 + 64*I*pi**6*C2*C4*L2)*L3)*L4)*L5 + (64*I*pi**6*C1*C4*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L1*L2 + ((64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L1 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L2)*L3)*L4 + (64*I*pi**6*C3*C4*L1*L2 + (64*I*pi**6*C3*C4*L1 + 64*I*pi**6*C3*C4*L2)*L3 + (64*I*pi**6*C3*C4*L1 + 64*I*pi**6*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**6 + 32*((pi**5*C1*C2*L1*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2 + (pi**5*C2*C3*L1 + pi**5*C2*C3*L2)*L3)*L4)*L5)*L6)*L7 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3 + pi**5*C1*C4)*L1*L2*L3*L4 + ((pi**5*C1*C3 + pi**5*C1*C4)*L1*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L1*L2 + ((pi**5*C2*C3 + pi**5*C2*C4)*L1 + (pi**5*C2*C3 + pi**5*C2*C4)*L2)*L3)*L4)*L5)*L6 + (pi**5*C1*C4*L1*L2*L3*L4 + (pi**5*C1*C4*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C4*L1*L2 + (pi**5*C2*C4*L1 + pi**5*C2*C4*L2)*L3)*L4)*L5 + (pi**5*C1*C4*L1*L2*L3 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C4*L1*L2 + ((pi**5*C2 + pi**5*C3)*C4*L1 + (pi**5*C2 + pi**5*C3)*C4*L2)*L3)*L4 + (pi**5*C3*C4*L1*L2 + (pi**5*C3*C4*L1 + pi**5*C3*C4*L2)*L3 + (pi**5*C3*C4*L1 + pi**5*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*ZL + ((pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7)*L8 + (pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3 + pi**5*C1*C4)*L2*L3*L4 + ((pi**5*C1*C3 + pi**5*C1*C4)*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L2 + (pi**5*C2*C3 + pi**5*C2*C4)*L3)*L4)*L5)*L6 + (pi**5*C1*C4*L2*L3*L4 + (pi**5*C1*C4*L2*L3 + (pi**5*C2*C4*L3 + (pi**5*C1 + pi**5*C2)*C4*L2)*L4)*L5 + (pi**5*C1*C4*L2*L3 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C4*L2 + (pi**5*C2 + pi**5*C3)*C4*L3)*L4 + (pi**5*C3*C4*L2 + pi**5*C3*C4*L3 + pi**5*C3*C4*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2*L2*L3*L4*L5*L6 + (-16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L2*L3*L4 + (-16*I*pi**4*C1*C3*L2*L3 + (-16*I*pi**4*C2*C3*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L4)*L5)*L6)*L7 + (-16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L2*L3*L4 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L2*L3 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L2 + (-16*I*pi**4*C2*C3 - 16*I*pi**4*C2*C4)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*C4*L2*L3*L4 + (-16*I*pi**4*C1*C4*L2*L3 + (-16*I*pi**4*C2*C4*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4*L2)*L4)*L5 + (-16*I*pi**4*C1*C4*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L3)*L4 + (-16*I*pi**4*C3*C4*L2 - 16*I*pi**4*C3*C4*L3 - 16*I*pi**4*C3*C4*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L2)*L3)*L4 + (-16*I*pi**4*C3*L1*L2 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L3 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7)*L8 + ((-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L2)*L3)*L4 + (-16*I*pi**4*C3*L1*L2 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L3 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L3)*L4 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L2 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L4)*L5)*L6 + ((-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3)*L4 + (-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L4)*L5 + (-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L4)*L6)*L7)*L8)*L9)*freq**4 - 8*(((pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5)*L6 + (pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L1*L2 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2)*L3)*L4 + (pi**3*C3*L1*L2 + (pi**3*C3*L1 + pi**3*C3*L2)*L3 + (pi**3*C3*L1 + pi**3*C3*L2)*L4)*L5)*L6)*L7 + (pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3 + pi**3*C4)*L1*L2 + ((pi**3*C2 + pi**3*C3 + pi**3*C4)*L1 + (pi**3*C2 + pi**3*C3 + pi**3*C4)*L2)*L3)*L4 + ((pi**3*C3 + pi**3*C4)*L1*L2 + ((pi**3*C3 + pi**3*C4)*L1 + (pi**3*C3 + pi**3*C4)*L2)*L3 + ((pi**3*C3 + pi**3*C4)*L1 + (pi**3*C3 + pi**3*C4)*L2)*L4)*L5)*L6 + ((pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3)*L4 + (pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3 + (pi**3*C4*L1 + pi**3*C4*L2)*L4)*L5 + (pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3 + (pi**3*C4*L1 + pi**3*C4*L2)*L4)*L6)*L7)*L8)*ZL + (((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7)*L8 + ((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3 + pi**3*C4)*L2 + (pi**3*C2 + pi**3*C3 + pi**3*C4)*L3)*L4 + ((pi**3*C3 + pi**3*C4)*L2 + (pi**3*C3 + pi**3*C4)*L3 + (pi**3*C3 + pi**3*C4)*L4)*L5)*L6 + ((pi**3*C4*L2 + pi**3*C4*L3)*L4 + (pi**3*C4*L2 + pi**3*C4*L3 + pi**3*C4*L4)*L5 + (pi**3*C4*L2 + pi**3*C4*L3 + pi**3*C4*L4)*L6)*L7)*L8)*L9)*ZS)*freq**3 + (((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5)*L6 + ((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5 + (-I*L2 - I*L3 - I*L4)*L6)*L7 + ((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5 + (-I*L2 - I*L3 - I*L4)*L6)*L8)*ZL*ZS + (((4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5)*L6 + (4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5 + (4*I*pi**2*C1*L2*L3 + ((4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3)*L4 + (4*I*pi**2*C3*L2 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C3*L4)*L5)*L6)*L7 + (4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5 + (4*I*pi**2*C1*L2*L3 + ((4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3 + 4*I*pi**2*C4)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3 + 4*I*pi**2*C4)*L3)*L4 + ((4*I*pi**2*C3 + 4*I*pi**2*C4)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L3 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L4)*L5)*L6 + ((4*I*pi**2*C4*L2 + 4*I*pi**2*C4*L3)*L4 + (4*I*pi**2*C4*L2 + 4*I*pi**2*C4*L3 + 4*I*pi**2*C4*L4)*L5 + (4*I*pi**2*C4*L2 + 4*I*pi**2*C4*L3 + 4*I*pi**2*C4*L4)*L6)*L7)*L8)*ZL*ZS + (((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*L6 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L7)*L8 + (((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*L6 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L7 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L8)*L9)*freq**2 + 2*((((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5)*L6 + ((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*L7 + ((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*L8)*ZL + ((((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7)*L8 + (((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L8)*L9)*ZS)*freq)

                S21 = 4*pi*L2*L4*L6*L8*ZL*ZS*freq/((1024*I*pi**10*C1*C2*C3*C4*L1*L2*L3*L4*L5*L6*L7*L8*L9*freq**10 + 512*(pi**9*C1*C2*C3*C4*L1*L2*L3*L4*L5*L6*L7*L8*ZL + pi**9*C1*C2*C3*C4*L2*L3*L4*L5*L6*L7*L8*L9*ZS)*freq**9 + (-256*I*pi**8*C1*C2*C3*C4*L2*L3*L4*L5*L6*L7*L8*ZL*ZS - 256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7*L8 + (-256*I*pi**8*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7 + ((-256*I*pi**8*C1*C2*C3 - 256*I*pi**8*C1*C2*C4)*L1*L2*L3*L4*L5*L6 + (-256*I*pi**8*C1*C2*C4*L1*L2*L3*L4*L5 + ((-256*I*pi**8*C1*C2 - 256*I*pi**8*C1*C3)*C4*L1*L2*L3*L4 + (-256*I*pi**8*C1*C3*C4*L1*L2*L3 + ((-256*I*pi**8*C1 - 256*I*pi**8*C2)*C3*C4*L1*L2 + (-256*I*pi**8*C2*C3*C4*L1 - 256*I*pi**8*C2*C3*C4*L2)*L3)*L4)*L5)*L6)*L7)*L8)*L9)*freq**8 - 128*((pi**7*C1*C2*C3*L1*L2*L3*L4*L5*L6*L7 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L1*L2*L3*L4*L5*L6 + (pi**7*C1*C2*C4*L1*L2*L3*L4*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C4*L1*L2*L3*L4 + (pi**7*C1*C3*C4*L1*L2*L3 + ((pi**7*C1 + pi**7*C2)*C3*C4*L1*L2 + (pi**7*C2*C3*C4*L1 + pi**7*C2*C3*C4*L2)*L3)*L4)*L5)*L6)*L7)*L8)*ZL + (pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7*L8 + (pi**7*C1*C2*C3*L2*L3*L4*L5*L6*L7 + ((pi**7*C1*C2*C3 + pi**7*C1*C2*C4)*L2*L3*L4*L5*L6 + (pi**7*C1*C2*C4*L2*L3*L4*L5 + ((pi**7*C1*C2 + pi**7*C1*C3)*C4*L2*L3*L4 + (pi**7*C1*C3*C4*L2*L3 + (pi**7*C2*C3*C4*L3 + (pi**7*C1 + pi**7*C2)*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**7 + ((64*I*pi**6*C1*C2*C3*L2*L3*L4*L5*L6*L7 + ((64*I*pi**6*C1*C2*C3 + 64*I*pi**6*C1*C2*C4)*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*C4*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*C4*L2*L3*L4 + (64*I*pi**6*C1*C3*C4*L2*L3 + (64*I*pi**6*C2*C3*C4*L3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*ZL*ZS + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (64*I*pi**6*C1*C3*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*L1*L2 + (64*I*pi**6*C2*C3*L1 + 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7)*L8 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5*L6 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3)*L1*L2*L3*L4 + (64*I*pi**6*C1*C3*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3*L1*L2 + (64*I*pi**6*C2*C3*L1 + 64*I*pi**6*C2*C3*L2)*L3)*L4)*L5)*L6)*L7 + (64*I*pi**6*C1*C2*L1*L2*L3*L4*L5 + ((64*I*pi**6*C1*C2 + 64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*L1*L2*L3*L4 + ((64*I*pi**6*C1*C3 + 64*I*pi**6*C1*C4)*L1*L2*L3 + (((64*I*pi**6*C1 + 64*I*pi**6*C2)*C3 + (64*I*pi**6*C1 + 64*I*pi**6*C2)*C4)*L1*L2 + ((64*I*pi**6*C2*C3 + 64*I*pi**6*C2*C4)*L1 + (64*I*pi**6*C2*C3 + 64*I*pi**6*C2*C4)*L2)*L3)*L4)*L5)*L6 + (64*I*pi**6*C1*C4*L1*L2*L3*L4 + (64*I*pi**6*C1*C4*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2)*C4*L1*L2 + (64*I*pi**6*C2*C4*L1 + 64*I*pi**6*C2*C4*L2)*L3)*L4)*L5 + (64*I*pi**6*C1*C4*L1*L2*L3 + ((64*I*pi**6*C1 + 64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L1*L2 + ((64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L1 + (64*I*pi**6*C2 + 64*I*pi**6*C3)*C4*L2)*L3)*L4 + (64*I*pi**6*C3*C4*L1*L2 + (64*I*pi**6*C3*C4*L1 + 64*I*pi**6*C3*C4*L2)*L3 + (64*I*pi**6*C3*C4*L1 + 64*I*pi**6*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*L9)*freq**6 + 32*((pi**5*C1*C2*L1*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L1*L2*L3*L4 + (pi**5*C1*C3*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C3*L1*L2 + (pi**5*C2*C3*L1 + pi**5*C2*C3*L2)*L3)*L4)*L5)*L6)*L7 + (pi**5*C1*C2*L1*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3 + pi**5*C1*C4)*L1*L2*L3*L4 + ((pi**5*C1*C3 + pi**5*C1*C4)*L1*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L1*L2 + ((pi**5*C2*C3 + pi**5*C2*C4)*L1 + (pi**5*C2*C3 + pi**5*C2*C4)*L2)*L3)*L4)*L5)*L6 + (pi**5*C1*C4*L1*L2*L3*L4 + (pi**5*C1*C4*L1*L2*L3 + ((pi**5*C1 + pi**5*C2)*C4*L1*L2 + (pi**5*C2*C4*L1 + pi**5*C2*C4*L2)*L3)*L4)*L5 + (pi**5*C1*C4*L1*L2*L3 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C4*L1*L2 + ((pi**5*C2 + pi**5*C3)*C4*L1 + (pi**5*C2 + pi**5*C3)*C4*L2)*L3)*L4 + (pi**5*C3*C4*L1*L2 + (pi**5*C3*C4*L1 + pi**5*C3*C4*L2)*L3 + (pi**5*C3*C4*L1 + pi**5*C3*C4*L2)*L4)*L5)*L6)*L7)*L8)*ZL + ((pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7)*L8 + (pi**5*C1*C2*L2*L3*L4*L5*L6 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3)*L2*L3*L4 + (pi**5*C1*C3*L2*L3 + (pi**5*C2*C3*L3 + (pi**5*C1 + pi**5*C2)*C3*L2)*L4)*L5)*L6)*L7 + (pi**5*C1*C2*L2*L3*L4*L5 + ((pi**5*C1*C2 + pi**5*C1*C3 + pi**5*C1*C4)*L2*L3*L4 + ((pi**5*C1*C3 + pi**5*C1*C4)*L2*L3 + (((pi**5*C1 + pi**5*C2)*C3 + (pi**5*C1 + pi**5*C2)*C4)*L2 + (pi**5*C2*C3 + pi**5*C2*C4)*L3)*L4)*L5)*L6 + (pi**5*C1*C4*L2*L3*L4 + (pi**5*C1*C4*L2*L3 + (pi**5*C2*C4*L3 + (pi**5*C1 + pi**5*C2)*C4*L2)*L4)*L5 + (pi**5*C1*C4*L2*L3 + ((pi**5*C1 + pi**5*C2 + pi**5*C3)*C4*L2 + (pi**5*C2 + pi**5*C3)*C4*L3)*L4 + (pi**5*C3*C4*L2 + pi**5*C3*C4*L3 + pi**5*C3*C4*L4)*L5)*L6)*L7)*L8)*L9)*ZS)*freq**5 + ((-16*I*pi**4*C1*C2*L2*L3*L4*L5*L6 + (-16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3)*L2*L3*L4 + (-16*I*pi**4*C1*C3*L2*L3 + (-16*I*pi**4*C2*C3*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3*L2)*L4)*L5)*L6)*L7 + (-16*I*pi**4*C1*C2*L2*L3*L4*L5 + ((-16*I*pi**4*C1*C2 - 16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L2*L3*L4 + ((-16*I*pi**4*C1*C3 - 16*I*pi**4*C1*C4)*L2*L3 + (((-16*I*pi**4*C1 - 16*I*pi**4*C2)*C3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4)*L2 + (-16*I*pi**4*C2*C3 - 16*I*pi**4*C2*C4)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*C4*L2*L3*L4 + (-16*I*pi**4*C1*C4*L2*L3 + (-16*I*pi**4*C2*C4*L3 + (-16*I*pi**4*C1 - 16*I*pi**4*C2)*C4*L2)*L4)*L5 + (-16*I*pi**4*C1*C4*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L2 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*C4*L3)*L4 + (-16*I*pi**4*C3*C4*L2 - 16*I*pi**4*C3*C4*L3 - 16*I*pi**4*C3*C4*L4)*L5)*L6)*L7)*L8)*ZL*ZS + ((-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L2)*L3)*L4 + (-16*I*pi**4*C3*L1*L2 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L3 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7)*L8 + ((-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5)*L6 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3)*L2)*L3)*L4 + (-16*I*pi**4*C3*L1*L2 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L3 + (-16*I*pi**4*C3*L1 - 16*I*pi**4*C3*L2)*L4)*L5)*L6)*L7 + (-16*I*pi**4*C1*L1*L2*L3*L4 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2)*L1*L2 + (-16*I*pi**4*C2*L1 - 16*I*pi**4*C2*L2)*L3)*L4)*L5 + (-16*I*pi**4*C1*L1*L2*L3 + ((-16*I*pi**4*C1 - 16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L2 + ((-16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C2 - 16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L3)*L4 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1*L2 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L3 + ((-16*I*pi**4*C3 - 16*I*pi**4*C4)*L1 + (-16*I*pi**4*C3 - 16*I*pi**4*C4)*L2)*L4)*L5)*L6 + ((-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3)*L4 + (-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L4)*L5 + (-16*I*pi**4*C4*L1*L2 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L3 + (-16*I*pi**4*C4*L1 - 16*I*pi**4*C4*L2)*L4)*L6)*L7)*L8)*L9)*freq**4 - 8*(((pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5)*L6 + (pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L1*L2 + ((pi**3*C2 + pi**3*C3)*L1 + (pi**3*C2 + pi**3*C3)*L2)*L3)*L4 + (pi**3*C3*L1*L2 + (pi**3*C3*L1 + pi**3*C3*L2)*L3 + (pi**3*C3*L1 + pi**3*C3*L2)*L4)*L5)*L6)*L7 + (pi**3*C1*L1*L2*L3*L4 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2)*L1*L2 + (pi**3*C2*L1 + pi**3*C2*L2)*L3)*L4)*L5 + (pi**3*C1*L1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3 + pi**3*C4)*L1*L2 + ((pi**3*C2 + pi**3*C3 + pi**3*C4)*L1 + (pi**3*C2 + pi**3*C3 + pi**3*C4)*L2)*L3)*L4 + ((pi**3*C3 + pi**3*C4)*L1*L2 + ((pi**3*C3 + pi**3*C4)*L1 + (pi**3*C3 + pi**3*C4)*L2)*L3 + ((pi**3*C3 + pi**3*C4)*L1 + (pi**3*C3 + pi**3*C4)*L2)*L4)*L5)*L6 + ((pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3)*L4 + (pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3 + (pi**3*C4*L1 + pi**3*C4*L2)*L4)*L5 + (pi**3*C4*L1*L2 + (pi**3*C4*L1 + pi**3*C4*L2)*L3 + (pi**3*C4*L1 + pi**3*C4*L2)*L4)*L6)*L7)*L8)*ZL + (((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7)*L8 + ((pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5)*L6 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3)*L2 + (pi**3*C2 + pi**3*C3)*L3)*L4 + (pi**3*C3*L2 + pi**3*C3*L3 + pi**3*C3*L4)*L5)*L6)*L7 + (pi**3*C1*L2*L3*L4 + (pi**3*C1*L2*L3 + (pi**3*C2*L3 + (pi**3*C1 + pi**3*C2)*L2)*L4)*L5 + (pi**3*C1*L2*L3 + ((pi**3*C1 + pi**3*C2 + pi**3*C3 + pi**3*C4)*L2 + (pi**3*C2 + pi**3*C3 + pi**3*C4)*L3)*L4 + ((pi**3*C3 + pi**3*C4)*L2 + (pi**3*C3 + pi**3*C4)*L3 + (pi**3*C3 + pi**3*C4)*L4)*L5)*L6 + ((pi**3*C4*L2 + pi**3*C4*L3)*L4 + (pi**3*C4*L2 + pi**3*C4*L3 + pi**3*C4*L4)*L5 + (pi**3*C4*L2 + pi**3*C4*L3 + pi**3*C4*L4)*L6)*L7)*L8)*L9)*ZS)*freq**3 + (((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5)*L6 + ((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5 + (-I*L2 - I*L3 - I*L4)*L6)*L7 + ((-I*L2 - I*L3)*L4 + (-I*L2 - I*L3 - I*L4)*L5 + (-I*L2 - I*L3 - I*L4)*L6)*L8)*ZL*ZS + (((4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5)*L6 + (4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5 + (4*I*pi**2*C1*L2*L3 + ((4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3)*L3)*L4 + (4*I*pi**2*C3*L2 + 4*I*pi**2*C3*L3 + 4*I*pi**2*C3*L4)*L5)*L6)*L7 + (4*I*pi**2*C1*L2*L3*L4 + (4*I*pi**2*C1*L2*L3 + (4*I*pi**2*C2*L3 + (4*I*pi**2*C1 + 4*I*pi**2*C2)*L2)*L4)*L5 + (4*I*pi**2*C1*L2*L3 + ((4*I*pi**2*C1 + 4*I*pi**2*C2 + 4*I*pi**2*C3 + 4*I*pi**2*C4)*L2 + (4*I*pi**2*C2 + 4*I*pi**2*C3 + 4*I*pi**2*C4)*L3)*L4 + ((4*I*pi**2*C3 + 4*I*pi**2*C4)*L2 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L3 + (4*I*pi**2*C3 + 4*I*pi**2*C4)*L4)*L5)*L6 + ((4*I*pi**2*C4*L2 + 4*I*pi**2*C4*L3)*L4 + (4*I*pi**2*C4*L2 + 4*I*pi**2*C4*L3 + 4*I*pi**2*C4*L4)*L5 + (4*I*pi**2*C4*L2 + 4*I*pi**2*C4*L3 + 4*I*pi**2*C4*L4)*L6)*L7)*L8)*ZL*ZS + (((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*L6 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L7)*L8 + (((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5)*L6 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L7 + ((4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3)*L4 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L5 + (4*I*pi**2*L1*L2 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L3 + (4*I*pi**2*L1 + 4*I*pi**2*L2)*L4)*L6)*L8)*L9)*freq**2 + 2*((((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5)*L6 + ((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*L7 + ((pi*L1*L2 + (pi*L1 + pi*L2)*L3)*L4 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L5 + (pi*L1*L2 + (pi*L1 + pi*L2)*L3 + (pi*L1 + pi*L2)*L4)*L6)*L8)*ZL + ((((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7)*L8 + (((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5)*L6 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L7 + ((pi*L2 + pi*L3)*L4 + (pi*L2 + pi*L3 + pi*L4)*L5 + (pi*L2 + pi*L3 + pi*L4)*L6)*L8)*L9)*ZS)*freq)*np.sqrt(ZL*ZS))
            
            else:
                x = []
                code = []

                x.append([comp_val['L1']])
                code.append('LS')

                for i in range(1, network_type['N']+1):
                    x.append([comp_val['C' + str(i)]])
                    code.append('CP')
                    x.append([comp_val['L' + str(2*i)]])
                    code.append('LP')

                    x.append([comp_val['L'+ str(2*i+1)]])
                    code.append('LS')

                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
        elif(network_type['DC_Type'] == 'L-Coupled Series Resonators'):
            if(network_type['N'] >= 1):
                x = []
                code = []

                x.append([comp_val['L1']])
                code.append('LS')

                for i in range(1, network_type['N']+2):
                    x.append([comp_val['L' + str(2*i)]])
                    code.append('LP')
                    
                    x.append([comp_val['L'+ str(2*i+1)]])
                    code.append('LS')

                    if (i <= network_type['N']):
                        x.append([comp_val['C' + str(i)]])
                        code.append('CS')

                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]

        elif(network_type['DC_Type'] == 'C-Coupled Series Resonators'):
            if(network_type['N'] >= 1):
                x = []
                code = []

                x.append([comp_val['C1']])
                code.append('CS')

                for i in range(1, network_type['N']+1):
                    x.append([comp_val['C' + str(2*i)]])
                    code.append('CP')
                    
                    x.append([comp_val['L'+ str(i)]])
                    code.append('LS')

                    x.append([comp_val['C' + str(2*i+1)]])
                    code.append('CS')

                x.append([comp_val['C' + str(2*network_type['N']+2)]])
                code.append('CP')

                x.append([comp_val['C' + str(2*network_type['N']+3)]])
                code.append('CS')
                print (code)
                print (x)
                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
        elif(network_type['DC_Type'] == 'Magnetic coupled resonators'):
            if(network_type['N'] >= 1):
                x = []
                code = []

                for i in range(1, network_type['N']+1):
                    x.append([comp_val['L' + str(3*i-2)]])
                    code.append('LS')
                    
                    x.append([comp_val['L'+ str(3*i-1)]])
                    code.append('LP')

                    x.append([comp_val['L' + str(3*i)]])
                    code.append('LS')

                    x.append([comp_val['C' + str(i)]])
                    code.append('CS')

                x.append([comp_val['L' + str(3*(network_type['N']+1)-2)]])
                code.append('LS')
                
                x.append([comp_val['L'+ str(3*(network_type['N']+1)-1)]])
                code.append('LP')

                x.append([comp_val['L' + str(3*(network_type['N']+1))]])
                code.append('LS')

                print (code)
                print (x)
                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
        elif(network_type['DC_Type'] == 'Quarter-Wave coupled resonators'):
            if(network_type['N'] >= 1):
                x = []
                code = []

                for i in range(1, network_type['N']+1):
                  
                    x.append([comp_val['L'+ str(i)]])
                    code.append('LP')

                    x.append([comp_val['C' + str(i)]])
                    code.append('CP')

                    if (i < network_type['N']):
                        x.append([comp_val['TL_' + str(i) + '_Z0'], comp_val['TL_' + str(i) + '_ang']])
                        code.append('CASTL')


                print (code)
                print (x)
                S = get_SPAR([ZS], [ZL], code, x, freq)
                S11 = S[:, 0,0]
                S21 = S[:, 1,0]
    return S11, S21 
